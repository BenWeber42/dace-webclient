/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayLikeToArray)
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayWithHoles)
/* harmony export */ });
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayWithoutHoles)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _assertThisInitialized)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/construct.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/construct.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _construct)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");
/* harmony import */ var _isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isNativeReflectConstruct.js */ "./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js");


function _construct(Parent, args, Class) {
  if ((0,_isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__.default)()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/get.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/get.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _get)
/* harmony export */ });
/* harmony import */ var _superPropBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./superPropBase.js */ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js");

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = (0,_superPropBase_js__WEBPACK_IMPORTED_MODULE_0__.default)(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _getPrototypeOf)
/* harmony export */ });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inherits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inherits)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _isNativeReflectConstruct)
/* harmony export */ });
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _iterableToArray)
/* harmony export */ });
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _iterableToArrayLimit)
/* harmony export */ });
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _nonIterableRest)
/* harmony export */ });
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _nonIterableSpread)
/* harmony export */ });
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _possibleConstructorReturn)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");


function _possibleConstructorReturn(self, call) {
  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(call) === "object" || typeof call === "function")) {
    return call;
  }

  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__.default)(self);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _slicedToArray)
/* harmony export */ });
/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js");
/* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js");
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js");




function _slicedToArray(arr, i) {
  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr, i) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr, i) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/superPropBase.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _superPropBase)
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(object);
    if (object === null) break;
  }

  return object;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _taggedTemplateLiteral)
/* harmony export */ });
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _toConsumableArray)
/* harmony export */ });
/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js");
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js");
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");




function _toConsumableArray(arr) {
  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _unsupportedIterableToArray)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./renderer_dir/Roofline/main.js":
/*!***************************************!*\
  !*** ./renderer_dir/Roofline/main.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "main": () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _datahelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../datahelper.js */ "./renderer_dir/datahelper.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var roofline_socket = 0;

function drawMarkersY(ctx, margin, options) {
  var width = function width() {
    return ctx.canvas.width;
  };

  var height = function height() {
    return ctx.canvas.height;
  };

  var steps = options.steps;
  var step_value_func = options.step_value_func;
  var axis_len_x = height() - margin.top - margin.bottom;
  var pix_step = axis_len_x / steps;
  var start = {
    x: margin.left,
    y: height() - margin.bottom
  };
  var marker_height = 10;
  ctx.save();

  for (var i = 1; i < steps; ++i) {
    var cur_val = step_value_func(i);
    var pos = start.y - i * pix_step; // Markers

    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = 2;
    ctx.setLineDash([]);
    ctx.moveTo(start.x - marker_height / 2.0, pos);
    ctx.lineTo(start.x + marker_height / 2.0, pos);
    ctx.stroke(); // Gridlines

    ctx.beginPath();
    ctx.strokeStyle = "gray";
    ctx.setLineDash([5, 15]);
    ctx.lineWidth = 1;
    ctx.moveTo(margin.left, pos);
    ctx.lineTo(width() - margin.right, pos);
    ctx.stroke(); // Draw value indices

    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.setLineDash([]);
    ctx.lineWidth = 1;
    ctx.font = "30px Arial";
    ctx.textAlign = "right";
    ctx.textBaseline = "middle";

    if (cur_val < 1) {
      cur_val = _datahelper_js__WEBPACK_IMPORTED_MODULE_2__.ObjectHelper.valueToSensibleString(cur_val, "fraction");
    }

    ctx.fillText(cur_val.toString(), start.x - marker_height / 2.0, pos);
  }

  var ypos = (height() - margin.bottom - margin.top) / 2.0 - margin.top; // Draw axis title

  ctx.beginPath();
  ctx.strokeStyle = "black";
  ctx.setLineDash([]);
  ctx.lineWidth = 1;
  ctx.font = "40px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.translate(margin.left, 0);
  ctx.rotate(Math.PI / -2.0);
  ctx.fillText("Performance [FLOP/c]", -height() / 2.0, -margin.left / 2);
  ctx.translate(-margin.left, 0);
  ctx.restore();
}

function drawMarkersX(ctx, margin, options) {
  var width = function width() {
    return ctx.canvas.width;
  };

  var height = function height() {
    return ctx.canvas.height;
  };

  var steps = options.steps;
  var step_value_func = options.step_value_func;
  var axis_len_x = width() - margin.left - margin.right;
  var pix_step = axis_len_x / steps;
  var start = {
    x: margin.left,
    y: height() - margin.bottom
  };
  var marker_height = 10;
  ctx.save();

  for (var i = 1; i < steps; ++i) {
    var cur_val = step_value_func(i);
    var pos = start.x + i * pix_step; // Markers

    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = 2;
    ctx.setLineDash([]);
    ctx.moveTo(pos, start.y - marker_height / 2.0);
    ctx.lineTo(pos, start.y + marker_height / 2.0);
    ctx.stroke(); // Gridlines

    ctx.beginPath();
    ctx.strokeStyle = "gray";
    ctx.setLineDash([5, 15]);
    ctx.lineWidth = 1;
    ctx.moveTo(pos, margin.top);
    ctx.lineTo(pos, height() - margin.bottom);
    ctx.stroke(); // Draw value indices

    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.setLineDash([]);
    ctx.lineWidth = 1;
    ctx.font = "30px Arial";
    ctx.textAlign = "center";
    ctx.textBaseline = "top";

    if (cur_val < 1) {
      cur_val = _datahelper_js__WEBPACK_IMPORTED_MODULE_2__.ObjectHelper.valueToSensibleString(cur_val, "fraction");
    }

    ctx.fillText(cur_val.toString(), pos, start.y + marker_height / 2.0);
  } // Draw axis title


  ctx.beginPath();
  ctx.strokeStyle = "black";
  ctx.setLineDash([]);
  ctx.lineWidth = 1;
  ctx.font = "40px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "top";
  ctx.fillText("Operational intensity [FLOP/byte]", margin.left + (width() - margin.left - margin.right) / 2.0, height() - margin.bottom / 2.0);
  ctx.restore();
}

function fillLine(ctx, margin, yoptions, gflops) {
  var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "hard";
  // For animations only
  var end_scale = 1.0;
  var start_scale = 1.0; // Width function

  var width = function width() {
    return ctx.canvas.width;
  };

  var height = function height() {
    return ctx.canvas.height;
  }; // Draw the peak GFLOP/c line


  ctx.save();

  if (mode === "soft") {
    ctx.setLineDash([15, 15]);
  } else {
    ctx.setLineDash([]);
  }

  ctx.beginPath();
  ctx.strokeStyle = "black";
  ctx.lineWidth = 3;
  var axis_len_y = height() - margin.top - margin.bottom;
  var pix_step = axis_len_y / yoptions.steps;
  var logval = yoptions.inv_step_value_func(gflops);
  var y = height() - margin.bottom - pix_step * logval;
  ctx.moveTo(margin.left, y);
  ctx.lineTo(width() - margin.right, y);
  ctx.stroke();
  ctx.beginPath();
  ctx.font = "25px Arial";
  ctx.fillStyle = "black";
  ctx.textAlign = "right";
  ctx.textBaseline = "bottom";
  ctx.fillText(gflops.toString() + " FLOP/c", width() - margin.right, y);
  ctx.restore();
}

function options_max_val(options) {
  return options.step_value_func((options.steps - 0) * options.value_per_step);
}

function options_min_val(options) {
  return options.step_value_func(0);
}

function getYPixel(ctx, yoptions, margin, value) {
  var height = function height() {
    return ctx.canvas.height;
  };

  var axis_len_y = height() - margin.top - margin.bottom;
  var pix_step_y = axis_len_y / yoptions.steps;
  var val = yoptions.inv_step_value_func(value);
  var y = height() - margin.bottom - pix_step_y * val;
  return y;
}

function getXPixel(ctx, xoptions, margin, value) {
  var width = function width() {
    return ctx.canvas.width;
  };

  var axis_len_x = width() - margin.left - margin.right;
  var pix_step_x = axis_len_x / xoptions.steps;
  var val = xoptions.inv_step_value_func(value);
  var x = margin.left + pix_step_x * val;
  return x;
}

function fillBandwidthBound(ctx, margin, xoptions, yoptions, bytes_per_cycle) {
  // For animations only
  var end_scale = 1.0;
  var start_scale = 1.0; // Width function

  var width = function width() {
    return ctx.canvas.width;
  };

  var height = function height() {
    return ctx.canvas.height;
  };

  ctx.save();
  ctx.strokeStyle = "black";
  ctx.lineWidth = 3;
  var axis_len_y = height() - margin.top - margin.bottom;
  var pix_step_y = axis_len_y / yoptions.steps;
  var axis_len_x = width() - margin.left - margin.right;
  var pix_step_x = axis_len_x / xoptions.steps;
  var maxyval = options_max_val(yoptions);
  var maxxval = options_max_val(xoptions); // y = x + q

  var yval = bytes_per_cycle * maxxval;
  var xval = maxxval;
  yval = Math.min(yval, maxyval);
  xval = Math.min(yval / bytes_per_cycle, maxxval); // Find the positions for yval and xval and draw lines to there.

  var logvaly_start = yoptions.inv_step_value_func(options_min_val(xoptions) * bytes_per_cycle);
  var y_start = height() - margin.bottom - pix_step_y * logvaly_start;
  var logvaly = yoptions.inv_step_value_func(yval);
  var y = height() - margin.bottom - pix_step_y * logvaly;
  var logvalx = xoptions.inv_step_value_func(xval);
  var x = margin.left + pix_step_x * logvalx; // Move to zero

  ctx.moveTo(margin.left, y_start);
  ctx.lineTo(x, y);
  ctx.stroke();
  ctx.translate(x, -y + margin.top + margin.bottom);
  var angle = Math.atan2(y - y_start, x - margin.left);
  ctx.rotate(angle);
  ctx.font = "25px Arial";
  ctx.fillStyle = "black";
  ctx.textAlign = "right";
  ctx.textBaseline = "bottom";
  ctx.fillText(bytes_per_cycle.toString() + " B/c", 0, 0);
  ctx.restore();
}

var dotdata = [];
var flopbounds = [];
var bandwidthbounds = [];

function draw_full(ctx, painter) {
  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
  painter.drawAxes();
  painter.drawComputeBounds();
  painter.drawBandwidthBounds();
  painter.connectDots();
  painter.drawDots();
}

;

function drawDot(ctx, xoptions, yoptions, margin, flop_per_cyc, flop_per_byte) {
  var size = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 5;
  ctx.save();
  var x = getXPixel(ctx, xoptions, margin, flop_per_byte);
  var y = getYPixel(ctx, yoptions, margin, flop_per_cyc);
  var off = size;
  ctx.fillStyle = "red";
  ctx.fillRect(x - off, y - off, off * 2, off * 2);
  ctx.restore();
}

function setDot(ctx, xoptions, yoptions, margin, flop_per_cyc, flop_per_byte, id) {
  var x = getXPixel(ctx, xoptions, margin, flop_per_byte);
  var y = getYPixel(ctx, yoptions, margin, flop_per_cyc);
  dotdata.push({
    x: x,
    y: y,
    floppercyc: flop_per_cyc,
    flopperbyte: flop_per_byte,
    highlight: false,
    id: id
  });
}

function drawInfoBox(ctx, x, y, sidelen) {
  var id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  var triangle_size = 20;
  var boxleft = x - sidelen;
  var boxright = x + sidelen;
  var boxbottom = y - triangle_size;
  var boxtop = boxbottom - sidelen;
  ctx.save();
  ctx.fillStyle = "cyan";
  ctx.moveTo(x, y);
  ctx.beginPath();
  ctx.lineTo(x - triangle_size, boxbottom);
  ctx.lineTo(boxleft, boxbottom);
  ctx.lineTo(boxleft, boxtop);
  ctx.lineTo(boxright, boxtop);
  ctx.lineTo(boxright, boxbottom);
  ctx.lineTo(x + triangle_size, boxbottom);
  ctx.lineTo(x, y);
  ctx.closePath();
  ctx.stroke();
  ctx.fill();
  ctx.fillStyle = "black";
  ctx.font = "40px Arial";
  ctx.textBaseline = "top";

  if (id !== undefined) {
    ctx.fillText("id: " + id, boxleft + triangle_size, boxtop + triangle_size);
  }

  ctx.restore();
}

var RooflinePainter = /*#__PURE__*/function () {
  function RooflinePainter(ctx, margin, xopts, yopts) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, RooflinePainter);

    this.ctx = ctx;
    this.margin = margin;
    this.xoptions = xopts;
    this.yoptions = yopts;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(RooflinePainter, [{
    key: "drawAxes",
    value: function drawAxes() {
      var ctx = this.ctx;
      var margin = this.margin;

      var width = function width() {
        return ctx.canvas.width;
      };

      var height = function height() {
        return ctx.canvas.height;
      }; // Draw the y-Axis


      ctx.strokeStyle = "black";
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(margin().left, height() - margin().bottom);
      ctx.lineTo(margin().left, margin().top);
      ctx.stroke();
      ctx.closePath(); // Draw the x-Axis

      ctx.beginPath();
      ctx.moveTo(margin().left, height() - margin().bottom);
      ctx.lineTo(width() - margin().right, height() - margin().bottom);
      ctx.stroke();
      ctx.closePath();
      drawMarkersX(ctx, margin(), this.xoptions);
      drawMarkersY(ctx, margin(), this.yoptions);
    }
  }, {
    key: "drawDots",
    value: function drawDots() {
      var highlights = [];

      var _iterator = _createForOfIteratorHelper(dotdata),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _elem = _step.value;
          drawDot(this.ctx, this.xoptions, this.yoptions, this.margin(), _elem.floppercyc, _elem.flopperbyte, _elem.highlight ? 10 : 5);

          if (_elem.highlight) {
            highlights.push(_elem);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      for (var _i = 0, _highlights = highlights; _i < _highlights.length; _i++) {
        var elem = _highlights[_i];
        elem.x = getXPixel(this.ctx, this.xoptions, this.margin(), elem.flopperbyte);
        elem.y = getYPixel(this.ctx, this.yoptions, this.margin(), elem.floppercyc);
        drawInfoBox(this.ctx, elem.x, elem.y, 200, elem.id);
      }
    }
  }, {
    key: "drawComputeBounds",
    value: function drawComputeBounds() {
      var i = 0;

      var _iterator2 = _createForOfIteratorHelper(flopbounds),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var elem = _step2.value;

          if (i == 0) {
            fillLine(this.ctx, this.margin(), this.yoptions, elem, "hard");
          } else {
            fillLine(this.ctx, this.margin(), this.yoptions, elem, "soft");
          }

          ++i;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "drawBandwidthBounds",
    value: function drawBandwidthBounds() {
      var _iterator3 = _createForOfIteratorHelper(bandwidthbounds),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          fillBandwidthBound(this.ctx, this.margin(), this.xoptions, this.yoptions, elem);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "connectDots",
    value: function connectDots() {
      var dot_x = undefined;
      var dot_y = undefined;
      this.ctx.beginPath();

      var _iterator4 = _createForOfIteratorHelper(dotdata),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var dot = _step4.value;
          var x = dot.x;
          var y = dot.y;
          var first = dot_x === undefined;

          if (first) {
            this.ctx.moveTo(x, y);
          } else {
            this.ctx.lineTo(x, y);
            this.ctx.stroke();
          }

          dot_x = x;
          dot_y = y;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }]);

  return RooflinePainter;
}();

function main() {
  var canvas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
  var message_source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  if (canvas == undefined) canvas = document.getElementById("myCanvas");
  var ctx = canvas.getContext("2d");

  var width = function width() {
    return ctx.canvas.width;
  };

  var height = function height() {
    return ctx.canvas.height;
  };

  var margin = function margin() {
    return {
      top: 100,
      bottom: 100,
      left: 200,
      right: 100
    };
  };

  var xoptions = {
    steps: 20,
    value_per_step: 1,
    step_value_func: function step_value_func(step) {
      return Math.pow(2.0, -6.0 + step);
    },
    inv_step_value_func: function inv_step_value_func(step) {
      return 6.0 + Math.log2(step);
    }
  };
  var yoptions = {
    steps: 15,
    value_per_step: 1,
    step_value_func: function step_value_func(step) {
      return Math.pow(2.0, -8.0 + step);
    },
    inv_step_value_func: function inv_step_value_func(step) {
      return 8.0 + Math.log2(step);
    }
  };
  var painter = new RooflinePainter(ctx, margin, xoptions, yoptions);
  canvas.addEventListener("mousemove", function (event) {
    var rect = canvas.getBoundingClientRect();
    var x = (event.clientX - rect.left) / (rect.right - rect.left) * canvas.width;
    var y = (event.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height;
    var tol = 15;

    var pow2 = function pow2(x) {
      return x * x;
    };

    var _iterator5 = _createForOfIteratorHelper(dotdata),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var elem = _step5.value;
        elem.x = getXPixel(ctx, xoptions, margin(), elem.flopperbyte);
        elem.y = getYPixel(ctx, yoptions, margin(), elem.floppercyc);

        if (pow2(elem.x - x) + pow2(elem.y - y) <= pow2(tol)) {
          elem.highlight = true;
        } else elem.highlight = false;
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    draw_full(ctx, painter);
  });
  /*
  Clicking should cause the program with the given id to be highlighted. For that, a message has to be sent to the "host".
  */

  canvas.addEventListener("click", function (event) {
    var rect = canvas.getBoundingClientRect();
    var x = (event.clientX - rect.left) / (rect.right - rect.left) * canvas.width;
    var y = (event.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height;
    var tol = 15;

    var pow2 = function pow2(x) {
      return x * x;
    };

    var _iterator6 = _createForOfIteratorHelper(dotdata),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var elem = _step6.value;

        if (pow2(elem.x - x) + pow2(elem.y - y) <= pow2(tol)) {
          roofline_socket.send(JSON.stringify({
            "msg_type": "roofline",
            "command": "select-program",
            "programID": elem.id
          }));
          return; // Dots sadly could be interleaving. To not send too many select requests, we have to end it here
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  });
  fillLine(ctx, margin(), yoptions, 8.0);
  fillBandwidthBound(ctx, margin(), xoptions, yoptions, 8);
  flopbounds.push(64.0, 8.0);
  bandwidthbounds.push(8.0);
  setDot(ctx, xoptions, yoptions, margin(), 1, 1, 1);
  setDot(ctx, xoptions, yoptions, margin(), 2, 3, 2);
  setDot(ctx, xoptions, yoptions, margin(), 4, 6, 3);
  setDot(ctx, xoptions, yoptions, margin(), 7, 7, 4);
  setDot(ctx, xoptions, yoptions, margin(), 8, 8, 5);
  draw_full(ctx, painter);

  var data_proc = function data_proc(msg) {
    if (msg["msg_type"] == "roofline-data") {
      dotdata = [];
      var data = msg["data"];

      var _iterator7 = _createForOfIteratorHelper(data),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var x = _step7.value;
          var pid = x["ProgramID"];
          var flop_per_c = x["FLOP_C"];
          var in_b_per_c = x["INPUT_B_C"];
          var proc_b_per_c = x["PROC_B_C"];
          var mem_b_per_c = x["MEM_B_C"];
          var flop_per_byte = flop_per_c / mem_b_per_c; // We'll use the in-memory (which is not quite accurate, since out-data usually has to be loaded as well)

          setDot(ctx, xoptions, yoptions, margin(), flop_per_c, flop_per_byte, pid);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  };

  var socksetup = function socksetup() {
    roofline_socket = new WebSocket('ws://localhost:8024/');

    roofline_socket.onopen = function (event) {
      roofline_socket.send(JSON.stringify({
        "msg_type": "roofline",
        "command": "connected"
      }));
    };

    roofline_socket.onmessage = function (event) {
      msg = JSON.parse(event.data);
      data_proc(msg);
    };

    roofline_socket.onclose = function (event) {
      console.log("ERROR: Connection closed!");
    };

    roofline_socket.onerror = function (event) {
      console.log("ERROR: There was an error with the connection.");
    };
  };

  if (message_source == undefined) socksetup();else {
    message_source(data_proc);
  }
  return function () {
    return draw_full(ctx, painter);
  };
}



/***/ }),

/***/ "./renderer_dir/datahelper.js":
/*!************************************!*\
  !*** ./renderer_dir/datahelper.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Entry": () => (/* binding */ Entry),
/* harmony export */   "Section": () => (/* binding */ Section),
/* harmony export */   "SuperSection": () => (/* binding */ SuperSection),
/* harmony export */   "MathHelper": () => (/* binding */ MathHelper),
/* harmony export */   "ObjectHelper": () => (/* binding */ ObjectHelper),
/* harmony export */   "CriticalPathAnalysis": () => (/* binding */ CriticalPathAnalysis),
/* harmony export */   "MemoryAnalysis": () => (/* binding */ MemoryAnalysis)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _renderer_util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./renderer_util.js */ "./renderer_dir/renderer_util.js");









function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
 // Similar to the same class in python

var Entry = /*#__PURE__*/function () {
  function Entry(entryobj) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, Entry);

    this.data = entryobj;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(Entry, [{
    key: "nodeid",
    value: function nodeid() {
      return new Number(this.data.node) & 0xFFFF;
      return this.data.node;
    }
  }, {
    key: "stateid",
    value: function stateid() {
      return new Number(this.data.node) >> 16 & 0xFFFF;
      return this.data.node;
    }
  }, {
    key: "thread",
    value: function thread() {
      return this.data.thread;
    }
  }, {
    key: "iteration",
    value: function iteration() {
      return this.data.iteration;
    }
  }, {
    key: "values",
    value: function values() {
      return this.data.values;
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      return this.data.values.map(function (x) {
        return ObjectHelper.listKeys(x)[0];
      });
    }
  }, {
    key: "getValue",
    value: function getValue(papi_code) {
      var nofail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var vals = this.data.values;

      var _iterator = _createForOfIteratorHelper(vals),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var it = _step.value;
          var keys = Object.keys(it);

          if (keys.some(function (x) {
            return x == papi_code;
          })) {
            return it[papi_code];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (papi_code == "-2147483589") {
        // Instead of TOT_CYC, we allow REF_CYC with a warning
        console.warn("Fallback used (TOT_CYC => REF_CYC)");
        return this.getValue("-2147483541");
      }

      if (nofail == undefined) {
        ObjectHelper.logObject("this", this);
        ObjectHelper.logObject("keys", this.getKeys());
        ObjectHelper.assert("got value from key " + papi_code, false);
      }

      return "N/A";
    }
  }]);

  return Entry;
}(); // Similar to the same class in Python


var Section = /*#__PURE__*/function () {
  function Section() {
    var sectionobj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, Section);

    if (sectionobj == null) {
      return;
    }

    if (sectionobj instanceof Section) {
      Object.assign(this, sectionobj);
      this.private_fix_entries();
      return;
    }

    if (flags == "from_raw") {
      Object.assign(this, sectionobj);
      this.private_fix_entries();
      return;
    }

    this.node = sectionobj['entry_node'];
    this.datasize = sectionobj['static_movement'];
    ObjectHelper.assert("this is valid", this != undefined);
    var entries = sectionobj['entries']; // this is an array

    if (entries == undefined) {
      entries = sectionobj['_entries']; // Try with the other format

      if (entries != undefined) {
        ObjectHelper.logObject("sectionobj", sectionobj);
        console.trace("Dangerous assignment");
        Object.assign(this, sectionobj);
        this.private_fix_entries();
        ObjectHelper.assert("Correct subelements", this._entries.every(function (x) {
          return x instanceof Entry;
        }));
        return;
      } else {// Throw exception.
      }
    }

    ObjectHelper.assert("entries is valid", entries != undefined && entries != "undefined" && typeof entries != "function");
    this._entries = [];

    var _iterator2 = _createForOfIteratorHelper(entries),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var e = _step2.value;

        // Construct and push
        this._entries.push(new Entry(e));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(Section, [{
    key: "private_fix_entries",
    value: function private_fix_entries() {
      if (this._entries == undefined) {
        return;
      }

      if (!this._entries.every(function (x) {
        return x instanceof Entry;
      })) {
        // Fix the entries
        this._entries = this._entries.map(function (x) {
          return new Entry(x.data);
        });
      }
    }
  }, {
    key: "nodeid",
    value: function nodeid() {
      return new Number(this.node) & 0xFFFF;
      return this.node;
    }
  }, {
    key: "stateid",
    value: function stateid() {
      return new Number(this.node) >> 16 & 0xFFFF;
      return this.node;
    }
  }, {
    key: "entries",
    value: function entries() {
      return this._entries.map(function (x) {
        return x.data;
      });
    }
    /* Returns true if this section is a serial section, i.e. only one thread 
       number occurs in all entries.
       This does not mean that the section iself was not inside a parallel 
       block, but that the section itself was not parallelized.
    */

  }, {
    key: "isSerial",
    value: function isSerial() {
      return this.threadid() != null;
    }
  }, {
    key: "threadid",
    value: function threadid() {
      if (this._entries.length == 0) {
        return null;
      }

      var tid = this._entries[0].thread();

      if (this._entries.every(function (x) {
        return x.thread() == tid;
      })) {
        return tid;
      }

      return null; // Not everyone had the same thread
    } // Returns the full cost of this section on one particular CPU, grouped 
    // by nodeid.

  }, {
    key: "sumIteration",
    value: function sumIteration() {
      var _this = this;

      ObjectHelper.assert("object is serial", this.isSerial());
      var ret = {
        "entry_node": this.nodeid().toString(),
        "thread": this.threadid(),
        "iteration": "mixed",
        "flags": "mixed",
        "values": []
      };
      var keys = this.list_events();
      var vals = keys.map(function (x) {
        var ret = {};
        ret[x] = MathHelper.sum(_this.select_event(x));
        return ret;
      });
      ret['values'] = vals;
      var e = new Entry(ret);
      var retobj = new Section();
      Object.assign(retobj, this);
      retobj._entries = [e];
      return retobj;
    }
  }, {
    key: "numIterations",
    value: function numIterations() {
      var _this2 = this;

      var keys = this.list_events();
      var entry_count = 0;
      keys.forEach(function (x) {
        entry_count = Math.max(entry_count, _this2.select_event(x).length);
      });
      return entry_count;
    }
  }, {
    key: "select_event",
    value: function select_event(event) {
      var nofail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      return this._entries.filter(function (x) {
        return x.getValue(event, nofail) != "N/A";
      }).map(function (x) {
        return x.getValue(event, nofail);
      });
    }
  }, {
    key: "list_events",
    value: function list_events() {
      var keys = this._entries.map(function (x) {
        return x.getKeys();
      });

      if (keys.length == 0) {
        return [];
      }

      var first = keys[0];
      var all_equal = keys.every(function (x) {
        return ObjectHelper.arraysEqual(x, first);
      });

      if (!all_equal) {
        ObjectHelper.logObject("first", first);
        var first_different = keys.find(function (x) {
          return !ObjectHelper.arraysEqual(x, first);
        });
        ObjectHelper.logObject("first different", first_different);
      }

      ObjectHelper.assert("same keys", all_equal);
      return first;
    }
  }, {
    key: "select_thread",
    value: function select_thread(threadnum) {
      return this.filter(function (x) {
        return x.thread() == threadnum;
      });
    }
  }, {
    key: "select_node",
    value: function select_node(nodeid) {
      return this.filter(function (x) {
        return x.nodeid() == nodeid;
      });
    }
  }, {
    key: "get_max_thread_num",
    value: function get_max_thread_num() {
      ObjectHelper.assert("entries are defined", this._entries != undefined);

      var _iterator3 = _createForOfIteratorHelper(this._entries),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var x = _step3.value;
          ObjectHelper.assert("Must be correct object", x.thread != undefined);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (this._entries.length === 0) return undefined;
      return (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(this._entries, function (x) {
        return x.thread();
      });
    }
  }, {
    key: "get_min_thread_num",
    value: function get_min_thread_num() {
      ObjectHelper.assert("entries are defined", this._entries != undefined);
      if (this._entries.length === 0) return undefined;
      return (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.min_func)(this._entries, function (x) {
        return x.thread();
      });
    }
  }, {
    key: "filter",
    value: function filter(predicate) {
      var ret = new Section();
      ret.node = this.nodeid();
      ObjectHelper.assert("entries valid", this._entries.every(function (x) {
        return x instanceof Entry;
      }));
      ret._entries = this._entries.filter(predicate);
      return ret;
    }
  }]);

  return Section;
}();

var SuperSection = /*#__PURE__*/function () {
  function SuperSection() {
    var supersection_obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, SuperSection);

    var s = supersection_obj;

    if (s == null) {
      return;
    }

    this._sections = supersection_obj.sections.map(function (x) {
      return new Section(x);
    });
    this._nodeid = supersection_obj.supernode;
  } // Downgrade to a section by flattening 


  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(SuperSection, [{
    key: "toSection",
    value: function toSection() {
      var nodeid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var stateid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var input = this.sections().filter(function (x) {
        return (nodeid == undefined || x.nodeid() == nodeid) && (stateid == undefined || x.stateid() == stateid);
      });
      var rawobj = ObjectHelper.merge(input, {
        "datasize": function datasize(x, y) {
          return x + y;
        }
      });
      var ret = new Section(rawobj, "from_raw");
      var max_thread_num = 0;

      if (ret._entries != undefined) {
        max_thread_num = ret.get_max_thread_num();

        if (max_thread_num === undefined) {
          return undefined;
        }
      }

      var _loop = function _loop(t) {
        var pre = input.map(function (x) {
          return x.select_thread(t).select_event('-2147483589');
        });

        if (pre.length == 0) {
          // We don't like it...
          return "continue";
        } else {
          var unwrapped = ObjectHelper.flatten(pre);
          var oldsum = MathHelper.sum(unwrapped);
          var newsum = MathHelper.sum(ret.select_thread(t).select_event('-2147483589'));
          ObjectHelper.assert("sum cyc equal", newsum == oldsum);
        }
      };

      for (var t = 0; t < max_thread_num; ++t) {
        var _ret = _loop(t);

        if (_ret === "continue") continue;
      }

      return ret;
    }
  }, {
    key: "getSections",
    value: function getSections(nodeid) {
      var stateid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      ObjectHelper.assert("nodeid provided", nodeid != undefined);
      var ret = this.sections();
      return ret.filter(function (x) {
        return x.nodeid() == nodeid && (stateid == undefined || x.stateid() == stateid);
      });
    } // Get mean of threads

  }, {
    key: "toThreadMean",
    value: function toThreadMean(nodeid) {
      ObjectHelper.assert("nodeid defined", nodeid != undefined); // If we have a supersection of many sections and each of the 
      // sections contains only one thread, we are inside a parallel section.
      // Otherwise, if a supersection contains sections with mixed threads, 
      // we are outside.

      var all_serial = this.sections().every(function (x) {
        return x.isSerial();
      });

      if (all_serial) {
        console.log("all sections are serial");
      } else {
        console.log("not all subsections are serial."); // This operation does not make any sense then.

        return null;
      }

      var means = this.sections().map(function (x) {
        return x.sumIteration();
      }); // means now has the means of all super-iterations 

      return means;
    }
  }, {
    key: "get_max_thread_num",
    value: function get_max_thread_num() {
      // Returns the maximum thread number of all sections
      ObjectHelper.assert("sections are defined", this.sections() != undefined);
      return (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(this.sections(), function (x) {
        return x.get_max_thread_num();
      });
    }
  }, {
    key: "filter",
    value: function filter(predicate) {
      var ret = new SuperSection();
      ret._nodeid = this.nodeid();
      ret._sections = this.sections().filter(predicate);
      return ret;
    }
  }, {
    key: "nodeid",
    value: function nodeid() {
      return this._nodeid & 0xFFFF;
    }
  }, {
    key: "stateid",
    value: function stateid() {
      return new Number(this._nodeid) >> 16;
    }
  }, {
    key: "containsSection",
    value: function containsSection(nodeid) {
      var stateid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      return this.sections().filter(function (x) {
        return x.nodeid() == nodeid && (stateid == undefined || x.stateid() == stateid);
      }).length > 0;
    }
  }, {
    key: "sections",
    value: function sections() {
      return this._sections;
    }
  }, {
    key: "allSectionNodeIds",
    value: function allSectionNodeIds() {
      var for_state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (for_state == undefined) {
        return this.sections().map(function (x) {
          return x.nodeid();
        });
      } else {
        // Only return the nodes of a given state
        return this.sections().filter(function (x) {
          return x.stateid() == for_state;
        }).map(function (x) {
          return x.nodeid();
        });
      }
    }
  }, {
    key: "allSectionStateIds",
    value: function allSectionStateIds() {
      return this.sections().map(function (x) {
        return x.stateid();
      });
    }
  }]);

  return SuperSection;
}();

var MathHelper = /*#__PURE__*/function () {
  function MathHelper() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MathHelper);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(MathHelper, null, [{
    key: "stdev",
    value: function stdev(array) {
      return Math.sqrt(this["var"](array));
    }
  }, {
    key: "normalizedToHexByte",
    value: function normalizedToHexByte(input) {
      ObjectHelper.assert("Input is normalized", input >= 0.0 && input <= 255.0);
      var denorm = input * 255;
      var tmp = denorm.toString(16).toUpperCase();
      ObjectHelper.assert("Correct Length", tmp.length == 1 || tmp.length == 2);
      return tmp.length == 2 ? tmp : "0" + tmp;
    }
  }, {
    key: "majority",
    value: function majority(array) {
      ObjectHelper.assert("array valid", array != undefined && array.length != undefined);
      var i = 0;
      var dict = {};

      var _iterator4 = _createForOfIteratorHelper(array),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var x = _step4.value;

          if (dict[x] == undefined) {
            dict[x] = 0;
          }

          dict[x]++;
          i++;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var a = [];

      for (var _i = 0, _Object$keys = Object.keys(dict); _i < _Object$keys.length; _i++) {
        var k = _Object$keys[_i];
        var v = dict[k];
        a.push([k, v]);
      }

      ObjectHelper.assert("a sensible", a.length > 0);
      return (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func_obj)(a, function (x) {
        return x[1];
      }, function (x) {
        return x[0];
      });
    } // Pearson's correlation coefficient

  }, {
    key: "corr",
    value: function corr(X, Y) {
      return this.cov(X, Y) / (this.stdev(X) * this.stdev(Y));
    } // sample correlation

  }, {
    key: "sample_corr",
    value: function sample_corr(X, Y) {
      var xmean = this.mean(X);
      var ymean = this.mean(Y);
      var num = this.sum(this.zip(X, Y).map(function (x) {
        return (x[0] - xmean) * (x[1] - ymean);
      }));
      var denom = Math.sqrt(this.sum(X.map(function (x) {
        return (x - xmean) * (x - xmean);
      })) * this.sum(Y.map(function (y) {
        return (y - ymean) * (y - ymean);
      })));
      return num / denom;
    }
  }, {
    key: "cov",
    value: function cov(X, Y) {
      var n = X.length;
      var acc = 0;

      for (var i = 0; i < n; ++i) {
        for (var j = i + 1; j < n; ++j) {
          var _tmp = (X[i] - X[j]) * (Y[i] - Y[j]);

          acc += _tmp;
        }
      }

      return tmp / (n * n);
    }
  }, {
    key: "var",
    value: function _var(array) {
      var mean = this.mean(array);
      var sum = array.reduce(function (a, b) {
        return a + Math.pow(b - mean, 2.0);
      }, 0);
      return sum / array.length;
    }
  }, {
    key: "mean",
    value: function mean(array) {
      if (array.length != 0) {
        return this.sum(array) / array.length;
      } else {
        return 0;
      }
    } // This is the upper median

  }, {
    key: "median",
    value: function median(array) {
      if (array.length != 0) {
        var sorted = array.map(function (x) {
          return new Number(x);
        });
        sorted.sort(function (a, b) {
          return a - b;
        });
        var index = sorted.length / 2;
        index = Math.floor(index);
        var ret = sorted[index];
        ret = new Number(ret);
        ObjectHelper.assert("is_number", ret instanceof Number);
        return ret;
      } else {
        return 0;
      }
    }
  }, {
    key: "sum",
    value: function sum(array) {
      ObjectHelper.assert("Input valid", array != undefined && array != null);
      return array.reduce(function (a, b) {
        return Number(a) + Number(b);
      }, 0);
    }
  }, {
    key: "sumArray",
    value: function sumArray(array_of_arrays) {
      var base = null;

      var _iterator5 = _createForOfIteratorHelper(array_of_arrays),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var x = _step5.value;

          if (base == null) {
            base = x;
          } else {
            for (var i = 0; i < base.length; ++i) {
              base[i] = base[i] + x[i];
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return base;
    } // Zips all elements of a 2d array 
    // (example: zip2d([[a, b, c], [1,2,3]]) -> [[a, 1], [b, 2], [c, 3]]). 
    // Restrictions: All sumelements must be of the same size!

  }, {
    key: "zip2d",
    value: function zip2d(array) {
      if (array == []) return [];
      var ret = [];
      var outersize = array.length;
      var innersize = array[0].length;

      for (var i = 0; i < innersize; ++i) {
        var _tmp2 = [];

        for (var j = 0; j < outersize; ++j) {
          _tmp2.push(array[j][i]);
        }

        ret.push(_tmp2);
      }

      return ret;
    }
  }, {
    key: "zip",
    value: function zip(X, Y) {
      var ret = [];

      for (var i = 0; i < X.length; ++i) {
        ret.push([X[i], Y[i]]);
      }

      return ret;
    }
  }, {
    key: "unique",
    value: function unique(array) {
      return array.filter(function (x, index, a) {
        return a.indexOf(x) == index;
      });
    }
  }]);

  return MathHelper;
}();

var ObjectHelper = /*#__PURE__*/function () {
  function ObjectHelper() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ObjectHelper);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ObjectHelper, null, [{
    key: "createChunks",
    value: function createChunks(in_array, chunksize) {
      var aggregate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      ObjectHelper.assert("chunksize valid", !isNaN(chunksize) && chunksize != 0.0 && chunksize != undefined);
      var ret = [];
      if (aggregate === undefined) aggregate = function aggregate(x) {
        return x;
      };

      for (var i = 0; i < in_array.length; i += chunksize) {
        var _tmp3 = in_array.slice(i, i + chunksize);

        ret.push(aggregate(_tmp3));
      }

      return ret;
    }
  }, {
    key: "toUnicodeSuperscript",
    value: function toUnicodeSuperscript(number) {
      number = new Number(number);
      var valarr = ["\u2070", "\xB9", "\xB2", "\xB3", "\u2074", "\u2075", "\u2076", "\u2077", "\u2078", "\u2079"];
      var valstr = "";

      if (number == 0) {
        valstr = valarr[0];
      } // Note: ~~(i / 10) is an integer division in JS
      // (bitwise operators make sense only on ints, so JS casts the float to 
      // an int, and then negates twice, which gives the int again)


      for (var i = parseInt(number.toFixed(0)); i > 0; i = ~~(i / 10)) {
        var index = Math.round(i) % 10;
        var c = valarr[index];
        valstr = c + valstr;
      }

      return valstr;
    }
  }, {
    key: "toUnicodeSubscript",
    value: function toUnicodeSubscript(number) {
      number = new Number(number);
      var valarr = ["\u2080", "\u2081", "\u2082", "\u2083", "\u2084", "\u2085", "\u2086", "\u2087", "\u2088", "\u2089"];
      var valstr = "";

      if (number == 0) {
        valstr = valarr[0];
      }

      for (var i = parseInt(number.toFixed(0)); i > 0; i = ~~(i / 10)) {
        var index = Math.round(i) % 10;
        var c = valarr[index];
        valstr = c + valstr;
      }

      return valstr;
    } // Number to sensible String

  }, {
    key: "valueToSensibleString",
    value: function valueToSensibleString(value) {
      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "scientific";
      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var digits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
      // valid modes:
      // scientific: x*10^(exp)
      // programmer: Ki/Mi/Gi/...
      value = new Number(value);
      var exp = 0;
      var base1024table = {
        0: "",
        1: "Ki",
        2: "Mi",
        3: "Gi",
        4: "Ti",
        5: "Pi"
      };
      var base1000table = {
        0: "",
        1: "K",
        2: "M",
        3: "G",
        4: "T",
        5: "P"
      };
      var ret = "";

      if (mode == "programmer") {
        // Go in 1024-Chunks
        while (value >= 1024.) {
          value = value / 1024.;
          ++exp;
        }

        ret = value.toFixed(digits - 1);
        ret += " " + base1024table[exp] + unit;
      } else if (mode == "scientific") {
        // Normal Scientific notation
        while (value >= 10.) {
          value /= 10;
          ++exp;
        }

        ret = value.toFixed(digits - 1);
        var valstr = exp.toString(); // We need to replace numbers by their unicode equivalent for superscript

        valstr = ObjectHelper.toUnicodeSuperscript(exp);
        ret += " \u22C5 10" + valstr;
      } else if (mode == "fraction") {
        // Transform value into fraction (makes sense mostly for values \in [0, 1])
        // Simple (and slow) algorithm: Just multiply by 10 until the numerator is (about) integer
        var thresh = 0.00001;
        var numerator = new Number(value);
        var denominator = 1;

        while (Math.abs(Math.round(numerator) - numerator) > thresh) {
          numerator *= 10;
          denominator *= 10;
        } // Now it's really likely that the result is not rational (just a fraction, not normalized)


        var gcd = function gcd(a, b) {
          a = Math.abs(Math.round(a));
          b = Math.abs(Math.round(b));

          if (b > a) {
            var temp = a;
            a = b;
            b = temp;
          }

          while (a >= 0 && b >= 0) {
            if (b == 0) return a;
            a %= b;
            if (a == 0) return b;
            b %= a;
          }

          return 1;
        };

        var gcd_val = gcd(numerator, denominator);
        numerator /= gcd_val;
        denominator /= gcd_val; // We have the values - now translate them to the unicode equivalents

        var super_n = ObjectHelper.toUnicodeSuperscript(numerator.toString());
        var sub_d = ObjectHelper.toUnicodeSubscript(denominator.toString());
        ret = super_n + "/" + sub_d;
      } else {
        ObjectHelper.assert("unknown mode", false);
      }

      return ret;
    } // Applies operations to a key recursively (i.e. find a key and apply a function to the corresponding value). This function is in-place

  }, {
    key: "modifyingMapRecursive",
    value: function modifyingMapRecursive(obj, key, func) {
      if (obj == undefined || obj == null || obj instanceof String || typeof obj == "string") {
        return;
      }

      if (obj instanceof Array) {
        var _iterator6 = _createForOfIteratorHelper(obj),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var x = _step6.value;
            ObjectHelper.modifyingMapRecursive(x, key, func);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return;
      }

      var keys = ObjectHelper.listKeys(obj);

      if (keys == undefined) {
        return;
      }

      var _iterator7 = _createForOfIteratorHelper(keys),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var k = _step7.value;

          if (k == key) {
            obj[k] = func(obj[k]);
          } else {
            ObjectHelper.modifyingMapRecursive(obj[k], key, func);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "valueFromPromise",
    value: function () {
      var _valueFromPromise = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee(obj) {
        var x;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(obj.then != undefined)) {
                  _context.next = 7;
                  break;
                }

                _context.next = 3;
                return obj;

              case 3:
                x = _context.sent;
                return _context.abrupt("return", x);

              case 7:
                return _context.abrupt("return", obj);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function valueFromPromise(_x) {
        return _valueFromPromise.apply(this, arguments);
      }

      return valueFromPromise;
    }() // Same as valueFromPromise, but fully recursive (this will never return a promise)

  }, {
    key: "valueFromPromiseFull",
    value: function () {
      var _valueFromPromiseFull = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee2(obj) {
        var x;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(obj.then != undefined)) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 3;
                return obj;

              case 3:
                x = _context2.sent;
                _context2.next = 6;
                return ObjectHelper.valueFromPromiseFull(x);

              case 6:
                return _context2.abrupt("return", _context2.sent);

              case 9:
                return _context2.abrupt("return", obj);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function valueFromPromiseFull(_x2) {
        return _valueFromPromiseFull.apply(this, arguments);
      }

      return valueFromPromiseFull;
    }()
  }, {
    key: "waitArray",
    value: function () {
      var _waitArray = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee3(obj_array) {
        var i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < obj_array.length)) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 4;
                return ObjectHelper.valueFromPromise(obj_array[i]);

              case 4:
                obj_array[i] = _context3.sent;

              case 5:
                ++i;
                _context3.next = 1;
                break;

              case 8:
                return _context3.abrupt("return", obj_array);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function waitArray(_x3) {
        return _waitArray.apply(this, arguments);
      }

      return waitArray;
    }()
  }, {
    key: "arraysEqual",
    value: function arraysEqual(arr1, arr2) {
      this.assert("1 is array", arr1 instanceof Array);
      this.assert("2 is array", arr2 instanceof Array);

      if (arr1.length != arr2.length) {
        return false;
      }

      for (var i = 0; i < arr1.length; ++i) {
        if (arr1[i] != arr2[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "listKeys",
    value: function listKeys(obj) {
      var ret = [];

      for (var _i2 = 0, _Object$keys2 = Object.keys(obj); _i2 < _Object$keys2.length; _i2++) {
        var k = _Object$keys2[_i2];
        ret.push(k);
      }

      return ret;
    } // Merges all objects together. Primitive values must be the same, and 
    // list elements will be appended. All prepended underscores of keys are
    // removed.

  }, {
    key: "merge",
    value: function merge(in_array) {
      var onconflicts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // onconflicts: dict of key -> function(x, y), where the function 
      // resolves conflicts if the values are not identical.
      if (in_array.length == 0) return [];
      var keys = this.listKeys(in_array[0]);
      var ret = {}; // Prime by adding keys

      var _iterator8 = _createForOfIteratorHelper(keys),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var k = _step8.value;
          ret[k] = undefined;
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      var _iterator9 = _createForOfIteratorHelper(in_array),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var x = _step9.value;

          var _iterator10 = _createForOfIteratorHelper(keys),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _k = _step10.value;
              var v = x[_k];

              if (v instanceof Array) {
                var _ret$_k;

                if (ret[_k] == undefined) {
                  ret[_k] = [];
                }

                (_ret$_k = ret[_k]).push.apply(_ret$_k, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__.default)(v));
              } else {
                if (ret[_k] == undefined) {
                  ret[_k] = v;
                }

                if (ret[_k] != v) {
                  console.log("Different elements for key " + _k + ": " + ret[_k] + " vs " + v);

                  if (onconflicts[_k] != undefined) {
                    ret[_k] = onconflicts[_k](ret[_k], v);
                    continue;
                  }
                }

                this.assert("Same primitive values", ret[_k] == v);
              }
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      return ret;
    } // Merges two objects into the return value. 'specials' applies the function in the value to the matching key.

  }, {
    key: "mergeRecursive",
    value: function mergeRecursive(o1, o2) {
      var specials = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (o1 == null || o1 == undefined) return o2;
      if (o2 == null || o2 == undefined) return o1;
      if (typeof o1 == "string") return o1;

      if ((typeof o1 == "array" || o1 instanceof Array) && (typeof o2 == "array" || o2 instanceof Array)) {
        if (o2.every(function (x) {
          return o1.includes(x);
        })) {
          // If every element of o2 is already in o1, why bother?
          return o1;
        }

        return [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__.default)(o1), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__.default)(o2));
      }

      var ret = o1;
      var keys = ObjectHelper.listKeys(o2);

      var _iterator11 = _createForOfIteratorHelper(keys),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var k = _step11.value;
          var v = o2[k];

          if (specials[k] != undefined) {
            var specfunc = specials[k];
            ret[k] = specfunc(ret[k], v, specials);
            continue;
          }

          var o1ref = ret[k];

          if (o1ref == undefined) {
            // If the key is not present in o1, just add key + value
            ret[k] = v;
          } else {
            ret[k] = ObjectHelper.mergeRecursive(ret[k], v);
          }
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      return ret;
    } // Flattens an array of arrays to a single array

  }, {
    key: "flatten",
    value: function flatten(in_array) {
      return [].concat.apply([], in_array);
    }
  }, {
    key: "logObject",
    value: function logObject(title, obj) {
      if (obj == undefined) {
        obj = title;
        title = "(anon)";
      }

      return console.log(title + ": " + JSON.stringify(obj));
    }
    /* Groups elements by selecting a key using func(x) for every element x 
       in in_array. Returns a dict of key => [objects] */

  }, {
    key: "groupBy",
    value: function groupBy(in_array, func) {
      var ret = {};

      var _iterator12 = _createForOfIteratorHelper(in_array),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var x = _step12.value;
          ObjectHelper.assert("key not undefined", func(x) !== undefined);

          if (ObjectHelper.listKeys(ret).includes(func(x))) {
            ret[func(x)].push(x);
          } else {
            ret[func(x)] = [x];
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      return Object.values(ret);
    }
  }, {
    key: "assert",
    value: function assert(name, expr) {
      if (!expr) {
        console.log("Assertion \"" + name + "\" failed");
        console.trace();
        window.alert("Assertion failed. Check console");
        throw new Error();
      }
    }
  }, {
    key: "stringify_circular",
    value: function stringify_circular(obj) {
      var getCircularReplacer = function getCircularReplacer() {
        var seen = new WeakSet();
        return function (key, value) {
          if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__.default)(value) === "object" && value !== null) {
            if (seen.has(value)) {
              return;
            }

            seen.add(value);
          }

          return value;
        };
      };

      return JSON.stringify(obj, getCircularReplacer());
    }
  }]);

  return ObjectHelper;
}(); // Class providing analysis of threads (mainly used in balance)


var ThreadAnalysis = /*#__PURE__*/function () {
  function ThreadAnalysis(section) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ThreadAnalysis);

    if (section instanceof Section) {
      this.section = section;
    } else if (section instanceof SuperSection) {
      ObjectHelper.assert("this is undesired.", false); // A supersection has many subsections. For now, let's try if 
      // merging works for this.

      this.section = section.toSection();
    } else if (section instanceof LazySuperSection) {
      this.section = section;
    } else if (section instanceof LazySection) {
      this.section = section;
    }
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ThreadAnalysis, [{
    key: "judgement",
    value: function judgement() {
      var analysis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return undefined;
    }
  }, {
    key: "analyze",
    value: function analyze() {
      var section = this.section;
      var b_print_analysis = false; // Set to true to debug.

      var data = {};
      var max_thread_num = Number(section.get_max_thread_num());
      if (b_print_analysis) console.log("max_thread_num: " + max_thread_num);
      var tot_cyc = [];
      var tot_l3_miss = [];
      var tot_l2_miss = [];
      var t = 0;

      for (t = 0; t < max_thread_num + 1; t++) {
        var ts = section.select_thread(t);
        var tc = ts.select_event('-2147483589'); // PAPI_TOT_CYC

        tot_cyc.push(MathHelper.sum(tc));
        var tl3 = ts.select_event('-2147483640'); // PAPI_L3_TCM

        tot_l3_miss.push(MathHelper.sum(tl3));
        var tl2 = ts.select_event('-2147483641'); //PAPI_L2_TCM

        tot_l2_miss.push(MathHelper.sum(tl2));
      } //Now we can get the balance


      var i = 0;

      if (b_print_analysis) {
        var _iterator13 = _createForOfIteratorHelper(tot_cyc),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _t = _step13.value;
            console.log("Thread " + i + " took " + _t + " cycles");
            i++;
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      }

      data.cycles_per_thread = tot_cyc;
      if (toplevel_use_mean) data.balance_stdev = MathHelper.stdev(tot_cyc) / MathHelper.mean(tot_cyc);else if (toplevel_use_median) {
        data.balance_stdev = MathHelper.stdev(tot_cyc) / MathHelper.median(tot_cyc);
      } else ObjectHelper.assert("Undefined mode", false);
      if (b_print_analysis) if (tot_cyc.length > 1 && MathHelper.mean(tot_cyc) != 0) {
        console.log("stdev: " + MathHelper.stdev(tot_cyc));
        console.log("Balance (stdev): " + data.balance_stdev);
      } // We need different means of balance calculations.

      var max_elem = Math.max.apply(Math, tot_cyc);
      var min_elem = Math.min.apply(Math, tot_cyc);
      var max_diff = (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(tot_cyc, function (x) {
        return Math.max(Math.abs(max_elem - x), Math.abs(min_elem - x));
      });
      var biggest_unbalance = 0;
      if (toplevel_use_mean) biggest_unbalance = max_diff / MathHelper.mean(tot_cyc);else if (toplevel_use_median) biggest_unbalance = max_diff / MathHelper.median(tot_cyc);else ObjectHelper.assert("Undefined mode", false);
      if (b_print_analysis) console.log("max_diff: " + max_diff);
      if (b_print_analysis) console.log("Balance (max): " + biggest_unbalance);
      data.balance_max = biggest_unbalance;
      i = 0;

      if (b_print_analysis) {
        var _iterator14 = _createForOfIteratorHelper(tot_l3_miss),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _t2 = _step14.value;
            console.log("Thread " + i + " had " + _t2 + " L3 misses");
            i++;
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }

      var sum_l3 = MathHelper.sum(tot_l3_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes (presumably) accessed\n" + sum_l3 + " L3 misses over all threads\n" + sum_l3 * 64 + " bytes loaded from memory");
      i = 0;

      if (b_print_analysis) {
        var _iterator15 = _createForOfIteratorHelper(tot_l2_miss),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var _t3 = _step15.value;
            console.log("Thread " + i + " had " + _t3 + " L2 misses");
            i++;
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      }

      var sum_l2 = MathHelper.sum(tot_l2_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes (presumably) accessed\n" + sum_l2 + " L3 misses over all threads\n" + sum_l2 * 64 + " bytes loaded from memory");
      return new DataBlock(data, "thread");
    }
  }]);

  return ThreadAnalysis;
}();

var LazyThreadAnalysis = /*#__PURE__*/function (_ThreadAnalysis) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(LazyThreadAnalysis, _ThreadAnalysis);

  var _super = _createSuper(LazyThreadAnalysis);

  function LazyThreadAnalysis(communicator, section) {
    var _this3;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, LazyThreadAnalysis);

    _this3 = _super.call(this, section);
    _this3.section = section;
    _this3.communicator = communicator;
    ObjectHelper.assert("Parameter valid", _this3.communicator != undefined);
    ObjectHelper.assert("Parameter valid", _this3.section != undefined);
    return _this3;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(LazyThreadAnalysis, [{
    key: "analyze",
    value: function () {
      var _analyze = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee4() {
        var tmp, data, ret;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.communicator.runAnalysis("ThreadAnalysis", [new Number(this.section.unified_id), new Number(this.section.supersection_id)]).get();

              case 2:
                tmp = _context4.sent;
                data = tmp;
                ret = new DataBlock(data, "thread");
                this.analysis_result = ret;
                ret.judgement = this.judgement();
                return _context4.abrupt("return", ret);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function analyze() {
        return _analyze.apply(this, arguments);
      }

      return analyze;
    }()
  }]);

  return LazyThreadAnalysis;
}(ThreadAnalysis);

function AutoThreadAnalysis(communicator, section) {
  if (section instanceof Section) {
    return new ThreadAnalysis(section);
  } else {
    return new LazyThreadAnalysis(communicator, section);
  }
}

var MemoryAnalysis = /*#__PURE__*/function () {
  function MemoryAnalysis(section, target_bw) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MemoryAnalysis);

    this.section = section;
    this.analysis_result = null;
    this.Memory_Target_Bandwidth = target_bw;

    if (this.Memory_Target_Bandwidth == undefined) {
      this.Memory_Target_Bandwidth = 20;
    }
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(MemoryAnalysis, [{
    key: "judgement",
    value: function judgement() {
      var analysis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (analysis == null) analysis = this.analysis_result;
      return MemoryAnalysis.sjudgement(analysis);
    }
  }, {
    key: "analyze",
    value: function analyze() {
      var section = this.section;
      ObjectHelper.assert("section is Section", section instanceof Section);
      var b_print_analysis = false; // Set to true to debug.

      var data = {};
      data.expected_memory_movement = section.datasize;
      if (b_print_analysis) console.log("Expected data movement: " + data.expected_memory_movement);
      var max_thread_num = Number(section.get_max_thread_num());
      var min_thread_num = Number(section.get_min_thread_num());

      if (max_thread_num == undefined || min_thread_num == undefined) {
        return undefined;
      }

      if (b_print_analysis) console.log("max_thread_num: " + max_thread_num);
      var tot_cyc = [];
      var tot_l3_miss = [];
      var tot_l2_miss = [];
      var mem_bw = []; // Bandwidth from mem to L3

      var l3_bw = []; // Bandwidth from L3 to L2

      var critical_path_cyc = 0; // Critical path cycles

      var t = 0;

      for (t = min_thread_num; t < max_thread_num + 1; t++) {
        var ts = section.select_thread(t);
        var tc = ts.select_event('-2147483589'); // PAPI_TOT_CYC

        var tc_sum = MathHelper.sum(tc);
        tot_cyc.push(tc_sum);
        var tl3 = ts.select_event('-2147483640'); // PAPI_L3_TCM

        var tl3_sum = MathHelper.sum(tl3);
        tot_l3_miss.push(tl3_sum);
        var tl2 = ts.select_event('-2147483641'); //PAPI_L2_TCM

        var tl2_sum = MathHelper.sum(tl2);
        tot_l2_miss.push(tl2_sum); // Add the bandwidths for this element

        mem_bw.push(tl3_sum / tc_sum);
        l3_bw.push(tl2_sum / tc_sum);
      }

      if (tot_cyc.length == 0) {
        return undefined;
      }

      critical_path_cyc = (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(tot_cyc, function (x) {
        return x;
      });
      data.critical_path_cyc = critical_path_cyc;
      data.mem_bandwidth = mem_bw;
      data.l3_bandwidth = l3_bw; // Now we can get the balance

      var i = 0;

      if (b_print_analysis) {
        var _iterator16 = _createForOfIteratorHelper(tot_cyc),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _t4 = _step16.value;
            console.log("Thread " + i + " took " + _t4 + " cycles");
            i++;
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      }

      data.TOT_CYC = tot_cyc;
      data.L3_TCM = tot_l3_miss;
      data.L2_TCM = tot_l2_miss;
      i = 0;

      if (b_print_analysis) {
        var _iterator17 = _createForOfIteratorHelper(tot_l3_miss),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var _t5 = _step17.value;
            console.log("Thread " + i + " had " + _t5 + " L3 misses");
            i++;
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }
      }

      var sum_l3 = MathHelper.sum(tot_l3_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes accessed\n" + sum_l3 + " L3 misses over all threads\n" + sum_l3 * 64 + " bytes loaded from memory");
      i = 0;

      if (b_print_analysis) {
        var _iterator18 = _createForOfIteratorHelper(tot_l2_miss),
            _step18;

        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var _t6 = _step18.value;
            console.log("Thread " + i + " had " + _t6 + " L2 misses");
            i++;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }

      var sum_l2 = MathHelper.sum(tot_l2_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes accessed\n" + sum_l2 + " L3 misses over all threads\n" + sum_l2 * 64 + " bytes loaded from memory");
      {
        var datasize = data.expected_memory_movement;
        var crit_cyc = data.critical_path_cyc;
        var expected_bandwidth = datasize / crit_cyc;
        data.expected_bandwidth = expected_bandwidth;
      }
      data.Memory_Target_Bandwidth = this.Memory_Target_Bandwidth;
      var ret = new DataBlock(data, "memory");
      this.analysis_result = ret;
      ret.judgement = this.judgement();
      return ret;
    }
  }], [{
    key: "sjudgement",
    value: function sjudgement(analysis) {
      // We say memory was slow if the achieved bandwidth is below 50% of the target bandwidth
      var bandwidth = analysis.data.expected_bandwidth;
      var m = bandwidth / analysis.data.Memory_Target_Bandwidth;

      if (m < 0.5) {
        return -1;
      } // Otherwise, everything is fine


      return 1;
    }
  }]);

  return MemoryAnalysis;
}();

var SuperSectionMemoryAnalysis = /*#__PURE__*/function () {
  function SuperSectionMemoryAnalysis(section, nodeid, stateid, target_bw) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, SuperSectionMemoryAnalysis);

    this.section = section;
    this.for_node = nodeid;
    this.for_state = stateid;
    this.analysis_result = null;
    this.Memory_Target_Bandwidth = target_bw;

    if (this.Memory_Target_Bandwidth == undefined) {
      this.Memory_Target_Bandwidth = 20;
    }

    if (!(stateid == 0xFFFF || stateid == 65535)) ObjectHelper.assert("for_node defined", this.for_node != undefined && new Number(this.for_node) != NaN);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(SuperSectionMemoryAnalysis, [{
    key: "judgement",
    value: function judgement() {
      var analysis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (analysis == null) analysis = this.analysis_result; // We say memory was slow if the achieved bandwidth is below 50% of 
      // the target bandwidth

      var bandwidth = analysis.data.expected_bandwidth;
      var m = bandwidth / analysis.data.Memory_Target_Bandwidth;

      if (m < 0.5) {
        return -1;
      } // Otherwise, everything is fine


      return 1;
    }
  }, {
    key: "analyze",
    value: function analyze() {
      var section = this.section;
      ObjectHelper.assert("section is SuperSection", section instanceof SuperSection); // We have a supersection, so we should try to get individual 
      // sections out.

      section = section.toSection(this.for_node, this.for_state);

      if (section == undefined) {
        return null;
      }

      if (section['_entries'] == undefined) {
        return null;
      }

      var b_print_analysis = false; // Set to true to debug.

      var data = {};
      data.expected_memory_movement = section.datasize;
      if (b_print_analysis) console.log("Expected data movement: " + data.expected_memory_movement);
      var max_thread_num = Number(section.get_max_thread_num());
      var min_thread_num = Number(section.get_min_thread_num());
      if (b_print_analysis) console.log("max_thread_num: " + max_thread_num);
      var tot_cyc = [];
      var tot_l3_miss = [];
      var tot_l2_miss = [];
      var mem_bw = []; // Bandwidth from mem to L3

      var l3_bw = []; // Bandwidth from L3 to L2

      var critical_path_cyc = 0; // Critical path cycles

      var t = 0;

      for (t = min_thread_num; t < max_thread_num + 1; t++) {
        //console.log("iteration " + t);
        var ts = section.select_thread(t);
        var tc = ts.select_event('-2147483589'); // PAPI_TOT_CYC
        //console.log(tc);

        var tc_sum = MathHelper.sum(tc);
        tot_cyc.push(tc_sum);
        var tl3 = ts.select_event('-2147483640'); // PAPI_L3_TCM

        var tl3_sum = MathHelper.sum(tl3);
        tot_l3_miss.push(tl3_sum);
        var tl2 = ts.select_event('-2147483641'); //PAPI_L2_TCM

        var tl2_sum = MathHelper.sum(tl2);
        tot_l2_miss.push(tl2_sum); // Add the bandwidths for this element

        mem_bw.push(tl3_sum / tc_sum);
        l3_bw.push(tl2_sum / tc_sum);
      }

      critical_path_cyc = (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(tot_cyc, function (x) {
        return x;
      });
      data.critical_path_cyc = critical_path_cyc;
      data.mem_bandwidth = mem_bw;
      data.l3_bandwidth = l3_bw;
      var i = 0;

      if (b_print_analysis) {
        var _iterator19 = _createForOfIteratorHelper(tot_cyc),
            _step19;

        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var _t7 = _step19.value;
            console.log("Thread " + i + " took " + _t7 + " cycles");
            i++;
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
      }

      data.TOT_CYC = tot_cyc;
      data.L3_TCM = tot_l3_miss;
      data.L2_TCM = tot_l2_miss;
      i = 0;

      if (b_print_analysis) {
        var _iterator20 = _createForOfIteratorHelper(tot_l3_miss),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var _t8 = _step20.value;
            console.log("Thread " + i + " had " + _t8 + " L3 misses");
            i++;
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
      }

      var sum_l3 = MathHelper.sum(tot_l3_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes accessed\n" + sum_l3 + " L3 misses over all threads\n" + sum_l3 * 64 + " bytes loaded from memory");
      i = 0;

      if (b_print_analysis) {
        var _iterator21 = _createForOfIteratorHelper(tot_l2_miss),
            _step21;

        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var _t9 = _step21.value;
            console.log("Thread " + i + " had " + _t9 + " L2 misses");
            i++;
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }
      }

      var sum_l2 = MathHelper.sum(tot_l2_miss);
      if (b_print_analysis) console.log("\n" + section.datasize + " bytes accessed\n" + sum_l2 + " L3 misses over all threads\n" + sum_l2 * 64 + " bytes loaded from memory");
      {
        var datasize = data.expected_memory_movement;
        var crit_cyc = data.critical_path_cyc;
        var expected_bandwidth = datasize / crit_cyc;
        data.expected_bandwidth = expected_bandwidth;
      }
      data.Memory_Target_Bandwidth = this.Memory_Target_Bandwidth;
      var ret = new DataBlock(data, "memory");
      this.analysis_result = ret;
      ret.judgement = this.judgement();
      return ret;
    }
  }]);

  return SuperSectionMemoryAnalysis;
}();

var LazySuperSectionMemoryAnalysis = /*#__PURE__*/function (_SuperSectionMemoryAn) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(LazySuperSectionMemoryAnalysis, _SuperSectionMemoryAn);

  var _super2 = _createSuper(LazySuperSectionMemoryAnalysis);

  function LazySuperSectionMemoryAnalysis(communicator, section, nodeid, stateid, target_bw) {
    var _this4;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, LazySuperSectionMemoryAnalysis);

    _this4 = _super2.call(this, section, nodeid, stateid, target_bw);
    _this4.communicator = communicator;
    return _this4;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(LazySuperSectionMemoryAnalysis, [{
    key: "analyze",
    value: function () {
      var _analyze2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee5() {
        var n, s, tmp, data, ret;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // We differ from the eager analysis here: We let the python/sql-side do the hard work
                n = undefined;
                s = new Number(this.for_state);
                if (this.for_node !== undefined) n = new Number(this.for_node);else {
                  // Global
                  s = 0;
                  n = 0x0FFFFFFFF;
                }
                _context5.next = 5;
                return this.communicator.runAnalysis("MemoryAnalysis", [s << 16 | n, this.section.index]).get();

              case 5:
                tmp = _context5.sent;
                data = tmp;

                if (!(data == null)) {
                  _context5.next = 9;
                  break;
                }

                return _context5.abrupt("return", null);

              case 9:
                data.Memory_Target_Bandwidth = this.Memory_Target_Bandwidth;
                ret = new DataBlock(data, "memory");
                this.analysis_result = ret;
                ret.judgement = this.judgement();
                return _context5.abrupt("return", ret);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function analyze() {
        return _analyze2.apply(this, arguments);
      }

      return analyze;
    }()
  }]);

  return LazySuperSectionMemoryAnalysis;
}(SuperSectionMemoryAnalysis);

function AutoSuperSectionMemoryAnalysis(communicator, section, nodeid, stateid, target_bw) {
  if (section instanceof LazySuperSection) {
    return new LazySuperSectionMemoryAnalysis(communicator, section, nodeid, stateid, target_bw);
  } else {
    return new SuperSectionMemoryAnalysis(section, nodeid, stateid, target_bw);
  }
}

var CriticalPathAnalysis = /*#__PURE__*/function () {
  function CriticalPathAnalysis(rundata, entry_node, stateid) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CriticalPathAnalysis);

    this.rundata = rundata;
    this.analysis_result = null;
    this.section_entry_node = entry_node;
    this.for_state = stateid;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CriticalPathAnalysis, [{
    key: "judgement",
    value: function judgement() {
      var analysis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (analysis == null) analysis = this.analysis_result;
      return CriticalPathAnalysis.sjudgement(analysis);
    }
  }, {
    key: "analyze",
    value: function analyze() {
      var _this5 = this;

      var data = {}; // We want to compare different runs.

      var runs = this.rundata.map(function (x) {
        return x.data;
      });

      if (this.section_entry_node !== undefined) {
        var single_threaded = new SuperSection(runs[0][0]).toThreadMean(this.section_entry_node, this.for_state);
      }

      var filtered_to_section = runs.map(function (x) {
        return x.map(function (y) {
          return new SuperSection(y).toSection(_this5.section_entry_node, _this5.for_state);
        }).filter(function (x) {
          return x != undefined && x._entries != undefined;
        });
      });
      var thread_analyzed = filtered_to_section.map(function (x) {
        return x.map(function (y) {
          return new ThreadAnalysis(y).analyze();
        });
      }); // Now map to cycles_per_thread

      var cycles_per_thread = thread_analyzed.map(function (x) {
        return x.map(function (y) {
          return y.data.cycles_per_thread;
        });
      }); // From here, we have all thread analyses (including tot_cyc for 
      // each element)

      var critical_paths = cycles_per_thread.map(function (x) {
        return x.map(function (y) {
          return (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(y, function (z) {
            return z;
          });
        });
      });
      data.critical_paths = critical_paths.map(function (x, index) {
        return {
          thread_num: index + 1,
          value: x
        };
      });
      var T1 = data.critical_paths.find(function (x) {
        return x.thread_num == 1;
      }).value;
      data.speedup = critical_paths.map(function (x, index) {
        return {
          thread_num: index + 1,
          value: x.map(function (y, yi) {
            return T1[yi] / y;
          })
        };
      });
      data.efficiency = data.speedup.map(function (x, index) {
        return {
          thread_num: index + 1,
          value: x.value.map(function (y, yi) {
            return y / (index + 1);
          })
        };
      });
      var ret = new DataBlock(data, "path");
      this.analysis_result = ret;
      ret.judgement = this.judgement();
      return ret;
    }
  }], [{
    key: "sjudgement",
    value: function sjudgement(analysis) {
      var e = analysis.data.efficiency;
      var max_thread_num = (0,_renderer_util_js__WEBPACK_IMPORTED_MODULE_9__.max_func)(e, function (x) {
        return x.thread_num;
      });
      var eff = 0;

      if (toplevel_use_mean) {
        eff = MathHelper.mean(e.find(function (x) {
          return x.thread_num == max_thread_num;
        }).value);
      } else if (toplevel_use_median) {
        eff = MathHelper.median(e.find(function (x) {
          return x.thread_num == max_thread_num;
        }).value);
      } else {
        ObjectHelper.assert("Undefined mode", false);
      }

      if (eff < 0.5) {
        return -1;
      }

      return 1;
    }
  }]);

  return CriticalPathAnalysis;
}();

var LazyCriticalPathAnalysis = /*#__PURE__*/function (_CriticalPathAnalysis) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(LazyCriticalPathAnalysis, _CriticalPathAnalysis);

  var _super3 = _createSuper(LazyCriticalPathAnalysis);

  function LazyCriticalPathAnalysis(communicator, entry_node, stateid) {
    var _this6;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, LazyCriticalPathAnalysis);

    _this6 = _super3.call(this, undefined, entry_node, stateid);
    _this6.communicator = communicator;
    return _this6;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(LazyCriticalPathAnalysis, [{
    key: "analyze",
    value: function () {
      var _analyze3 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().mark(function _callee6() {
        var p1, tmp, data, ret;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_8___default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // We differ from the eager analysis here: We let the python/sql-side do the hard work
                ObjectHelper.assert("Valid state", this.for_state !== undefined);
                p1 = undefined;
                if (this.section_entry_node !== undefined) p1 = new Number(this.section_entry_node);
                _context6.next = 5;
                return this.communicator.runAnalysis("CriticalPathAnalysis", [p1, new Number(this.for_state)]).get();

              case 5:
                tmp = _context6.sent;
                data = tmp;
                ret = new DataBlock(data, "path");
                this.analysis_result = ret;
                ret.judgement = this.judgement();
                return _context6.abrupt("return", ret);

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function analyze() {
        return _analyze3.apply(this, arguments);
      }

      return analyze;
    }()
  }]);

  return LazyCriticalPathAnalysis;
}(CriticalPathAnalysis);

function AutoCriticalPathAnalysis(communicator, rundata, entry_node, stateid) {
  if (rundata != undefined) {
    return new CriticalPathAnalysis(rundata, entry_node, stateid);
  } else {
    // This is a lazy analysis.
    return new LazyCriticalPathAnalysis(communicator, entry_node, stateid);
  }
} // Class to check if a result is reasonable


var ResultVerifier = /*#__PURE__*/function () {
  function ResultVerifier(all_perf_data) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ResultVerifier);

    this.all_data = all_perf_data; // Extract the list of supersections from the runs

    var rundata = this.all_data.map(function (x) {
      return x.data;
    });
    ObjectHelper.assert("Data received", rundata.length > 0);
    if (!global_disable_verifier) ResultVerifier.assert_all_runs_same_number_of_entries(rundata);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ResultVerifier, null, [{
    key: "assert_all_runs_same_number_of_entries",
    value: function assert_all_runs_same_number_of_entries(runs) {
      ObjectHelper.assert("all_runs_same_number_of_supersection", runs.every(function (x) {
        return x.length == runs[0].length;
      })); // Now get all sections and check again.

      ObjectHelper.assert("all_runs_same_number_of_sections", runs.every(function (x) {
        return MathHelper.sum(x.map(function (y) {
          return new SuperSection(y).sections().length;
        })) == MathHelper.sum(runs[0].map(function (y) {
          return new SuperSection(y).sections().length;
        }));
      })); // Now check number of entries (this must also be the same)

      ObjectHelper.assert("all_runs_same_number_of_entries", runs.every(function (x) {
        return MathHelper.sum(x.map(function (y) {
          return MathHelper.sum(new SuperSection(y).sections().map(function (x) {
            return x.entries().length;
          }));
        })) == MathHelper.sum(runs[0].map(function (y) {
          return MathHelper.sum(new SuperSection(y).sections().map(function (x) {
            return x.entries().length;
          }));
        }));
      }));
    }
  }]);

  return ResultVerifier;
}();



/***/ }),

/***/ "./renderer_dir/renderer_util.js":
/*!***************************************!*\
  !*** ./renderer_dir/renderer_util.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CanvasDrawManager": () => (/* binding */ CanvasDrawManager),
/* harmony export */   "Bracket": () => (/* binding */ Bracket),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "Layout": () => (/* binding */ Layout),
/* harmony export */   "Pos": () => (/* binding */ Pos),
/* harmony export */   "min_func": () => (/* binding */ min_func),
/* harmony export */   "max_func": () => (/* binding */ max_func),
/* harmony export */   "max_func_obj": () => (/* binding */ max_func_obj),
/* harmony export */   "RU_DataView": () => (/* binding */ RU_DataView),
/* harmony export */   "RU_DataViewBarGraph": () => (/* binding */ RU_DataViewBarGraph),
/* harmony export */   "RU_DataViewFormLayout": () => (/* binding */ RU_DataViewFormLayout),
/* harmony export */   "RU_DataViewNumberBlock": () => (/* binding */ RU_DataViewNumberBlock),
/* harmony export */   "RU_DataViewSuggestedActionBlock": () => (/* binding */ RU_DataViewSuggestedActionBlock),
/* harmony export */   "RU_DataViewText": () => (/* binding */ RU_DataViewText),
/* harmony export */   "createImageDownload": () => (/* binding */ createImageDownload),
/* harmony export */   "DataBlock": () => (/* binding */ DataBlock)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/construct */ "./node_modules/@babel/runtime/helpers/esm/construct.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _datahelper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./datahelper.js */ "./renderer_dir/datahelper.js");
/* harmony import */ var _windowing_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./windowing.js */ "./renderer_dir/windowing.js");










function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

 // Renderer utilities.
// Render a button to a canvas and return an image

function render_button_to_graphic(button) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "canvas_element";
  var button_class = button.constructor.name;
  var c = document.createElement("canvas");
  var ctx = c.getContext("2d");
  c.width = button.button_subwindow.targetwidth;
  c.height = button.button_subwindow.targetheight; // Recreate the button

  var new_obj = (0,_babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_7__.default)(button.constructor, [ctx].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__.default)(button.dataparams)));

  new_obj.button_subwindow_state = 'open';
  new_obj.is_locked_open = true; // Skip animation

  new_obj.setFullyOpen();
  var b = new Bracket(ctx);
  b.setupEventListeners();
  b.addButton(new_obj);
  b.drawEx(new Pos(-20, 0), new Pos(0, 0), 0, 0, true);
  var imgdat = c.toDataURL("image/jpeg");
  if (mode === "canvas_element") return c;
  return imgdat;
}

function createImageDownload(brackets) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  // Some difficulties here: First, we have to merge the images to one big image.
  // We default to the following convention:
  // There are 10 columns with a width of 800px each. The first column is reserved to (textual) information about the node
  // Any more buttons would be wrapping around to newlines.
  // Every bracket begins a newline
  // Assuming WebKit=Firefox, there's a maximum of 32767px in either direction, or a total of 472'907'776px (e.g., 22'528 x 20'992)
  // TODO: Reevalutate this code and adjust to the case that there are more than 10 buttons (implement wrap-around, basically)
  var c = document.createElement("canvas");
  var ctx = c.getContext("2d");
  var colsize = 700;
  var rowsize = 500;
  var ypos = 0;
  var maxxpos = 0; // Cut height

  c.height = Object.entries(brackets).length * rowsize; // Cut width

  var tmp = Object.entries(brackets)[0][1];
  c.width = (1 + tmp.buttons.length) * colsize; // Fill white (will appear as transparent otherwise, which is viewer-dependent)

  ctx.save();
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, c.width, c.height);
  ctx.restore();

  for (var _i = 0, _Object$entries = Object.entries(brackets); _i < _Object$entries.length; _i++) {
    var bracket_entry = _Object$entries[_i];
    var key = bracket_entry[0];
    var bracket = bracket_entry[1];
    ctx.save();
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    ctx.font = "60px Arial";
    var unified_id = new Number(key);
    var stateid = unified_id >> 16 & 0xFFFF;
    var nodeid = unified_id & 0xFFFF;
    ctx.fillText("Affected node " + stateid.toString() + "|" + nodeid.toString(), colsize / 2.0, ypos + rowsize / 2.0);
    ctx.restore();
    var xpos = colsize;

    var _iterator = _createForOfIteratorHelper(bracket.buttons),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var button = _step.value;
        // Draw the buttons accordingly
        var src_canvas = render_button_to_graphic(button);
        ctx.drawImage(src_canvas, xpos, ypos);
        xpos += colsize;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    maxxpos = Math.max(maxxpos, xpos);
    ypos += rowsize;
    xpos = 0;
  }

  var imgdat = c.toDataURL("image/jpeg");
  var d = document.createElement("a");
  d.setAttribute("href", imgdat);
  d.setAttribute("download", prefix + "buttons.jpg");
  d.style.display = 'none';
  document.body.appendChild(d);
  d.click();
  document.body.removeChild(d);
}

function max_func(array, func) {
  if (array == undefined) {
    console.trace("undefined parameter");
  }

  _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("Array is non-empty", array.length > 0);
  var max_obj = null;
  var max_val = func(array[0]);

  var _iterator2 = _createForOfIteratorHelper(array),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var x = _step2.value;
      var m = func(x);

      if (m > max_val) {
        max_val = m;
        max_obj = x;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return max_val;
}

function max_func_obj(array, func, objfunc) {
  if (array.length == 0) {
    return null;
  }

  var max_obj = objfunc(array[0]);
  var max_val = func(array[0]);

  var _iterator3 = _createForOfIteratorHelper(array),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var x = _step3.value;
      var m = func(x);

      if (m > max_val) {
        max_val = m;
        max_obj = objfunc(x);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return max_obj;
}

function min_func(array, func) {
  var min_obj = null;
  var min_val = func(array[0]);

  var _iterator4 = _createForOfIteratorHelper(array),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var x = _step4.value;
      var m = func(x);

      if (m < min_val) {
        min_val = m;
        min_obj = x;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return min_val;
}

var Pos = /*#__PURE__*/function () {
  function Pos(x, y) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Pos);

    this.x = x;
    this.y = y;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Pos, [{
    key: "toString",
    value: function toString() {
      return "(" + this.x + ", " + this.y + ")";
    }
  }, {
    key: "minus",
    value: function minus(other) {
      return new Pos(this.x - other.x, this.y - other.y);
    }
  }, {
    key: "plus",
    value: function plus(other) {
      return new Pos(this.x + other.x, this.y + other.y);
    }
  }, {
    key: "times",
    value: function times(other) {
      return new Pos(this.x * other.x, this.y * other.y);
    }
  }, {
    key: "multiply",
    value: function multiply(num) {
      return new Pos(this.x * num, this.y * num);
    }
  }, {
    key: "dist",
    value: function dist() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
  }, {
    key: "inRect",
    value: function inRect(topleft, bottomright) {
      if (this.x < topleft.x || this.y < topleft.y) return false;
      if (this.x > bottomright.x || this.y > bottomright.y) return false;
      return true;
    }
  }]);

  return Pos;
}();

var Clickable = /*#__PURE__*/function () {
  function Clickable() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Clickable);

    this.children = Array();

    this.onEnterHover = function () {
      return false;
    };

    this.onLeaveHover = function () {
      return false;
    };

    this.onClick = function () {
      return false;
    };

    this.onDoubleClick = function () {
      return false;
    };

    this.onMouseMove = function () {
      return false;
    };

    this.clickable_state = "not_hovered";

    this.enable_func = function () {
      return true;
    };
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Clickable, [{
    key: "destroy",
    value: function destroy() {
      this.children = [];
    }
  }, {
    key: "addChild",
    value: function addChild(clickable) {
      this.children.push(clickable);
    }
  }, {
    key: "addVIPChild",
    value: function addVIPChild(clickable) {
      this.children.unshift(clickable);
    }
  }, {
    key: "setEnableFunc",
    value: function setEnableFunc(func) {
      this.enable_func = func;
    }
  }, {
    key: "onUpdateDoubleClick",
    value: function onUpdateDoubleClick(mousepos, mb) {
      if (!this.enable_func()) return false;

      if (this.is_inside(mousepos)) {
        if (this.onDoubleClick()) return true;
      } else {// Deselect?
      }

      var _iterator5 = _createForOfIteratorHelper(this.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var c = _step5.value;

          if (c.onUpdateDoubleClick(mousepos, mb)) {
            return true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return false;
    }
  }, {
    key: "onUpdateClick",
    value: function onUpdateClick(mousepos, mb) {
      if (!this.enable_func()) return false;

      if (this.is_inside(mousepos)) {
        if (this.onClick()) return true;
      } else {// Deselect?
      }

      var _iterator6 = _createForOfIteratorHelper(this.children),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var c = _step6.value;

          if (c.onUpdateClick(mousepos, mb)) {
            return true;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return false;
    }
  }, {
    key: "onUpdateMove",
    value: function onUpdateMove(mousepos) {
      if (!this.enable_func()) return false;

      if (this.is_inside(mousepos)) {
        this.onMouseMove(mousepos);

        if (this.clickable_state == "not_hovered") {
          this.clickable_state = "hovered";

          if (this.onEnterHover(mousepos)) {
            return true;
          }
        }
      } else {
        if (this.clickable_state == "hovered") {
          this.clickable_state = "not_hovered";

          if (this.onLeaveHover()) {
            return true;
          }
        }
      } // Else pass to children


      var _iterator7 = _createForOfIteratorHelper(this.children),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var c = _step7.value;

          if (c.onUpdateMove(mousepos)) {
            return true;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return false;
    }
  }, {
    key: "is_inside",
    value: function is_inside(pos) {
      // Abstract
      console.log("Abstract function called (is_inside)");
      return false;
    }
  }, {
    key: "setOnEnterHover",
    value: function setOnEnterHover(func) {
      this.onEnterHover = func;
    }
  }, {
    key: "setOnLeaveHover",
    value: function setOnLeaveHover(func) {
      this.onLeaveHover = func;
    }
  }, {
    key: "setOnClick",
    value: function setOnClick(func) {
      this.onClick = func;
    }
  }, {
    key: "setOnDoubleClick",
    value: function setOnDoubleClick(func) {
      this.onDoubleClick = func;
    }
  }, {
    key: "setOnMouseMove",
    value: function setOnMouseMove(func) {
      this.onMouseMove = func;
    }
  }]);

  return Clickable;
}();

var SubWindow = /*#__PURE__*/function (_Clickable) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(SubWindow, _Clickable);

  var _super = _createSuper(SubWindow);

  function SubWindow(ctx, x, y, width, height) {
    var _this2;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SubWindow);

    _this2 = _super.call(this);
    _this2.ctx = ctx;
    _this2.topleft = new Pos(x, y);
    _this2.targetwidth = width;
    _this2.targetheight = height;
    _this2._sizetrans = 0;
    _this2.subwindow_trans_change = 10;
    _this2.subwindow_popped_out = false;
    _this2.layout = null;
    _this2.background_color = "white"; // Set to "transparent" if no background is requested

    return _this2;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(SubWindow, [{
    key: "setLayout",
    value: function setLayout(layout) {
      this.layout = layout;
      return this;
    }
  }, {
    key: "width",
    value: function width() {
      return this.targetwidth * this._sizetrans / 100.;
    }
  }, {
    key: "height",
    value: function height() {
      return this.targetheight * this._sizetrans / 100.;
    }
  }, {
    key: "draw",
    value: function draw(topleft, state) {
      var ctx_override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (topleft != null) this.topleft = topleft;
      var ctx = this.ctx;

      if (ctx_override) {
        ctx = ctx_override;
      }

      ctx.save();
      ctx.beginPath();
      ctx.strokeStyle = "black";
      ctx.lineWidth = 2;
      var oldfill = ctx.fillStyle;
      ctx.fillStyle = this.background_color;
      ctx.rect(this.topleft.x, this.topleft.y, this.width(), this.height());
      ctx.fill();
      ctx.stroke();
      ctx.fillStyle = oldfill;

      if (state == 'open') {
        this._sizetrans += this.subwindow_trans_change;
        if (this._sizetrans > 100.) this._sizetrans = 100.;
      } else if (state == 'collapsed') {
        this._sizetrans -= this.subwindow_trans_change;
        if (this._sizetrans < 0.) this._sizetrans = 0.;
      }

      if (this.layout != null) {
        if (this._sizetrans != 0) this.layout.draw(ctx);
      }

      ctx.restore();
    }
  }, {
    key: "is_inside",
    value: function is_inside(pos) {
      var offsetpos = pos.minus(this.topleft);
      if (offsetpos.x < 0 || offsetpos.y < 0) return false;
      if (offsetpos.x > this.width() || this.height()) return false;
      return true;
    }
  }]);

  return SubWindow;
}(Clickable);

var Button = /*#__PURE__*/function (_Clickable2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(Button, _Clickable2);

  var _super2 = _createSuper(Button);

  function Button(ctx) {
    var _this3;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Button);

    _this3 = _super2.call(this);
    _this3.ctx = ctx;
    _this3.state = 0;
    _this3.update = 0;
    _this3.color = "orange";
    _this3.button_subwindow_state = "collapsed";
    _this3.button_subwindow = new SubWindow(ctx, 0, 0, 600, 400);

    _this3.addChild(_this3.button_subwindow);

    _this3.is_locked_open = false;
    _this3.topleft = new Pos(0, 0);
    _this3.size = new Pos(0, 0);
    _this3.button_image = null;
    return _this3;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Button, [{
    key: "setDefaultDblClick",
    value: function setDefaultDblClick() {
      var _this4 = this;

      this.setOnDoubleClick(function (p) {
        var newwin = new _windowing_js__WEBPACK_IMPORTED_MODULE_10__.DiodeWindow(window);
        newwin.setSenderData({
          className: _this4.constructor.name,
          dataParams: _this4.dataparams
        });
        var subwin = newwin.open("renderer_dir/subwindow.html", "_blank");

        if (!subwin) {
          console.log("Failed to open subwindow");
          alert("failed to open subwindow");
        }

        return true;
      });
    } // Bypass the opening animation (for saving results)

  }, {
    key: "setFullyOpen",
    value: function setFullyOpen() {
      this.button_subwindow_state = "open";
      this.button_subwindow._sizetrans = 100.0;
      this.is_locked_open = true;
    } // Set a button image from data_url, and resize to the given side length (the image must be square)

  }, {
    key: "setButtonImage",
    value: function setButtonImage(data_url) {
      var _this5 = this;

      var side_len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

      if (data_url == undefined) {
        return this;
      }

      this.button_image = new Image();
      this.button_image.src = data_url; // Apparently you cannot assume that the image element is ready synchronously (without onload, it could happen that an empty image is set instead)

      this.button_image.onload = function () {
        var c = document.createElement("canvas");
        var ctx = c.getContext("2d");
        c.width = side_len;
        c.height = side_len;
        ctx.drawImage(_this5.button_image, 0, 0, side_len, side_len); // Now set the resized image to gain some performance.

        _this5.button_image.src = c.toDataURL();
      };
    }
  }, {
    key: "is_inside",
    value: function is_inside(pos) {
      var offsetpos = pos.minus(this.topleft);
      if (offsetpos.x < 0 || offsetpos.y < 0) return false;
      if (offsetpos.x > this.size.x || offsetpos.y > this.size.y) return false;
      return true;
    }
  }, {
    key: "draw",
    value: function draw(topleft, size) {
      this.update++;
      var now = new Date();
      var ctx = this.ctx;
      this.topleft = topleft;
      this.size = size; // Draw the window first (this way, the button is not occluded)

      this.button_subwindow.draw(topleft, this.button_subwindow_state);
      ctx.save();
      ctx.beginPath(); // Draw the rect

      if (this.button_image == null) {
        if (this.state == 0) {
          var cfseg = 2 * Math.PI / 1000.;
          var mid = size.x / 2;
          var fac = now.getMilliseconds();
          var xval = Math.cos(cfseg * fac) * mid;
          var yval = Math.sin(cfseg * fac) * mid;
          var grad = ctx.createLinearGradient(topleft.x + mid + xval, topleft.y + mid + yval, topleft.x + mid - xval, topleft.y + mid - yval);
          grad.addColorStop(0, this.color);
          grad.addColorStop(1, "white");
          ctx.fillStyle = grad;
        }

        ctx.strokeStyle = "#000000";
        ctx.lineWidth = 2;
        ctx.rect(topleft.x, topleft.y, size.x, size.y);
        ctx.stroke();

        if (this.state == 0) {
          ctx.fill();
        }
      } else {
        ctx.drawImage(this.button_image, topleft.x, topleft.y, size.x, size.y);
        ctx.strokeStyle = "#000000";
        ctx.lineWidth = 2;
        ctx.rect(topleft.x, topleft.y, size.x, size.y);
        ctx.stroke();
      }

      ctx.restore();
      topleft = null;
      size = null;
      now = null;
    }
  }]);

  return Button;
}(Clickable); // Class to specify where which elements are located


var Layout = /*#__PURE__*/function () {
  function Layout(subwindow) {
    var _this6 = this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Layout);

    this.parent = subwindow;
    this._layout = {};
    this.databinding = null;

    var _this = this;

    this._layout_clickable = new ( /*#__PURE__*/function (_Clickable3) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(_class, _Clickable3);

      var _super3 = _createSuper(_class);

      function _class() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, _class);

        return _super3.apply(this, arguments);
      }

      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(_class, [{
        key: "is_inside",
        value: function is_inside(pos) {
          for (var _i2 = 0, _Object$keys = Object.keys(_this._layout); _i2 < _Object$keys.length; _i2++) {
            var x = _Object$keys[_i2];
            var val = _this._layout[x];
            var realsize = new Pos(_this.parent.width() * val.size.x / 100.0, _this.parent.height() * val.size.y / 100.0);

            var realtopleft = _this.parent.topleft.plus(val.topleft.times(new Pos(_this.parent.width() / 100.0, _this.parent.height() / 100.0)));

            var inside = realtopleft.x < pos.x && pos.x < realtopleft.x + realsize.x && realtopleft.y < pos.y && pos.y < realtopleft.y + realsize.y;
            var has_handlers = true;

            if (inside && has_handlers) {
              this._tmp_hovered = x;
              this._mouse_pos = pos;
              return true;
            }
          }

          delete this._tmp_hovered;
          return false;
        }
      }]);

      return _class;
    }(Clickable))();

    this._layout_clickable.setOnClick(function () {
      var target = _this6._layout_clickable._tmp_hovered;
      var val = _this6._layout[target];
      var realsize = new Pos(_this6.parent.width() * val.size.x / 100.0, _this6.parent.height() * val.size.y / 100.0);

      var realtopleft = _this6.parent.topleft.plus(val.topleft.times(new Pos(_this6.parent.width() / 100.0, _this6.parent.height() / 100.0)));

      var pos = _this6._layout_clickable._mouse_pos; // check if the "information-button" is clicked

      {
        var dv = _this6.getCurrentDataView(target);

        if (dv.information_button_pos != null) {
          if (dv.information_button_pos.x < pos.x && dv.information_button_pos.y < pos.y) {
            if (dv.information_button_pos.x + dv.information_button_size.x > pos.x && dv.information_button_pos.y + dv.information_button_size.y > pos.y) {
              console.log("Information Button clicked!");
              dv.showOptimizationHints();
              return true;
            }
          }
        }
      }
      var left = realtopleft.x + realsize.x - 20;
      var right = realtopleft.x + realsize.x;
      var top = realtopleft.y;
      var bottom = realtopleft.y + 20;

      if (val.is_multiview) {
        if (left < pos.x && pos.x < right && top < pos.y && pos.y < bottom) {
          // Multiview switcher pressed
          val.multiview_selector = (val.multiview_selector + 1) % val.dataviews.length;
          return true;
        } else {}
      }

      return false; // Pass the event to the next handler
    });

    this._layout_clickable.setOnMouseMove(function (pos) {
      // We want to know the position and which element is hovered so 
      // that we can forward events
      var target = _this6._layout_clickable._tmp_hovered;

      if (target) {
        var val = _this6.getCurrentDataView(target);

        val.mouseInside(pos);
        return true;
      } else {}
    });

    this._layout_clickable.setOnDoubleClick(function () {
      var target = _this6._layout_clickable._tmp_hovered;
      var val = _this6._layout[target];
      var realsize = new Pos(_this6.parent.width() * val.size.x / 100.0, _this6.parent.height() * val.size.y / 100.0);

      var realtopleft = _this6.parent.topleft.plus(val.topleft.times(new Pos(_this6.parent.width() / 100.0, _this6.parent.height() / 100.0)));

      var pos = _this6._layout_clickable._mouse_pos;
      var left = realtopleft.x + realsize.x - 20;
      var right = realtopleft.x + realsize.x;
      var top = realtopleft.y;
      var bottom = realtopleft.y + 20;

      if (val.is_multiview) {
        if (left < pos.x && pos.x < right && top < pos.y && pos.y < bottom) {
          return false;
        } else {
          // Trigger the options for the underlying dataview
          var dv = val.dataviews[val.multiview_selector];
          dv.openSettingsWindow();
          return true;
        }
      } else {
        // Trigger the options for the underlying dataview
        var _dv = val.dataview;

        _dv.openSettingsWindow();

        return true;
      }

      return false; // Not reached, but leave here (in case the handling of above cases changes)
    });

    subwindow.addVIPChild(this._layout_clickable);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Layout, [{
    key: "setEventHandlers",
    value: function setEventHandlers(click, enter, leave) {
      this._layout_clickable.setOnClick(click);

      this._layout_clickable.setOnEnterHover(enter);

      this._layout_clickable.setOnLeaveHover(leave);
    }
  }, {
    key: "getCurrentDataView",
    value: function getCurrentDataView(rect_name) {
      var val = this._layout[rect_name];

      if (val.is_multiview) {
        return val.dataviews[val.multiview_selector];
      } else {
        return val.dataview;
      }
    }
  }, {
    key: "getLayoutObject",
    value: function getLayoutObject() {
      var ret = {};

      for (var _i3 = 0, _Object$keys2 = Object.keys(this._layout); _i3 < _Object$keys2.length; _i3++) {
        var k = _Object$keys2[_i3];
        if (k == 'dataview') continue;
        if (k == 'dataviews') continue;
        ret[k] = this._layout[k];
      }

      return this._layout;
    } // Sizes all must be in percentages.

  }, {
    key: "setRect",
    value: function setRect(name, topleft, size, dataview) {
      this._layout[name] = {};
      this._layout[name].topleft = topleft;
      this._layout[name].size = size;
      this._layout[name].dataview = dataview;
    }
  }, {
    key: "setMultiviewRect",
    value: function setMultiviewRect(name, topleft, size, dataview_array) {
      var _this7 = this;

      if (dataview_array.length < 1) {
        alert("You cannot set a multiview with no contents!");
        return;
      }

      this._layout[name] = {};
      this._layout[name].topleft = topleft;
      this._layout[name].size = size;
      this._layout[name].dataviews = dataview_array;
      this._layout[name].is_multiview = true;
      this._layout[name].multiview_selector = dataview_array.length - 1; // Set enable functions so that charts that are hidden behind others 
      // don't get the events propagated

      var _loop = function _loop(i) {
        var x = dataview_array[i];

        if (x instanceof RU_DataViewBarGraph) {
          x.dvbg_clickable.setEnableFunc(function () {
            return _this7._layout[name].multiview_selector == i;
          });
        }
      };

      for (var i = 0; i < dataview_array.length; ++i) {
        _loop(i);
      }
    }
  }, {
    key: "setDataBinding",
    value: function setDataBinding(db) {
      this.databinding = db;
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var databinding = this.databinding;

      for (var _i4 = 0, _Object$keys3 = Object.keys(this._layout); _i4 < _Object$keys3.length; _i4++) {
        var x = _Object$keys3[_i4];
        var val = this._layout[x];
        var realsize = new Pos(this.parent.width() * val.size.x / 100.0, this.parent.height() * val.size.y / 100.0);
        var realtopleft = this.parent.topleft.plus(val.topleft.times(new Pos(this.parent.width() / 100.0, this.parent.height() / 100.0)));
        var dv = null;

        if (val.is_multiview) {
          dv = val.dataviews[val.multiview_selector];
        } else {
          dv = val.dataview;
        }

        if (dv == undefined) {
          console.log("Undefined dv for key " + x);
        }

        dv.setRect(realtopleft, realsize);

        if (val.is_multiview) {
          dv.draw(ctx, databinding[x][val.multiview_selector], this.parent._sizetrans / 100.);
          ctx.save();
          ctx.beginPath();
          ctx.fillStyle = "lime";
          ctx.rect(realtopleft.x + realsize.x - 20, realtopleft.y, 20, 20);
          ctx.fill();
          ctx.restore();
        } else {
          dv.draw(ctx, databinding[x], this.parent._sizetrans / 100.);
        }
      }
    }
  }]);

  return Layout;
}(); // Class holding data


var DataBlock = /*#__PURE__*/function () {
  function DataBlock(data, type) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DataBlock);

    this.setData(data, type);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(DataBlock, [{
    key: "setData",
    value: function setData(data, type) {
      this.data = data;
      this.datatype = type;
      return this;
    }
  }]);

  return DataBlock;
}(); // Class providing an interface to plug some graphs into.


var RU_DataView = /*#__PURE__*/function () {
  function RU_DataView() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataView);

    this.topleft = null;
    this.size = null;

    this.analyze = function (x) {
      return x;
    };

    this.color_scaling_func = function (x) {
      return x;
    };

    this.update_data = true;
    /* String that contains an html markup with general information about 
       the implications of this dataview (i.e. how to interpret the 
       displayed results) */

    this.information_html_string = "";
    this.information_overlay_age = 0;
    this.information_overlay_alpha = 0.0;
    this.information_overlay_timer = null;
    this.information_button_pos = null;
    this.information_button_size = null;
    this.optimization_hint_path = "error";
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataView, [{
    key: "setInformationFilePath",
    value: function setInformationFilePath(path) {
      this.optimization_hint_path = path;
      return this;
    }
  }, {
    key: "showOptimizationHints",
    value: function showOptimizationHints() {
      console.log("Opening " + this.optimization_hint_path);
      var win = window.open(this.optimization_hint_path, "", "width=800,height=600");
      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("win valid", win != null);
      return this;
    }
  }, {
    key: "mouseInside",
    value: function mouseInside(pos) {
      var _this8 = this;

      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("pos valid", pos);
      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("topleft valid", this.topleft);
      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("size valid", this.size);
      var diff = pos.minus(this.topleft.plus(new Pos(this.size.x / 2, 0)));
      var dist = diff.dist();

      if (dist <= 30) {
        this.information_overlay_age = -1;
        window.clearTimeout(this.information_overlay_timer);
        this.information_overlay_timer = window.setTimeout(function () {
          return _this8.information_overlay_age = 0;
        }, 3000);
      } else {
        this.information_overlay_age = 0;
      }

      if (dist <= 10) {
        this.information_overlay_alpha = 1.0;
      } else {
        // Scale squared
        var d = dist / 10;
        this.information_overlay_alpha = 1.0 / d;
      }
    } // Draw an overlay (containing the info-button at least). This function 
    // should be called by all subclasses after drawing.

  }, {
    key: "drawOverlay",
    value: function drawOverlay(ctx) {
      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;

      if (this.information_overlay_age >= 0) {
        ++this.information_overlay_age;

        if (this.information_overlay_age > 1) {
          this.information_overlay_alpha -= 0.05;

          if (this.information_overlay_alpha < 0) {
            this.information_overlay_alpha = 0;
          }

          this.information_overlay_age = 0;
        }
      }

      var alpha = 0.9; // Transparency value

      alpha *= this.information_overlay_alpha;
      var subalpha = 1.0;
      subalpha *= this.information_overlay_alpha;
      var information_sign = "\uD83D\uDEC8"; // This is the circled information icon.

      var base_fontsize = 18;
      ctx.save();
      ctx.beginPath(); // Setup font

      ctx.textAlign = "center";
      ctx.textBaseline = "top";
      ctx.font = Math.round(base_fontsize * scale) + "px sans-serif"; // Get the textwidth

      var textwidth = ctx.measureText(information_sign).width;
      var textheight = textwidth; // Draw background first

      ctx.fillStyle = "rgba(128, 128, 128, " + alpha + ")";
      ctx.strokeStyle = "rgba(128, 128, 128, " + subalpha + ")";
      this.information_button_pos = new Pos(this.topleft.x + (this.size.x - textwidth) * scale / 2 - textwidth, this.topleft.y);
      this.information_button_size = new Pos(textwidth * 3, textheight * 1.1);
      ctx.rect(this.information_button_pos.x, this.information_button_pos.y, this.information_button_size.x, this.information_button_size.y);
      ctx.fill();
      ctx.stroke();
      ctx.beginPath();
      alpha = 3.0 * this.information_overlay_alpha;
      ctx.fillStyle = "rgba(0, 0, 255, " + alpha + ")";
      var center_x = this.topleft.x + this.size.x * scale / 2;
      ctx.fillText(information_sign, center_x, this.topleft.y);
      ctx.restore();
    } // Gets the settings (data analysis function and subclass-specific settings)

  }, {
    key: "getSettingsDict",
    value: function getSettingsDict() {
      var ret = {
        "analysis_func": {
          type: "code",
          value: this.analyze.toString(),
          description: "#TODO"
        }
      };
      return ret;
    }
  }, {
    key: "setSettingsDict",
    value: function setSettingsDict(dict) {
      var func = eval(dict['analysis_func'].value.toString());
      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("Object type function", func instanceof Function);
      this.setDataAnalysisFunction(func);
      this.update_data = true; // Trigger an update request
    }
  }, {
    key: "setInformationHTMLString",
    value: function setInformationHTMLString(str) {
      this.information_html_string = str;
      return this;
    }
  }, {
    key: "getInformationHTMLString",
    value: function getInformationHTMLString() {
      return this.information_html_string;
    }
  }, {
    key: "openSettingsWindow",
    value: function openSettingsWindow() {
      var _this9 = this;

      var sw = new _windowing_js__WEBPACK_IMPORTED_MODULE_10__.DiodeWindow(window); // Set the callback function for user-defined data

      sw.setCallback(function (x) {
        if (x.type == "ClientOpened") {
          sw.reply(x.source, x.origin, {
            type: "settings-data",
            data: _this9.getSettingsDict()
          });
        } else if (x.type == "save-settings") {
          _this9.setSettingsDict(x.data);

          console.log("Applied new settings");
        } else {
          console.log("Undefined operation reached! " + JSON.stringify(x));
        }
      });
      var cw = sw.open("DataViewSettings.html", "_blank");

      if (!cw) {
        alert("Failed to open child window...");
      }
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      // Abstract
      return this;
    }
  }, {
    key: "draw",
    value: function draw(ctx, datablock, scale) {
      console.log("Abstract function called");
    }
  }, {
    key: "getSendableObject",
    value: function getSendableObject() {
      return this;
    }
  }, {
    key: "fromSendableObject",
    value: function fromSendableObject(object) {
      console.log("Abstract function fromSendableObject() called");
      return this;
    }
  }, {
    key: "setDataAnalysisFunction",
    value: function setDataAnalysisFunction(func) {
      this.analyze = func;
      return this;
    }
  }, {
    key: "setRect",
    value: function setRect(topleft, size) {
      this.topleft = topleft;
      this.size = size;
      return this;
    }
  }, {
    key: "drawRect",
    value: function drawRect(ctx) {
      ctx.beginPath();
      ctx.rect(this.topleft.x, this.topleft.y, this.size.x, this.size.y);
      ctx.stroke();
    }
  }]);

  return RU_DataView;
}(); // Class to draw text


var RU_DataViewText = /*#__PURE__*/function (_RU_DataView) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RU_DataViewText, _RU_DataView);

  var _super4 = _createSuper(RU_DataViewText);

  function RU_DataViewText() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataViewText);

    return _super4.call(this);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataViewText, [{
    key: "fromSendableObject",
    value: function fromSendableObject(obj) {
      // We don't need to do anything here because the data is in the datablock...
      return this;
    }
  }, {
    key: "draw",
    value: function draw(ctx, datablock, scale) {
      if (scale == 0.) return;
      ctx.save();
      ctx.beginPath();
      ctx.font = Math.round(scale * datablock.data.fontsize).toString() + "px sans-serif";
      ctx.fillStyle = datablock.data.color;
      ctx.textAlign = datablock.data.align;
      var textheight = ctx.measureText('M').width;
      ctx.fillText(datablock.data.text, this.topleft.x + this.size.x / 2, this.topleft.y + textheight);
      ctx.restore();
    }
  }]);

  return RU_DataViewText;
}(RU_DataView); // Class to bar graphs (using chart.js)


var RU_DataViewBarGraph = /*#__PURE__*/function (_RU_DataView2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RU_DataViewBarGraph, _RU_DataView2);

  var _super5 = _createSuper(RU_DataViewBarGraph);

  function RU_DataViewBarGraph() {
    var _this10;

    var optstruct = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataViewBarGraph);

    _this10 = _super5.call(this);
    var typevar = "bar";
    var xAxisVar = undefined;
    var yAxisVar = undefined;
    _this10.dvbg_chart_data = null;

    if (optstruct != null) {
      if (optstruct.type != undefined) {
        typevar = optstruct.type;
      }

      if (optstruct.xAxes != undefined) {
        xAxisVar = optstruct.xAxes;
      }

      if (optstruct.yAxes != undefined) {
        yAxisVar = optstruct.yAxes;
      }
    } // We create a new canvas just for the chart (mainly to avoid 
    // potential trouble with different update handlers)


    _this10.dvbg_canvas_scaler = document.createElement("div");
    _this10.dvbg_canvas = document.createElement("canvas");
    _this10.dvbg_ctx = _this10.dvbg_canvas.getContext("2d");

    _this10.dvbg_canvas_scaler.appendChild(_this10.dvbg_canvas);

    document.body.appendChild(_this10.dvbg_canvas_scaler);
    var chartsettings = {
      type: typevar,
      data: _this10.analyze(null),
      options: {
        responsive: true,
        title: {
          display: true,
          text: "Chart test..."
        },
        tooltips: {
          mode: 'index',
          intersect: true
        },
        scales: {}
      }
    };

    if (xAxisVar != undefined) {
      chartsettings.options.scales.xAxes = xAxisVar;
    }

    if (yAxisVar != undefined) {
      chartsettings.options.scales.yAxes = yAxisVar;
    }

    _this10.dvbg_chart = new Chart(_this10.dvbg_ctx, chartsettings);
    _this10.dvbg_canvas_scaler.style.visibility = "hidden";
    _this10.dvbg_canvas_scaler.style.position = "fixed"; // A Clickable instance, for forwarding events.

    var parent_this = (0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this10);

    _this10.dvbg_clickable = new ( /*#__PURE__*/function (_Clickable4) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(_class2, _Clickable4);

      var _super6 = _createSuper(_class2);

      function _class2() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, _class2);

        return _super6.call(this);
      }

      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(_class2, [{
        key: "is_inside",
        value: function is_inside(pos) {
          if (parent_this.topleft == null) return false;
          return parent_this.topleft.x < pos.x && pos.x < parent_this.topleft.x + parent_this.size.x && parent_this.topleft.y < pos.y && pos.y < parent_this.topleft.y + parent_this.size.y;
        }
      }, {
        key: "onUpdateMove",
        value: function onUpdateMove(pos) {
          if (!this.enable_func()) return false;
          if (!this.is_inside(pos)) return false; // We have to translate the event to the target.

          var rect = parent_this.dvbg_canvas.getBoundingClientRect();
          var event = new MouseEvent("mousemove", {
            offsetX: pos.x,
            offsetY: pos.y,
            clientX: rect.left + pos.x - parent_this.topleft.x,
            clientY: rect.top + pos.y - parent_this.topleft.y
          }); // Now pass to other canvas

          parent_this.dvbg_canvas.dispatchEvent(event);
        }
      }, {
        key: "onUpdateClick",
        value: function onUpdateClick(pos) {
          if (!this.enable_func()) return false;
          if (!this.is_inside(pos)) return false; // We have to translate the event to the target.

          var rect = parent_this.dvbg_canvas.getBoundingClientRect();
          var event = new MouseEvent("click", {
            offsetX: pos.x,
            offsetY: pos.y,
            clientX: rect.left + pos.x - parent_this.topleft.x,
            clientY: rect.top + pos.y - parent_this.topleft.y
          }); // Now pass to other canvas

          parent_this.dvbg_canvas.dispatchEvent(event);
        }
      }]);

      return _class2;
    }(Clickable))();
    return _this10;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataViewBarGraph, [{
    key: "getSettingsDict",
    value: function getSettingsDict() {
      var basedict = (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(RU_DataViewBarGraph.prototype), "getSettingsDict", this).call(this); // Collect the information


      var xAxes = this.dvbg_chart.options.scales.xAxes;
      var yAxes = this.dvbg_chart.options.scales.yAxes;
      var display_xAxes = xAxes.some(function (x) {
        return x == undefined || x.display;
      });
      var display_yAxes = yAxes.some(function (x) {
        return x == undefined || x.display;
      });
      var display_legend = this.dvbg_chart.options.legend.display; // Now we can append to the basedict

      basedict['graph_general_options'] = {
        type: "group",
        // Specify subgroup
        value: {
          // new subgroup of all graph options
          "display_horizonal_axis": {
            type: "bool",
            value: display_xAxes,
            description: "Display the horizontal axes"
          },
          "display_vertical_axis": {
            type: "bool",
            value: display_yAxes,
            description: "Display the vertical axes"
          },
          "display_legend": {
            type: "bool",
            value: display_legend,
            description: "Display the legend"
          }
        },
        description: "General graph display options"
      };
      return basedict;
    }
  }, {
    key: "setSettingsDict",
    value: function setSettingsDict(dict) {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(RU_DataViewBarGraph.prototype), "setSettingsDict", this).call(this, dict); // Get the desired settings


      var general_graph_options = dict['graph_general_options'].value;
      var dha = general_graph_options['display_horizonal_axis'].value;
      var dva = general_graph_options['display_vertical_axis'].value;
      var dl = general_graph_options['display_legend'].value; // Apply the settings

      this.dvbg_chart.options.scales.xAxes.forEach(function (x) {
        return x.display = dha;
      });
      this.dvbg_chart.options.scales.yAxes.forEach(function (x) {
        return x.display = dva;
      });
      this.dvbg_chart.options.legend.display = dl;
      this.dvbg_chart.update();
    }
  }, {
    key: "getSendableObject",
    value: function getSendableObject() {
      var ret = {};
      ret.chartsettings = this.dvbg_chart.options;
      ret.analyze = this.analyze.toString();
      return ret;
    }
  }, {
    key: "fromSendableObject",
    value: function fromSendableObject(obj) {
      this.setDataAnalysisFunction(new Function(obj.analyze));
      return this;
    } // Provides an array of some pre-selected colors.

  }, {
    key: "linkMouse",
    value: function linkMouse(parent) {
      parent.addChild(this.dvbg_clickable);
      return this;
    }
  }, {
    key: "changeGraphOptions",
    value: function changeGraphOptions(func) {
      func(this.dvbg_chart);
      return this;
    }
  }, {
    key: "draw",
    value: function draw(ctx, datablock, scale) {
      if (scale == 0.) return;
      var update = this.prev_scale != scale;
      this.prev_scale = scale;
      this.dvbg_canvas_scaler.style.height = Math.max(this.size.y * scale, 1) + "px";
      this.dvbg_canvas_scaler.style.width = Math.max(this.size.x * scale, 1) + "px";

      if (this.update_data) {
        this.dvbg_chart_data = this.analyze(datablock);
        var datacpy = JSON.parse(JSON.stringify(this.dvbg_chart_data));
        this.dvbg_chart.data = datacpy;
        this.update_data = false;
        this.dvbg_chart.update();
      }

      if (datablock == this.dvbg_cached_data) {// no update needed
      } else {
        this.dvbg_cached_data = datablock;
        this.dvbg_chart.update();
      }

      if (update) {
        // Force refresh
        this.dvbg_chart.resize();
      }

      ctx.save();
      ctx.beginPath(); // Blit this onto our canvas

      ctx.drawImage(this.dvbg_canvas, this.topleft.x, this.topleft.y, this.size.x, this.size.y);
      ctx.restore();
    }
  }], [{
    key: "colorList",
    value: function colorList() {
      var ret = new Array(); //ret.push("red");

      ret.push("rgba(255, 0, 0, 0.7)"); //ret.push("green");

      ret.push("rgba(0, 128, 0, 0.7)"); //ret.push("blue");

      ret.push("rgba(0, 0, 255, 0.7)"); //ret.push("#E8ADAA"); // rose

      ret.push("rgba(232, 173, 170, 0.7)"); //ret.push("cyan");

      ret.push("rgba(0, 255, 255, 0.7)"); //ret.push("black");

      ret.push("rgba(0, 0, 0, 0.7)"); //ret.push("aqua");

      ret.push("rgba(16, 255, 255, 0.7)"); //ret.push("lime");

      ret.push("rgba(0, 255, 0, 0.7)"); //ret.push("fuchsia");

      ret.push("rgba(255, 0, 255, 0.7)"); //ret.push("navy");

      ret.push("rgba(0, 0, 128, 0.7)"); //ret.push("purple");

      ret.push("rgba(128, 0, 128, 0.7)"); //ret.push("gray");

      ret.push("rgba(128, 128, 128, 0.7)");
      return ret;
    }
  }]);

  return RU_DataViewBarGraph;
}(RU_DataView);

var RU_DataViewNumberBlock = /*#__PURE__*/function (_RU_DataView3) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RU_DataViewNumberBlock, _RU_DataView3);

  var _super7 = _createSuper(RU_DataViewNumberBlock);

  function RU_DataViewNumberBlock() {
    var _this11;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataViewNumberBlock);

    _this11 = _super7.call(this);
    _this11.opt = {
      display_title: true,
      text_align: "center",
      draw_bar: undefined,
      // Defines where to draw a bar. Options: "left", "right", "top", "bottom" or any combination thereof
      padding: undefined
    };
    _this11.dvnb_cached_data = undefined;
    return _this11;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataViewNumberBlock, [{
    key: "setTitle",
    value: function setTitle(title) {
      this.title = title;
      return this;
    }
  }, {
    key: "setOptions",
    value: function setOptions(opt) {
      this.opt = opt;
      return this;
    }
  }, {
    key: "setStringFormatter",
    value: function setStringFormatter(func) {
      this.stringformatter = func;
    }
  }, {
    key: "setColorScaling",
    value: function setColorScaling(func) {
      this.color_scaling_func = func;
      return this;
    }
  }, {
    key: "draw",
    value: function draw(ctx, datablock, scale) {
      if (this.update_data) {
        this.dvnb_cached_data = this.analyze(datablock);
        this.update_data = false;
      }

      if (scale == 0.) return; //Nothing to do if we are size 0

      ctx.save();
      ctx.beginPath();
      ctx.textAlign = "center";
      ctx.font = Math.round(16 * scale).toString() + "px sans-serif";
      var textheight = ctx.measureText('M').width; // Approximating text height by width of M (which should be about square)

      var x = this.topleft.x + this.size.x / 2;
      var y = this.topleft.y + textheight;

      if (this.opt.display_title) {
        ctx.fillText(this.title, x, y); // Set the title
      } // We'll only be interested in balance_max.


      var p = this.dvnb_cached_data;
      ctx.beginPath();
      ctx.textAlign = this.opt.text_align;
      ctx.font = "bold " + (50 * scale).toString() + "px sans-serif";
      ctx.fillStyle = RU_DataViewNumberBlock.percent2color(this.color_scaling_func(p));
      textheight = ctx.measureText('M').width;
      ctx.textBaseline = "middle";
      var left_pad = 0;

      if (this.opt.padding) {
        if (this.opt.padding.left) {
          left_pad = this.opt.padding.left;
        }
      }

      if (this.opt.text_align == "center") ctx.fillText(String(p) + "%", x + left_pad, this.topleft.y + this.size.y / 2);else if (this.opt.text_align == "left") ctx.fillText(String(p) + "%", this.topleft.x + left_pad, this.topleft.y + this.size.y / 2);

      if (this.opt.draw_bar) {
        var _iterator8 = _createForOfIteratorHelper(this.opt.draw_bar),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            x = _step8.value;

            if (x == "left") {
              ctx.beginPath();
              ctx.strokeStyle = "black";
              ctx.lineWidth = 3;
              ctx.moveTo(this.topleft.x, this.topleft.y);
              ctx.lineTo(this.topleft.x, this.topleft.y + this.size.y * scale);
              ctx.stroke();
            } else {
              console.log("#TODO: Implement this other DataViewNumberBlock bar: " + x);
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      }

      this.drawOverlay(ctx, scale);
      ctx.restore();
    }
  }], [{
    key: "percent2color",
    value: function percent2color(percent) {
      var step = 255 / 100.;
      var val = Math.floor(step * percent) * 2;
      var ret = 0;

      if (percent <= 50) {
        ret = 0x0000ff00 + 0x00010000 * val;
      } else {
        ret = 0x00ff0000 + 0x00000100 * Math.round(255.0 - val);
      }

      return '#' + ret.toString(16).padStart(6, '0');
    }
  }]);

  return RU_DataViewNumberBlock;
}(RU_DataView); // Class to suggest actions based on input values


var RU_DataViewSuggestedActionBlock = /*#__PURE__*/function (_RU_DataView4) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RU_DataViewSuggestedActionBlock, _RU_DataView4);

  var _super8 = _createSuper(RU_DataViewSuggestedActionBlock);

  function RU_DataViewSuggestedActionBlock() {
    var _this12;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataViewSuggestedActionBlock);

    _this12 = _super8.call(this);
    _this12.opt = {};

    var parent_this = (0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this12);

    _this12.dvsa_clickable = new ( /*#__PURE__*/function (_Clickable5) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(_class3, _Clickable5);

      var _super9 = _createSuper(_class3);

      function _class3() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, _class3);

        return _super9.call(this);
      }

      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(_class3, [{
        key: "is_inside",
        value: function is_inside(pos) {
          if (parent_this.topleft == null) return false;
          return parent_this.topleft.x < pos.x && pos.x < parent_this.topleft.x + parent_this.size.x && parent_this.topleft.y < pos.y && pos.y < parent_this.topleft.y + parent_this.size.y;
        }
      }, {
        key: "getButtonIndex",
        value: function getButtonIndex(pos) {
          // Wrapper to look up the index
          var tl_x = parent_this.topleft.x;
          var tl_y = parent_this.topleft.y;
          var size_x = parent_this.size.x;
          var size_y = parent_this.size.y;
          var hp = parent_this.heightpadding;
          var local_pos = {
            x: pos.x - tl_x,
            y: pos.y - tl_y
          };
          if (local_pos.x < 0 || local_pos.x > size_x) return -1;
          if (local_pos.y < 0 || local_pos.y > size_y) return -1; // We can just divide through ellipseheight (approximated by a rect) + heightpadding

          var eachheight = parent_this.textheight + parent_this.heightpadding;
          var index = Math.floor(local_pos.y / eachheight);
          return index;
        }
      }, {
        key: "onUpdateMove",
        value: function onUpdateMove(pos) {
          if (!this.enable_func()) return false;

          if (!this.is_inside(pos)) {
            parent_this.dvsa_button_hovered = -1;
            return false;
          }

          var index = this.getButtonIndex(pos); // Pass to parent

          parent_this.buttonHovered(index); // No children here

          return true;
        }
      }, {
        key: "onUpdateClick",
        value: function onUpdateClick(pos) {
          if (!this.enable_func()) return false;
          if (!this.is_inside(pos)) return false;
          return true;
        }
      }]);

      return _class3;
    }(Clickable))();
    _this12.hints = {}; // Dict of condition => hint text

    _this12.dvsab_cached_data = [];
    _this12.heightpadding = 20; //this.analyze() expected return value:
    //list of condition strings that evaluated to 'true' (those will be displayed)

    return _this12;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataViewSuggestedActionBlock, [{
    key: "buttonHovered",
    value: function buttonHovered(index) {
      this.dvsa_button_hovered = index;
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      this.title = title;
      return this;
    }
  }, {
    key: "setHint",
    value: function setHint(cond, text) {
      this.hints[cond] = text;
      return this;
    }
  }, {
    key: "setOptions",
    value: function setOptions(opt) {
      this.opt = opt;
      return this;
    }
  }, {
    key: "setStringFormatter",
    value: function setStringFormatter(func) {
      this.stringformatter = func;
    }
  }, {
    key: "linkMouse",
    value: function linkMouse(parent) {
      parent.addChild(this.dvsa_clickable);
      return this;
    }
  }, {
    key: "draw",
    value: function draw(ctx, datablock, scale) {
      if (this.update_data) {
        this.dvsab_cached_data = this.analyze(datablock);
        _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("Data evaluated to undefined", this.dvsab_cached_data != undefined);
        this.update_data = false;
      }

      if (scale == 0.) return; //Nothing to do if we are size 0

      ctx.save();
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.strokeStyle = "black";
      ctx.lineWidth = 3;
      ctx.font = Math.round(12 * scale).toString() + "px sans-serif";
      var textheight = ctx.measureText("M").width; // Approximate height by width

      this.textheight = textheight;
      var xpos = this.topleft.x + this.size.x / 2.0;
      var ypos = this.topleft.y + textheight;
      var i = 0;

      var _iterator9 = _createForOfIteratorHelper(this.dvsab_cached_data),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var x = _step9.value;
          var display_text = this.hints[x];
          ctx.beginPath();

          if (i == this.dvsa_button_hovered) {
            ctx.strokeStyle = "red";
          } else {
            ctx.strokeStyle = "black";
          }

          ctx.fillText(display_text, xpos, ypos);
          ctx.ellipse(xpos, ypos, this.size.x / 2.0, (textheight + this.heightpadding / 2.0) / 2.0, 0.0, 0.0, 2 * Math.PI);
          ctx.stroke();
          ypos += (textheight + this.heightpadding) * scale;
          ++i;
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      this.drawOverlay(ctx, scale);
      ctx.restore();
    }
  }]);

  return RU_DataViewSuggestedActionBlock;
}(RU_DataView); // This is a text-based "form-layout"-style dataview


var RU_DataViewFormLayout = /*#__PURE__*/function (_RU_DataView5) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RU_DataViewFormLayout, _RU_DataView5);

  var _super10 = _createSuper(RU_DataViewFormLayout);

  function RU_DataViewFormLayout() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RU_DataViewFormLayout);

    return _super10.call(this);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RU_DataViewFormLayout, [{
    key: "draw",
    value: function draw(ctx, datablock_in, scale) {
      if (scale == 0.) return;
      ctx.save();
      ctx.beginPath(); // Transform to drawable

      var datablock = this.analyze(datablock_in);
      var fontsize = datablock.fontsize;
      var form_entries = datablock.rows;
      var padding = datablock.padding;
      var realfontsize = Math.round(fontsize * scale);
      ctx.font = realfontsize + "px sans-serif"; // Determine the max width of the left side

      var name_width = max_func(form_entries.map(function (x) {
        return x.title;
      }), function (x) {
        return ctx.measureText(x + ": ").width;
      });
      var text_height = ctx.measureText('M').width;
      var line_spacing = 10; // Determine the length of the right side (to allow for alignment)

      var val_width = max_func(form_entries.map(function (x) {
        return x.val;
      }), function (x) {
        return ctx.measureText(x).width;
      });
      var i = 0;

      var _iterator10 = _createForOfIteratorHelper(form_entries),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var line = _step10.value;
          var name = line.title;
          var val = line.value; // Draw title

          ctx.beginPath();
          ctx.textAlign = "left";
          ctx.fillText(name, this.topleft.x + padding.left * scale, this.topleft.y + padding.top + (i + 1) * (text_height + line_spacing)); // Align the text on the right side

          ctx.beginPath();
          ctx.textAlign = "right"; // Draw value

          ctx.fillText(val, this.topleft.x + (this.size.x - padding.right) * scale, this.topleft.y + padding.top + (i + 1) * (text_height + line_spacing));
          i++;
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      ctx.restore();
    }
  }]);

  return RU_DataViewFormLayout;
}(RU_DataView);

var Bracket = /*#__PURE__*/function (_Clickable6) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(Bracket, _Clickable6);

  var _super11 = _createSuper(Bracket);

  function Bracket(ctx) {
    var _this13;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Bracket);

    _this13 = _super11.call(this);
    _this13.ctx = ctx;
    _this13.buttons = [];
    _this13.start = new Pos(0, 0);
    _this13.end = new Pos(0, 0);
    _this13.offset = 0;
    _this13.startoffset = 0;
    _this13.listeners = [];
    _this13.button_alpha = 1.;
    _this13.bracket_alpha = 1.;
    return _this13;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Bracket, [{
    key: "hide",
    value: function hide() {
      this.button_alpha = 0.;
      this.bracket_alpha = 0.;
    }
  }, {
    key: "show",
    value: function show() {
      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;
      this.button_alpha = opacity;
      this.bracket_alpha = opacity;
    }
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var _this14 = this;

      var canvas_draw_mgr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var canvas = this.ctx.canvas;

      var mouseXtrans = function mouseXtrans(x) {
        return x;
      };

      var mouseYtrans = function mouseYtrans(y) {
        return y;
      };

      if (window.get_zoom != undefined) {
        mouseXtrans = function mouseXtrans(x) {
          return x / window.get_zoom();
        };

        mouseYtrans = function mouseYtrans(y) {
          return y / window.get_zoom();
        };
      }

      if (canvas_draw_mgr != undefined) {
        mouseXtrans = function mouseXtrans(x) {
          return canvas_draw_mgr.mapPixelToCoordsX(x);
        };

        mouseYtrans = function mouseYtrans(y) {
          return canvas_draw_mgr.mapPixelToCoordsY(y);
        };
      }

      var mm_lis = function mm_lis(e) {
        _this14.onUpdateMove(new Pos(mouseXtrans(e.offsetX), mouseYtrans(e.offsetY)));
      };

      var c_lis = function c_lis(e) {
        _this14.onUpdateClick(new Pos(mouseXtrans(e.offsetX), mouseYtrans(e.offsetY)), e.button);
      };

      var dc_lis = function dc_lis(e) {
        _this14.onUpdateDoubleClick(new Pos(mouseXtrans(e.offsetX), mouseYtrans(e.offsetY)), e.button);
      }; // Add all event listeners to an array (this allows for easier un-setting)


      this.listeners.push(['mousemove', mm_lis]);
      this.listeners.push(['click', c_lis]);
      this.listeners.push(['dblclick', dc_lis]);
      var ctx = this.ctx;

      var _iterator11 = _createForOfIteratorHelper(this.listeners),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _ctx$canvas;

          var lis = _step11.value;

          (_ctx$canvas = ctx.canvas).addEventListener.apply(_ctx$canvas, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__.default)(lis));
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Bracket.prototype), "destroy", this).call(this);

      var _iterator12 = _createForOfIteratorHelper(this.listeners),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var _this$ctx$canvas;

          var lis = _step12.value;

          (_this$ctx$canvas = this.ctx.canvas).removeEventListener.apply(_this$ctx$canvas, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__.default)(lis));
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      this.buttons = null;
      this.start = null;
      this.end = null;
      this.ctx = null;
    }
  }, {
    key: "drawEx",
    value: function drawEx(start, end, offset, startoffset, animate, updatefunc) {
      this.start = start;
      this.end = end;
      this.offset = offset;
      this.startoffset = startoffset;
      this.animate = animate;
      this.updatefunc = updatefunc;
      this.draw();
    }
  }, {
    key: "is_inside_buttons",
    value: function is_inside_buttons(pos) {
      if (this.button_alpha == 0.) {
        // Hidden buttons should not be clickable
        return false;
      }

      var max_x = 0;
      var max_y = 0;

      var _iterator13 = _createForOfIteratorHelper(this.buttons),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var b = _step13.value;

          if (b == undefined) {
            console.log("Undefined button!");
          } else if (b.topleft == undefined) {
            console.log("Undefined topleft");
          }

          max_x = Math.max(b.topleft.x + b.size.x, max_x);
          max_y = Math.max(b.topleft.y + b.size.y, max_y);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }

      if (pos.inRect(this.start, new Pos(max_x, max_y))) {
        return true;
      }

      return false;
    }
  }, {
    key: "bracket_clicked",
    value: function bracket_clicked() {
      if (this.button_alpha == 0.0) {
        this.button_alpha = 1.0;
      } else {
        this.button_alpha = 0.0;
      }
    }
  }, {
    key: "is_inside_bracket",
    value: function is_inside_bracket(pos) {
      var tol = 5;

      if (pos.x < this.start.x + this.startoffset - tol || pos.x > this.start.x + this.offset + tol) {
        return false;
      }

      if (pos.y < this.start.y - tol || pos.y > this.end.y + tol) {
        console.log("outside y");
        return false;
      }

      return true;
    }
  }, {
    key: "is_inside",
    value: function is_inside(pos) {
      return this.is_inside_buttons(pos);
    }
  }, {
    key: "onUpdateClick",
    value: function onUpdateClick(pos, mb) {
      if (this.is_inside_bracket(pos, mb)) {
        this.bracket_clicked();
        return true;
      }

      if (this.button_alpha == 0.0) {
        // Buttons are hidden, don't process events on them
        return false;
      }

      return (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Bracket.prototype), "onUpdateClick", this).call(this, pos, mb);
    }
  }, {
    key: "onUpdateDoubleClick",
    value: function onUpdateDoubleClick(pos, mb) {
      if (this.is_inside_bracket(pos, mb)) {
        this.bracket_clicked();
        return true;
      }

      if (this.button_alpha == 0.0) {
        // Buttons are hidden, don't process events on them
        return false;
      }

      return (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Bracket.prototype), "onUpdateDoubleClick", this).call(this, pos, mb);
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this15 = this;

      var start = this.start;
      var end = this.end;
      var offset = this.offset;
      var startoffset = this.startoffset;
      var ctx = this.ctx;
      if (this.animate && this.updatefunc == null) ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      var button_offset = 20;
      ctx.save();
      ctx.beginPath();
      ctx.lineWidth = 5;
      ctx.strokeStyle = "rgba(0,0,255," + this.bracket_alpha.toString() + ")";
      ctx.moveTo(start.x + startoffset, start.y);
      ctx.lineTo(start.x + offset, start.y);
      ctx.stroke();
      ctx.lineTo(start.x + offset, end.y);
      ctx.stroke();
      ctx.lineTo(end.x + startoffset, end.y);
      ctx.stroke();
      ctx.restore();
      var oldalpha = ctx.globalAlpha;
      ctx.globalAlpha = this.button_alpha;

      if (this.button_alpha > 0.0) {
        // only draw if it is visible to humans.
        this.drawButtons(new Pos(start.x + offset + button_offset, start.y));
      }

      ctx.globalAlpha = oldalpha;

      if (this.animate) {
        var _this = this;

        window.requestAnimationFrame(function () {
          if (_this15.updatefunc == null) {
            _this.draw();
          } else {
            _this15.updatefunc();
          }
        });
      }
    }
  }, {
    key: "drawButtons",
    value: function drawButtons(startpos) {
      var xpos = startpos.x;
      var ypos = startpos.y;
      startpos = null;
      var size = 30;
      var b;
      var yoffset = 0;

      var _iterator14 = _createForOfIteratorHelper(this.buttons),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          b = _step14.value;
          var tl = new Pos(xpos, ypos);
          var tl_higher = new Pos(xpos, ypos + yoffset); // Slightly offset position to avoid collisions

          var tlsel = tl;

          if (b.button_subwindow_state == "open") {
            // Select the offset position (so that the buttons / windows don't overlap)
            yoffset -= size + 5;
          }

          tlsel = tl_higher;
          b.draw(tlsel, new Pos(size, size), this.ctx);
          xpos += size + 10;
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
    }
  }, {
    key: "addButton",
    value: function addButton(b) {
      this.buttons.push(b);
      this.addChild(b);
    }
  }]);

  return Bracket;
}(Clickable);

;
var _canvas_manager_counter = 0; // Class to manage drawing of all resources. This ensures that one object 
// does not overwrite another by mistake.

var CanvasDrawManager = /*#__PURE__*/function () {
  function CanvasDrawManager(ctx, ref_global_state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CanvasDrawManager);

    this.ctx = ctx;
    this.anim_id = null;
    this.drawables = [];
    this.ref_global_state = ref_global_state;
    this.indices = [];
    this.request_scale = false;
    this.scale_factor = {
      x: 1,
      y: 1
    };
    this.last_scale_factor = {
      x: 1,
      y: 1
    };
    this._destroying = false;
    this.scale_origin = {
      x: 0,
      y: 0
    };
    this.contention = 0;
    this._svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
    this.user_transform = this._svg.createSVGMatrix();
    this.addCtxTransformTracking();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(CanvasDrawManager, [{
    key: "svgPoint",
    value: function svgPoint(x, y) {
      var pt = this._svg.createSVGPoint();

      pt.x = x;
      pt.y = y;
      return pt;
    }
  }, {
    key: "applyUserTransform",
    value: function applyUserTransform() {
      var ut = this.user_transform;
      this.ctx.setTransform(ut.a, ut.b, ut.c, ut.d, ut.e, ut.f);
    }
  }, {
    key: "translation",
    get: function get() {
      return {
        x: this.user_transform.e,
        y: this.user_transform.f
      };
    }
  }, {
    key: "addCtxTransformTracking",
    value: function addCtxTransformTracking() {
      var _this16 = this;

      /* This function is a hack to provide the non-standardized functionality
      of getting the current transform from a RenderingContext.
      When (if) this is standardized, the standard should be used instead.
      This is made for "easy" transforms and does not support saving/restoring
      */
      var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
      this.ctx._custom_transform_matrix = svg.createSVGMatrix(); // Save/Restore is not supported.

      var checker = function checker() {
        console.assert(!isNaN(_this16.ctx._custom_transform_matrix.f));
      };

      var _ctx = this.ctx;
      var scale_func = _ctx.scale;

      _ctx.scale = function (sx, sy) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.scaleNonUniform(sx, sy);
        checker();
        return scale_func.call(_ctx, sx, sy);
      };

      var translate_func = _ctx.translate;

      _ctx.translate = function (sx, sy) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.translate(sx, sy);
        checker();
        return translate_func.call(_ctx, sx, sy);
      };

      var rotate_func = _ctx.rotate;

      _ctx.rotate = function (r) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.rotate(r * 180.0 / Math.PI);
        checker();
        return rotate_func.call(_ctx, r);
      };

      var transform_func = _ctx.scale;

      _ctx.transform = function (a, b, c, d, e, f) {
        var m2 = svg.createSVGMatrix();
        m2.a = a;
        m2.b = b;
        m2.c = c;
        m2.d = d;
        m2.e = e;
        m2.f = f;
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.multiply(m2);
        checker();
        return transform_func.call(_ctx, a, b, c, d, e, f);
      };

      var setTransform_func = _ctx.setTransform;

      _ctx.setTransform = function (a, b, c, d, e, f) {
        _ctx._custom_transform_matrix.a = a;
        _ctx._custom_transform_matrix.b = b;
        _ctx._custom_transform_matrix.c = c;
        _ctx._custom_transform_matrix.d = d;
        _ctx._custom_transform_matrix.e = e;
        _ctx._custom_transform_matrix.f = f;
        checker();
        return setTransform_func.call(_ctx, a, b, c, d, e, f);
      };

      _ctx.custom_inverseTransformMultiply = function (x, y) {
        var pt = svg.createSVGPoint();
        pt.x = x;
        pt.y = y;
        checker();
        return pt.matrixTransform(_ctx._custom_transform_matrix.inverse());
      };
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._destroying = true;
      this.clearDrawables();
    }
  }, {
    key: "addDrawable",
    value: function addDrawable(obj) {
      this.drawables.push(obj);
      this.indices.push({
        "c": CanvasDrawManager.counter(),
        "d": obj
      });
    }
  }, {
    key: "removeDrawable",
    value: function removeDrawable(drawable) {
      this.drawables = this.drawables.filter(function (x) {
        return x != drawable;
      });
    }
  }, {
    key: "clearDrawables",
    value: function clearDrawables() {
      var _iterator15 = _createForOfIteratorHelper(this.drawables),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var x = _step15.value;
          x.destroy();
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }

      this.drawables = [];
      this.indices = [];
    }
  }, {
    key: "scale",
    value: function scale(diff) {
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (this.request_scale || Math.abs(diff) < 0.0001 || this.contention > 0) {
        console.log("Blocking potential race");
        return;
      }

      this.contention++;
      this.request_scale = true;
      this.scale_origin.x = x;
      this.scale_origin.y = y;
      this.scale_factor.x += diff;
      this.scale_factor.y += diff;
      this.scale_factor.x = Math.max(0.001, this.scale_factor.x);
      this.scale_factor.y = Math.max(0.001, this.scale_factor.y);
      {
        var sv = diff < 0 ? 0.9 : 1.1;
        var pt = this.svgPoint(this.scale_origin.x, this.scale_origin.y).matrixTransform(this.user_transform.inverse());
        this.user_transform = this.user_transform.translate(pt.x, pt.y);
        this.user_transform = this.user_transform.scale(sv, sv, 1, 0, 0, 0);
        this.user_transform = this.user_transform.translate(-pt.x, -pt.y);
      }
      this.contention--;
    }
  }, {
    key: "translate",
    value: function translate(x, y) {
      this.user_transform = this.user_transform.translate(x / this.user_transform.a, y / this.user_transform.d);
    }
  }, {
    key: "mapPixelToCoordsX",
    value: function mapPixelToCoordsX(xpos) {
      return this.svgPoint(xpos, 0).matrixTransform(this.user_transform.inverse()).x;
    }
  }, {
    key: "mapPixelToCoordsY",
    value: function mapPixelToCoordsY(ypos) {
      return this.svgPoint(0, ypos).matrixTransform(this.user_transform.inverse()).y;
    }
  }, {
    key: "getScale",
    value: function getScale() {
      _datahelper_js__WEBPACK_IMPORTED_MODULE_9__.ObjectHelper.assert("Uniform scale", this.scale_factor.x == this.scale_factor.y);
      return this.noJitter(this.scale_factor.x); // We don't allow non-uniform scaling.
    }
  }, {
    key: "getLastScale",
    value: function getLastScale() {
      return this.noJitter(this.last_scale_factor.x); // We don't allow non-uniform scaling.
    }
  }, {
    key: "noJitter",
    value: function noJitter(x) {
      x = parseFloat(x.toFixed(3));
      x = Math.round(x * 100) / 100;
      return x;
    }
  }, {
    key: "draw",
    value: function draw() {
      if (this._destroying) {
        return;
      }

      if (this.contention > 0) return;
      this.contention += 1;
      var ctx = this.ctx; // Clear with default transform

      ctx.save();
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.restore();
      var mx = 0;
      var my = 0;

      if (this.request_scale && this.contention == 1) {
        mx = this.mapPixelToCoordsX(this.scale_origin.x);
        my = this.mapPixelToCoordsY(this.scale_origin.y); // Reset the translation

        this.applyUserTransform();
        this.request_scale = false;
      } else {
        mx = this.mapPixelToCoordsX(this.scale_origin.x);
        my = this.mapPixelToCoordsY(this.scale_origin.y);
      }

      this.applyUserTransform();
      this.ref_global_state.drawSDFG();

      var _iterator16 = _createForOfIteratorHelper(this.drawables),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var d = _step16.value;
          d.draw();
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      if (false) // Comment this line to show debug values at cursor position
        {}

      this.contention -= 1;
    }
  }, {
    key: "draw_async",
    value: function draw_async() {
      var _this = this;

      this.anim_id = window.requestAnimationFrame(function () {
        return _this.draw();
      });
    }
  }], [{
    key: "counter",
    value: function counter() {
      return _canvas_manager_counter++;
    }
  }]);

  return CanvasDrawManager;
}();



/***/ }),

/***/ "./renderer_dir/windowing.js":
/*!***********************************!*\
  !*** ./renderer_dir/windowing.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DiodeWindow": () => (/* binding */ DiodeWindow),
/* harmony export */   "ClientSide": () => (/* binding */ ClientSide)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/construct */ "./node_modules/@babel/runtime/helpers/esm/construct.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _datahelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./datahelper.js */ "./renderer_dir/datahelper.js");





function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
 // Contains resources used to provide a "native" multi-window interface
// Class to create the window on the parent side

var DiodeWindow = /*#__PURE__*/function () {
  function DiodeWindow(parent) {
    var _this = this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DiodeWindow);

    this.parent = parent;
    this.window = null;
    this.message_userdef = null;

    this._msg_func = function (x) {
      return _this.message(x);
    };

    this.parent.addEventListener('message', this._msg_func);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DiodeWindow, [{
    key: "open",
    value: function open() {
      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var features = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var replace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      this.window = parent.open(url, target, features + "width=800,height=600", replace);
      if (!this.window) return this.window; // some error occurred

      return this.window;
    }
  }, {
    key: "setCallback",
    value: function setCallback(x) {
      this.message_userdef = x;
    }
  }, {
    key: "passMessage",
    value: function passMessage(msg_obj) {
      return this.window.postMessage(msg_obj, "*");
    }
  }, {
    key: "reply",
    value: function reply(win, origin, msg_obj) {
      if (win != this.window && this.window != null) {
        console.log("We do not talk to strangers");
      }

      return this.passMessage(msg_obj);
    }
  }, {
    key: "setSenderData",
    value: function setSenderData(data) {
      this.window_data = data;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.parent.removeEventListener('message', this._msg_func);
    }
  }, {
    key: "serialize_dataview",
    value: function serialize_dataview(dv) {
      return dv.getSendableObject();
    }
  }, {
    key: "serialize_array",
    value: function serialize_array(arr) {
      var ret = [];

      var _iterator = _createForOfIteratorHelper(arr),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          ret.push(this.serialize(x));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return ret;
    }
  }, {
    key: "serialize_function",
    value: function serialize_function(func) {
      return func.toString();
    }
  }, {
    key: "serialize_default",
    value: function serialize_default(def) {
      if (def == undefined) {
        return "";
      }

      var ret = {};
      var keys = _datahelper_js__WEBPACK_IMPORTED_MODULE_4__.ObjectHelper.listKeys(def);

      var _iterator2 = _createForOfIteratorHelper(keys),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          var val = def[x];
          ret[x] = this.serialize(val);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return ret;
    }
  }, {
    key: "serialize",
    value: function serialize(obj) {
      if (obj instanceof RU_DataView) {
        return this.serialize_dataview(obj);
      } else if (obj instanceof Array) {
        return this.serialize_array(obj);
      } else if (obj instanceof Object) return this.serialize_default(obj);else if (typeof obj == "function") return this.serialize_function(obj);else return obj;
    }
  }, {
    key: "message",
    value: function message(event) {
      var _data = event.data;

      if (event.source != this.window) {
        return;
      }

      if (_data.type == "ClientOpened") {
        // Respond with the data
        if (this.message_userdef == null) {
          var answer = {
            type: "DisplayData",
            data: this.window_data
          };
          this.reply(event.source, event.origin, answer);
        } else {
          // Pass to custom function.
          this.message_userdef(_data);
        }
      } else if (_data.type == "close") {
        console.log("Parent received close message");
        this.window.close();
        this.destroy();
      } else if (this.message_userdef != null) {
        // Custom callback method.
        this.message_userdef(_data);
      } else {
        console.log("Unknown type " + JSON.stringify(_data));
      }
    }
  }]);

  return DiodeWindow;
}(); // Class managing the client side


var ClientSide = /*#__PURE__*/function () {
  function ClientSide(thiswindow) {
    var _this2 = this;

    var userfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ClientSide);

    this.thiswindow = thiswindow;
    this.owner = thiswindow.opener;
    this.thiswindow.addEventListener('message', function (x) {
      return _this2.message(x);
    });
    this.thiswindow.addEventListener('onbeforeunload', function (x) {
      return _this2.destroy(x);
    });
    this.subwindow = null;
    this.message_userdef = userfunc;
    this.passMessage({
      type: "ClientOpened"
    });
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ClientSide, [{
    key: "destroy",
    value: function destroy(x) {
      x.preventDefault();
      x.returnValue = '';
      console.log("Destroying client window");
    }
  }, {
    key: "setCallback",
    value: function setCallback(x) {
      this.message_userdef = x;
    }
  }, {
    key: "passMessage",
    value: function passMessage(msg_obj) {
      return this.owner.postMessage(msg_obj, "*");
    }
  }, {
    key: "reply",
    value: function reply(win, origin, msg_obj) {
      if (win != this.owner) {
        return;
      }

      return this.passMessage(msg_obj);
    } // Reads the event coming from the parent window

  }, {
    key: "message",
    value: function message(event) {
      var data = event.data;

      if (data.type == "DisplayData") {
        var canvas = window.document.getElementById('subwindowcanvas');

        if (!canvas) {
          alert("Didn't find canvas!");
        }

        var ctx = canvas.getContext('2d');

        if (!ctx) {
          alert("Didn't find context!");
        }

        var content = data.data;
        var classname = content.className;

        if (!classname) {
          alert("Classname is not set!");
        }

        var dataparams = content.dataParams;
        var class_obj = null;
        var loaded_module = null;

        if (classname == "ParallelizationButton") {
          loaded_module = __webpack_require__.e(/*! import() */ "renderer_dir_parallelization_button_js").then(__webpack_require__.bind(__webpack_require__, /*! ./parallelization_button.js */ "./renderer_dir/parallelization_button.js")).then(function (mod) {
            class_obj = mod.ParallelizationButton;
          });
        } else if (classname == "MemoryButton") {
          loaded_module = __webpack_require__.e(/*! import() */ "renderer_dir_memory_button_js").then(__webpack_require__.bind(__webpack_require__, /*! ./memory_button.js */ "./renderer_dir/memory_button.js")).then(function (mod) {
            class_obj = mod.MemoryButton;
          });
        } else if (classname == "VectorizationButton") {
          loaded_module = __webpack_require__.e(/*! import() */ "renderer_dir_vectorization_button_js").then(__webpack_require__.bind(__webpack_require__, /*! ./vectorization_button.js */ "./renderer_dir/vectorization_button.js")).then(function (mod) {
            class_obj = mod.VectorizationButton;
          });
        } else if (classname == "MemoryOpButton") {
          loaded_module = __webpack_require__.e(/*! import() */ "renderer_dir_memop_button_js").then(__webpack_require__.bind(__webpack_require__, /*! ./memop_button.js */ "./renderer_dir/memop_button.js")).then(function (mod) {
            class_obj = mod.MemoryOpButton;
          });
        } else if (classname == "CacheOpButton") {
          loaded_module = __webpack_require__.e(/*! import() */ "renderer_dir_cache_button_js").then(__webpack_require__.bind(__webpack_require__, /*! ./cache_button.js */ "./renderer_dir/cache_button.js")).then(function (mod) {
            class_obj = mod.CacheOpButton;
          });
        } else {
          _datahelper_js__WEBPACK_IMPORTED_MODULE_4__.ObjectHelper.assert("Missing definition", false);
        }

        loaded_module.then(function (x) {
          var new_obj = (0,_babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_0__.default)(class_obj, [ctx].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(dataparams)));

          if (!new_obj) {
            alert("Failed to instantiate class " + classname);
          }

          var subwindow_width = new_obj.button_subwindow.targetwidth;
          var subwindow_height = new_obj.button_subwindow.targetheight;
          var subwindow_left = new_obj.topleft.x;
          var subwindow_top = new_obj.topleft.y;
          ctx.canvas.width = subwindow_width;
          ctx.canvas.height = subwindow_height; // The width is specified in outer-width. This code adjusts the differences accordingly.
          // magic +10 (px): Avoid scrollbars

          var diff_x = window.outerWidth - window.innerWidth + 10;
          var diff_y = window.outerHeight - window.innerHeight + 10;
          window.resizeTo(subwindow_width + diff_x, subwindow_height + diff_y);
          new_obj.button_subwindow_state = 'open'; // Open Sesame

          new_obj.is_locked_open = true;
          Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./renderer_util.js */ "./renderer_dir/renderer_util.js")).then(function (mod) {
            var b = new mod.Bracket(ctx);
            b.setupEventListeners();
            b.addButton(new_obj);
            b.drawEx(new mod.Pos(-20, 0), new mod.Pos(0, 0), 0, 0, true);
          });
        });
      } else if (this.message_userdef != null) {
        this.message_userdef(data);
      } else {
        console.log("Unknown event caught");
        _datahelper_js__WEBPACK_IMPORTED_MODULE_4__.ObjectHelper.logObject("message", data);
      }
    }
  }]);

  return ClientSide;
}();



/***/ }),

/***/ "./src/diode-ui/contexts/available_transformations.js":
/*!************************************************************!*\
  !*** ./src/diode-ui/contexts/available_transformations.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_AvailableTransformations": () => (/* binding */ DIODE_Context_AvailableTransformations)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/sdfg/json_serializer */ "./src/utils/sdfg/json_serializer.ts");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");








function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var $ = globalThis.$;
var DIODE_Context_AvailableTransformations = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DIODE_Context_AvailableTransformations, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_AvailableTransformations);

  function DIODE_Context_AvailableTransformations(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context_AvailableTransformations);

    _this = _super.call(this, diode, gl_container, state);
    _this._tree_view = null;
    _this._current_root = null; // Allow overflow

    var parent_element = _this.container.getElement();

    $(parent_element).css('overflow', 'auto');
    _this.operation_running = false;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_AvailableTransformations, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_AvailableTransformations.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this.on(this._project.eventString('-req-extend-optgraph'), function (msg) {
        var o = msg;

        if (typeof o == "string") {
          JSON.parse(msg);
        }

        var sel = o[_this2.getState()['for_sdfg']];

        if (sel === undefined) {
          return;
        }

        setTimeout(function () {
          return eh.emit(transthis._project.eventString('extend-optgraph'), 'ok');
        }, 1);

        _this2.create(sel);
      });
      this.on(this._project.eventString('-req-optpath'), function (msg) {
        var named = {};
        named[_this2.getState()['for_sdfg']] = [];
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('optpath'), named);
        }, 1);
      });
      var sname = this.getState()['for_sdfg'];
      this.on(this._project.eventString('-req-new-optgraph-' + sname), function (msg) {
        // In any case, inform the requester that the request will be treated
        var o = JSON.parse(msg);
        var sel = o.matching_opts;

        if (sel === undefined) {
          //eh.emit(transthis._project.eventString('new-optgraph-' + sname), 'not ok');
          return;
        }

        setTimeout(function () {
          return eh.emit(transthis._project.eventString('new-optgraph-' + sname), 'ok');
        }, 1);

        _this2.create(o);
      });
      this.on(this.project().eventString('-req-highlight-transformations-' + sname), function (msg) {
        _this2.getTransformations(msg).forEach(function (x) {
          return _this2.highlightTransformation(x);
        });
      });
      this.on(this.project().eventString('-req-get-transformations-' + sname), function (msg) {
        var transforms = _this2.getTransformations(msg);

        setTimeout(function () {
          return eh.emit(transthis._project.eventString('get-transformations-' + sname), transforms);
        }, 1);
      });
      this.on(this.project().eventString('-req-apply-transformation-' + sname), function (msg) {
        var children = _this2.getState()['optstruct'];

        for (var _i = 0, _Object$values = Object.values(children); _i < _Object$values.length; _i++) {
          var c = _Object$values[_i];

          var _iterator = _createForOfIteratorHelper(c),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var d = _step.value;
              if (d === undefined) continue;

              if (d.id_name == msg) {
                // Call directly.
                // (The click handler invokes the simple transformation)
                d.representative.dispatchEvent(new Event('click'));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      });
      this.on(this.project().eventString('-req-locate-transformation-' + sname), function (msg) {
        _this2.locateTransformation.apply(_this2, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(JSON.parse(msg)));
      });
      this.on(this.project().eventString('-req-apply-adv-transformation-' + sname), function (msg) {
        var x = JSON.parse(msg);

        _this2.applyTransformation.apply(_this2, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(x));
      });
      this.on(this.project().eventString('-req-append-history'), function (msg) {
        _this2.appendHistoryItem(msg.new_sdfg, msg.item_name);
      });
      this.on(this.project().eventString('-req-property-changed-' + this.getState().created), function (msg) {
        _this2.propertyChanged(msg.element, msg.name, msg.value);

        setTimeout(function () {
          return eh.emit(_this2.project().eventString("property-changed-" + _this2.getState().created), "ok");
        }, 1);
      });
    }
  }, {
    key: "getTransformations",
    value: function getTransformations(affecting) {
      var ret = [];
      var selstring = "s" + affecting.state_id + "_" + affecting.node_id;
      var children = this.getState()['optstruct'];

      for (var _i2 = 0, _Object$values2 = Object.values(children); _i2 < _Object$values2.length; _i2++) {
        var c = _Object$values2[_i2];

        var _iterator2 = _createForOfIteratorHelper(c),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var d = _step2.value;
            if (d === undefined) continue;
            var affects = d.affects;

            if (affects.includes(selstring)) {
              ret.push(d);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return ret;
    }
  }, {
    key: "highlightTransformation",
    value: function highlightTransformation(node) {
      var repr = node.representative;
      var s = repr.parentNode;

      while (s) {
        s.classList.remove("at_collapse");
        s = s.previousElementSibling;
      }

      $(repr).css('color', 'red');
      setTimeout(function (x) {
        $(repr).css('color', '');
      }, 5000);
    }
  }, {
    key: "propertyChanged",
    value: function propertyChanged(node, name, value) {
      return this.propertyChanged2(node, name, value);
    }
  }, {
    key: "propertyChanged2",
    value: function propertyChanged2(node, name, value) {
      node.element[name] = value;
    }
  }, {
    key: "renderProperties",
    value: function renderProperties(node, pos, apply_params) {
      /*
          node: The TreeNode for which to draw the properties.
      */
      var params = node.opt_params;
      var transthis = this;
      var reduced_node = {};

      reduced_node.data = function () {
        return node.opt_params;
      };

      this.diode.renderPropertiesInWindow(transthis, reduced_node, params, {
        type: "transformation",
        sdfg_name: this.getState()['for_sdfg'],
        opt_name: node.opt_name,
        pos: pos,
        apply_params: apply_params
      });
    }
  }, {
    key: "sendHighlightRequest",
    value: function sendHighlightRequest(idstring_list) {
      this._project.request(['sdfg-msg'], function (resp) {}, {
        params: JSON.stringify({
          type: 'highlight-elements',
          sdfg_name: this.getState()['for_sdfg'],
          elements: idstring_list
        }),
        timeout: 1000
      });
    }
  }, {
    key: "sendClearHighlightRequest",
    value: function sendClearHighlightRequest() {
      this._project.request(['sdfg-msg'], function (resp) {}, {
        params: JSON.stringify({
          sdfg_name: this.getState()['for_sdfg'],
          type: 'clear-highlights'
        }),
        timeout: 1000
      });
    }
  }, {
    key: "addNodes",
    value: function addNodes(og) {
      var _this3 = this;

      var full = {}; // Load the available data

      var _iterator3 = _createForOfIteratorHelper(og),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _x2 = _step3.value;

          if (full[_x2.opt_name] === undefined) {
            full[_x2.opt_name] = [];
          }

          full[_x2.opt_name].push(_x2);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var arrayed = [];

      for (var _i3 = 0, _Object$entries = Object.entries(full); _i3 < _Object$entries.length; _i3++) {
        var x = _Object$entries[_i3];
        var k = x[0];
        var v = x[1];
        arrayed.push([k, v]);
      }

      var sorted = arrayed.sort(function (a, b) {
        return a[0].localeCompare(b[0]);
      });

      var _iterator4 = _createForOfIteratorHelper(sorted),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var z = _step4.value;
          var y = z[0];
          var _x3 = z[1];
          var i = 0;
          var container_node = undefined;

          if (_x3.length > 1) {
            (function () {
              container_node = document.createElement('div');
              container_node.classList = "flex_column";
              var c_title = document.createElement('div');
              {
                var c_title_span = document.createElement("span");
                c_title_span.innerText = y;
                c_title.classList = "at_group_header";
                c_title.appendChild(c_title_span);
                c_title.addEventListener('click', function (x) {
                  c_title.classList.toggle("at_collapse");
                });
              }
              container_node.appendChild(c_title);

              _this3._transformation_list.appendChild(container_node);
            })();
          }

          var _iterator5 = _createForOfIteratorHelper(_x3),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var n = _step5.value;
              this.addNode(n, i, container_node);
              ++i;
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _s = this.getState();

      _s.optstruct = full;
      this.saveToState(_s);
    }
  }, {
    key: "locateTransformation",
    value: function locateTransformation(opt_name, opt_pos, affects) {
      var _this4 = this;

      console.log("locateTransformation", arguments);
      this.sendHighlightRequest(affects);

      var _state = this.getState();

      var _repr = _state.optstruct[opt_name][opt_pos].representative;
      $(_repr).css("background", "green");
      setTimeout(function () {
        _this4.sendClearHighlightRequest();

        $(_repr).css("background", '');
      }, 1000);
    }
  }, {
    key: "applyTransformation",
    value: function applyTransformation(x, pos, _title) {
      var _this5 = this;

      if (this.operation_running) return;
      this.operation_running = true;

      var _state = this.getState();

      var optstruct = _state['optstruct'];
      var named = {};
      var cpy = JSON.parse(JSON.stringify(optstruct[x.opt_name][pos]));
      named[this.getState()['for_sdfg']] = [{
        name: _title,
        params: {
          props: cpy['opt_params']
        }
      }];

      var tmp = function tmp(x) {
        // Compile after the transformation has been saved
        _this5.diode.gatherProjectElementsAndCompile(_this5, {
          optpath: named
        }, {
          sdfg_over_code: true
        }, function () {
          _this5.project().saveSnapshot(x['sdfg_object'], named);

          _this5.project().request(['update-tfh'], function (x) {
            _this5.operation_running = false;
          }, {
            on_timeout: function on_timeout() {
              _this5.operation_running = false;
            }
          });
        }, function () {
          // On failure
          _this5.operation_running = false;
        });
      };

      this.project().request(['sdfg_object'], function (x) {
        console.log("Got snapshot", x);
        if (typeof x.sdfg_object == 'string') x.sdfg_object = JSON.parse(x.sdfg_object);
        setTimeout(tmp, 10, x);
      }, {});
    }
  }, {
    key: "appendHistoryItem",
    value: function appendHistoryItem(new_sdfg, item_name) {
      var _this6 = this;

      if (this.operation_running) return;
      this.operation_running = true;
      var named = {};
      named[this.getState()['for_sdfg']] = [{
        name: item_name,
        params: {}
      }];

      var tmp = function tmp() {
        // Update SDFG
        _this6.diode.gatherProjectElementsAndCompile(_this6, {
          code: (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_7__.stringify_sdfg)(new_sdfg)
        }, {});
      };

      this.project().request(['sdfg_object'], function (x) {
        console.log("Got snapshot", x);
        if (typeof x.sdfg_object == 'string') x.sdfg_object = JSON.parse(x.sdfg_object);

        _this6.project().saveSnapshot(x['sdfg_object'], named);

        _this6.project().request(['update-tfh'], function (x) {
          _this6.operation_running = false;
        }, {
          on_timeout: function on_timeout() {
            _this6.operation_running = false;
          }
        });

        setTimeout(tmp, 10);
      }, {});
    }
  }, {
    key: "addNode",
    value: function addNode(x) {
      var _this7 = this;

      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var parent_override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var _title = x.opt_name; // Add a suffix

      if (pos != 0) {
        _title += "$" + pos;
      }

      x.id_name = _title;
      var at_list = parent_override === undefined ? this._transformation_list : parent_override; // Create the element

      var list_elem = document.createElement("div");
      list_elem.classList = "flex_row at_element"; // Add a title-div

      var title = document.createElement("div");
      title.innerText = _title;
      title.addEventListener('mouseenter', function (_x) {
        _this7.sendHighlightRequest(x.affects);
      });
      title.addEventListener('mouseleave', function (_x) {
        _this7.sendClearHighlightRequest();
      });
      title.addEventListener('click', function (_x) {
        _this7.applyTransformation(x, pos, _title);
      });
      title.setAttribute('data-hint', '{"type": "transformation", "name": "' + x.opt_name + '"}');
      x.representative = title; // Add a control-div

      var ctrl = document.createElement("div"); // Advanced button

      {
        var adv_button = document.createElement('b');
        adv_button.classList = "";
        adv_button.innerText = '...';
        adv_button.addEventListener('click', function (_x) {
          // Clicking this reveals the transformation properties
          _this7.renderProperties(x, pos, [x, pos, _title]);
        });
        ctrl.appendChild(adv_button);
      } // Help button

      /*
      {
          let help_button = document.createElement('i');
          help_button.classList = "";
          help_button.innerText = '?';
          help_button.setAttribute("data-hint", '{"type": "transformation", "name": "' + x.opt_name + '"}');
          help_button.addEventListener("click", _ev => this.diode.hint(_ev));
          ctrl.appendChild(help_button);
      }*/

      list_elem.appendChild(title);
      list_elem.appendChild(ctrl);
      at_list.appendChild(list_elem);
    }
  }, {
    key: "create",
    value: function create() {
      var newstate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (newstate != undefined) {
        var _state2 = this.getState();

        Object.assign(_state2, newstate);
        this.resetState(_state2);
      }

      var _state = this.getState();

      if (typeof _state == 'string') {
        _state = JSON.parse(_state);
      }

      var matching_opts = undefined;

      if (_state.matching_opts != undefined) {
        matching_opts = _state.matching_opts;
      } else if (_state.optgraph_data != undefined) {
        var _data = JSON.parse(_state.optgraph_data);

        matching_opts = _data.matching_opts;
      }

      var parent = this.container.getElement()[0];
      parent.innerHTML = '';
      var at_div = document.createElement('div');
      at_div.classList = "at_container";
      var at_list = document.createElement('div');
      this._transformation_list = at_list;
      at_div.appendChild(at_list);
      parent.appendChild(at_div);

      if (matching_opts != undefined) {
        this.addNodes(matching_opts);
      }
    }
  }]);

  return DIODE_Context_AvailableTransformations;
}(_context__WEBPACK_IMPORTED_MODULE_8__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/code_in.js":
/*!******************************************!*\
  !*** ./src/diode-ui/contexts/code_in.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_CodeIn": () => (/* binding */ DIODE_Context_CodeIn)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_CodeIn = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_CodeIn, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_CodeIn);

  function DIODE_Context_CodeIn(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_CodeIn);

    _this = _super.call(this, diode, gl_container, state);
    _this.editor = null;
    _this._terminal_identifer = null;
    _this._markers = [];
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_CodeIn, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_CodeIn.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this.on(this._project.eventString('-req-input_code'), function (msg) {
        // Echo with data
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('input_code'), _this2.getState()['code_content']);
        }, 1);
        transthis.editor.clearSelection();
      }, true);
      this.on(this.project().eventString('-req-new_error'), function (msg) {
        // Echo with data
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('new_error'), 'ok');
        }, 1);

        _this2.highlight_error(msg);
      });
      this.on(this.project().eventString('-req-highlight-code'), function (msg) {
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('highlight-code'), 'ok');
        }, 1);

        _this2.highlight_code(msg);
      });
      this.on(this.project().eventString('-req-set-inputcode'), function (msg) {
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('set-inputcode'), 'ok');
        }, 1);

        _this2.editor.setValue(msg);

        _this2.editor.clearSelection();
      });
      this.on(this.project().eventString('-req-clear-errors'), function (msg) {
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('clear-errors'), 'ok');
        }, 1);

        _this2.clearErrors();
      });
    }
  }, {
    key: "highlight_code",
    value: function highlight_code(dbg_info) {
      var _this3 = this;

      var s_c = dbg_info.start_col;
      var e_c = dbg_info.end_col;

      if (e_c <= s_c) {
        // The source data is broken; work-around this limitation by setting the end-column has high as possible
        e_c = 2000;
      }

      var markerrange = new ace.Range(dbg_info.start_line - 1, s_c, dbg_info.end_line - 1, e_c); // Create a unique class to be able to select the marker later

      var uc = "chm_" + this.diode.getPseudorandom();
      var marker = this.editor.session.addMarker(markerrange, "code_highlight " + uc);
      this.editor.resize(true);
      this.editor.scrollToLine(dbg_info.start_line, true, true, function () {});
      this.editor.gotoLine(dbg_info.start_line, 10, true);
      setTimeout(function () {
        _this3.editor.getSession().removeMarker(marker);
      }, 5000);
    }
  }, {
    key: "clearErrors",
    value: function clearErrors() {
      var _iterator = _createForOfIteratorHelper(this._markers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var m = _step.value;
          this.editor.getSession().removeMarker(m);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this._markers = [];
    }
  }, {
    key: "highlight_error",
    value: function highlight_error(error) {
      if (error.type == "SyntaxError") {
        var lineno = parseInt(error.line);
        var offset = parseInt(error.offset);
        var text = error.text;
        lineno -= 1;
        var lineval = this.editor.session.getLine(lineno);
        var start = lineval.indexOf(text.substring(0, text.length - 1));
        var markerrange = new ace.Range(lineno, start, lineno, start + text.length - 1); // Create a unique class to be able to select the marker later

        var uc = "sem_" + this.diode.getPseudorandom();
        var marker = this.editor.session.addMarker(markerrange, "syntax_error_highlight " + uc);

        this._markers.push(marker); // #TODO: Either find a way to display the error information directly as a tooltip (which ace does not seem to support trivially)
        // #TODO: or add a dedicated error-view.

      } else {
        console.log("Untreated error type", error);
      }
    }
  }, {
    key: "terminal_identifier",
    value: function terminal_identifier() {
      return this._terminal_identifer;
    }
  }, {
    key: "compile",
    value: function compile(code) {
      var _iterator2 = _createForOfIteratorHelper(this._markers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var m = _step2.value;
          this.editor.getSession().removeMarker(m);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this._markers = [];
      this.diode.compile(this, code);
    }
  }, {
    key: "setEditorReference",
    value: function setEditorReference(editor) {
      var _this4 = this;

      this.editor = editor;
      var elem = this.container.getElement()[0];
      elem.addEventListener('resize', function (x) {
        _this4.editor.resize();
      });
    }
  }, {
    key: "compile_and_run",
    value: function compile_and_run(code) {
      var millis = this.diode.getPseudorandom();
      var terminal_identifier = "terminal_" + millis; // create a new terminal

      var terminal_config = {
        title: "Terminal",
        type: 'component',
        componentName: 'TerminalComponent',
        componentState: {
          created: millis
        }
      };
      this.diode.addContentItem(terminal_config);
      console.log("Server emitting to ", terminal_identifier);
      this._terminal_identifer = terminal_identifier;
      this.diode.gatherProjectElementsAndCompile(this, {}
      /*{ 'code': code}*/
      , {
        run: true,
        term_id: terminal_identifier
      });
    }
  }]);

  return DIODE_Context_CodeIn;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/code_out.js":
/*!*******************************************!*\
  !*** ./src/diode-ui/contexts/code_out.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_CodeOut": () => (/* binding */ DIODE_Context_CodeOut)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_CodeOut = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_CodeOut, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_CodeOut);

  function DIODE_Context_CodeOut(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_CodeOut);

    _this = _super.call(this, diode, gl_container, state);
    _this.editor = null;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_CodeOut, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_CodeOut.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this.on(this._project.eventString('-req-new-codeout'), function (msg) {
        if (msg.sdfg_name != _this2.getState()['sdfg_name']) {
          // Name mismatch; ignore
          return;
        } // See DIODE Errata "GoldenLayout:EventResponses"
        //eh.emit(transthis.project().eventString('new-codeout'), 'ok')


        setTimeout(function (x) {
          return eh.emit(transthis.project().eventString('new-codeout'), 'ok');
        }, 1);
        var extracted = msg;

        _this2.setCode(extracted);
      });
    }
  }, {
    key: "cleanCode",
    value: function cleanCode(codestr) {
      // Removes '////DACE:'-comments in the output code
      return codestr.replace(/\s*\/\/\/\/\_\_DACE:[^\n]*/gm, "");
    }
  }, {
    key: "setCode",
    value: function setCode(extracted) {
      var input = extracted;

      if (typeof extracted === "string") {
        extracted = JSON.parse(extracted);
      }

      if (typeof extracted.generated_code == "string") {
        this.editor.setValue(this.cleanCode(extracted.generated_code));
        this.editor.clearSelection();
      } else {
        // Probably an array type
        this.editor.setValue("");
        this.editor.clearSelection();

        var _iterator = _createForOfIteratorHelper(extracted.generated_code),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var c = _step.value;
            var v = c;

            if (extracted.generated_code.length > 1) {
              v = "\n\n\n" + "#########  NEXT CODE FILE ############\n\n\n" + v;
            }

            var session = this.editor.getSession();
            session.insert({
              row: session.getLength(),
              column: 0
            }, this.cleanCode(v));
            this.editor.clearSelection();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this.saveToState({
        'code': input
      });
    }
  }, {
    key: "setEditorReference",
    value: function setEditorReference(editor) {
      var _this3 = this;

      this.editor = editor;
      var elem = this.container.getElement()[0];
      elem.addEventListener('resize', function (x) {
        _this3.editor.resize();
      });
    }
  }]);

  return DIODE_Context_CodeOut;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/context.js":
/*!******************************************!*\
  !*** ./src/diode-ui/contexts/context.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context": () => (/* binding */ DIODE_Context)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _diode_project__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../diode_project */ "./src/diode-ui/diode_project.js");




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var DIODE_Context = /*#__PURE__*/function () {
  function DIODE_Context(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context);

    this.diode = diode;
    this.container = gl_container;
    this.initial_state = state;
    this.created = state.created;

    if (this.created == undefined) {
      this.created = this.diode.getPseudorandom();
      this.saveToState({
        created: this.created
      });
    }

    this._project = null;

    if (state.project_id != undefined && state.project_id != null && state.project_id != "null") {
      this._project = new _diode_project__WEBPACK_IMPORTED_MODULE_3__.DIODE_Project(this.diode, state.project_id);
    }

    this._event_listeners = [];
    this._event_listeners_closed = []; // Listeners that are installed on closed windows (NOTE: These are NOT active on open windows)

    this._no_user_destroy = false; // When true, all destroy()-events are assumed to be programmatic
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context, [{
    key: "project",
    value: function project() {
      console.assert(this._project != null, "Project invalid");
      return this._project;
    }
  }, {
    key: "on",
    value: function on(name, data) {
      var keep_alive_when_closed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var eh = this.diode.goldenlayout.eventHub;
      var params = [name, data];
      eh.on.apply(eh, params);

      this._event_listeners.push(params);

      if (keep_alive_when_closed) {
        // NOTE: The new function has to be created because the function cannot be identical
        // (This is, because the handler is removed by (name, function) pairs)
        this.closed_on(name, function (x) {
          return data(x);
        });
      }
    } // same as on(), but only active when the window is closed (in the closed windows list)

  }, {
    key: "closed_on",
    value: function closed_on(name, data) {
      var params = [name, data];

      this._event_listeners_closed.push(params);
    }
  }, {
    key: "removeClosedWindowEvents",
    value: function removeClosedWindowEvents() {
      // This function has to be called when reopening from the closed windows list
      // DO NOT call inside destroy()!
      var eh = this.diode.goldenlayout.eventHub;

      var _iterator = _createForOfIteratorHelper(this._event_listeners_closed),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          eh.unbind.apply(eh, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(x));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this._event_listeners_closed = [];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log("destroying", this); // Unlink all event listeners

      var eh = this.diode.goldenlayout.eventHub;

      var _iterator2 = _createForOfIteratorHelper(this._event_listeners),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          eh.unbind.apply(eh, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(x));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this._event_listeners = [];
    }
  }, {
    key: "close",
    value: function close() {
      /*
          The difference to destroy: close() is called when the USER clicks close,
          destroy will be called afterwards when the element is actually removed
      */
      // Add to closed-windows list
      console.log("closing", this);
      this.project().addToClosedWindowsList(this.container._config.componentName, this.getState()); // Install the event listeners to listen when the window is closed

      var eh = this.diode.goldenlayout.eventHub;

      var _iterator3 = _createForOfIteratorHelper(this._event_listeners_closed),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var params = _step3.value;
          eh.on.apply(eh, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(params));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this = this;

      if (this._project == null) {
        this._project = project;
      }

      this.container.extendState({
        'project_id': this._project.eventString('')
      });
      this.on('destroy-' + this.getState().created, function (msg) {
        if (!_this._no_user_destroy) {
          // _might_ be a user destroy - call close
          _this.close();
        }

        _this.destroy();
      });
      this.on('enter-programmatic-destroy', function (msg) {
        _this._no_user_destroy = true;
        console.log("Entering programmatic reordering", _this);
      });
      this.on('leave-programmatic-destroy', function (msg) {
        _this._no_user_destroy = false;
        console.log("Leaving programmatic reordering", _this);
      });
      this.closed_on('window-reopened-' + this.getState().created, function (x) {
        _this.removeClosedWindowEvents();
      });
    }
  }, {
    key: "getState",
    value: function getState() {
      return this.container.getState();
    }
  }, {
    key: "saveToState",
    value: function saveToState(dict_value) {
      this.container.extendState(dict_value);
    }
  }, {
    key: "resetState",
    value: function resetState() {
      var dict_value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.container.setState(dict_value);
    }
  }, {
    key: "saveToPersistentState",
    value: function saveToPersistentState(key, value) {
      localStorage.setItem(key, value);
    }
  }, {
    key: "getPersistentState",
    value: function getPersistentState(key) {
      return localStorage.getItem(key);
    }
  }]);

  return DIODE_Context;
}();

/***/ }),

/***/ "./src/diode-ui/contexts/diode_settings.js":
/*!*************************************************!*\
  !*** ./src/diode-ui/contexts/diode_settings.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_DIODESettings": () => (/* binding */ DIODE_Context_DIODESettings)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../main */ "./src/main.js");
/* harmony import */ var _diode_appearance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../diode_appearance */ "./src/diode-ui/diode_appearance.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");
/* harmony import */ var _diode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../diode */ "./src/diode-ui/diode.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var DIODE_Context_DIODESettings = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_DIODESettings, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_DIODESettings);

  function DIODE_Context_DIODESettings(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_DIODESettings);

    _this = _super.call(this, diode, gl_container, state);
    _this._settings_container = null;
    _this._editor_themes = _this.getThemes();
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_DIODESettings, [{
    key: "getThemes",
    value: function getThemes() {
      var _this2 = this;

      (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)('/dace/api/v1.0/diode/themes', undefined, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          _this2._editor_themes = JSON.parse(xhr.response);
          console.log("Got editor themes", _this2._editor_themes);

          _this2.create();
        }
      }, "GET");
    }
  }, {
    key: "themeNames",
    value: function themeNames() {
      return this._editor_themes.map(function (x) {
        return x.substr("theme-".length).slice(0, -3);
      });
    }
  }, {
    key: "setContainer",
    value: function setContainer(elem) {
      this._settings_container = elem;
    }
  }, {
    key: "create",
    value: function create() {
      var _this3 = this;

      // Editor theme
      {
        var cont = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createContainer(undefined);
        var label = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createLabel(undefined, "editor theme", "Sets the ace editor theme");
        var theme_names = this.themeNames();
        var input = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput(undefined, function (x) {
          var val = x.value;
          _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.setTheme(val);
          _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.loadTheme().then(function (x) {
            _this3.diode._appearance.setFromAceEditorTheme(val);
          });
        }, theme_names, _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.editorTheme());
        cont.append(label);
        cont.append(input);

        this._settings_container.append(cont);
      } // Auto-Compile

      {
        var _cont = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createContainer(undefined);

        var _label = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createLabel(undefined, "Compile on property change", "When false, the program is not recompiled after a property change");

        var _input = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createToggleSwitch(undefined, function (x) {
          var val = x.checked;
          _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.setRecompileOnPropertyChange(val);
        }, _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.recompileOnPropertyChange());

        _cont.append(_label);

        _cont.append(_input);

        this._settings_container.append(_cont);
      } // (Debug) mode

      {
        var _cont2 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createContainer(undefined);

        var _label2 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createLabel(undefined, "DaCe Debug mode", "When true, the program shows elements primarily useful for debugging and developing DaCe/DIODE.");

        var _input2 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createToggleSwitch(undefined, function (x) {
          var val = x.checked;
          _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.setDebugDevMode(val);
        }, _diode__WEBPACK_IMPORTED_MODULE_8__.DIODE.debugDevMode());

        _cont2.append(_label2);

        _cont2.append(_input2);

        this._settings_container.append(_cont2);
      } // UI font

      {
        var _cont3 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createContainer(undefined);

        var _label3 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createLabel(undefined, "UI Font", "Select the font used in the UI (does not affect code panes and SDFG renderers)");

        var current = _diode_appearance__WEBPACK_IMPORTED_MODULE_6__.Appearance.getClassProperties("diode_appearance")['fontFamily'];

        var _input3 = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput(undefined, function (x) {
          var val = x.value;

          _this3.diode._appearance.setFont(val);

          _this3.diode._appearance.apply();
        }, _diode_appearance__WEBPACK_IMPORTED_MODULE_6__.Appearance.fonts(), current);

        _cont3.append(_label3);

        _cont3.append(_input3);

        this._settings_container.append(_cont3);
      }
    }
  }]);

  return DIODE_Context_DIODESettings;
}(_context__WEBPACK_IMPORTED_MODULE_7__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/error.js":
/*!****************************************!*\
  !*** ./src/diode-ui/contexts/error.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_Error": () => (/* binding */ DIODE_Context_Error)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_Error = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_Error, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_Error);

  function DIODE_Context_Error(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_Error);

    _this = _super.call(this, diode, gl_container, state);
    _this.editor = null;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_Error, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_Error.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this.on(this._project.eventString('-req-new-error'), function (msg) {
        setTimeout(function (x) {
          return eh.emit(transthis.project().eventString('new-error'), 'ok');
        }, 1);
        var extracted = msg;

        _this2.setError(extracted);
      });
    }
  }, {
    key: "setError",
    value: function setError(error) {
      console.log("error", error);
      var error_string = "";
      if (typeof error == "string") this.editor.setValue(error);else if (Array.isArray(error)) {
        var _iterator = _createForOfIteratorHelper(error),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var e = _step.value;

            if (e.msg != undefined) {
              error_string += e.msg;
            }

            console.log("Error element", e);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this.editor.setValue(error_string);
      }
      this.saveToState({
        'error': error
      });
    }
  }, {
    key: "setEditorReference",
    value: function setEditorReference(editor) {
      var _this3 = this;

      this.editor = editor;
      var elem = this.container.getElement()[0];
      elem.addEventListener('resize', function (x) {
        _this3.editor.resize();
      });
    }
  }]);

  return DIODE_Context_Error;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/instrumentation_control.js":
/*!**********************************************************!*\
  !*** ./src/diode-ui/contexts/instrumentation_control.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_InstrumentationControl": () => (/* binding */ DIODE_Context_InstrumentationControl)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../main.js */ "./src/main.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var DIODE_Context_InstrumentationControl = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_InstrumentationControl, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_InstrumentationControl);

  /*
      This context shows status and controls for the current instrumentation run.
      It is an interface and does not store data other than that needed to provide popouts.
      In particular, it does not display instrumentation results (this is done in the SDFG component).
  */
  function DIODE_Context_InstrumentationControl(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_InstrumentationControl);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_InstrumentationControl, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_InstrumentationControl.prototype), "setupEvents", this).call(this, project);

      var started = false; // Start updating interval

      this._update_timeout = setInterval(function () {
        (0,_main_js__WEBPACK_IMPORTED_MODULE_6__.REST_request)("/dace/api/v1.0/dispatcher/list/", {}, function (xhr) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            // Got response
            var done = true;
            var resp = JSON.parse(xhr.response);
            var elems = resp.elements;

            var _iterator = _createForOfIteratorHelper(elems),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var e = _step.value;
                var o = e.options;

                if (typeof o == 'string') {
                  console.log("o is ", o);

                  if (o == "endgroup") {
                    // At least started, not done yet
                    done = false;
                    started = true;
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (started && done) {
              started = false;

              _this.diode.load_perfdata();
            }
          }
        });
      }, 2000);
    }
  }, {
    key: "close",
    value: function close() {
      clearInterval(this._update_timeout);
      this._update_timeout = null;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_InstrumentationControl.prototype), "close", this).call(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_InstrumentationControl.prototype), "destroy", this).call(this);
    }
  }, {
    key: "create",
    value: function create() {
      var _this2 = this;

      var parent = this.container.getElement()[0];
      parent.innerHTML = "<h2>Instrumentation control</h2><p>Do not close this window while instrumented programs are running</p>"; // Functionality provided in this context
      // - Download perfdata database
      // - Delete remote perfdata database (e.g. to run a new / different program)
      // - Wait for tasks to be done (to auto-update performance information)

      var download_but = document.createElement("a");
      download_but.innerText = "Download perfdata database";
      download_but.href = base_url + "/dace/api/v1.0/perfdata/download/" + this.diode.getClientID() + "/";
      download_but.download = "perfdata.sqlite3";
      var download_can_but = document.createElement("a");
      download_can_but.innerText = "Download CAN";
      download_can_but.href = base_url + "/dace/api/v1.0/can/download/" + this.diode.getClientID() + "/";
      download_can_but.download = "current.sqlite3";
      var delete_but = document.createElement("button");
      delete_but.innerText = "Delete remote database";
      delete_but.addEventListener("click", function () {
        (0,_main_js__WEBPACK_IMPORTED_MODULE_6__.REST_request)("/dace/api/v1.0/perfdata/reset/", {
          client_id: _this2.diode.getClientID()
        }, function (x) {});
      });
      var delete_can_but = document.createElement("button");
      delete_can_but.innerText = "Delete remote CAN";
      delete_can_but.addEventListener("click", function () {
        (0,_main_js__WEBPACK_IMPORTED_MODULE_6__.REST_request)("/dace/api/v1.0/can/reset/", {
          client_id: _this2.diode.getClientID()
        }, function (x) {});
      });
      var render_but = document.createElement("button");
      render_but.innerText = "Display instrumentation results";
      render_but.addEventListener("click", function () {
        _this2.diode.load_perfdata();
      });
      var roofline_but = document.createElement("button");
      roofline_but.innerText = "Show roofline";
      roofline_but.addEventListener("click", function () {
        _this2.diode.show_roofline();
      });
      var celem = document.createElement("div");
      celem.classList = "flex_column";
      celem.appendChild(download_but);
      celem.appendChild(download_can_but);
      celem.appendChild(delete_but);
      celem.appendChild(delete_can_but);
      celem.appendChild(render_but);
      celem.appendChild(roofline_but);
      parent.appendChild(celem);
    }
  }]);

  return DIODE_Context_InstrumentationControl;
}(_context__WEBPACK_IMPORTED_MODULE_7__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/perf_times.js":
/*!*********************************************!*\
  !*** ./src/diode-ui/contexts/perf_times.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_PerfTimes": () => (/* binding */ DIODE_Context_PerfTimes)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_PerfTimes = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_PerfTimes, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_PerfTimes);

  function DIODE_Context_PerfTimes(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_PerfTimes);

    _this = _super.call(this, diode, gl_container, state);
    _this._chart = null;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_PerfTimes, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_PerfTimes.prototype), "setupEvents", this).call(this, project);

      var eh = this.diode.goldenlayout.eventHub;
      var transthis = this;
      this.on(this.project().eventString('-req-new-time'), function (msg) {
        setTimeout(function (x) {
          return eh.emit(transthis.project().eventString('new-time'), 'ok');
        }, 1);

        _this2.addTime(msg.time);
      });
    }
  }, {
    key: "create",
    value: function create() {
      var elem = this.container.getElement()[0];
      elem.innerHTML = ""; // Create the graph

      var canvas = document.createElement("canvas");
      elem.appendChild(canvas);
      var oldstate = this.getState();

      if (oldstate.runtimes === undefined) {
        oldstate.runtimes = [];
      }

      console.log("Execution times loaded", oldstate.runtimes);
      var labels = [];

      for (var i = 0; i < oldstate.runtimes.length; ++i) {
        labels.push(i);
      }

      this._chart = new Chart(canvas.getContext("2d"), {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Exec. times in s',
            backgroundColor: "blue",
            data: oldstate.runtimes.map(function (x) {
              return x;
            })
          }]
        },
        options: {
          responsive: true,
          scales: {
            yAxes: [{
              display: true,
              ticks: {
                beginAtZero: true
              }
            }],
            xAxes: [{
              display: true,
              ticks: {
                autoSkip: true
              }
            }]
          },
          legend: {
            //display: false,
            position: 'top'
          },
          title: {
            display: true,
            text: 'Execution times'
          }
        }
      });

      this._chart.update();
    }
  }, {
    key: "addTime",
    value: function addTime(runtime) {
      var oldstate = this.getState();

      if (oldstate.runtimes === undefined) {
        oldstate.runtimes = [];
      }

      oldstate.runtimes.push(runtime);
      this.resetState(oldstate);
      this.create();
    }
  }]);

  return DIODE_Context_PerfTimes;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/prop_window.js":
/*!**********************************************!*\
  !*** ./src/diode-ui/contexts/prop_window.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_PropWindow": () => (/* binding */ DIODE_Context_PropWindow)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../main */ "./src/main.js");
/* harmony import */ var _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/sdfg/json_serializer */ "./src/utils/sdfg/json_serializer.ts");
/* harmony import */ var _table_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../table.js */ "./src/diode-ui/table.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");








function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var $ = globalThis.$;
var DIODE_Context_PropWindow = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DIODE_Context_PropWindow, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_PropWindow);

  function DIODE_Context_PropWindow(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context_PropWindow);

    _this = _super.call(this, diode, gl_container, state);
    _this._html_container = null;

    _this.container.setTitle("Properties");

    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_PropWindow, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_PropWindow.prototype), "setupEvents", this).call(this, project);

      var eh = this.diode.goldenlayout.eventHub;
      this.on(this.project().eventString('-req-display-properties'), function (msg) {
        setTimeout(function () {
          return eh.emit(_this2.project().eventString("display-properties"), 'ok');
        }, 1);
        _this2.getHTMLContainer().innerHTML = "";
        var p = msg.params;
        if (typeof p == 'string') p = JSON.parse(p);

        _this2.diode.renderProperties(msg.transthis, msg.node, p, _this2.getHTMLContainer(), msg.options);
      });
      this.on(this.project().eventString('-req-render-free-vars'), function (msg) {
        setTimeout(function () {
          return eh.emit(_this2.project().eventString("render-free-vars"), 'ok');
        }, 1);

        _this2.renderDataSymbols(msg.calling_context, msg.data);
      });
    }
  }, {
    key: "renderDataSymbolProperties",
    value: function renderDataSymbolProperties(caller_id, symbol) {
      /*
          caller_id: .created of calling context (SDFG Context, mainly)
          symbol: [sym_name, {
                  .attributes: <attr_obj>
                  .type: <type name>
              }]
      */
      var reduced_node = {};

      reduced_node.data = function () {
        return symbol;
      };

      this.diode.renderPropertiesInWindow(caller_id, reduced_node, symbol[1].attributes, {
        backaction: function backaction() {// #TODO: Implement a quick way of getting back from here
        },
        type: "symbol-properties"
      });
    }
  }, {
    key: "removeDataSymbol",
    value: function removeDataSymbol(calling_context, data_name) {
      this.project().request(["delete-data-symbol-" + calling_context], function (x) {}, {
        params: data_name
      });
    }
  }, {
    key: "addDataSymbol",
    value: function addDataSymbol(calling_context, data_type, data_name) {
      this.project().request(["add-data-symbol-" + calling_context], function (x) {}, {
        params: {
          name: data_name,
          type: data_type
        }
      });
    }
  }, {
    key: "renderDataSymbols",
    value: function renderDataSymbols(calling_context, data) {
      var _this3 = this;

      // #TODO: This creates the default state (as in same as render_free_symbols() in the old DIODE)
      if (data == null) {
        console.warn("Data has not been set - creating empty window");
        return;
      }

      var free_symbol_table = new _table_js__WEBPACK_IMPORTED_MODULE_9__.Table();
      free_symbol_table.setHeaders("Symbol", "Type", "Dimensions", "Controls"); // Go over the undefined symbols first, then over the arrays (SDFG::arrays)

      var all_symbols = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(Object.keys(data.attributes.symbols)), ["SwitchToArrays"], (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(Object.entries(data.attributes._arrays)));
      var caller_id = calling_context;
      console.assert(caller_id != undefined && typeof caller_id == 'string');

      var _iterator = _createForOfIteratorHelper(all_symbols),
          _step;

      try {
        var _loop = function _loop() {
          var x = _step.value;

          if (x == "SwitchToArrays") {
            // Add a delimiter
            var col = free_symbol_table.addRow("Arrays");
            col.childNodes.forEach(function (x) {
              x.colSpan = 4;
              x.style = "text-align:center;";
            });
            return "continue";
          }

          if (x[0] == "null" || x[1] == null || typeof x === 'string' || x instanceof String) return "continue";
          var edit_but = document.createElement('button');
          edit_but.addEventListener('click', function (_x) {
            _this3.renderDataSymbolProperties(caller_id, x);
          });
          edit_but.innerText = "Edit";
          var del_but = document.createElement('button');
          del_but.addEventListener('click', function (_x) {
            _this3.removeDataSymbol(caller_id, x[0]);
          });
          del_but.innerText = "Delete";
          var but_container = document.createElement('div');
          but_container.appendChild(edit_but);
          but_container.appendChild(del_but);
          free_symbol_table.addRow(x[0], x[1].type, x[1].attributes.dtype + "[" + x[1].attributes.shape + "]", but_container);
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      free_symbol_table.addRow("Add data symbols").childNodes.forEach(function (x) {
        x.colSpan = 4;
        x.style = "text-align:center;";
      });
      {
        var input_name = document.createElement("input");
        input_name.type = "text";
        input_name.placeholder = "Symbol name";
        var add_scalar = document.createElement("button");
        add_scalar.innerText = "Add Scalar";
        add_scalar.addEventListener("click", function () {
          _this3.addDataSymbol(caller_id, "Scalar", input_name.value);
        });
        var add_array = document.createElement("button");
        add_array.addEventListener("click", function () {
          _this3.addDataSymbol(caller_id, "Array", input_name.value);
        });
        add_array.innerText = "Add Array";
        var but_container = document.createElement("div");
        but_container.appendChild(add_scalar);
        but_container.appendChild(add_array);
        free_symbol_table.addRow(input_name, but_container).childNodes.forEach(function (x) {
          x.colSpan = 2;
          x.style = "text-align:center;";
        });
        var libnode_container = document.createElement("div");
        var expand_all = document.createElement("button");
        expand_all.addEventListener("click", function () {
          // Expand all library nodes
          (0,_main__WEBPACK_IMPORTED_MODULE_7__.REST_request)("/dace/api/v1.0/expand/", {
            sdfg: data
          }, function (xhr) {
            if (xhr.readyState === 4 && xhr.status === 200) {
              var resp = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(xhr.response);

              if (resp.error !== undefined) {
                // Propagate error
                _this3.diode.handleErrors(_this3, resp);
              } // Add to history


              _this3.project().request(["append-history"], function (x) {}, {
                params: {
                  new_sdfg: resp.sdfg,
                  item_name: "Expand library nodes"
                }
              });
            }
          });
        });
        expand_all.innerText = "Expand all library nodes";
        libnode_container.appendChild(expand_all);
        free_symbol_table.addRow(libnode_container);
      }
      this.getHTMLContainer().innerHTML = "";
      free_symbol_table.setCSSClass('free_symbol_table');
      free_symbol_table.createIn(this.getHTMLContainer());
    }
  }, {
    key: "getHTMLContainer",
    value: function getHTMLContainer() {
      var parent = $(this.container.getElement()).children(".sdfgpropdiv");
      return parent[0];
    }
  }, {
    key: "createFromState",
    value: function createFromState() {
      var p = this.getHTMLContainer();
      p.setAttribute("data-hint", '{"type": "DIODE", "name": "Property_Window"}');
      var state = this.getState();

      if (state.params != undefined && state.params.params != null) {
        var _p = state.params;
        this.diode.renderProperties(_p.transthis, _p.node, JSON.parse(_p.params), this.getHTMLContainer());
      }
    }
  }]);

  return DIODE_Context_PropWindow;
}(_context__WEBPACK_IMPORTED_MODULE_10__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/roofline.js":
/*!*******************************************!*\
  !*** ./src/diode-ui/contexts/roofline.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_Roofline": () => (/* binding */ DIODE_Context_Roofline)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../main */ "./src/main.js");
/* harmony import */ var _renderer_dir_Roofline_main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../renderer_dir/Roofline/main */ "./renderer_dir/Roofline/main.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DIODE_Context_Roofline = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_Roofline, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_Roofline);

  function DIODE_Context_Roofline(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_Roofline);

    _this = _super.call(this, diode, gl_container, state);
    _this._proc_func = null;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_Roofline, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_Roofline.prototype), "setupEvents", this).call(this, project);

      var eh = this.diode.goldenlayout.eventHub;
      var transthis = this;
      /*this.on(this.project().eventString('-req-new-time'), (msg) => {
          setTimeout(x => eh.emit(transthis.project().eventString('new-time'), 'ok'), 1);
          this.addTime(msg.time);
      });*/
    }
  }, {
    key: "create",
    value: function create() {
      var _this2 = this;

      var parent = this.container.getElement()[0];
      parent.style.width = "100%";
      parent.style.height = "100%";
      var canvas = document.createElement("canvas");
      canvas.width = 1920;
      canvas.height = 1080;
      var redraw_func = _renderer_dir_Roofline_main__WEBPACK_IMPORTED_MODULE_7__.main(canvas, function (proc_func) {
        // Setup code, called on init. Incoming data must be passed to proc_func
        _this2._proc_func = proc_func;
      });

      var on_resize = function on_resize() {
        console.log("Resizing");
        canvas.width = parseInt(parent.style.width) - 20;
        canvas.height = parseInt(parent.style.height) - 20; // Reset then

        redraw_func();
      };

      parent.addEventListener("resize", on_resize);

      if (window.ResizeObserver) {
        new ResizeObserver(on_resize).observe(parent);
      } else {
        console.warn("ResizeObserver not available");
      }

      parent.appendChild(canvas);
      (0,_main__WEBPACK_IMPORTED_MODULE_6__.REST_request)('/dace/api/v1.0/perfdata/roofline/', {
        client_id: this.diode.getClientID()
      }, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          _this2._proc_func(JSON.parse(xhr.response));
        }
      });
    }
  }]);

  return DIODE_Context_Roofline;
}(_context__WEBPACK_IMPORTED_MODULE_8__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/run_config.js":
/*!*********************************************!*\
  !*** ./src/diode-ui/contexts/run_config.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_RunConfig": () => (/* binding */ DIODE_Context_RunConfig)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_RunConfig = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_RunConfig, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_RunConfig);

  function DIODE_Context_RunConfig(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context_RunConfig);

    _this = _super.call(this, diode, gl_container, state);
    _this._settings_container = null;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_RunConfig, [{
    key: "create",
    value: function create() {
      var _this2 = this;

      var parent = this.container.getElement()[0];
      var runopts_container = document.createElement("div");
      var runopts_general_container = document.createElement("div");
      var values = {
        "Configuration name": "",
        "Host": "localhost",
        "Use SSH": true,
        "SSH Key": this.diode.pubSSH(),
        "SSH Key override": "",
        "Instrumentation": "off",
        "Number of threads": "[0]"
      };
      var params = [];
      var node = null;
      var transthis = null; // Build the callback object

      transthis = {
        propertyChanged: function propertyChanged(node, name, value) {
          if (name == "Configuration name") {
            if (_this2.diode.getRunConfigs().map(function (x) {
              return x['Configuration name'];
            }).includes(value)) {
              // Load values and reset inputs
              var copy = _this2.diode.getRunConfigs(value);

              var _loop = function _loop() {
                var x = _Object$keys[_i];
                var v = copy[x];
                var ps = params.find(function (y) {
                  return y.name == x;
                });
                ps.value = v;
              };

              for (var _i = 0, _Object$keys = Object.keys(copy); _i < _Object$keys.length; _i++) {
                _loop();
              }

              values = copy;
              runopts_general_container.innerHTML = "";

              _this2.diode.renderProperties(transthis, node, params, runopts_general_container, {});

              return;
            }
          }

          values[name] = value;
        }
      };
      /*
      element structure:
      {
          name: <name>
          desc: <description> (as tooltip)
          category: <Category name>
          type: <Type used to render>
          value: <Value to store>
      }
      */

      {
        params = [{
          name: "Configuration name",
          type: "combobox",
          value: values['Configuration name'],
          options: this.diode.getRunConfigs().map(function (x) {
            return x['Configuration name'];
          }),
          desc: "Name of this configuration"
        }, {
          name: "Host",
          type: "hosttype",
          value: values['Host'],
          desc: "Host executing the programs"
        }]; // Array of elements
        // Add category (common to all elements)

        params.forEach(function (x) {
          return x.category = "General";
        });
        var remoteparams = [{
          name: "Use SSH",
          type: "bool",
          value: values['Use SSH'],
          desc: "Use SSH. Mandatory for remote hosts, optional for localhost."
        }, {
          name: "SSH Key",
          type: "str",
          value: values['SSH Key'],
          desc: "Public SSH key (id_rsa.pub) to add to remote authorized_keys. This key must not be password-protected!"
        }, {
          name: "SSH Key override",
          type: "str",
          value: values['SSH Key override'],
          desc: "Override the identity key file (ssh option -i) with this value if your password-free key is not id_rsa"
        }]; // Add category (common to all elements)

        remoteparams.forEach(function (x) {
          return x.category = "Remote";
        });
        var instrumentationparams = [{
          name: "Instrumentation",
          type: "selectinput",
          value: values['Instrumentation'],
          options: ['off', 'minimal', 'full'],
          desc: "Set instrumentation mode (CPU only)"
        }, {
          name: "Number of threads",
          type: "list",
          value: values['Number of threads'],
          desc: "Sets the number of OpenMP threads." + "If multiple numbers are specified, the program is executed once for every number of threads specified. Specify 0 to use system default"
        }]; // Add category (common to all elements)

        instrumentationparams.forEach(function (x) {
          return x.category = "Profiling";
        }); // Merge params

        params = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(params), remoteparams, instrumentationparams);
        var _node = {
          data: function data() {
            return params;
          }
        }; // Build the settings

        this.diode.renderProperties(transthis, _node, params, runopts_general_container, {});
      }
      runopts_container.appendChild(runopts_general_container);
      parent.appendChild(runopts_container);
      var apply_button = document.createElement("button");
      apply_button.innerText = "Save";
      apply_button.addEventListener('click', function (_x) {
        _this2.diode.addToRunConfigs(values);
      });
      parent.appendChild(apply_button);
    }
  }]);

  return DIODE_Context_RunConfig;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/runqueue.js":
/*!*******************************************!*\
  !*** ./src/diode-ui/contexts/runqueue.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_Runqueue": () => (/* binding */ DIODE_Context_Runqueue)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../main.js */ "./src/main.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var $ = globalThis.$;
var DIODE_Context_Runqueue = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_Runqueue, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_Runqueue);

  function DIODE_Context_Runqueue(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_Runqueue);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_Runqueue, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_Runqueue.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this._autorefresher = null;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearInterval(this._autorefresher);

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_Runqueue.prototype), "destroy", this).call(this);
    }
  }, {
    key: "refreshUI",
    value: function refreshUI(data) {
      var _this = this;

      if (typeof data == 'string') {
        data = JSON.parse(data);
      }

      if (data.elements == undefined) {
        data.elements = [];
      }

      var base_element = $(this.container.getElement())[0];
      base_element.innerHTML = "";
      var container = document.createElement("div");
      $(container).css("overflow", "auto");
      $(container).width("100%");
      $(container).height("100%");
      var table = document.createElement("table"); // Build the header

      var header = document.createElement("thead");
      var header_row = document.createElement("tr");
      var header_titles = ['position', 'clientID', 'state', 'options'];
      header_titles.map(function (x) {
        var h = document.createElement("th");
        h.innerText = x;
        return h;
      }).forEach(function (x) {
        return header_row.appendChild(x);
      });
      header.appendChild(header_row);
      table.appendChild(header);
      var tbody = document.createElement("tbody");

      var _iterator = _createForOfIteratorHelper(data.elements),
          _step;

      try {
        var _loop = function _loop() {
          var x = _step.value;
          var optparse = x.options;

          if (typeof optparse == 'string') {} else if (optparse == undefined) {
            if (x.output != undefined && x.type == "orphan") {
              optparse = document.createElement("button");

              optparse.onclick = function (click) {
                _this.diode.addContentItem({
                  'type': 'component',
                  'componentName': 'TerminalComponent',
                  'componentState': {
                    current_value: x.output
                  },
                  'title': 'Output'
                });
              };

              optparse.innerText = "Output";
            }
          } else {
            if (optparse.type == undefined) {
              optparse = optparse.perfopts;
            }

            optparse = optparse.mode + ", coresets " + optparse.core_counts;
          }

          var values = [x['index'], x['client_id'], x['state'], optparse];
          var row = document.createElement("tr");
          values.map(function (y) {
            var c = document.createElement("td");
            if (typeof y == 'string' || typeof y == 'number') c.innerText = y;else {
              c.appendChild(y);
            }
            return c;
          }).forEach(function (y) {
            return row.appendChild(y);
          });
          tbody.appendChild(row);
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      table.appendChild(tbody);
      container.appendChild(table);
      base_element.appendChild(container);
      $(table).DataTable();
    }
  }, {
    key: "create",
    value: function create() {
      var _this2 = this;

      this._autorefresher = setInterval(function (x) {
        _this2.getCurrentQueue();
      }, 2000);
      $(this.container.getElement()).css("overflow", "auto");
      this.refreshUI({});
    }
  }, {
    key: "getCurrentQueue",
    value: function getCurrentQueue() {
      var _this3 = this;

      var post_params = {};
      (0,_main_js__WEBPACK_IMPORTED_MODULE_6__.REST_request)("/dace/api/v1.0/dispatcher/list/", post_params, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          // Got response
          _this3.refreshUI(xhr.response);
        }
      });
    }
  }]);

  return DIODE_Context_Runqueue;
}(_context__WEBPACK_IMPORTED_MODULE_7__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/sdfg.js":
/*!***************************************!*\
  !*** ./src/diode-ui/contexts/sdfg.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_SDFG": () => (/* binding */ DIODE_Context_SDFG)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/sdfg/sdfg_parser */ "./src/utils/sdfg/sdfg_parser.js");
/* harmony import */ var _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/sdfg/sdfg_utils */ "./src/utils/sdfg/sdfg_utils.js");
/* harmony import */ var _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/sdfg/json_serializer */ "./src/utils/sdfg/json_serializer.ts");
/* harmony import */ var _utils_context_menu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/context_menu */ "./src/utils/context_menu.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");
/* harmony import */ var _renderer_renderer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../renderer/renderer */ "./src/renderer/renderer.js");








function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var DIODE_Context_SDFG = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DIODE_Context_SDFG, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_SDFG);

  function DIODE_Context_SDFG(diode, gl_container, state) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context_SDFG);

    _this = _super.call(this, diode, gl_container, state);

    _this._message_handler = function (x) {
      return alert(x);
    };

    _this.renderer_pane = null;
    _this._analysis_values = {};
    console.log("state", state);
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_SDFG, [{
    key: "saveToState",
    value: function saveToState(dict_value) {
      var renamed_dict = {};
      var json_list = ['sdfg_data', 'sdfg'];

      for (var _i = 0, _Object$entries = Object.entries(dict_value); _i < _Object$entries.length; _i++) {
        var x = _Object$entries[_i];
        renamed_dict[x[0]] = json_list.includes(x[0]) && typeof x[1] != 'string' ? JSON.stringify(x[1]) : x[1];
      }

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_SDFG.prototype), "saveToState", this).call(this, renamed_dict);

      console.assert(this.getState().sdfg == undefined);
    }
  }, {
    key: "resetState",
    value: function resetState(dict_value) {
      var renamed_dict = {};
      var json_list = ['sdfg_data', 'sdfg'];

      for (var _i2 = 0, _Object$entries2 = Object.entries(dict_value); _i2 < _Object$entries2.length; _i2++) {
        var x = _Object$entries2[_i2];
        renamed_dict[x[0]] = json_list.includes(x[0]) && typeof x[1] != 'string' ? JSON.stringify(x[1]) : x[1];
      }

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_SDFG.prototype), "resetState", this).call(this, renamed_dict);

      console.assert(this.getState().sdfg == undefined);
    }
  }, {
    key: "getState",
    value: function getState() {
      var _state = (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_SDFG.prototype), "getState", this).call(this);

      var _transformed_state = {};
      var json_list = ['sdfg_data', 'sdfg'];

      for (var _i3 = 0, _Object$entries3 = Object.entries(_state); _i3 < _Object$entries3.length; _i3++) {
        var x = _Object$entries3[_i3];
        _transformed_state[x[0]] = typeof x[1] == 'string' && json_list.includes(x[0]) ? JSON.parse(x[1]) : x[1];
      }

      return _transformed_state;
    }
  }, {
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this2 = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__.default)(DIODE_Context_SDFG.prototype), "setupEvents", this).call(this, project);

      var transthis = this;
      var eh = this.diode.goldenlayout.eventHub;
      this.on(this._project.eventString('-req-new-sdfg'), function (msg) {
        if (typeof msg == 'string') msg = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_9__.parse_sdfg)(msg);

        if (msg.sdfg_name === _this2.getState()['sdfg_name']) {// Ok
        } else {
          // Names don't match - don't replace this one then.
          // #TODO: This means that renamed SDFGs will not work as expected.
          return;
        }

        setTimeout(function () {
          return eh.emit(_this2.project().eventString('new-sdfg'), 'ok');
        }, 1);

        _this2.create_renderer_pane(msg, true);
      }); // #TODO: When multiple sdfgs are present, the event name
      // should include a hash of the target context

      this.on(this._project.eventString('-req-sdfg-msg'), function (msg) {
        var ret = _this2.message_handler_filter(msg);

        if (ret === undefined) {
          ret = 'ok';
        }

        setTimeout(function () {
          return eh.emit(transthis._project.eventString('sdfg-msg'), ret);
        }, 1);
      });
      this.on(this._project.eventString('-req-sdfg_props'), function (msg) {
        // Echo with data
        if (msg != undefined) {
          _this2.discardInvalidated(msg);
        }

        var resp = _this2.getChangedSDFGPropertiesFromState();

        var named = {};
        named[_this2.getState()['sdfg_name']] = resp;
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('sdfg_props'), named);
        }, 1);
      }, true);
      this.on(this.project().eventString('-req-property-changed-' + this.getState().created), function (msg) {
        // Emit ok directly (to avoid caller timing out)
        setTimeout(function () {
          return eh.emit(_this2.project().eventString("property-changed-" + _this2.getState().created), "ok");
        }, 1);

        if (msg.type == "symbol-properties") {
          _this2.symbolPropertyChanged(msg.element, msg.name, msg.value);
        } else _this2.propertyChanged(msg.element, msg.name, msg.value);
      }, true);
      this.on(this.project().eventString('-req-delete-data-symbol-' + this.getState().created), function (msg) {
        setTimeout(function () {
          return eh.emit(_this2.project().eventString("delete-data-symbol-" + _this2.getState().created), "ok");
        }, 1);

        _this2.removeDataSymbol(msg);
      });
      this.on(this.project().eventString('-req-add-data-symbol-' + this.getState().created), function (msg) {
        setTimeout(function () {
          return eh.emit(_this2.project().eventString("add-data-symbol-" + _this2.getState().created), "ok");
        }, 1);

        _this2.addDataSymbol(msg.type, msg.name);
      });
      this.on(this.project().eventString('-req-draw-perfinfo'), function (msg) {
        setTimeout(function () {
          return eh.emit(transthis._project.eventString('draw-perfinfo'), "ok");
        }, 1);
        _this2._analysis_values = msg.map(function (x) {
          return {
            forProgram: x[0],
            AnalysisName: x[1],
            runopts: x[2],
            forUnifiedID: x[3],
            forSuperSection: x[4],
            forSection: x[5],
            data: JSON.parse(x[6])
          };
        });

        _this2.renderer_pane.drawAllPerfInfo();
      });
      this.on(this.project().eventString('-req-sdfg_object'), function (msg) {
        // Return the entire serialized SDFG
        var _state = _this2.getSDFGDataFromState();

        var sdfg = _state.type == 'SDFG' ? _state : _state.sdfg;
        var named = {};
        named[_this2.getState()['sdfg_name']] = sdfg; //named = JSON.stringify(named);

        setTimeout(function () {
          return eh.emit(_this2.project().eventString("sdfg_object"), named);
        }, 1);
      }, true);
    }
  }, {
    key: "removeDataSymbol",
    value: function removeDataSymbol(aname) {
      var o = this.getSDFGDataFromState();
      var sdfg = o['sdfg'];
      var found = false;

      for (var _i4 = 0, _Object$keys = Object.keys(sdfg.attributes._arrays); _i4 < _Object$keys.length; _i4++) {
        var x = _Object$keys[_i4];

        if (x == aname) {
          // Matching name
          delete sdfg.attributes._arrays[x];
          found = true;
          break;
        }
      }

      if (!found) console.error("Did not find symbol " + name + " in SDFG, this is a fatal error");
      var old = this.getState();
      if (old.type == "SDFG") console.error("Defensive programming no longer allowed; change input");else old.sdfg_data.sdfg = sdfg;
      this.resetState(old);
      this.diode.refreshSDFG();
    }
  }, {
    key: "addDataSymbol",
    value: function addDataSymbol(type, aname) {
      if (aname == "") {
        alert("Invalid symbol name. Enter a symbol name in the input field");
        return;
      } // Create a dummy element, then allow changing later


      var typestr = "";
      if (type == "Scalar") typestr = "Scalar";else if (type == "Array") typestr = "Array";
      var data = {
        type: typestr,
        attributes: {
          dtype: "int32"
        }
      };
      var o = this.getSDFGDataFromState();
      var sdfg = o['sdfg'];
      var found = false;

      for (var _i5 = 0, _Object$keys2 = Object.keys(sdfg.attributes._arrays); _i5 < _Object$keys2.length; _i5++) {
        var x = _Object$keys2[_i5];

        if (x == aname) {
          // Matching name
          found = true;
          break;
        }
      }

      if (found) {
        this.diode.toast("Cannot add symbol", "A symbol with name " + aname + " does already exist.", "error", 3000);
        return;
      }

      sdfg.attributes._arrays[aname] = data;
      var old = this.getState();
      if (old.type == "SDFG") console.error("Defensive programming no longer allowed; change input");else old.sdfg_data.sdfg = sdfg;
      this.resetState(old);
      this.diode.refreshSDFG();
    }
  }, {
    key: "analysisProvider",
    value: function analysisProvider(aname, nodeinfo) {
      var unified_id = null;

      if (nodeinfo != null) {
        unified_id = parseInt(nodeinfo.stateid) << 16 | parseInt(nodeinfo.nodeid);
      }

      console.log("analysisProvider", aname, nodeinfo);

      if (aname == "getstates") {
        var states = this._analysis_values.map(function (x) {
          return x.forUnifiedID >> 16 & 0xFFFF;
        });

        return states;
      } else if (aname == "getnodes") {
        var nodes = this._analysis_values.map(function (x) {
          return x.forUnifiedID & 0xFFFF;
        });

        return nodes;
      } else if (aname == "all_vec_analyses") {
        var vec_analyses = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'VectorizationAnalysis';
        });

        var fltrd_vec_analyses = vec_analyses.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });
        return fltrd_vec_analyses;
      } else if (aname == 'CriticalPathAnalysis') {
        var cpa = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'CriticalPathAnalysis';
        });

        var filtered = cpa.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });
        return filtered;
      } else if (aname == 'ParallelizationAnalysis') {
        var pa = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'ThreadAnalysis';
        });

        var _filtered = pa.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });

        return _filtered;
      } else if (aname == 'MemoryAnalysis') {
        var ma = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'MemoryAnalysis';
        });

        var _filtered2 = ma.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });

        return _filtered2;
      } else if (aname == 'MemOpAnalysis') {
        var moa = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'MemoryOpAnalysis';
        });

        var _filtered3 = moa.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });

        return _filtered3;
      } else if (aname == 'CacheOpAnalysis') {
        var coa = this._analysis_values.filter(function (x) {
          return x.AnalysisName == 'CacheOpAnalysis';
        });

        var _filtered4 = coa.filter(function (x) {
          return x.forUnifiedID == unified_id;
        });

        return _filtered4;
      } else if (aname == "defaultRun") {
        // This pseudo-element returns a filter function that returns only elements from the "default" run configuration
        // #TODO: Make the default run configurable.
        // For now, the default run is the run with the most committed cores
        //return x => x.filter(y => y.runopts == '# ;export OMP_NUM_THREADS=4; Running in multirun config');
        return function (x) {
          var tmp = x.map(function (y) {
            var r = [];
            y.runopts.replace(/OMP_NUM_THREADS=(\d+)/gm, function (m, p) {
              return r.push(p);
            });
            return r;
          });
          var max_num = Math.max.apply(Math, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(tmp.map(function (x) {
            return parseInt(x);
          })));
          return x.filter(function (z) {
            return z.runopts == '# ;export OMP_NUM_THREADS=' + max_num + '; Running in multirun config';
          });
        };
      } else {
        throw "#TODO";
      }
    }
  }, {
    key: "message_handler_filter",
    value: function message_handler_filter(msg) {
      /*
          This function is a compatibility layer
      */
      msg = JSON.parse(msg);

      if (msg.sdfg_name != this.getState()['sdfg_name']) {
        return;
      }

      if (msg.type == 'clear-highlights') {
        if (this.highlighted_elements) this.highlighted_elements.forEach(function (e) {
          if (e) e.highlighted = false;
        });
        this.highlighted_elements = [];
        this.renderer_pane.draw_async();
      }

      if (msg.type == 'highlight-elements') {
        // Clear previously highlighted elements
        if (this.highlighted_elements) this.highlighted_elements.forEach(function (e) {
          if (e) e.highlighted = false;
        });
        this.highlighted_elements = []; // The input contains a list of multiple elements

        var _iterator = _createForOfIteratorHelper(msg.elements),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var x = _step.value;
            var sdfg_id = x[0],
                sid = x[1],
                nid = x[2];
            var elem = null;
            var graph = null;
            if (sdfg_id >= 0) graph = this.renderer_pane.sdfg_list[sdfg_id];else graph = this.renderer_pane.graph; // If graph is hidden, skip

            if (graph === undefined) continue;
            if (sid == -1) elem = graph.node(nid);else {
              var state = graph.node(sid); // If state is hidden, skip

              if (state === undefined) continue;
              elem = state.data.graph.node(nid);
            }
            if (elem !== undefined) this.highlighted_elements.push(elem);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this.highlighted_elements.forEach(function (e) {
          if (e) e.highlighted = true;
        });
        this.renderer_pane.draw_async();
      } else {// Default behavior is passing through (must be an object, not JSON-string)
        //this._message_handler(msg);
      }
    } // Returns a goldenlayout component if exists, or null if doesn't

  }, {
    key: "has_component",
    value: function has_component(comp_name) {
      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      // If parent component not provided, use root window
      if (!parent) parent = this.diode.goldenlayout.root;
      if ('componentName' in parent && parent.componentName === comp_name) return parent;

      if ('contentItems' in parent) {
        var _iterator2 = _createForOfIteratorHelper(parent.contentItems),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var ci = _step2.value;
            var result = this.has_component(comp_name, ci);
            if (result) return result;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return null;
    }
  }, {
    key: "render_free_variables",
    value: function render_free_variables(force_open) {
      var _this3 = this;

      var sdfg_dat = this.getSDFGDataFromState();
      if (sdfg_dat.type != "SDFG") sdfg_dat = sdfg_dat.sdfg;
      this.diode.replaceOrCreate(['render-free-vars'], 'PropWinComponent', {
        data: sdfg_dat,
        calling_context: this.created
      }, function () {
        console.log("Calling recreation function");
        var config = {
          type: 'component',
          componentName: 'PropWinComponent',
          componentState: {}
        };

        _this3.diode.addContentItem(config);

        setTimeout(function () {
          return _this3.render_free_variables(force_open);
        }, 1);
      });
    }
  }, {
    key: "merge_properties",
    value: function merge_properties(node_a, aprefix, node_b, bprefix) {
      /*  Merges node_a and node_b into a single node, such that the rendered properties are identical
          when selecting either node_a or node_b.
      */
      var en_attrs = _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__.SDFG_PropUtil.getAttributeNames(node_a);
      var ex_attrs = _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__.SDFG_PropUtil.getAttributeNames(node_b);
      var new_attrs = {};

      var _iterator3 = _createForOfIteratorHelper(en_attrs),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var na = _step3.value;
          var meta = _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__.SDFG_PropUtil.getMetaFor(node_a, na);

          if (meta.indirected) {
            // Most likely shared. Don't change.
            new_attrs['_meta_' + na] = meta;
            new_attrs[na] = node_a.attributes[na];
          } else {
            // Private. Add, but force-set a new Category (in this case, MapEntry)
            var mcpy = JSON.parse(JSON.stringify(meta));
            mcpy['category'] = node_a.type + " - " + mcpy['category'];
            new_attrs['_meta_' + aprefix + na] = mcpy;
            new_attrs[aprefix + na] = node_a.attributes[na];
          }
        } // Same for ex_attrs, but don't add if shared

      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(ex_attrs),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var xa = _step4.value;

          var _meta = _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__.SDFG_PropUtil.getMetaFor(node_b, xa);

          if (!_meta.indirected) {
            var _mcpy = JSON.parse(JSON.stringify(_meta));

            _mcpy['category'] = node_b.type + " - " + _mcpy['category'];
            _mcpy['_noderef'] = node_b.node_id;
            new_attrs['_meta_' + bprefix + xa] = _mcpy;
            new_attrs[bprefix + xa] = node_b.attributes[xa];
          }
        } // Copy the first node for good measure
        // TODO: Inhibits property update for map/array

      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var ecpy = JSON.parse(JSON.stringify(node_a));
      ecpy.attributes = new_attrs;
      return ecpy;
    }
  }, {
    key: "getSDFGPropertiesFromState",
    value: function getSDFGPropertiesFromState() {
      var o = this.getSDFGDataFromState();
      var props = o['sdfg_props'];
      return props;
    }
  }, {
    key: "getSDFGDataFromState",
    value: function getSDFGDataFromState() {
      var _state = this.getState();

      var o = null;

      if (_state.sdfg != undefined) {
        o = _state;
      } else {
        o = _state['sdfg_data'];
      }

      if (typeof o == 'string') {
        o = JSON.parse(o);
      }

      while (typeof o.sdfg == 'string') {
        o.sdfg = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_9__.parse_sdfg)(o.sdfg);
      }

      return o;
    }
  }, {
    key: "renderProperties",
    value: function renderProperties(node) {
      /*
          node: object, duck-typed
              
      */
      var params = node.data;
      var transthis = this; // Render in the (single, global) property window

      this.diode.renderPropertiesInWindow(transthis, node, params);
    }
  }, {
    key: "getSDFGElementReference",
    value: function getSDFGElementReference(node_id, state_id) {
      if (node_id != null && node_id.constructor == Object) {
        return this.getEdgeReference(node_id, state_id);
      } else {
        return this.getNodeReference(node_id, state_id);
      }
    }
  }, {
    key: "getEdgeReference",
    value: function getEdgeReference(node_id, state_id) {
      var o = this.getSDFGDataFromState();
      var sdfg = o['sdfg'];

      if (state_id == undefined) {
        // Look for sdfg-level edges
        var _iterator5 = _createForOfIteratorHelper(sdfg.edges),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var e = _step5.value;

            if (e.src == node_id.src && e.dst == node_id.dst) {
              return [e.attributes.data, sdfg];
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }

      var _iterator6 = _createForOfIteratorHelper(sdfg.nodes),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var x = _step6.value;

          if (x.id == state_id) {
            var _iterator7 = _createForOfIteratorHelper(x.edges),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var _e = _step7.value;

                if (_e.src == node_id.src && _e.dst == node_id.dst) {
                  return [_e.attributes.data, sdfg];
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            break;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "getNodeReference",
    value: function getNodeReference(node_id, state_id) {
      var o = this.getSDFGDataFromState();
      var sdfg = o['sdfg'];

      var _iterator8 = _createForOfIteratorHelper(sdfg.nodes),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var x = _step8.value;

          if (x.id == state_id) {
            if (node_id == null) return [x, sdfg];

            var _iterator9 = _createForOfIteratorHelper(x.nodes),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var n = _step9.value;

                if (n.id == node_id) {
                  return [n, sdfg];
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            break;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "symbolPropertyChanged",
    value: function symbolPropertyChanged(node, name, value) {
      /*
          A data symbol was changed.
      */
      console.log("symbolPropertyChanged", name, value); // Search arrays first

      var o = this.getSDFGDataFromState();
      var sdfg = o['sdfg'];
      var found = false;
      var d = node.data();

      for (var _i6 = 0, _Object$keys3 = Object.keys(sdfg.attributes._arrays); _i6 < _Object$keys3.length; _i6++) {
        var x = _Object$keys3[_i6];

        if (x == d[0]) {
          // Matching name
          sdfg.attributes._arrays[x].attributes[name] = value;
          found = true;
          break;
        }
      }

      if (!found) console.error("Did not find symbol " + name + " in SDFG, this is a fatal error");
      var old = this.getState();
      if (old.type == "SDFG") console.error("Defensive programming no longer allowed; change input");else old.sdfg_data.sdfg = sdfg;
      this.resetState(old);
      this.diode.refreshSDFG();
    }
  }, {
    key: "propertyChanged",
    value: function propertyChanged(node, name, value) {
      /*
          When a node-property is changed, the changed data is written back
          into the state.
      */
      var nref = node.element;
      nref.attributes[name] = value;
      var sdfg = this.renderer_pane.sdfg;
      var old = this.getState();
      if (old.type == "SDFG") old = sdfg;else old.sdfg_data.sdfg = sdfg;
      this.resetState(old);
      this.diode.refreshSDFG();
    }
  }, {
    key: "create_renderer_pane",
    value: function create_renderer_pane() {
      var _this4 = this;

      var sdfg_data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (sdfg_data == undefined) {
        sdfg_data = this.getState()["sdfg_data"];
      }

      var tmp = sdfg_data;

      if (typeof tmp === 'string') {
        tmp = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_9__.parse_sdfg)(sdfg_data);
      } else {
        if ('sdfg' in sdfg_data) tmp = sdfg_data;else tmp = {
          sdfg: sdfg_data
        };
      }

      {
        // Load the properties from json instead of loading the old properties
        // This means deleting any property delivered
        // This is just so we don't accidentally use the old format
        console.assert(tmp.sdfg_props === undefined);
      }
      {
        // Reset the state to avoid artifacts
        var s = this.getState();
        console.assert(s.sdfg_data != undefined);
        delete s.sdfg_data;
        this.resetState(s);
      }
      this.saveToState({
        "sdfg_data": tmp
      });
      if (this.renderer_pane !== null) this.renderer_pane.set_sdfg(tmp.sdfg);else {
        var sdfv = new _renderer_renderer__WEBPACK_IMPORTED_MODULE_12__.SDFGRenderer(tmp.sdfg, this.container.getElement()[0], function (et, e, c, el, r, sle, ed) {
          return _this4.on_renderer_mouse_event(et, e, c, el, r, sle, ed);
        }, null, false, 'white');
        this.renderer_pane = sdfv;
      } // Display data descriptors by default (in parallel to the creation of the renderer)

      this.render_free_variables(true);
    }
  }, {
    key: "on_renderer_mouse_event",
    value: function on_renderer_mouse_event(evtype, event, canvas_coords, elements, renderer, selected_elements, ends_drag) {
      var _this5 = this;

      var state_only = false;
      var clicked_states = elements.states;
      var clicked_nodes = elements.nodes;
      var clicked_edges = elements.edges;
      var clicked_interstate_edges = elements.isedges;
      var clicked_connectors = elements.connectors;
      var total_elements = clicked_states.length + clicked_nodes.length + clicked_edges.length + clicked_interstate_edges.length + clicked_connectors.length;
      var foreground_elem = null;
      if (selected_elements.length > 0) foreground_elem = selected_elements[0];else total_elements = 0; // Clear context menu

      if (evtype === 'click' || evtype === 'doubleclick' || evtype === 'mousedown' || evtype === 'contextmenu' || evtype === 'wheel') {
        if (this.contextmenu) {
          this.contextmenu.destroy();
          this.contextmenu = null;
        }
      } // Check if anything was clicked at all


      if (total_elements == 0 && evtype === 'click') {
        // Clear highlighted elements
        if (this.highlighted_elements) this.highlighted_elements.forEach(function (e) {
          if (e) e.stroke_color = null;
        }); // Nothing was selected

        this.render_free_variables(false);
        return true;
      }

      if (total_elements == 0 && evtype === 'contextmenu') {
        var cmenu = new _utils_context_menu__WEBPACK_IMPORTED_MODULE_10__.ContextMenu();
        cmenu.addOption("SDFG Properties", function (x) {
          _this5.render_free_variables(true);
        });
        cmenu.show(event.x, event.y);
        this.contextmenu = cmenu;
        return false;
      }

      if (clicked_nodes.length + clicked_edges.length + clicked_interstate_edges.length === 0) {
        // A state was selected
        if (clicked_states.length > 0) state_only = true;
      }

      var state_id = null,
          node_id = null;
      if (clicked_states.length > 0) state_id = clicked_states[0].id;
      if (clicked_interstate_edges.length > 0) node_id = clicked_interstate_edges[0].id;
      if (clicked_nodes.length > 0) node_id = clicked_nodes[0].id;else if (clicked_edges.length > 0) node_id = clicked_edges[0].id;

      if (evtype === "contextmenu") {
        // Context menu was requested
        var spos = {
          x: event.x,
          y: event.y
        };
        var sdfg_name = renderer.sdfg.attributes.name;

        var _cmenu = new _utils_context_menu__WEBPACK_IMPORTED_MODULE_10__.ContextMenu(); ///////////////////////////////////////////////////////////
        // Collapse/Expand


        var sdfg = foreground_elem ? foreground_elem.sdfg : null;
        var sdfg_elem = null;
        if (foreground_elem instanceof State) sdfg_elem = foreground_elem.data.state;else if (foreground_elem instanceof SDFGNode) {
          sdfg_elem = foreground_elem.data.node; // If a scope exit node, use entry instead

          if (sdfg_elem.type.endsWith("Exit")) sdfg_elem = sdfg.nodes[foreground_elem.parent_id].nodes[sdfg_elem.scope_entry];
        } else sdfg_elem = null; // Toggle collapsed state

        if (sdfg_elem && 'is_collapsed' in sdfg_elem.attributes) {
          _cmenu.addOption(sdfg_elem.attributes.is_collapsed ? 'Expand' : 'Collapse', function (x) {
            sdfg_elem.attributes.is_collapsed = !sdfg_elem.attributes.is_collapsed;

            _this5.renderer_pane.relayout();

            _this5.renderer_pane.draw_async();
          });
        } ///////////////////////////////////////////////////////////


        _cmenu.addOption("Show transformations", function (x) {
          console.log("'Show transformations' was clicked");

          _this5.project().request(['highlight-transformations-' + sdfg_name], function (x) {}, {
            params: {
              state_id: state_id,
              node_id: node_id
            }
          });
        });

        _cmenu.addOption("Apply transformation \u25B6", function (x) {
          console.log("'Apply transformation' was clicked"); // Find available transformations for this node

          _this5.project().request(['get-transformations-' + sdfg_name], function (x) {
            console.log("get-transformations response: ", x);
            var tmp = Object.values(x)[0]; // Create a sub-menu at the correct position

            var submenu = new _utils_context_menu__WEBPACK_IMPORTED_MODULE_10__.ContextMenu();

            var _iterator10 = _createForOfIteratorHelper(tmp),
                _step10;

            try {
              var _loop = function _loop() {
                var y = _step10.value;
                submenu.addOption(y.opt_name, function (x) {
                  _this5.project().request(['apply-transformation-' + sdfg_name], function (x) {}, {
                    params: y.id_name
                  });
                });
              };

              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }

            submenu.show(spos.x + _cmenu.width(), spos.y);
          }, {
            params: {
              state_id: state_id,
              node_id: node_id
            }
          }); // Don't close the current context menu from this event


          x.preventDefault();
          x.stopPropagation();
        });

        _cmenu.addOption("Show Source Code", function (x) {
          console.log("go to source code");
        });

        _cmenu.addOption("Show Generated Code", function (x) {
          console.log("go to generated code");
        });

        _cmenu.addOption("Properties", function (x) {
          console.log("Force-open property pane");
        });

        _cmenu.show(spos.x, spos.y);

        this.contextmenu = _cmenu;
        return false;
      }

      if (evtype !== "click") return false; // Clear highlighted elements

      if (this.highlighted_elements) this.highlighted_elements.forEach(function (e) {
        if (e) e.stroke_color = null;
      }); // Mark this element red

      this.highlighted_elements = selected_elements; // Render properties asynchronously

      setTimeout(function () {
        // Get and render the properties from now on
        console.log("sdfg", foreground_elem.sdfg);
        var dst_nodeid = null;

        if (foreground_elem instanceof Edge && foreground_elem.parent_id !== null) {
          var edge = foreground_elem.sdfg.nodes[state_id].edges[foreground_elem.id];
          dst_nodeid = edge.dst;
        }

        var render_props = function render_props(element_list) {
          var properties = [];
          element_list.forEach(function (element) {
            // Collect all properties and metadata for each element
            var attr = element.attributes;
            var akeys = Object.keys(attr).filter(function (x) {
              return !x.startsWith("_meta_");
            });

            var _iterator11 = _createForOfIteratorHelper(akeys),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var k = _step11.value;
                var value = attr[k];
                var meta = attr["_meta_" + k];
                if (meta == undefined) continue;
                var pdata = JSON.parse(JSON.stringify(meta));
                pdata.value = value;
                pdata.name = k;
                properties.push({
                  property: pdata,
                  element: element,
                  sdfg: foreground_elem.sdfg,
                  category: element.type + ' - ' + pdata.category
                });
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          });

          _this5.renderProperties({
            data: properties
          });
        };

        if (foreground_elem instanceof Edge) render_props([foreground_elem.data]);else if (foreground_elem instanceof SDFGNode) {
          var n = foreground_elem.data.node; // Set state ID, if exists

          n.parent_id = foreground_elem.parent_id;
          var state = foreground_elem.sdfg.nodes[foreground_elem.parent_id]; // Special case treatment for scoping nodes (i.e. Maps, Consumes, ...)

          if (n.type.endsWith("Entry")) {
            // Find the matching exit node
            var exit_node = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_8__.find_exit_for_entry)(state.nodes, n); // Highlight both entry and exit nodes

            var graph = renderer.sdfg_list[foreground_elem.sdfg.sdfg_list_id];
            var gstate = graph.node(foreground_elem.parent_id);
            var rnode = gstate.data.graph.node(exit_node.id);

            _this5.highlighted_elements.push(rnode);

            render_props([n, exit_node]);
          } else if (n.type.endsWith("Exit")) {
            // Find the matching entry node and continue with that
            var entry_id = parseInt(n.scope_entry);
            var entry_node = state.nodes[entry_id]; // Highlight both entry and exit nodes

            var _graph = renderer.sdfg_list[foreground_elem.sdfg.sdfg_list_id];

            var _gstate = _graph.node(foreground_elem.parent_id);

            var _rnode = _gstate.data.graph.node(entry_node.id);

            _this5.highlighted_elements.push(_rnode);

            render_props([entry_node, n]);
          } else if (n.type === "AccessNode") {
            // Find matching data descriptor and show that as well
            var ndesc = foreground_elem.sdfg.attributes._arrays[n.attributes.data];
            render_props([n, ndesc]);
          } else render_props([n]);
        } else if (foreground_elem instanceof State) render_props([foreground_elem.data.state]);

        _this5.highlighted_elements.forEach(function (e) {
          if (e) e.stroke_color = "red";
        });

        renderer.draw_async();
      }, 0); // Timeout handler draws asynchronously

      return false;
    }
  }]);

  return DIODE_Context_SDFG;
}(_context__WEBPACK_IMPORTED_MODULE_11__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/settings.js":
/*!*******************************************!*\
  !*** ./src/diode-ui/contexts/settings.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_Settings": () => (/* binding */ DIODE_Context_Settings)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../main */ "./src/main.js");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../table */ "./src/diode-ui/table.js");
/* harmony import */ var _diode_settings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../diode_settings */ "./src/diode-ui/diode_settings.js");
/* harmony import */ var _treeview__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../treeview */ "./src/diode-ui/treeview.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");
/* harmony import */ var _diode__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../diode */ "./src/diode-ui/diode.js");









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var $ = globalThis.$;
var DIODE_Context_Settings = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_Settings, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_Settings);

  function DIODE_Context_Settings(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DIODE_Context_Settings);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DIODE_Context_Settings, [{
    key: "settings_change_callback",
    value: function settings_change_callback(type, path, value) {
      console.assert(value !== undefined, "Undefined value");
      console.log("Setting changed", path, value);
      this.diode.settings().change(path, value);
      this.set_settings();
    }
  }, {
    key: "link_togglable_onclick",
    value: function link_togglable_onclick(element, toToggle) {
      var toggleclassname = "collapsed_container";
      element.on('click', function () {
        if (toToggle.hasClass(toggleclassname)) {
          toToggle.removeClass(toggleclassname);
        } else {
          toToggle.addClass(toggleclassname);
        }
      });
    }
  }, {
    key: "parse_settings2",
    value: function parse_settings2(settings) {
      var _this = this;

      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var is_topmost = false;

      if (parent === undefined) {
        parent = new _treeview__WEBPACK_IMPORTED_MODULE_11__.ValueTreeNode("Settings", null);
        is_topmost = true;
      }

      var dicts = [];
      var values = [];
      Object.entries(settings).forEach(function (_ref) {
        var _ref2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__.default)(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        var meta = value.meta;
        var val = value.value;

        if (meta.type == 'dict') {
          dicts.push([key, value]);
        } else {
          values.push([key, value]);
        }
      });
      var settings_lookup = {}; // Create the elements that are not in subcategories (=dicts) here

      var dt = new _table__WEBPACK_IMPORTED_MODULE_9__.Table();
      {
        var params = JSON.parse(JSON.stringify(values));
        params = params.map(function (x) {
          var key = x[0];
          x = x[1];
          var tmp = x.meta;
          tmp.value = x.value;
          tmp.name = tmp.title;
          tmp.category = "General";
          tmp.key = key;
          return tmp;
        });
        var cur_dt = dt;
        var dtc = null;
        var categories = {};

        var _iterator = _createForOfIteratorHelper(params),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _x = _step.value;
            var cat = _x.category;

            if (categories[cat] == undefined) {
              categories[cat] = [];
            }

            categories[cat].push(_x);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (!_diode__WEBPACK_IMPORTED_MODULE_13__.DIODE.debugDevMode()) {
          delete categories["(Debug)"];
        } // INSERTED


        var transthis = {
          propertyChanged: function propertyChanged(path, name, value) {
            console.log("PropertyChanged", path, name, value);

            _this.settings_change_callback(undefined, path, value);
          }
        }; // !INSERTED

        for (var _i = 0, _Object$entries = Object.entries(categories); _i < _Object$entries.length; _i++) {
          var z = _Object$entries[_i];
          // Sort within category
          var cat_name = z[0];
          var y = z[1].sort(function (a, b) {
            return a.name.localeCompare(b.name);
          }); // Add Category header

          cur_dt = dt;
          var sp = document.createElement('span');
          sp.innerText = cat_name;
          var tr = cur_dt.addRow(sp);
          tr.childNodes[0].colSpan = "2";
          dtc = new _table__WEBPACK_IMPORTED_MODULE_9__.TableCategory(cur_dt, tr);

          var _iterator2 = _createForOfIteratorHelper(y),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var x = _step2.value;
              settings_lookup[path] = x.value;
              var value_part = diode.getMatchingInput(transthis, x, [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(path), [x.key]));
              var cr = cur_dt.addRow(x.name, value_part);

              if (dtc != null) {
                dtc.addContentRow(cr);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }

        dt.setCSSClass("diode_property_table");
      } // Link handlers

      parent.setHandler("activate", function (node, level) {
        if (level == 1) {
          var repr = node.representative(); // Clear all selections in this tree

          node.head().asPreOrderArray(function (x) {
            return x.representative();
          }).forEach(function (x) {
            return x.classList.remove("selected");
          });
          repr.classList.add("selected");
          var cont = $("#diode_settings_props_container")[0];
          cont.innerHTML = "";
          dt.createIn(cont);
        }
      }); // Recurse into (sorted) dicts

      dicts = dicts.sort(function (a, b) {
        return a[1].meta.title.localeCompare(b[1].meta.title);
      });

      var _iterator3 = _createForOfIteratorHelper(dicts),
          _step3;

      try {
        var _loop = function _loop() {
          var d = _step3.value;
          var key = d[0];
          d = d[1];
          var setting_path = path.concat(key); // Create the list element first

          var newparent = parent.addNode(d.meta.title, null); // The representative DOM node does not exist yet - add hints after half a second.

          setTimeout(function () {
            return newparent.representative().title = d.meta.description;
          }, 500); // Recurse

          console.log("Setting path", setting_path);

          var tmp = _this.parse_settings2(d.value, newparent, setting_path);

          settings_lookup = _objectSpread(_objectSpread({}, settings_lookup), tmp);
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (is_topmost) {
        var _tree = new _treeview__WEBPACK_IMPORTED_MODULE_11__.TreeView(parent);

        _tree.create_html_in($("#diode_settings_container")[0]);
      }

      return settings_lookup;
    }
  }, {
    key: "get_settings",
    value: function get_settings() {
      var _this2 = this;

      var post_params = {
        client_id: this.diode.getClientID()
      };
      (0,_main__WEBPACK_IMPORTED_MODULE_8__.REST_request)("/dace/api/v1.0/preferences/get", post_params, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          var settings = _this2.parse_settings2(JSON.parse(xhr.response));

          _this2.diode._settings = new _diode_settings__WEBPACK_IMPORTED_MODULE_10__.DIODE_Settings(settings); //this.diode._settings = null;
        }
      });
    }
  }, {
    key: "set_settings",
    value: function set_settings() {
      if (!this.diode.settings().hasChanged()) {
        // Do not update if nothing has changed
        return;
      } // Find settings that changed and write them back


      var changed_values = this.diode.settings().changedValues();
      this.saveToState({
        "changed": changed_values,
        "confirmed": this.diode.settings().values()
      }); // #TODO: Maybe only update when a "save"-Button is clicked?

      var transthis = this;
      var client_id = this.diode.getClientID();
      var post_params = changed_values;
      post_params['client_id'] = client_id; // Debounce

      var debounced = this.diode.debounce("settings-changed", function () {
        var _this3 = this;

        (0,_main__WEBPACK_IMPORTED_MODULE_8__.REST_request)("/dace/api/v1.0/preferences/set", post_params, function (xhr) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            transthis.diode.settings().clearChanged();

            _this3.diode.toast("Settings changed", "The changed settings were applied at remote server", "info", 3000);
          }
        });
      }, 1000);
      debounced();
    }
  }]);

  return DIODE_Context_Settings;
}(_context__WEBPACK_IMPORTED_MODULE_12__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/start_page.js":
/*!*********************************************!*\
  !*** ./src/diode-ui/contexts/start_page.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_StartPage": () => (/* binding */ DIODE_Context_StartPage)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");
/* harmony import */ var _diode_project__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../diode_project */ "./src/diode-ui/diode_project.js");






function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var $ = globalThis.$;
var DIODE_Context_StartPage = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_StartPage, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_StartPage);

  function DIODE_Context_StartPage(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_StartPage);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_StartPage, [{
    key: "create",
    value: function create() {
      var _this = this;

      var plus = "<svg width=\"50\" height=\"50\" version=\"1.1\" viewBox=\"0 0 13.2 13.2\" xmlns=\"http://www.w3.org/2000/svg\"><g transform=\"translate(0 -284)\"><g fill=\"none\" stroke=\"#008000\" stroke-width=\"2.65\"><path d=\"m6.61 285v10.6\"/><path d=\"m1.32 290h10.6\"/></g></g></svg>";
      plus = "data:image/svg+xml;base64," + btoa(plus);
      this.container.setTitle("Start Page");
      var parent = $(this.container.getElement())[0];
      var header = document.createElement('h1');
      header.id = "startpage_header";
      header.innerText = "DIODE";
      parent.appendChild(header);
      var startpage_container = document.createElement('div');
      startpage_container.id = 'startpage_container';
      startpage_container.classList = "flex_row";
      startpage_container.style = "width: 100%;height:100%;";
      var startpage_recent = document.createElement('div');
      startpage_recent.id = 'startpage_recent';
      {
        var file_title = document.createElement('div');
        file_title.innerText = "New";
        file_title.classList = "startpage_title";
        startpage_recent.appendChild(file_title);
        startpage_recent.appendChild(this.createStartpageListElement("Create a new Project", null, null, plus, function (x) {
          _this.container.close(); // Force creation of a new "project" instance (since we are explicitly creating a new project)
          // (NOTE: Functionality moved to "newFile")
          //this.diode.createNewProject();


          _this.diode.openUploader("code-python");
        }));
        var recent_title = document.createElement('div');
        recent_title.innerText = "Recent";
        recent_title.classList = "startpage_title";
        startpage_recent.appendChild(recent_title);
      }
      var startpage_resources = document.createElement('div');
      startpage_resources.id = 'additional_resources';
      {
        var resource_title = document.createElement('div');
        resource_title.innerText = "Resources";
        resource_title.classList = "startpage_title";
        startpage_resources.appendChild(resource_title);
      } // Load elements from list

      {
        var projects = _diode_project__WEBPACK_IMPORTED_MODULE_6__.DIODE_Project.getSavedProjects();

        var _iterator = _createForOfIteratorHelper(projects),
            _step;

        try {
          var _loop = function _loop() {
            var p = _step.value;
            console.log("p", p);
            var pdata = _diode_project__WEBPACK_IMPORTED_MODULE_6__.DIODE_Project.getProjectData(p);
            startpage_recent.appendChild(_this.createStartpageListElement(p, pdata.last_saved, pdata.description, undefined, function (x) {
              _diode_project__WEBPACK_IMPORTED_MODULE_6__.DIODE_Project.load(_this.diode, p);
            }));
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      var dace_logo = "\n        <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" id=\"svg13\" height=\"60.891094\" width=\"57.565113\" version=\"1.0\" viewBox=\"0 0 143.91279 152.22773\" inkscape:version=\"0.92.3 (2405546, 2018-03-11)\">\n          \n          <metadata id=\"metadata17\">\n            \n          </metadata>\n          <defs id=\"defs3\">\n            <pattern y=\"0\" x=\"0\" height=\"6\" width=\"6\" patternUnits=\"userSpaceOnUse\" id=\"EMFhbasepattern\"/>\n          </defs>\n          <path id=\"path5\" d=\"m 0,0 h 71.95639 c 39.75591,0 71.95639,34.079345 71.95639,76.11387 0,42.05451 -32.20048,76.11387 -71.95639,76.11387 H 0 Z\" style=\"fill:#0070c0;fill-opacity:1;fill-rule:evenodd;stroke:none\"/>\n          <path id=\"path7\" d=\"M 76.913385,27.183525 115.29013,75.154451 76.913385,123.12538 Z\" style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\"/>\n          <path id=\"path9\" d=\"M 28.622652,27.183525 66.999394,50.049666 V 100.27923 L 28.622652,123.12538 Z\" style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\"/>\n          <path id=\"path11\" d=\"m 67.079345,75.234403 h 9.93398\" style=\"fill:none;stroke:#ffffff;stroke-width:3.99757719px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:8;stroke-dasharray:none;stroke-opacity:1\"/>\n        </svg>";
      dace_logo = "data:image/svg+xml;base64," + btoa(dace_logo);
      startpage_resources.appendChild(this.createStartpageListElement("Visit DaCe on GitHub", null, null, "external_lib/GitHub-Mark.png", function (x) {
        window.open("https://github.com/spcl/dace", "_blank");
      }));
      startpage_resources.appendChild(this.createStartpageListElement("Visit project page", null, null, dace_logo, function (x) {
        window.open("https://spcl.inf.ethz.ch/Research/DAPP/", "_blank");
      }));
      startpage_container.appendChild(startpage_recent);
      startpage_container.appendChild(startpage_resources);
      parent.appendChild(startpage_container);
    }
  }, {
    key: "createStartpageListElement",
    value: function createStartpageListElement(name, time, info) {
      var image = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var onclick = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (x) {
        return x;
      };
      var diode_image = "<svg width=\"50\" height=\"50\" version=\"1.1\" viewBox=\"0 0 13.229 13.229\" xmlns=\"http://www.w3.org/2000/svg\"><g transform=\"translate(0 -283.77)\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\".68792\"><path d=\"m3.3994 287.29v6.9099l6.5603-3.7876-6.5644-3.7899z\" stroke-linejoin=\"round\"/><g><path d=\"m3.3191 290.39h-2.6127\"/><path d=\"m12.624 290.41h-2.6647v-3.3585\"/><path d=\"m9.9597 290.41v2.9962\"/></g></g></svg>";

      if (image == undefined) {
        image = "data:image/svg+xml;base64," + btoa(diode_image);
      }

      var elem = document.createElement("div");
      elem.classList = "startpage_list_element";
      var cols = document.createElement('div');
      {
        cols.classList = "flex_row"; // Col 1: Image

        var img = document.createElement('img');
        img.src = image;
        img.width = "50";
        img.height = "50";
        cols.appendChild(img); // Col 2: Row

        var col2 = document.createElement('div');
        {
          col2.classList = "flex_column"; // This row includes project name and details

          var proj_name = document.createElement('span');
          proj_name.innerText = name;
          var proj_detail = document.createElement('span');
          proj_detail.innerText = info;
          col2.appendChild(proj_name);
          if (info != null) col2.appendChild(proj_detail);else {
            // We have space to use - use a bigger font
            proj_name.style.fontSize = "1.2rem";
            col2.style.justifyContent = "center";
          }
        }
        cols.appendChild(col2);
        var col3 = document.createElement('div');
        {
          col3.classList = "flex_column"; // This row includes project date

          var proj_date = document.createElement('span');
          proj_date.innerText = time;
          var proj_unused = document.createElement('span');

          if (proj_date != null) {
            col3.appendChild(proj_date);
            col3.appendChild(proj_unused);
          }
        }
        cols.appendChild(col3);
      }
      elem.appendChild(cols);
      elem.addEventListener('click', onclick);
      return elem;
    }
  }]);

  return DIODE_Context_StartPage;
}(_context__WEBPACK_IMPORTED_MODULE_5__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/terminal.js":
/*!*******************************************!*\
  !*** ./src/diode-ui/contexts/terminal.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_Terminal": () => (/* binding */ DIODE_Context_Terminal)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var DIODE_Context_Terminal = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_Terminal, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_Terminal);

  function DIODE_Context_Terminal(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Context_Terminal);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Context_Terminal, [{
    key: "setEditorReference",
    value: function setEditorReference(editor) {
      this.editor = editor;
    }
  }, {
    key: "append",
    value: function append(output) {
      var session = this.editor.getSession();
      session.insert({
        row: session.getLength(),
        column: 0
      }, output);
      var curr_str = session.getValue(); // Extract performance information if available

      var re = /~#~#([^\n]+)/gm;

      var matches = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(curr_str.matchAll(re));

      var _iterator = _createForOfIteratorHelper(matches),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var m = _step.value;
          console.log("Got match", m); // We want to access the second element (index 1) because it contains the list

          var perflist = m[1]; // Because this is a python list, it may contain "'" (single quotes), which is invalid json

          perflist = perflist.replace(/\'/g, '');
          perflist = JSON.parse(perflist);
          perflist.sort(function (a, b) {
            return a - b;
          });
          var median_val = perflist[Math.floor(perflist.length / 2)];
          console.log("Got median execution time", median_val);
          this.project().request(['new-time'], function () {}, {
            params: {
              time: median_val
            }
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.container.extendState({
        "current_value": curr_str
      });
      this.editor.clearSelection();
    }
  }]);

  return DIODE_Context_Terminal;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/contexts/transformation_history.js":
/*!*********************************************************!*\
  !*** ./src/diode-ui/contexts/transformation_history.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Context_TransformationHistory": () => (/* binding */ DIODE_Context_TransformationHistory)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context */ "./src/diode-ui/contexts/context.js");







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var $ = globalThis.$;
var DIODE_Context_TransformationHistory = /*#__PURE__*/function (_DIODE_Context) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DIODE_Context_TransformationHistory, _DIODE_Context);

  var _super = _createSuper(DIODE_Context_TransformationHistory);

  function DIODE_Context_TransformationHistory(diode, gl_container, state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Context_TransformationHistory);

    return _super.call(this, diode, gl_container, state);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Context_TransformationHistory, [{
    key: "setupEvents",
    value: function setupEvents(project) {
      var _this = this;

      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__.default)(DIODE_Context_TransformationHistory.prototype), "setupEvents", this).call(this, project);

      var eh = this.diode.goldenlayout.eventHub;
      this.on(this.project().eventString('-req-update-tfh'), function (msg) {
        // Load from project
        var hist = _this.project().getTransformationHistory();

        _this.create(hist);

        setTimeout(function () {
          return eh.emit(_this.project().eventString('update-tfh'), 'ok');
        }, 1);
      });
    }
  }, {
    key: "create",
    value: function create() {
      var hist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var parent_element = this.container.getElement();
      $(parent_element).css('overflow', 'auto');
      $(parent_element)[0].setAttribute("data-hint", '{"type": "DIODE_Element", "name": "TransformationHistory"}');
      parent_element = $(parent_element)[0];
      parent_element.innerHTML = '';
      var history_base_div = document.createElement("div");
      history_base_div.classList = "transformation_history_base";
      var history_scoll_div = document.createElement("div");
      history_scoll_div.classList = "transformation_history_list";
      this._history_scroll_div = history_scoll_div;
      history_base_div.appendChild(history_scoll_div);
      parent_element.innerHTML = "";
      parent_element.appendChild(history_base_div);
      var i = 0;

      var _iterator = _createForOfIteratorHelper(hist),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          this.addElementToHistory(x, i);
          ++i;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "addElementToHistory",
    value: function addElementToHistory(simple_node, index) {
      var _this2 = this;

      var hsd = this._history_scroll_div;
      var elem = document.createElement("div");
      elem.classList = "transformation_history_list_element";
      var title = document.createElement("div");
      title.classList = "transformation_history_list_element_title";
      title.innerText = Object.values(simple_node)[0][0].name;
      var ctrl = document.createElement("div");
      ctrl.classList = "flex_row transformation_history_list_element_control";
      {
        var revert = document.createElement("div");
        revert.classList = "revert-button";
        revert.title = "revert";
        revert.innerHTML = "<i class='material-icons'>undo</i>";
        $(revert).hover(function () {
          elem.classList.add("revert-hovered");
        }, function () {
          elem.classList.remove("revert-hovered");
        });
        revert.addEventListener('click', function (_x) {
          // Reset to the associated checkpoint
          var tsh = _this2.project().getTransformationSnapshots()[index];

          _this2.diode.multiple_SDFGs_available({
            compounds: tsh[1]
          }); // Remove the descending checkpoints


          _this2.project().discardTransformationsAfter(index);

          if (true) {
            _this2.diode.gatherProjectElementsAndCompile(_this2, {}, {
              sdfg_over_code: true
            });
          }
        });
        ctrl.appendChild(revert);
      }
      elem.appendChild(title);
      elem.appendChild(ctrl);
      hsd.appendChild(elem);
    }
  }]);

  return DIODE_Context_TransformationHistory;
}(_context__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context);

/***/ }),

/***/ "./src/diode-ui/diode.js":
/*!*******************************!*\
  !*** ./src/diode-ui/diode.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE": () => (/* binding */ DIODE)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./src/main.js");
/* harmony import */ var _diode_appearance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./diode_appearance */ "./src/diode-ui/diode_appearance.js");
/* harmony import */ var _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/sdfg/sdfg_parser */ "./src/utils/sdfg/sdfg_parser.js");
/* harmony import */ var _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/sdfg/json_serializer */ "./src/utils/sdfg/json_serializer.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./table */ "./src/diode-ui/table.js");
/* harmony import */ var _diode_settings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./diode_settings */ "./src/diode-ui/diode_settings.js");
/* harmony import */ var _diode_project__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./diode_project */ "./src/diode-ui/diode_project.js");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2020 ETH Zurich and the DaCe authors. All rights reserved.







var $ = globalThis.$;
var DIODE = /*#__PURE__*/function () {
  function DIODE() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DIODE);

    this._settings = new _diode_settings__WEBPACK_IMPORTED_MODULE_10__.DIODE_Settings();
    this._debouncing = {};
    this._background_projects = [];
    this._current_project = null;
    this._stale_data_button = null;
    this._shortcut_functions = {
      /*
      format:
      key: {
          .alt: Trigger if altKey is pressed
          .ctrl: Trigger if ctrlKey is pressed
          .function: Function to run
          .state: Multi-key only: state in state machine
          .expect: The state transitions (without the first state transition)
      }
      */
    };
    this._creation_counter = 0; // Load a client_id

    this._client_id = localStorage.getItem("diode_client_id");

    if (this._client_id == null) {
      this._client_id = this.getPseudorandom();
      localStorage.setItem("diode_client_id", this._client_id);
    } // Initialize appearance


    this._appearance = new _diode_appearance__WEBPACK_IMPORTED_MODULE_6__.Appearance(localStorage.getItem("DIODE/Appearance"));

    this._appearance.setOnChange(function (x) {
      localStorage.setItem("DIODE/Appearance", JSON.stringify(x.toStorable()));
    });
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DIODE, [{
    key: "setupEvents",
    value: function setupEvents() {
      var _this = this;

      this.goldenlayout.eventHub.on(this.project().eventString('-req-show_stale_data_button'), function (x) {
        _this.__impl_showStaleDataButton();
      });
      this.goldenlayout.eventHub.on(this.project().eventString('-req-remove_stale_data_button'), function (x) {
        _this.__impl_removeStaleDataButton();
      });
      this.goldenlayout.eventHub.on(this.project().eventString('-req-show_loading'), function (x) {
        _this.__impl_showIndeterminateLoading();
      });
      this.goldenlayout.eventHub.on(this.project().eventString('-req-hide_loading'), function (x) {
        _this.__impl_hideIndeterminateLoading();
      }); // Install the hint mechanic on the whole window

      window.addEventListener('contextmenu', function (ev) {
        console.log("contextmenu requested on", ev.target);

        _this.hint(ev);
      });
    }
  }, {
    key: "getRunConfigs",
    value: function getRunConfigs() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var tmp = localStorage.getItem("diode_run_configs");

      if (tmp != null) {
        tmp = JSON.parse(tmp);
      } else {
        // Create a default
        tmp = [{
          "Configuration name": "default",
          "Host": "localhost",
          "Use SSH": true,
          "SSH Key": this.pubSSH(),
          "SSH Key override": "",
          "Instrumentation": "off",
          "Number of threads": "[0]"
        }];
      }

      if (name != undefined) {
        var ret = tmp.filter(function (x) {
          return x['Configuration name'] == name;
        });

        if (ret.length == 0) {
          // Error
          console.error("Could not find a configuration with that name", name);
        } else {
          return ret[0];
        }
      }

      return tmp;
    }
  }, {
    key: "addToRunConfigs",
    value: function addToRunConfigs(config) {
      delete config['SSH Key']; // Don't save large, unnecessary data

      var existing = this.getRunConfigs();
      var i = 0;

      var _iterator = _createForOfIteratorHelper(existing),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;

          if (x['Configuration name'] == config['Configuration name']) {
            // Replace
            existing[i] = config;
            break;
          }

          ++i;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (i >= existing.length) {
        existing.push(config);
      }

      existing.sort(function (a, b) {
        return a['Configuration name'].localeCompare(b['Configuration name']);
      });
      localStorage.setItem("diode_run_configs", JSON.stringify(existing));
    }
  }, {
    key: "setCurrentRunConfig",
    value: function setCurrentRunConfig(name) {
      sessionStorage.setItem("diode_current_run_config", name);
    }
  }, {
    key: "getCurrentRunConfigName",
    value: function getCurrentRunConfigName() {
      var tmp = sessionStorage.getItem("diode_current_run_config");

      if (tmp == null) {
        return "default";
      } else {
        return tmp;
      }
    }
  }, {
    key: "getCurrentRunConfig",
    value: function getCurrentRunConfig() {
      var config = this.getRunConfigs(this.getCurrentRunConfigName());
      return config;
    }
  }, {
    key: "applyCurrentRunConfig",
    value: function applyCurrentRunConfig() {
      var _this2 = this;

      var config = this.getCurrentRunConfig();
      var new_settings = {};
      new_settings = _objectSpread(_objectSpread({}, new_settings), {
        "execution/general/host": config['Host']
      }); // Apply the runconfig values to the dace config

      if (config['Use SSH']) {
        var keyfile_string = /\S/.test(config['SSH Key override']) ? " -i " + config['SSH Key override'] + " " : " ";
        new_settings = _objectSpread(_objectSpread({}, new_settings), {
          "execution/general/execcmd": "ssh -oBatchMode=yes" + keyfile_string + "${host} ${command}",
          "execution/general/copycmd_r2l": "scp -B" + keyfile_string + " ${host}:${srcfile} ${dstfile}",
          "execution/general/copycmd_l2r": "scp -B" + keyfile_string + " ${srcfile} ${host}:${dstfile}"
        });
      } else {
        // Use standard / local commands
        new_settings = _objectSpread(_objectSpread({}, new_settings), {
          "execution/general/execcmd": "${command}",
          "execution/general/copycmd_r2l": "cp ${srcfile} ${dstfile}",
          "execution/general/copycmd_l2r": "cp ${srcfile} ${dstfile}"
        });
      } // Instrumentation settings are not to be applied here, but later when the run request is actually sent


      var ret = new Promise(function (resolve, reject) {
        var post_params = _objectSpread({
          client_id: _this2.getClientID()
        }, new_settings);

        (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v1.0/preferences/set", post_params, function (xhr) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            resolve(config);
          } else if (xhr.status !== 0 && !(xhr.status + "_").startsWith("2")) {
            reject();
          }
        });
      });
      return ret;
    }
  }, {
    key: "pubSSH",
    value: function pubSSH() {
      var cached = localStorage.getItem('diode_pubSSH');

      if (cached != null) {
        return cached;
      }

      (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v1.0/getPubSSH/", undefined, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          var j = JSON.parse(xhr.response);

          if (j.error == undefined) {
            var t = j.pubkey;
            localStorage.setItem('diode_pubSSH', t);
          } else {
            alert(j.error);
          }
        }
      }, 'GET');
    }
  }, {
    key: "hint",
    value: function hint(ev) {
      /*
          ev: Event triggering this hint.
      */
      var create_overlay = function create_overlay(_h, elem) {
        // Found hint data
        var fulldata = JSON.parse(_h); // #TODO: Link to documentation instead of using this placeholder

        $(elem).w2overlay("<div><h2>Help for category " + fulldata.type + "</h2>" + fulldata.name + "</div>");
      };

      var target = ev.target;

      var _h = target.getAttribute("data-hint");

      if (_h == null) {
        // Iterate chain
        if (!ev.composed) return;
        var x = ev.composedPath();

        var _iterator2 = _createForOfIteratorHelper(x),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var e = _step2.value;

            if (e.getAttribute != undefined) {
              _h = e.getAttribute("data-hint");
            } else _h = null;

            if (_h != null) {
              create_overlay(_h, e);
              ev.stopPropagation();
              ev.preventDefault();
              break;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return;
      } else {
        create_overlay(_h, target);
        ev.stopPropagation();
        ev.preventDefault();
      }

      console.log("Got hint data", _h);
    }
  }, {
    key: "openUploader",
    value: function openUploader() {
      var _this3 = this;

      var purpose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      w2popup.open({
        title: "Upload a code file",
        body: "\n<div class=\"w2ui-centered upload_flexbox\">\n    <label for=\"file-select\" style=\"flex-grow: 1\">\n        <div class=\"diode_uploader\" id='upload_box'>\n            <div class=\"uploader_text\">\n                Drop file here or click to select a file\n            </div>\n        </div>\n    </label>\n    <input id=\"file-select\" type=\"file\"  accept=\".py,.m,.sdfg\" style=\"position:absolute;\"/>\n</div>\n",
        buttons: '',
        showMax: true
      });
      var x = $('#upload_box');

      if (x.length == 0) {
        throw "Error: Element not available";
      }

      x = x[0];

      var file_handler = function file_handler(data) {
        if (purpose == "code-python") {
          _this3.newFile(data);
        }
      };

      (0,_main__WEBPACK_IMPORTED_MODULE_5__.setup_drag_n_drop)(x, function (mime, data) {
        console.log("upload mime", mime);
        file_handler(data); // Close the popup

        w2popup.close();
      }, null, {
        readMode: "text"
      });
      var fuploader = $('#file-select');

      if (fuploader.length == 0) {
        throw "Error: Element not available";
      }

      fuploader = fuploader[0];
      fuploader.style.opacity = 0;
      fuploader.addEventListener("change", function (x) {
        var file = fuploader.files[0];
        var reader = new FileReader();

        reader.onload = function (y) {
          file_handler(y.target.result); // Close the popup

          w2popup.close();
        };

        reader.readAsText(file);
      });
    }
  }, {
    key: "getClientID",
    value: function getClientID() {
      return this._client_id;
    }
  }, {
    key: "initEnums",
    value: function initEnums() {
      this.getEnum("ScheduleType");
      this.getEnum("StorageType");
      this.getEnum("AccessType");
      this.getEnum("Language");
    } // Closes all open windows

  }, {
    key: "closeAll",
    value: function closeAll() {
      if (!this.goldenlayout.root) return;
      var comps = this.goldenlayout.root.getItemsByFilter(function (x) {
        return x.config.type == "component";
      });
      comps.forEach(function (comp) {
        return comp.close();
      });
      this.project().clearClosedWindowsList();
    }
  }, {
    key: "addContentItem",
    value: function addContentItem(config) {
      // Remove all saved instances of this component type from the closed windows list
      if (config.componentName) {
        var cw = this.project()._closed_windows;

        this.project().setClosedWindowsList(cw.filter(function (x) {
          return x[0] != config.componentName;
        }));
      }

      var root = this.goldenlayout.root; // In case goldenlayout was not yet initialized, fail silently

      if (!root) return;

      if (root.contentItems.length === 0) {
        // Layout is completely missing, need to add one (row in this case)
        var layout_config = {
          type: 'row',
          content: []
        };
        root.addChild(layout_config); // retry with recursion

        this.addContentItem(config);
      } else {
        if (this.goldenlayout.isSubWindow) {
          // Subwindows don't usually have layouts, so send a request that only the main window should answer
          this.goldenlayout.eventHub.emit('create-window-in-main', JSON.stringify(config));
        } else {
          var _iterator3 = _createForOfIteratorHelper(root.contentItems),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var ci = _step3.value;

              if (ci.config.type != "stack") {
                ci.addChild(config);
                return;
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          var copy = root.contentItems[0].contentItems.map(function (x) {
            return x.config;
          });
          root.contentItems[0].remove(); // retry with recursion

          var _iterator4 = _createForOfIteratorHelper(copy),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _ci = _step4.value;
              this.addContentItem(_ci);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          this.addContentItem(config); //root.contentItems[0].addChild(config);
        }
      }
    }
  }, {
    key: "newFile",
    value: function newFile() {
      var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      // Reset project state
      this.closeAll();
      this.createNewProject();
      var millis = this.getPseudorandom(); // Assuming SDFG files start with {

      if (content[0] == '{') {
        // Prettify JSON object, if not pretty
        if (content.split('\n').length == 1) content = JSON.stringify(JSON.parse(content), null, 2);
      }

      var config = {
        title: "Source Code",
        type: 'component',
        componentName: 'CodeInComponent',
        componentState: {
          created: millis,
          code_content: content
        }
      };
      this.addContentItem(config); // Compile automatically after loading

      this.gatherProjectElementsAndCompile(this, {}, {
        sdfg_over_code: true
      });
    }
  }, {
    key: "open_diode_settings",
    value: function open_diode_settings() {
      var millis = this.getPseudorandom();
      var config = {
        title: "Settings",
        type: 'component',
        componentName: 'SettingsComponent',
        componentState: {
          created: millis
        }
      };
      this.addContentItem(config);
    }
  }, {
    key: "open_runqueue",
    value: function open_runqueue() {
      var millis = this.getPseudorandom();
      var config = {
        title: "Run Queue",
        type: 'component',
        componentName: 'RunqueueComponent',
        componentState: {
          created: millis
        }
      };
      this.addContentItem(config);
    }
  }, {
    key: "getEnum",
    value: function getEnum(name) {
      var cached = localStorage.getItem('Enumeration:' + name);

      if (cached == null || cached == undefined) {
        // Request the enumeration from the server
        (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v1.0/getEnum/" + name, undefined, function (xhr) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(name, xhr.response);
            var tmp = JSON.parse(xhr.response);

            if (name == "Language") {
              tmp["enum"].push("NoCode");
            }

            localStorage.setItem('Enumeration:' + name, JSON.stringify(tmp));
          }
        }, 'GET');
        return null;
      }

      return JSON.parse(cached)['enum'];
    }
  }, {
    key: "renderProperties",
    value: function renderProperties(transthis, node, params, parent) {
      var _this4 = this;

      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

      /*
          Creates property visualizations in a 2-column table.
      */
      if (params == null) {
        console.warn("renderProperties as nothing to render");
        return;
      }

      if (!Array.isArray(params)) {
        var realparams = params; // Format is different (diode to_json with seperate meta / value - fix before passing to renderer)

        var params_keys = Object.keys(params).filter(function (x) {
          return !x.startsWith('_meta_');
        });
        params_keys = params_keys.filter(function (x) {
          return Object.keys(params).includes('_meta_' + x);
        });

        var _lst = params_keys.map(function (x) {
          var mx = JSON.parse(JSON.stringify(params['_meta_' + x]));
          mx.name = x;
          mx.value = params[x];
          return {
            property: mx,
            category: mx.category,
            element: realparams,
            data: node.data
          };
        });

        params = _lst;
      }

      if (typeof transthis == 'string') {
        // Event-based
        var target_name = transthis;
        transthis = {
          propertyChanged: function propertyChanged(element, name, value) {
            // Modify in SDFG object first
            _this4.project().request(['property-changed-' + target_name], function (x) {}, {
              timeout: 200,
              params: {
                element: element,
                name: name,
                value: value,
                type: options ? options.type : options
              }
            }); // No need to refresh SDFG if transformation


            if (options && options.type === 'transformation') return;

            _this4.refreshSDFG();
          },
          applyTransformation: function applyTransformation() {
            _this4.project().request(['apply-adv-transformation-' + target_name], function (x) {}, {
              timeout: 200,
              params: options == undefined ? undefined : options.apply_params
            });
          },
          locateTransformation: function locateTransformation(opt_name, opt_pos, affects) {
            _this4.project().request(['locate-transformation-' + options.sdfg_name], function (x) {}, {
              timeout: 200,
              params: JSON.stringify([opt_name, opt_pos, affects])
            });
          },
          project: function project() {
            return _this4.project();
          }
        };
      }

      var dt = new _table__WEBPACK_IMPORTED_MODULE_9__.Table();
      var cur_dt = dt;
      var dtc = null;
      var categories = {};

      var _iterator5 = _createForOfIteratorHelper(params),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _x2 = _step5.value;
          var cat = _x2.category;

          if (categories[cat] == undefined) {
            categories[cat] = [];
          }

          categories[cat].push(_x2);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      if (!DIODE.debugDevMode()) {
        delete categories["(Debug)"];
      }

      for (var _i = 0, _Object$entries = Object.entries(categories); _i < _Object$entries.length; _i++) {
        var z = _Object$entries[_i];
        // Sort within category
        var cat_name = z[0];
        var y = z[1].sort(function (a, b) {
          return a.property.name.localeCompare(b.property.name);
        }); // Add Category header

        cur_dt = dt;
        var sp = document.createElement('span');
        sp.innerText = cat_name;
        var tr = cur_dt.addRow(sp);
        tr.childNodes[0].colSpan = "2";
        dtc = new _table__WEBPACK_IMPORTED_MODULE_9__.TableCategory(cur_dt, tr);

        var _iterator6 = _createForOfIteratorHelper(y),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var propx = _step6.value;
            var title_part = document.createElement("span");
            var x = propx.property;
            title_part.innerText = x.name;
            title_part.title = x.desc;
            var value_part = diode.getMatchingInput(transthis, x, propx);
            var cr = cur_dt.addRow(title_part, value_part);

            if (dtc != null) {
              dtc.addContentRow(cr);
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }

      dt.setCSSClass("diode_property_table");

      if (options && options.type == "transformation") {
        // Append a title
        var title = document.createElement("span");
        title.classList = "";
        title.innerText = options.opt_name;
        parent.appendChild(title); // Append a "locate" button

        var locate_button = document.createElement("span");
        locate_button.innerText = "location_on";
        locate_button.classList = "material-icons";
        locate_button.style = "cursor: pointer;";
        locate_button.addEventListener("click", function () {
          // Highlight the affected elements (both transformation and nodes)
          transthis.locateTransformation(options.opt_name, options.pos, options.apply_params[0].affects);
        });
        parent.appendChild(locate_button);
      }

      dt.createIn(parent);

      if (options && options.type == "transformation") {
        // Append an 'apply-transformation' button
        var button = document.createElement('button');
        button.innerText = "Apply advanced transformation";
        button.addEventListener('click', function (_x) {
          button.disabled = true;

          _this4.project().request(['apply-adv-transformation-' + options.sdfg_name], function (_y) {}, {
            params: JSON.stringify(options.apply_params)
          });
        });
        parent.appendChild(button);
      }
    }
  }, {
    key: "create_visual_access_representation",
    value: function create_visual_access_representation(elems, data) {
      var __access_indices = elems[0];
      var __ranges = elems[1];
      var __user_input = elems[2];
      var __additional_defines = {}; // Add standard functions

      __additional_defines['Min'] = "(...x) => Math.min(...x)";
      __additional_defines['int_ceil'] = "(a,b) => Math.ceil(a/b)";

      var _iterator7 = _createForOfIteratorHelper(__user_input),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var x = _step7.value;

          var _r = window.prompt("Enter a value for symbol " + x);

          if (_r != null) {
            // Write the value 
            __additional_defines[x] = _r;
          } else {
            // Aborted
            break;
          }
        } // Read the data object properties

      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      console.log("data", data);

      if (data.type != "Array") {
        console.warn("Non-Array accessed", data); // #TODO: What to do here?
      }

      var __mem_dims = data.attributes.shape;
      console.assert(__mem_dims != undefined); // Try to eval the functions

      var __eval_func = function __eval_func() {
        var __defs = Object.keys(__additional_defines).map(function (x) {
          return "let " + x + " = " + __additional_defines[x];
        }).join(";") + ";";

        __mem_dims = __mem_dims.map(function (x) {
          return eval(__defs + x);
        });
      };

      __eval_func();

      var __tbl_container = document.createElement("div");

      var __tbl_hor = document.createElement("div");

      __tbl_hor.classList = "flex_row";
      __tbl_hor.style = "flex-wrap: nowrap; justify-content: flex-start;";

      var __axis_x_info = document.createElement("div");

      {
        __axis_x_info.classList = "flex_row";
        __axis_x_info.style = "justify-content: space-between;";

        for (var __i = 0; __i < 2; ++__i) {
          var __tmp = document.createElement("div"); // Take the second dimension


          try {
            __tmp.innerText = __i == 0 ? "0" : __mem_dims[1];
          } catch (__e) {
            __tmp.innerText = __i == 0 ? "Start" : "End";
          }

          __axis_x_info.appendChild(__tmp);
        }
      }

      var __axis_y_info = document.createElement("div");

      {
        __axis_y_info.classList = "flex_column";
        __axis_y_info.style = "justify-content: space-between;";

        for (var _i2 = 0; _i2 < 2; ++_i2) {
          var _tmp = document.createElement("div"); // Take the first dimension


          try {
            _tmp.innerText = _i2 == 0 ? "0" : __mem_dims[0];
          } catch (__e) {
            _tmp.innerText = _i2 == 0 ? "Start" : "End";
          }

          __axis_y_info.appendChild(_tmp);
        }
      }

      var __tbl_vert = document.createElement("div");

      __tbl_vert.classList = "flex_col";

      if (data != null) {
        __tbl_vert.appendChild(__axis_x_info);

        __tbl_hor.appendChild(__axis_y_info);
      } // Now create a table with the according cells for this


      var __size = 10;
      if (__mem_dims.some(function (x) {
        return x > 128;
      })) __size = 5;
      if (__mem_dims.length < 2) __mem_dims.push(1); // Force at least 2 dimensions (2nd dim size is trivial: 1)

      console.log("access indices", __access_indices);
      console.log("ranges", __ranges); // This is very limited; future work can take place here
      // The current implementation works only by fixing all but one range per dimension.
      // This is done for 2 main reasons:
      // 1) Performance. It is not possible to determine the access patterns in O(n) without either using an LSE
      //        with range side conditions (which is hard to solve in "naked" JS). The only alternative is to actually
      //        scan __all__ possible values, which is infeasible on a browser client.
      // 2) Visual Cluttering. Seeing too much at once is not helpful. Implementing an easy-to-use UI solving this problem
      //        is beyond the scope of the initial PoC.
      // Obtain fixed ranges (all but smallest)

      var __fixed_rngs = __ranges.map(function (x) {
        return x;
      }).sort(function (a, b) {
        return a.depth - b.depth;
      }).slice(1).reverse(); // Get the variable range (smallest)


      var __var_rng = __ranges[0];
      var __rng_inputs = [];

      var __create_func = function __create_func() {
        return null;
      };

      var __main = function __main(x) {
        return x.main != undefined ? x.main : x;
      }; // Add inputs for every fixed range


      {
        (function () {
          var input_cont = document.createElement("div");

          var __defs = Object.keys(__additional_defines).map(function (x) {
            return "let " + x + " = " + __additional_defines[x];
          }).join(";") + ";";

          var __global_slider = document.createElement("input");

          {
            __global_slider.type = "range";
            __global_slider.min = "0";
            __global_slider.value = "0";
            __global_slider.step = "1";
            input_cont.appendChild(__global_slider);
          }
          var __total_rng_count = 1;
          var __locked_range = false;
          input_cont.classList = "flex_column";

          var _iterator8 = _createForOfIteratorHelper(__fixed_rngs),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var __r = _step8.value;

              var _lbl2 = document.createElement("label");

              var _in2 = document.createElement("input");

              _in2.type = "number";
              _in2.min = "0";
              _in2.step = "1";

              _in2.addEventListener("change", function (_click) {
                // Trigger update
                // Move the slider position
                var __spos = 0;
                var __base = 1;

                var _iterator10 = _createForOfIteratorHelper(__rng_inputs.map(function (x) {
                  return x;
                }).reverse()),
                    _step10;

                try {
                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                    var _r2 = _step10.value;

                    var __s = parseInt(_r2.max) - parseInt(_r2.min) + 1;

                    var __v = _r2.value;
                    __spos += parseInt(__v) * __base;
                    __base *= parseInt(__s);
                  }
                } catch (err) {
                  _iterator10.e(err);
                } finally {
                  _iterator10.f();
                }

                __global_slider.value = __spos;

                __create_func();
              }); // Set limits


              try {
                _in2.min = eval(__defs + __main(__r.val.start));
              } catch (e) {
                console.warn("Got error when resolving expression", e);
              }

              try {
                _in2.max = eval(__defs + __main(__r.val.end));
              } catch (e) {
                console.warn("Got error when resolving expression", e);
              }

              try {
                _in2.value = eval(__defs + __main(__r.val.start));
              } catch (e) {
                console.warn("Got error when resolving expression", e);
              } // Add the starting value as an expression to defs


              __defs += "let " + __r["var"] + " = " + __main(__r.val.start) + ";";
              _lbl2.innerText = "Range iterator " + __r["var"] + " over [" + __main(__r.val.start) + ", " + __main(__r.val.end) + "] in steps of " + __main(__r.val.step);

              _in2.setAttribute("data-rname", __r["var"]);

              _lbl2.appendChild(_in2);

              __rng_inputs.push(_in2);

              input_cont.appendChild(_lbl2);
              if (__total_rng_count == 0) __total_rng_count = 1;

              var __e_size = function (__x) {
                return eval(__defs + "(" + __main(__x.val.end) + " - " + __main(__x.val.start) + "+1) / " + __main(__x.val.step));
              }(__r);

              if (__e_size == 0 || __locked_range) {
                __locked_range = true;
              } else {
                __total_rng_count *= __e_size;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          console.log("__total_rng_count", __total_rng_count);
          {
            __global_slider.max = __total_rng_count - 1; // Inclusive range

            __global_slider.addEventListener("input", function (__ev) {
              var __v = parseInt(__global_slider.value);

              var _iterator9 = _createForOfIteratorHelper(__rng_inputs.map(function (x) {
                return x;
              }).reverse()),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var __r = _step9.value;

                  var __s = parseInt(__r.max) - parseInt(__r.min) + 1;

                  var __subval = __v % __s;

                  __r.value = __subval;
                  __v = Math.floor(__v / __s);
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
            });

            var r = __var_rng;

            var _lbl = document.createElement("label");

            var _in = document.createElement("span");

            __global_slider.addEventListener("input", function (_ev) {
              __create_func();
            });

            _in.innerText = "(whole range)";
            _lbl.innerText = "Range iterator " + r["var"] + " over [" + __main(r.val.start) + ", " + __main(r.val.end) + "] in steps of " + __main(r.val.step);

            _lbl.appendChild(_in);

            input_cont.appendChild(_lbl);
          }

          __tbl_container.appendChild(input_cont);
        })();
      }

      __create_func = function __create_func() {
        __tbl_vert.innerHTML = "";

        __tbl_vert.appendChild(__axis_x_info);

        var __all_fixed = {};
        Object.assign(__all_fixed, __additional_defines); // Get the fixed values

        {
          var _iterator11 = _createForOfIteratorHelper(__rng_inputs),
              _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var i = _step11.value;
              var rname = i.getAttribute("data-rname");
              var val = i.value;
              __all_fixed[rname] = val;
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }

        var __defstring = Object.keys(__all_fixed).map(function (x) {
          return "let " + x + " = " + __all_fixed[x] + ";";
        }).join("");

        var __ellision_thresh_y = 64;
        var __ellision_thresh_x = 128;
        var __mark_cells = {}; // Evaluate the range

        {
          (function () {
            var feval = function feval(x) {
              return eval(__defstring + x);
            };

            var __it = __var_rng["var"];

            var __r_s = __main(__var_rng.val.start);

            var __r_e = __main(__var_rng.val.end);

            var __r_step = __main(__var_rng.val.step); // Remember: Inclusive ranges


            var _loop = function _loop(__x) {
              // Add this to the full evaluation
              var __a_i = __access_indices.map(function (x, i) {
                return [x, i];
              }).sort(function (a, b) {
                return a[1] - b[1];
              }).map(function (x) {
                return x[0];
              });

              __a_i = __a_i.map(function (__y) {
                return feval("let " + __it + " = " + __x + ";" + __y["var"]);
              });
              var __tmp = __mark_cells[__a_i[1]];

              if (__tmp == undefined) {
                __mark_cells[__a_i[1]] = [];
              }

              __mark_cells[__a_i[1]].push(__a_i[0]);
            };

            for (var __x = feval(__r_s); __x <= feval(__r_e); __x += feval(__r_step)) {
              _loop(__x);
            }
          })();
        }

        for (var __dim_2 = 0; __dim_2 < __mem_dims[0]; ++__dim_2) {
          // Check ellision
          if (__mem_dims[0] > __ellision_thresh_y && __dim_2 > __ellision_thresh_y / 2 && __dim_2 < __mem_dims[0] - __ellision_thresh_y / 2) {
            // Elide
            if (__dim_2 - 1 == __ellision_thresh_y / 2) {
              // Add ellision info _once_
              var _row = document.createElement("div");

              _row.classList = "flex_row";
              _row.style = "justify-content: flex-start;flex-wrap: nowrap;";
              _row.innerText = "...";

              __tbl_vert.appendChild(_row);
            }

            continue;
          }

          var __row = document.createElement("div");

          __row.classList = "flex_row";
          __row.style = "justify-content: flex-start;flex-wrap: nowrap;";

          for (var _i3 = 0; _i3 < __mem_dims[1]; ++_i3) {
            // Check ellision
            if (__mem_dims[1] > __ellision_thresh_x && _i3 > __ellision_thresh_x / 2 && _i3 < __mem_dims[1] - __ellision_thresh_x / 2) {
              // Elide
              if (_i3 - 1 == __ellision_thresh_x / 2) {
                // Add ellision info _once_
                var _cell = document.createElement('div');

                _cell.style = "line-height: 1px;"; //let __colorstr = "background: white;";
                //__cell.style = "min-width: " + __size + "px; min-height: " + __size + "px;border: 1px solid black;" + __colorstr;

                _cell.innerText = "...";

                __row.appendChild(_cell);
              }

              continue;
            }

            var __set_marking = false;
            {
              var _tmp2 = __mark_cells[__dim_2];

              if (_tmp2 != undefined) {
                if (_tmp2.includes(_i3)) __set_marking = true;
              }
            }

            var __cell = document.createElement('div');

            var __colorstr = "background: white;";

            if (__set_marking) {
              __colorstr = "background: red;";
            }

            __cell.style = "min-width: " + __size + "px; min-height: " + __size + "px;border: 1px solid darkgray;" + __colorstr;

            __row.appendChild(__cell);
          }

          __tbl_vert.appendChild(__row);
        }

        __tbl_hor.appendChild(__tbl_vert);
      };

      __tbl_container.appendChild(__tbl_hor);

      __create_func();

      return __tbl_container;
    }
  }, {
    key: "create_visual_range_representation",
    value: function create_visual_range_representation(__starts, __ends, __steps, __tiles) {
      var __mayfail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

      var __data = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

      var __obj_to_arr = function __obj_to_arr(x) {
        return x instanceof Array ? x : [x];
      };

      __starts = __obj_to_arr(__starts);
      __ends = __obj_to_arr(__ends);
      __steps = __obj_to_arr(__steps);
      __tiles = __obj_to_arr(__tiles); // NOTE: This context is eval()'d. This means that all variables must be in the forbidden namespace (__*) or they might be erroneously evaluated.

      var __symbols = {};
      var __e_starts = [];
      var __e_ends = [];
      var __e_steps = [];
      var __e_tiles = [];
      var __e_sizes = [];

      for (var __r_it = 0; __r_it < __starts.length; ++__r_it) {
        var __start = __starts[__r_it];
        var __end = __ends[__r_it];
        var __step = __steps[__r_it];
        var __tile = __tiles[__r_it];
        var __e_start = null;
        var __e_end = null;
        var _e_step = null;
        var _e_tile = null;
        var _mem_dims = [];

        while (true) {
          var __failed = false;

          var __symbol_setter = Object.entries(__symbols).map(function (x) {
            return "let " + x[0] + "=" + x[1] + ";";
          }).join("");

          try {
            // Define a couple of dace-functions that are used here
            var Min = function Min() {
              return Math.min.apply(Math, arguments);
            };

            var int_ceil = function int_ceil(a, b) {
              return Math.ceil(a / b);
            };

            __e_start = eval(__symbol_setter + __start);
            __e_end = eval(__symbol_setter + __end) + 1; // The DaCe ranges are inclusive - we want to exclusive here.

            _e_step = eval(__symbol_setter + __step);
            _e_tile = eval(__symbol_setter + __tile);

            if (__data != null) {
              var __shapedims = __data.attributes.shape.length;
              _mem_dims = [];

              for (var __s = 0; __s < __shapedims; ++__s) {
                _mem_dims.push(eval(__symbol_setter + __data.attributes.shape[__s]));
              }
            }
          } catch (e) {
            if (e instanceof ReferenceError) {
              // Expected, let the user provide inputs
              if (__mayfail) {
                __failed = true;
                break;
              } else {
                // Prompt the user and retry
                var __sym_name = e.message.split(" ")[0];

                var __ret = window.prompt("Enter a value for Symbol `" + __sym_name + "`");

                if (__ret == null) throw e;
                __symbols[__sym_name] = parseInt(__ret);
                __failed = true;
              }
            } else {
              // Unexpected error, rethrow
              throw e;
            }
          }

          if (!__failed) {
            break;
          }
        }

        var _e_size = __e_end - __e_start;

        __e_starts.push(__e_start);

        __e_ends.push(__e_end);

        __e_steps.push(_e_step);

        __e_tiles.push(_e_tile);

        __e_sizes.push(_e_size);
      }

      var __tbl_container = document.createElement("div");

      var __tbl_hor = document.createElement("div");

      __tbl_hor.classList = "flex_row";
      __tbl_hor.style = "flex-wrap: nowrap;";

      var __axis_x_info = document.createElement("div");

      {
        __axis_x_info.classList = "flex_row";
        __axis_x_info.style = "justify-content: space-between;";

        for (var __i = 0; __i < 2; ++__i) {
          var __tmp = document.createElement("div"); // Take the second dimension


          try {
            __tmp.innerText = __i == 0 ? "0" : __mem_dims[1];
          } catch (__e) {
            __tmp.innerText = __i == 0 ? "Start" : "End";
          }

          __axis_x_info.appendChild(__tmp);
        }
      }

      var __axis_y_info = document.createElement("div");

      {
        __axis_y_info.classList = "flex_column";
        __axis_y_info.style = "justify-content: space-between;";

        for (var _i4 = 0; _i4 < 2; ++_i4) {
          var _tmp3 = document.createElement("div"); // Take the first dimension


          try {
            _tmp3.innerText = _i4 == 0 ? "0" : __mem_dims[0];
          } catch (__e) {
            _tmp3.innerText = _i4 == 0 ? "Start" : "End";
          }

          __axis_y_info.appendChild(_tmp3);
        }
      }

      if (__data != null) {
        __tbl_container.appendChild(__axis_x_info);

        __tbl_hor.appendChild(__axis_y_info);
      } // Now create a table with the according cells for this
      // Since this is done on a per-dimension basis, the table only has to be 1D, so we use a flexbox for this (easier)


      var __row = document.createElement("div");

      __row.classList = "flex_row";
      __row.style = "justify-content: flex-start;flex-wrap: nowrap;";
      var __size = 10;
      var __e_size = __e_sizes[0]; // #TODO: Adapt for multi-dim ranges if those are requested

      var __e_step = __e_steps[0];
      var __e_tile = __e_tiles[0];
      if (__e_size > 512) __size = 5;

      for (var _i5 = 0; _i5 < __e_size; ++_i5) {
        var __cell = document.createElement('div');

        var __colorstr = "background: white;";

        if (Math.floor(_i5 / __e_step) % 2 == 0) {
          if (_i5 % __e_step < __e_tile) {
            __colorstr = "background: SpringGreen;";
          }
        } else {
          if (_i5 % __e_step < __e_tile) {
            __colorstr = "background: Darkorange;";
          }
        }

        __cell.style = "min-width: " + __size + "px; min-height: " + __size + "px;border: 1px solid black;" + __colorstr;

        __row.appendChild(__cell);
      }

      __tbl_hor.appendChild(__row);

      __tbl_container.appendChild(__tbl_hor);

      return __tbl_container;
    }
  }, {
    key: "getMatchingInput",
    value: function getMatchingInput(transthis, x, node) {
      var _this5 = this;

      var create_language_input = function create_language_input(value, onchange) {
        if (value == undefined) {
          value = x.value;
        }

        if (onchange == undefined) {
          onchange = function onchange(elem) {
            transthis.propertyChanged(node, x.name, elem.value);
          };
        }

        var language_types = _this5.getEnum('Language');

        var qualified = value;

        if (!language_types.includes(qualified)) {
          qualified = "Language." + qualified;
        }

        var elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, onchange, language_types, qualified);
        return elem;
      };

      var __resolve_initials = function __resolve_initials(__initials, __syms) {
        "use strict";

        delete window.i; // Whoever thought it was a good idea to define a global variable named 'i'...
        // We have to operate in the forbidden namespace (__*)
        // Filter out all constants first

        __initials = __initials.filter(function (x) {
          return isNaN(x["var"]);
        }); // Add a merger function

        var __merger = function __merger(a, b) {
          var acpy = a.map(function (x) {
            return x;
          });

          var _iterator12 = _createForOfIteratorHelper(b),
              _step12;

          try {
            var _loop2 = function _loop2() {
              var y = _step12.value;

              if (acpy.filter(function (x) {
                return x == y || x["var"] != undefined && JSON.stringify(x["var"]) == JSON.stringify(y["var"]);
              }).length > 0) {
                return "continue";
              } else {
                acpy.push(y);
              }
            };

            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _ret = _loop2();

              if (_ret === "continue") continue;
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }

          return acpy;
        };

        var __needed_defs = [];
        var __placeholder_defines = [];
        var __user_input_needed = [];

        while (true) {
          var __retry = false;

          var __placeholder_def_str = __placeholder_defines.map(function (x) {
            return "let " + x + " = 1";
          }).join(";"); // Inject the known functions as well


          __placeholder_def_str += ";let Min = (...e) => Math.min(...e); let int_ceil = (a, b) => Math.ceil(a/b);";

          var _iterator13 = _createForOfIteratorHelper(__initials),
              _step13;

          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var __i = _step13.value;

              // For every initial, find the first defining element (element with the same name that assigns an expression)
              try {
                var __test = eval(__placeholder_def_str + __i["var"]);
              } catch (e) {
                if (e instanceof ReferenceError) {
                  var _ret2 = function () {
                    var __sym_name = e.message.split(" ")[0];

                    var __defs = __syms.filter(function (x) {
                      return x["var"] == __sym_name && x.val != null;
                    });

                    if (__defs.length > 0) {
                      // Found a matching definition
                      __placeholder_defines.push(__sym_name);

                      __needed_defs = __merger(__needed_defs, [__defs[0]]);
                      var __j = 0;

                      for (; __j < __syms.length; ++__j) {
                        if (JSON.stringify(__syms[__j]) == JSON.stringify(__defs[0])) {
                          break;
                        }
                      }

                      var __f = function __f(x) {
                        return x.main != undefined ? x.main : x;
                      }; // Recurse into range subelements (if applicable)


                      if (__defs[0].val != null && __defs[0].val.start != undefined) {
                        // find the starting node
                        var __tmp = __resolve_initials([{
                          "var": __f(__defs[0].val.start),
                          val: null
                        }], __syms.slice(__j));

                        __needed_defs = __merger(__needed_defs, __tmp[1]);
                        __user_input_needed = __merger(__user_input_needed, __tmp[2]);
                        __tmp = __resolve_initials([{
                          "var": __f(__defs[0].val.end),
                          val: null
                        }], __syms.slice(__j));
                        __needed_defs = __merger(__needed_defs, __tmp[1]);
                        __user_input_needed = __merger(__user_input_needed, __tmp[2]);
                        __tmp = __resolve_initials([{
                          "var": __f(__defs[0].val.step),
                          val: null
                        }], __syms.slice(__j));
                        __needed_defs = __merger(__needed_defs, __tmp[1]);
                        __user_input_needed = __merger(__user_input_needed, __tmp[2]);
                        __tmp = __resolve_initials([{
                          "var": __f(__defs[0].val.tile),
                          val: null
                        }], __syms.slice(__j));
                        __needed_defs = __merger(__needed_defs, __tmp[1]);
                        __user_input_needed = __merger(__user_input_needed, __tmp[2]);
                      } else {
                        // Recurse into the found value.
                        var _tmp4 = __resolve_initials([{
                          "var": __f(__defs[0].val),
                          val: null
                        }], __syms.slice(__j));

                        console.log("rec", _tmp4); // Add elements to lists

                        __needed_defs = __merger(__needed_defs, _tmp4[1]);
                        __user_input_needed = __merger(__user_input_needed, _tmp4[2]);
                      }
                    } else {
                      // Need user input for this Symbol (defer actually requesting that info from the user)
                      __user_input_needed.push(__sym_name); // Also promise to define the symbol later


                      __placeholder_defines.push(__sym_name);
                    }

                    __retry = true;
                    return "break";
                  }();

                  if (_ret2 === "break") break;
                } else {
                  // Rethrow unknown exceptions
                  throw e;
                }
              }

              if (__retry) break;
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }

          if (__retry) continue;
          break;
        } // Return a (cleaned) list of the required elements


        return [__initials, __needed_defs, __user_input_needed];
      };

      var create_index_subset_input = function create_index_subset_input(transthis, x, node) {
        // Similar to range, but actually binding values
        // This therefore occurs in memlets inside Maps mostly
        // (Except when accessing using constants)
        // Because the indices are used to access data (arrays),
        // there needs to be lookup by finding the parent nodes (potentially using connectors).
        // A lookup may traverse to top-level and throw if the symbols are not resolved yet.
        var cont = document.createElement("div");
        if (node.data === undefined) return $(cont);
        var indices = x.value.indices; // Generate string from indices

        var preview = '[';

        var _iterator14 = _createForOfIteratorHelper(indices),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var index = _step14.value;
            preview += index + ', ';
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        preview = preview.slice(0, -2) + ']';
        cont.innerText = preview + '  ';
        var elem = document.createElement("button");
        elem.style["float"] = "right";
        elem.innerText = "Edit";
        cont.appendChild(elem);
        elem.addEventListener("click", function (_click) {
          _this5.project().request(['sdfg_object'], function (resp) {
            var tmp = resp['sdfg_object'];
            var syms = [];

            for (var _i6 = 0, _Object$values = Object.values(tmp); _i6 < _Object$values.length; _i6++) {
              var v = _Object$values[_i6];
              var tsyms = _utils_sdfg_sdfg_parser__WEBPACK_IMPORTED_MODULE_7__.SDFG_Parser.lookup_symbols(v, node.state_id, node.node_id, null);
              syms = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(syms), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(tsyms));
              console.log("syms", syms); // Got the symbols, now resolve.
              // Resolve (ltr is inner-to-outer)
            } // Rationale here: Render the underlying data as a basis,
            // then use index and range information to find access patterns
            // Find the initial values


            var initials = [];

            var _iterator15 = _createForOfIteratorHelper(syms),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var _x4 = _step15.value;
                if (_x4.val != null) break;
                initials.push(_x4);
              } // initials contains the indices used. Resolve all ranges defining those

            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }

            var newelems = __resolve_initials(initials, syms);

            console.log("newelems", newelems);
            var data = node.data().props.filter(function (x) {
              return x.name == "data";
            })[0];
            var data_objs = [];

            for (var _i7 = 0, _Object$values2 = Object.values(tmp); _i7 < _Object$values2.length; _i7++) {
              var _x3 = _Object$values2[_i7];
              data_objs.push(_x3.attributes._arrays[data.value]);
            }

            data_objs = data_objs.filter(function (x) {
              return x != undefined;
            });

            if (data_objs.length > 0) {
              data = data_objs[0];
            }

            var popup_div = document.createElement('div');
            var popup_div_body = document.createElement('div');
            var value_input = document.createElement("input");
            value_input.type = "text";
            value_input.value = JSON.stringify(x.value);

            var e = _this5.create_visual_access_representation(newelems, data);

            var apply_but = document.createElement("button");
            apply_but.innerText = "Apply changes";
            apply_but.addEventListener("click", function (_click) {
              transthis.propertyChanged(node, x.name, JSON.parse(value_input.value));
              w2popup.close();
            });
            popup_div_body.appendChild(value_input);
            popup_div_body.appendChild(e);
            popup_div.appendChild(popup_div_body);
            w2popup.open({
              title: "Data access / Indices property",
              body: popup_div,
              buttons: apply_but,
              width: 1280,
              height: 800
            });
          }, {});
        });
        return $(cont);
      };

      var create_range_input = function create_range_input(transthis, x, node) {
        // As ranges _usually_ operate on data, check if a property named "data" is in the same object.
        // If it is, we can inform the design of visualizations with the shape of the data object (array)
        // #TODO: Always update this when changed (in the current implementation, it is possible that stale values are read for different properties)
        var data_obj = null;

        if (node.data != undefined) {
          var tmp = node.data().props.filter(function (x) {
            return x.name == "data";
          });

          if (tmp.length > 0) {
            // Found data (name only, will resolve when rendering is actually requested)
            data_obj = tmp[0];
          }
        }

        var cont = document.createElement("div");
        var ranges = x.value.ranges;
        var popup_div = document.createElement('div'); // Generate string from range

        var preview = '[';

        var _iterator16 = _createForOfIteratorHelper(ranges),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var range = _step16.value;
            preview += range.start + '..' + range.end;

            if (range.step != 1) {
              preview += ':' + range.step;
              if (range.tile != 1) preview += ':' + range.tile;
            } else if (range.tile != 1) {
              preview += '::' + range.tile;
            }

            preview += ', ';
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }

        preview = preview.slice(0, -2) + ']';
        cont.innerText = preview + '  ';
        var elem = document.createElement("button");
        elem.style["float"] = "right";
        elem.innerText = "Edit";
        cont.appendChild(elem);
        var popup_div_body = document.createElement('div');
        var range_elems = [];

        var _iterator17 = _createForOfIteratorHelper(ranges),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var r = _step17.value;
            // Add a row for every range
            var r_row = document.createElement('div');
            r_row.classList = "flex_row";
            r_row.style = "flex-wrap: nowrap;";
            if (typeof r.start != 'string') r.start = r.start.main;
            if (typeof r.end != 'string') r.end = r.end.main;
            if (typeof r.step != 'string') r.step = r.step.main;
            if (typeof r.tile != 'string') r.tile = r.tile.main;
            {
              (function () {
                var input_refs = []; // Generate 4 text inputs and add them to the row

                for (var i = 0; i < 4; ++i) {
                  // Generate the label first
                  var lbl = document.createElement('label');
                  var ti = document.createElement('input');
                  ti.style = "width:100px;";
                  ti.type = "text";

                  switch (i) {
                    case 0:
                      ti.value = r.start;
                      lbl.textContent = "Start";
                      break;

                    case 1:
                      ti.value = r.end;
                      lbl.textContent = "End";
                      break;

                    case 2:
                      ti.value = r.step;
                      lbl.textContent = "Step";
                      break;

                    case 3:
                      ti.value = r.tile;
                      lbl.textContent = "Tile";
                      break;
                  }

                  input_refs.push(ti);
                  lbl.appendChild(ti);
                  r_row.appendChild(lbl);
                }

                range_elems.push(input_refs);
                var visbut = document.createElement('div');
                visbut.style = "min-width: 200px; min-height: 1rem;flex-grow: 1;display: flex;";
                visbut.addEventListener('click', function () {
                  // Resolve the data name and set the object accordingly
                  if (data_obj != null) {
                    _this5.project().request(['sdfg_object'], function (sdfg_obj) {
                      if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(sdfg_obj.sdfg_object) === 'object') sdfg_obj = sdfg_obj.sdfg_object;else sdfg_obj = JSON.parse(sdfg_obj.sdfg_object);
                      console.log("got sdfg object", sdfg_obj); // Iterate over all SDFGs, checking arrays and returning matching data elements

                      var data_objs = [];

                      for (var _i8 = 0, _Object$values3 = Object.values(sdfg_obj); _i8 < _Object$values3.length; _i8++) {
                        var _x5 = _Object$values3[_i8];
                        data_objs.push(_x5.attributes._arrays[data_obj.value]);
                      }

                      data_objs = data_objs.filter(function (x) {
                        return x != undefined;
                      });

                      if (data_objs.length > 0) {
                        data_obj = data_objs[0];
                      }

                      var vis_elem = _this5.create_visual_range_representation.apply(_this5, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(input_refs.map(function (x) {
                        return x.value;
                      })).concat([false, data_obj]));

                      visbut.innerHTML = "";
                      visbut.appendChild(vis_elem);
                    }, {});
                  } else {
                    var vis_elem = _this5.create_visual_range_representation.apply(_this5, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(input_refs.map(function (x) {
                      return x.value;
                    })).concat([false, data_obj]));

                    visbut.innerHTML = "";
                    visbut.appendChild(vis_elem);
                  }
                });
                visbut.innerText = "Click here for visual representation";
                r_row.appendChild(visbut);
              })();
            }
            popup_div_body.appendChild(r_row);
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        popup_div.appendChild(popup_div_body);
        var apply_but = document.createElement("button");
        apply_but.innerText = "Apply";
        apply_but.addEventListener("click", function () {
          var ret = {
            ranges: [],
            type: x.value.type
          };

          var _iterator18 = _createForOfIteratorHelper(range_elems),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var re = _step18.value;
              ret.ranges.push({
                start: re[0].value,
                end: re[1].value,
                step: re[2].value,
                tile: re[3].value
              });
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          transthis.propertyChanged(node, x.name, ret);
          w2popup.close();
        });

        elem.onclick = function () {
          w2popup.open({
            title: "Range property",
            body: popup_div,
            buttons: apply_but,
            width: 1280,
            height: 800
          });
        };

        return $(cont);
      }; // TODO: Handle enumeration types better


      var elem = document.createElement('div');

      if (x.metatype == "bool") {
        var val = x.value;
        if (typeof val == 'string') val = val == 'True';
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createToggleSwitch("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.checked);
        }, val);
      } else if (x.metatype == "str" || x.metatype == "float" || x.metatype == "LambdaProperty" || x.metatype == "Property") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, x.value);
      } else if (x.metatype == "tuple" || x.metatype == "dict" || x.metatype == "list" || x.metatype == "set") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          var tmp = elem.value;

          try {
            tmp = JSON.parse(elem.value);
          } catch (e) {
            tmp = elem.value;
          }

          transthis.propertyChanged(node, x.name, tmp);
        }, JSON.stringify(x.value));
      } else if (x.metatype == "Range") {
        elem = create_range_input(transthis, x, node);
      } else if (x.metatype == "DataProperty") {
        // The data list has to be fetched from the SDFG.
        // Therefore, there needs to be a placeholder until data is ready
        elem = document.createElement("span");
        elem.innerText = x.value;
        elem = $(elem);

        var cb = function cb(d) {
          // Only show data for the inner SDFG (it's possible to input an arbitrary string, still)
          var sdfg = node.sdfg;
          var arrays = sdfg.attributes._arrays;
          var array_names = Object.keys(arrays);
          var new_elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createComboboxInput("prop_" + x.name, function (elem) {
            transthis.propertyChanged(node, x.name, elem.value);
          }, array_names, x.value); // Replace the placeholder

          elem[0].parentNode.replaceChild(new_elem[0], elem[0]);
        };

        this.project().request(['sdfg_object'], cb, {
          on_timeout: cb,
          timeout: 300
        });
      } else if (x.metatype == "LibraryImplementationProperty") {
        // The list of implementations has to be fetched from
        // the server directly.
        elem = document.createElement("span");
        elem.innerText = x.value;
        elem = $(elem);
        $.getJSON("/dace/api/v1.0/getLibImpl/" + node.element.classpath, function (available_implementations) {
          var cb = function cb(d) {
            var new_elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createComboboxInput("prop_" + x.name, function (elem) {
              transthis.propertyChanged(node, x.name, elem.value);
            }, available_implementations, x.value); // Add Expand button to transform the node

            var button = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createButton("prop_" + x.name + "_expand", function (elem) {
              // Expand library node
              (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v1.0/expand/", {
                sdfg: node.sdfg,
                nodeid: [node.sdfg.sdfg_list_id, node.element.parent_id, node.element.id]
              }, function (xhr) {
                if (xhr.readyState === 4 && xhr.status === 200) {
                  var resp = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(xhr.response);

                  if (resp.error !== undefined) {
                    // Propagate error
                    _this5.handleErrors(_this5, resp);
                  } // Add to history


                  _this5.project().request(["append-history"], function (x) {}, {
                    params: {
                      new_sdfg: resp.sdfg,
                      item_name: "Expand " + node.element.label
                    }
                  });
                }
              });
            }, "Expand"); // Replace the placeholder

            elem[0].parentNode.replaceChild(new_elem[0], elem[0]);
            new_elem[0].parentNode.appendChild(button[0]);
          };

          _this5.project().request(['sdfg_object'], cb, {
            on_timeout: cb,
            timeout: 300
          });
        });
      } else if (x.metatype == "CodeProperty" || x.metatype == "CodeBlock") {
        var codeelem = null;
        var langelem = null;

        var onchange = function onchange(elem) {
          transthis.propertyChanged(node, x.name, {
            'string_data': codeelem[0].value,
            'language': langelem[0].value
          });
        };

        if (x.value == null) {
          x.value = {};
          x.value.language = "NoCode";
          x.value.string_data = "";
        }

        codeelem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createLongTextInput("prop_" + x.name, onchange, x.value.string_data);
        elem.appendChild(codeelem[0]);
        langelem = create_language_input(x.value.language, onchange);
        elem.appendChild(langelem[0]);
        elem.classList.add("flex_column");
        return elem;
      } else if (x.metatype == "int") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createIntInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, parseInt(elem.value));
        }, x.value);
      } else if (x.metatype == 'ScheduleType') {
        var schedule_types = this.getEnum('ScheduleType');
        var qualified = x.value;

        if (!schedule_types.includes(qualified)) {
          qualified = "ScheduleType." + qualified;
        }

        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, schedule_types, qualified);
      } else if (x.metatype == 'AllocationLifetime') {
        var types = this.getEnum('AllocationLifetime');
        var _qualified = x.value;

        if (!types.includes(_qualified)) {
          _qualified = "AllocationLifetime." + _qualified;
        }

        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, types, _qualified);
      } else if (x.metatype == 'AccessType') {
        var access_types = this.getEnum('AccessType');
        var _qualified2 = x.value;

        if (!access_types.includes(_qualified2)) {
          _qualified2 = "AccessType." + _qualified2;
        }

        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, access_types, _qualified2);
      } else if (x.metatype == 'Language') {
        elem = create_language_input();
      } else if (x.metatype == 'None') {
        // Not sure why the user would want to see this
        console.log("Property with type 'None' ignored", x);
        return elem;
      } else if (x.metatype == 'object' && x.name == 'identity') {
        // This is an internal property - ignore
        return elem;
      } else if (x.metatype == 'OrderedDiGraph') {
        // #TODO: What should we do with this?
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, x.value);
      } else if (x.metatype == 'DebugInfo') {
        // Special case: The DebugInfo contains information where this element was defined
        // (in the original source).
        var info_obj = x.value;
        if (typeof info_obj == 'string') info_obj = JSON.parse(info_obj);
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createCodeReference("prop_" + x.name, function (elem) {
          // Clicked => highlight the corresponding code
          transthis.project().request(['highlight-code'], function (msg) {}, {
            params: info_obj
          });
        }, info_obj);
      } else if (x.metatype == 'ListProperty') {
        // #TODO: Find a better type for this
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          var tmp = elem.value;

          try {
            tmp = JSON.parse(elem.value);
          } catch (e) {
            tmp = elem.value;
          }

          transthis.propertyChanged(node, x.name, tmp);
        }, JSON.stringify(x.value));
      } else if (x.metatype == "StorageType") {
        var storage_types = this.getEnum('StorageType');
        var _qualified3 = x.value;

        if (!storage_types.includes(_qualified3)) {
          _qualified3 = "StorageType." + _qualified3;
        }

        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, storage_types, _qualified3);
      } else if (x.metatype == "InstrumentationType") {
        var _storage_types = this.getEnum('InstrumentationType');

        var _qualified4 = x.value;

        if (!_storage_types.includes(_qualified4)) {
          _qualified4 = "InstrumentationType." + _qualified4;
        }

        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, _storage_types, _qualified4);
      } else if (x.metatype == "typeclass") {
        // #TODO: Type combobox
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, x.value);
      } else if (x.metatype == "hosttype") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createHostInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, DIODE.getHostList(), x.value);
      } else if (x.metatype == "selectinput") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createSelectInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, x.options, x.value);
      } else if (x.metatype == "combobox") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createComboboxInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, elem.value);
        }, x.options, x.value);
      } else if (x.metatype == "font") {
        console.warn("Ignoring property type ", x.metatype);
        return elem;
      } else if (x.metatype == "SDFGReferenceProperty") {
        // Nothing to display
        return elem;
      } else if (x.metatype == "SubsetProperty") {
        if (x.value == null) {
          elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
            transthis.propertyChanged(node, x.name, JSON.parse(elem.value));
          }, JSON.stringify(x.value));
        } else if (x.value.type == "subsets.Indices" || x.value.type == "Indices") {
          elem = create_index_subset_input(transthis, x, node);
        } else {
          elem = create_range_input(transthis, x, node);
        }
      } else if (x.metatype == "SymbolicProperty") {
        elem = _main__WEBPACK_IMPORTED_MODULE_5__.FormBuilder.createTextInput("prop_" + x.name, function (elem) {
          transthis.propertyChanged(node, x.name, JSON.parse(elem.value));
        }, JSON.stringify(x.value));
      } else {
        console.log("Unimplemented property type: ", x); //alert("Unimplemented property type: " + x.metatype);

        return elem;
      }

      return elem[0];
    }
  }, {
    key: "renderPropertiesInWindow",
    value: function renderPropertiesInWindow(transthis, node, params, options) {
      var _this6 = this;

      var dobj = {
        transthis: typeof transthis == 'string' ? transthis : transthis.created,
        node: node,
        params: params,
        options: options
      };
      this.replaceOrCreate(['display-properties'], 'PropWinComponent', dobj, function () {
        var millis = _this6.getPseudorandom();

        var config = {
          type: 'component',
          componentName: 'PropWinComponent',
          componentState: {
            created: millis,
            params: dobj
          }
        };

        _this6.addContentItem(config);
      });
    }
  }, {
    key: "showStaleDataButton",
    value: function showStaleDataButton() {
      this.project().request(['show_stale_data_button'], function (x) {}, {});
    }
  }, {
    key: "removeStaleDataButton",
    value: function removeStaleDataButton() {
      this.project().request(['remove_stale_data_button'], function (x) {}, {});
    }
  }, {
    key: "refreshSDFG",
    value: function refreshSDFG() {
      this.gatherProjectElementsAndCompile(diode, {}, {
        sdfg_over_code: true
      });
    }
  }, {
    key: "__impl_showStaleDataButton",
    value: function __impl_showStaleDataButton() {
      var _this7 = this;

      /*
          Show a hard-to-miss button hinting to recompile.
      */
      if (DIODE.recompileOnPropertyChange()) {
        // Don't show a warning, just recompile directly
        this.gatherProjectElementsAndCompile(this, {}, {
          sdfg_over_code: true
        });
        return;
      }

      if (this._stale_data_button != null) {
        return;
      }

      var stale_data_button = document.createElement("div");
      stale_data_button.classList = "stale_data_button";
      stale_data_button.innerHTML = "Stale project data. Click here or press <span class='key_combo'>Alt-R</span> to synchronize";
      stale_data_button.addEventListener('click', function (x) {
        _this7.gatherProjectElementsAndCompile(diode, {}, {
          sdfg_over_code: true
        });
      });
      document.body.appendChild(stale_data_button);
      this._stale_data_button = stale_data_button;
    }
  }, {
    key: "__impl_removeStaleDataButton",
    value: function __impl_removeStaleDataButton() {
      if (this._stale_data_button != null) {
        var p = this._stale_data_button.parentNode;
        p.removeChild(this._stale_data_button);
        this._stale_data_button = null;
      }
    }
  }, {
    key: "showIndeterminateLoading",
    value: function showIndeterminateLoading() {
      this.project().request(['show_loading'], function (x) {}, {});
    }
  }, {
    key: "hideIndeterminateLoading",
    value: function hideIndeterminateLoading() {
      this.project().request(['hide_loading'], function (x) {}, {});
    }
  }, {
    key: "__impl_showIndeterminateLoading",
    value: function __impl_showIndeterminateLoading() {
      $("#loading_indicator").show();
    }
  }, {
    key: "__impl_hideIndeterminateLoading",
    value: function __impl_hideIndeterminateLoading() {
      $("#loading_indicator").hide();
    }
  }, {
    key: "groupSDFGs",
    value: function groupSDFGs() {
      this.generic_group(function (x) {
        return x.config.type == "component" && x.componentName == "SDFGComponent";
      });
    }
  }, {
    key: "groupCodeOuts",
    value: function groupCodeOuts() {
      this.generic_group(function (x) {
        return x.config.type == "component" && x.componentName == "CodeOutComponent";
      });
    }
  }, {
    key: "groupOptGraph",
    value: function groupOptGraph() {
      this.generic_group(function (x) {
        return x.config.type == "component" && x.componentName == "OptGraphComponent";
      });
    }
  }, {
    key: "groupSDFGsAndCodeOutsTogether",
    value: function groupSDFGsAndCodeOutsTogether() {
      var _this8 = this;

      var comps = this.goldenlayout.root.getItemsByFilter(function (x) {
        return x.config.type == "component" && x.componentName == 'SDFGComponent';
      });
      var names = [];

      var _iterator19 = _createForOfIteratorHelper(comps),
          _step19;

      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var x = _step19.value;
          names.push(x.config.componentState.sdfg_name);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }

      var _loop3 = function _loop3() {
        var n = _names[_i9];

        _this8.generic_group(function (x) {
          return x.config.type == "component" && (x.componentName == "SDFGComponent" || x.componentName == "CodeOutComponent") && x.config.componentState.sdfg_name == n;
        });
      };

      for (var _i9 = 0, _names = names; _i9 < _names.length; _i9++) {
        _loop3();
      } // Get the SDFG elements again to set them active


      comps = this.goldenlayout.root.getItemsByFilter(function (x) {
        return x.config.type == "component" && x.componentName == 'SDFGComponent';
      });
      comps.forEach(function (x) {
        return x.parent.setActiveContentItem(x);
      });
    }
  }, {
    key: "groupLikeDIODE1",
    value: function groupLikeDIODE1() {
      /*
      |---------------------------------------------
      | CodeIn  | Opt   |         SDFG             |
      |         | Tree  |       Renderer           |
      |---------------------------------------------
      |         |          |                       |
      | CodeOut | (Perf)   | Prop Renderer         |
      |         |          |                       |
      |         |          |                       |
      ----------------------------------------------
      */
      this.goldenlayout.eventHub.emit("enter-programmatic-destroy", ""); // Collect the components to add to the layout later

      var code_ins = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "CodeInComponent");
      var opttrees = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "AvailableTransformationsComponent");
      var opthists = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "TransformationHistoryComponent");
      var sdfg_renderers = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "SDFGComponent");
      var code_outs = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "CodeOutComponent");
      var property_renderers = DIODE.filterComponentTreeByCname(this.goldenlayout.root, "PropWinComponent"); // Note that this only collects the _open_ elements and disregards closed or invalidated ones
      // Base goldenlayout stretches everything to use the full space available, this makes stuff look bad in some constellations
      // We compensate some easily replacable components here

      if (property_renderers.length == 0) {
        // Add an empty property window for spacing
        var _c = this.getPseudorandom();

        property_renderers.push({
          config: {
            type: 'component',
            componentName: "PropWinComponent",
            componentState: {
              created: _c
            }
          }
        });
      } // Remove the contentItems already as a workaround for a goldenlayout bug(?) that calls destroy unpredictably


      var to_remove = [code_ins, code_outs, opttrees, opthists, sdfg_renderers, property_renderers];

      for (var _i10 = 0, _to_remove = to_remove; _i10 < _to_remove.length; _i10++) {
        var y = _to_remove[_i10];

        var _iterator20 = _createForOfIteratorHelper(y),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var x = _step20.value;

            if (x.componentName != undefined) {
              x.remove();
            } // Otherwise: Might be a raw config

          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
      } // Remove existing content


      var c = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(this.goldenlayout.root.contentItems);

      var _iterator21 = _createForOfIteratorHelper(c),
          _step21;

      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var _x7 = _step21.value;
          this.goldenlayout.root.removeChild(_x7);
        } // Create the stacks (such that elements are tabbed)

      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }

      var code_in_stack = this.goldenlayout.createContentItem({
        type: 'stack',
        content: [
          /*...code_ins.map(x => x.config)*/
        ]
      });
      var opttree_stack = this.goldenlayout.createContentItem({
        type: 'stack',
        content: [
          /*...opttrees.map(x => x.config)*/
        ]
      });
      var sdfg_stack = this.goldenlayout.createContentItem({
        type: 'stack',
        content: [
          /*...sdfg_renderers.map(x => x.config)*/
        ]
      });
      var code_out_stack = this.goldenlayout.createContentItem({
        type: 'stack',
        content: [
          /*...code_outs.map(x => x.config)*/
        ]
      });
      var property_stack = this.goldenlayout.createContentItem({
        type: 'stack',
        content: [
          /*...property_renderers.map(x => x.config)*/
        ]
      });
      var top_row = this.goldenlayout.createContentItem({
        type: 'row',
        content: [
          /*code_in_stack, opttree_stack, sdfg_stack*/
        ]
      });
      var bottom_row = this.goldenlayout.createContentItem({
        type: 'row',
        content: [
          /*code_out_stack, property_stack*/
        ]
      });
      var top_bottom = this.goldenlayout.createContentItem({
        type: 'column',
        content: [
          /*top_row, bottom_row*/
        ]
      }); // Now add the new layout construction

      this.goldenlayout.root.addChild(top_bottom);
      top_bottom.addChild(top_row);
      top_bottom.addChild(bottom_row);
      top_row.addChild(code_in_stack);
      top_row.addChild(opttree_stack);
      top_row.addChild(sdfg_stack);
      bottom_row.addChild(code_out_stack);
      bottom_row.addChild(property_stack);
      sdfg_renderers.forEach(function (x) {
        return sdfg_stack.addChild(x.config);
      });
      property_renderers.forEach(function (x) {
        return property_stack.addChild(x.config);
      });
      code_outs.forEach(function (x) {
        return code_out_stack.addChild(x.config);
      });
      opttrees.forEach(function (x) {
        return opttree_stack.addChild(x.config);
      });
      opthists.forEach(function (x) {
        return opttree_stack.addChild(x.config);
      });
      code_ins.forEach(function (x) {
        return code_in_stack.addChild(x.config);
      }); // Everything has been added, but maybe too much: There might be empty stacks.
      // They should be removed to keep a "clean" appearance

      for (var _i11 = 0, _arr = [opttree_stack, code_in_stack, sdfg_stack, property_stack]; _i11 < _arr.length; _i11++) {
        var _x6 = _arr[_i11];

        if (_x6.contentItems.length == 0) {
          _x6.remove();
        }
      }

      this.goldenlayout.eventHub.emit("leave-programmatic-destroy", "");
    }
  }, {
    key: "generic_group",
    value: function generic_group(predicate) {
      /*
          Groups the SDFGs into their own Stack
       */
      this.goldenlayout.eventHub.emit("enter-programmatic-destroy", "");
      var sdfg_components = this.goldenlayout.root.getItemsByFilter(predicate);

      if (sdfg_components.length == 0) {
        console.warn("Cannot group, no elements found");
      }

      var new_container = this.goldenlayout.createContentItem({
        type: 'stack',
        contents: []
      });

      var _iterator22 = _createForOfIteratorHelper(sdfg_components),
          _step22;

      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var x = _step22.value;
          var config = x.config;
          x.parent.removeChild(x);
          new_container.addChild(config);
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }

      this.addContentItem(new_container);
      this.goldenlayout.eventHub.emit("leave-programmatic-destroy", "");
    }
  }, {
    key: "addKeyShortcut",
    value: function addKeyShortcut(key, func) {
      var alt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var ctrl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var keys = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(key);

      var c = {
        'alt': alt,
        'ctrl': ctrl,
        'func': func,
        'state': 0,
        'expect': keys.slice(1)
      };

      if (this._shortcut_functions[keys[0]] === undefined) {
        this._shortcut_functions[keys[0]] = [c];
      } else {
        this._shortcut_functions[keys[0]].push(c);
      }
    }
  }, {
    key: "onKeyUp",
    value: function onKeyUp(ev) {
      if (ev.altKey == false && ev.key == 'Alt') {
        for (var _i12 = 0, _Object$values4 = Object.values(this._shortcut_functions); _i12 < _Object$values4.length; _i12++) {
          var cs = _Object$values4[_i12];

          var _iterator23 = _createForOfIteratorHelper(cs),
              _step23;

          try {
            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
              var c = _step23.value;
              c.state = 0;
            }
          } catch (err) {
            _iterator23.e(err);
          } finally {
            _iterator23.f();
          }
        }
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(ev) {
      for (var _i13 = 0, _Object$values5 = Object.values(this._shortcut_functions); _i13 < _Object$values5.length; _i13++) {
        var _cs = _Object$values5[_i13];

        var _iterator24 = _createForOfIteratorHelper(_cs),
            _step24;

        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var c = _step24.value;

            if (ev.altKey == false) {
              c.state = 0;
              continue;
            }

            if (c.state > 0) {
              // Currently in a combo-state
              if (c.expect[c.state - 1] == ev.key) {
                c.state += 1;

                if (c.state > c.expect.length) {
                  // Found multi-key combo, activate
                  c.func();
                  ev.stopPropagation();
                  ev.preventDefault(); // Clear the states

                  this.onKeyUp({
                    altKey: false,
                    key: 'Alt'
                  });
                  return;
                }
              }
            }
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
      }

      var cs = this._shortcut_functions[ev.key];
      if (cs === undefined) return;
      var i = 0;

      var _iterator25 = _createForOfIteratorHelper(cs),
          _step25;

      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var _c2 = _step25.value;

          if (_c2.alt == ev.altKey && _c2.ctrl == ev.ctrlKey) {
            if (_c2.expect.length > 0) {
              // Multi-key combo expected
              _c2.state += 1;
              console.log("dict value: ", this._shortcut_functions[ev.key][i]);
              ++i;
              continue;
            }

            _c2.func();

            ev.stopPropagation();
            ev.preventDefault(); // Clear the states

            this.onKeyUp({
              altKey: false,
              key: 'Alt'
            });
          }

          ++i;
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }
    }
  }, {
    key: "createNewProject",
    value: function createNewProject() {
      this._current_project = new _diode_project__WEBPACK_IMPORTED_MODULE_11__.DIODE_Project(this);

      this._current_project.clearTransformationHistory();

      sessionStorage.clear();
      window.sessionStorage.setItem("diode_project", this._current_project._project_id);
      this.setupEvents();
    }
  }, {
    key: "getProject",
    value: function getProject() {
      var proj_id = window.sessionStorage.getItem("diode_project");
      this._current_project = new _diode_project__WEBPACK_IMPORTED_MODULE_11__.DIODE_Project(this, proj_id);

      if (proj_id == null || proj_id == undefined) {
        // There was a new project ID assigned, which is stored again in the session storage
        window.sessionStorage.setItem("diode_project", this.getCurrentProject()._project_id);
        this.setupEvents();
      }
    }
  }, {
    key: "project",
    value: function project() {
      // Alias function to emulate context behavior
      return this.getCurrentProject();
    }
  }, {
    key: "getCurrentProject",
    value: function getCurrentProject() {
      return this._current_project;
    }
  }, {
    key: "setLayout",
    value: function setLayout(gl) {
      this.goldenlayout = gl;
    }
  }, {
    key: "settings",
    value: function settings() {
      return this._settings;
    }
  }, {
    key: "getPseudorandom",
    value: function getPseudorandom() {
      var date = new Date();

      var millis = date.getTime().toString() + Math.random().toFixed(10).toString() + this._creation_counter.toString();

      ++this._creation_counter;
      console.assert(millis !== undefined, "Millis well-defined");
      return millis;
    }
  }, {
    key: "multiple_SDFGs_available",
    value: function multiple_SDFGs_available(sdfgs) {
      var sdfgs_obj = typeof sdfgs == 'string' ? (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(sdfgs) : sdfgs;

      for (var _i14 = 0, _Object$keys = Object.keys(sdfgs_obj.compounds); _i14 < _Object$keys.length; _i14++) {
        var x = _Object$keys[_i14];
        // New sdfg
        var value = sdfgs_obj.compounds[x];
        this.SDFG_available(value, x);
      }
    }
  }, {
    key: "SDFG_available",
    value: function SDFG_available(sdfg) {
      var _this9 = this;

      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "sdfg";

      // We create a new component and add it to the layout
      // To provide some distinguation, milliseconds since epoch are used.
      var millis = function millis() {
        return _this9.getPseudorandom();
      };

      sdfg.sdfg_name = name;

      var create_sdfg_func = function create_sdfg_func() {
        var new_sdfg_config = {
          title: name,
          type: 'component',
          componentName: 'SDFGComponent',
          componentState: {
            created: millis(),
            sdfg_data: sdfg,
            sdfg_name: name
          }
        };

        _this9.addContentItem(new_sdfg_config);
      };

      this.replaceOrCreate(['new-sdfg'], 'SDFGComponent', JSON.stringify(sdfg), create_sdfg_func);

      var create_codeout_func = function create_codeout_func() {
        var new_codeout_config = {
          title: "Generated Code",
          type: 'component',
          componentName: 'CodeOutComponent',
          componentState: {
            created: millis(),
            code: sdfg,
            sdfg_name: name
          }
        };

        _this9.addContentItem(new_codeout_config);
      };

      if (sdfg.generated_code != undefined) {
        console.log("requesting using ID", this.project());
        this.replaceOrCreate(['new-codeout'], 'CodeOutComponent', sdfg, create_codeout_func);
      }
    }
  }, {
    key: "Error_available",
    value: function Error_available(error) {
      var _this10 = this;

      var create_error_func = function create_error_func() {
        var new_error_config = {
          title: "Error",
          type: 'component',
          componentName: 'ErrorComponent',
          componentState: {
            error: error
          }
        };

        _this10.addContentItem(new_error_config);
      };

      this.replaceOrCreate(['new-error'], 'ErrorComponent', error, create_error_func);
    }
  }, {
    key: "OptGraph_available",
    value: function OptGraph_available(optgraph) {
      var _this11 = this;

      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

      if (typeof optgraph != "string") {
        optgraph = JSON.stringify(optgraph);
      } // To provide some distinction, milliseconds since epoch are used.


      var millis = this.getPseudorandom();

      var create_optgraph_func = function create_optgraph_func() {
        var new_optgraph_config = {
          type: "column",
          content: [{
            title: name == "" ? "Transformations" : "Transformations for `" + name + "`",
            type: 'component',
            componentName: 'AvailableTransformationsComponent',
            componentState: {
              created: millis,
              for_sdfg: name,
              optgraph_data: optgraph
            }
          }]
        };

        _this11.addContentItem(new_optgraph_config);
      };

      this.replaceOrCreate(['new-optgraph-' + name], 'AvailableTransformationsComponent', optgraph, create_optgraph_func);

      var create_history_func = function create_history_func() {
        var new_optgraph_config = {
          type: "column",
          content: [{
            title: "History",
            type: 'component',
            componentName: 'TransformationHistoryComponent',
            componentState: {
              created: millis,
              for_sdfg: name
            }
          }]
        };

        _this11.addContentItem(new_optgraph_config);
      };

      this.replaceOrCreate(['new-history-' + name], 'TransformationHistoryComponent', optgraph, create_history_func);
    }
  }, {
    key: "OptGraphs_available",
    value: function OptGraphs_available(optgraph) {
      var o = optgraph;

      if (typeof o == "string") {
        o = JSON.parse(optgraph);
      }

      for (var _i15 = 0, _Object$keys2 = Object.keys(o); _i15 < _Object$keys2.length; _i15++) {
        var x = _Object$keys2[_i15];
        var elem = o[x];
        this.OptGraph_available(elem, x);
      }
    }
  }, {
    key: "gatherProjectElementsAndCompile",
    value: function gatherProjectElementsAndCompile(calling_context) {
      var _this12 = this;

      var direct_passing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var on_success = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var on_failure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

      /*
          This method collects all available elements that can be used for compilation.
           direct_passing: Elements that do not have to be requested, but are available at call time
              .code:          Input code
              .sdfg_props:    SDFG properties deviating from default or changed
              .optpath:       Optimization path to be applied
           options
              .run:           If set to true, the Program is run after compilation
              .no_optgraph:   If set to true, the optgraph is not updated/created
              .term_id        The terminal identifier (if output should be shown), required when run is `true`
              .sdfg_over_code Use the existing SDFG-Serialization if available instead of recompiling from source
              .collect_cb     If set, the collected elements are passed to this function
              .dry_run        If `true`, no operation is passed to the server. This is useful when collecting elements for e.g. saving.
      */
      var code = direct_passing.code;
      var sdfg_props = direct_passing.sdfg_props;
      var optpath = direct_passing.optpath;
      var reqlist = [];

      if (code === undefined) {
        if (options.sdfg_over_code) {
          reqlist.push('sdfg_object');
        }

        reqlist.push('input_code');
      }

      if (optpath === undefined) reqlist.push('optpath');
      /*if(optpath != undefined) {
          optpath = undefined;
          reqlist.push('optpath');
      }*/

      var on_collected = function on_collected(values) {
        if (code != undefined) values['input_code'] = code;
        if (sdfg_props != undefined) values['sdfg_props'] = sdfg_props;
        if (optpath != undefined) values['optpath'] = optpath;
        if (options.collect_cb != undefined) options.collect_cb(values);
        if (options.dry_run === true) return;
        var cis = values['sdfg_object'] != undefined;
        var cval = values['input_code']; // Assuming SDFG files start with {

        if (!cis && cval[0] == '{') {
          var sd = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(cval);
          values['sdfg_object'] = {};
          values['sdfg_object'][sd.attributes.name] = cval;
          cis = true;
        }

        if (cis) {
          cval = values['sdfg_object'];
          if (typeof cval == 'string') cval = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(cval);
        }

        calling_context.project().request(["clear-errors"], function () {});

        if (options.run === true) {
          var runopts = {};

          if (options['perfmodes']) {
            runopts['perfmodes'] = options['perfmodes'];
          }

          runopts['repetitions'] = 5; // TODO(later): Allow users to configure number

          runopts['code_is_sdfg'] = cis;
          runopts['runnercode'] = values['input_code'];

          _this12.compile_and_run(calling_context, options.term_id, cval, values['optpath'], values['sdfg_props'], runopts, on_success, on_failure);
        } else {
          var cb = function cb(resp) {
            _this12.replaceOrCreate(['extend-optgraph'], 'AvailableTransformationsComponent', resp, function (_) {
              _this12.OptGraphs_available(resp);
            });
          };

          if (options['no_optgraph'] === true) {
            cb = undefined;
          }

          _this12.compile(calling_context, cval, values['optpath'], values['sdfg_props'], {
            optpath_cb: cb,
            code_is_sdfg: cis
          }, on_success, on_failure);
        }
      };

      calling_context.project().request(reqlist, on_collected, {
        timeout: 500,
        on_timeout: on_collected
      });
    }
  }, {
    key: "compile",
    value: function compile(calling_context, code) {
      var _this13 = this;

      var optpath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var sdfg_node_properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var on_success = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
      var on_failure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;

      /*
          options:
              .code_is_sdfg: If true, the code parameter is treated as a serialized SDFG
              .runnercode: [opt] Provides the python code used to invoke the SDFG program if needed
      */
      var post_params = {};

      if (options.code_is_sdfg === true) {
        post_params = {
          "sdfg": (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.stringify_sdfg)(code)
        };
        post_params['code'] = options.runnercode;
      } else {
        post_params = {
          "code": code
        };
      }

      if (optpath != undefined) {
        post_params['optpath'] = optpath;
      }

      if (sdfg_node_properties != undefined) {
        post_params['sdfg_props'] = sdfg_node_properties;
      }

      post_params['client_id'] = this.getClientID();
      var version_string = "1.0";
      (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v" + version_string + "/compile/dace", post_params, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          var peek = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(xhr.response);

          if (peek['error'] != undefined) {
            // There was at least one error - handle all of them
            _this13.handleErrors(calling_context, peek);

            if (on_failure !== undefined) on_failure();
          } else {
            // Data is no longer stale
            _this13.removeStaleDataButton();

            var o = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.parse_sdfg)(xhr.response);

            _this13.multiple_SDFGs_available(xhr.response);

            if (options.optpath_cb === undefined) {
              _this13.OptGraphs_available(o['compounds']);
            } else {
              options.optpath_cb(o['compounds']);
            }

            if (on_success !== undefined) on_success();
          }
        }
      });
    }
  }, {
    key: "handleErrors",
    value: function handleErrors(calling_context, object) {
      var errors = object['error'];
      if ('traceback' in object) errors += '\n\n' + object.traceback;
      this.Error_available(errors);

      if (typeof errors == "string") {
        console.warn("Error: ", errors); //alert(JSON.stringify(errors));

        return;
      }

      var _iterator26 = _createForOfIteratorHelper(errors),
          _step26;

      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var error = _step26.value;

          if (error.type === "SyntaxError") {
            // This error is most likely caused exclusively by input code
            calling_context.project().request(['new_error'], function (msg) {}, {
              params: error,
              timeout: 100
            });
          } else {
            console.warn("Error: ", error); //alert(JSON.stringify(error));
          }
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
    }
  }, {
    key: "ui_compile_and_run",
    value: function ui_compile_and_run(calling_context) {
      var millis = this.getPseudorandom();
      var terminal_identifier = "terminal_" + millis; // create a new terminal

      var terminal_config = {
        title: "Terminal",
        type: 'component',
        componentName: 'TerminalComponent',
        componentState: {
          created: millis
        }
      };
      this.addContentItem(terminal_config);
      this.gatherProjectElementsAndCompile(this, {}, {
        run: true,
        term_id: terminal_identifier,
        sdfg_over_code: true
      });
    }
  }, {
    key: "load_perfdata",
    value: function load_perfdata() {
      var _this14 = this;

      this.showIndeterminateLoading();
      var client_id = this.getClientID();
      var post_params = {
        client_id: client_id
      };
      (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v1.0/perfdata/get/", post_params, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          var pd = JSON.parse(xhr.response);
          console.log("Got result", pd);

          var ondone = function ondone() {
            _this14.hideIndeterminateLoading();
          };

          _this14.project().request(['draw-perfinfo'], function (x) {
            ondone();
          }, {
            params: pd,
            on_timeout: ondone
          });
        }
      });
    }
  }, {
    key: "show_exec_times",
    value: function show_exec_times() {
      var config = {
        type: 'component',
        componentName: 'PerfTimesComponent',
        componentState: {},
        title: "Execution times"
      };
      this.addContentItem(config);
    }
  }, {
    key: "show_run_options",
    value: function show_run_options(calling_context) {
      var newconf = {
        type: "component",
        componentName: "RunConfigComponent",
        title: "Run Configuration"
      };
      this.addContentItem(newconf);
    }
  }, {
    key: "show_inst_options",
    value: function show_inst_options(calling_context) {
      var newconf = {
        type: "component",
        componentName: "InstControlComponent",
        title: "Instrumentation control"
      };
      this.addContentItem(newconf);
    }
  }, {
    key: "show_roofline",
    value: function show_roofline(calling_context) {
      var newconf = {
        type: "component",
        componentName: "RooflineComponent",
        title: "Roofline"
      };
      this.addContentItem(newconf);
    }
  }, {
    key: "compile_and_run",
    value: function compile_and_run(calling_context, terminal_identifier, code) {
      var _this15 = this;

      var optpath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var sdfg_node_properties = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      var on_success = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;
      var on_failure = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : undefined;

      /*
          .runnercode: [opt] Code provided with SDFG to invoke the SDFG program. 
      */
      var post_params = {};

      if (options.code_is_sdfg === true) {
        post_params = {
          "sdfg": (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_8__.stringify_sdfg)(code)
        };
        post_params['code'] = options.runnercode;
      } else {
        post_params = {
          "code": code
        };
      }

      if (optpath != undefined) {
        post_params['optpath'] = optpath;
      }

      if (sdfg_node_properties != undefined) {
        post_params['sdfg_props'] = sdfg_node_properties;
      }

      this.applyCurrentRunConfig().then(function (remaining_settings) {
        var client_id = _this15.getClientID();

        post_params['client_id'] = client_id;

        if (remaining_settings['Instrumentation'] == 'off') {
          post_params['perfmodes'] = undefined;
        } else if (remaining_settings['Instrumentation'] == 'minimal') {
          post_params['perfmodes'] = ["default"];
        } else if (remaining_settings['Instrumentation'] == 'full') {
          post_params['perfmodes'] = ["default", "vectorize", "memop", "cacheop"];
        } else {
          alert("Error! Check console");
          console.error("Unknown instrumentation mode", remaining_settings['Instrumentation']);
          if (on_failure !== undefined) on_failure();
          return;
        } //post_params['perfmodes'] = ["default", "vectorize", "memop", "cacheop"];


        var not = remaining_settings['Number of threads'];

        if (typeof not == "string") {
          not = JSON.parse(not);
        }

        post_params['corecounts'] = not.map(function (x) {
          return parseInt(x);
        });
        post_params['repetitions'] = 5; // TODO(later): Allow users to configure number
        //post_params['corecounts'] = [1,2,3,4];

        var version_string = "1.0";
        (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v" + version_string + "/run/", post_params, function (xhr) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            var tmp = xhr.response;
            if (typeof tmp == 'string') tmp = JSON.parse(tmp);

            if (tmp['error']) {
              // Normal, users should poll on a different channel now.
              _this15.display_current_execution_status(calling_context, terminal_identifier, client_id);

              if (on_failure !== undefined) on_failure();
            } else if (on_success !== undefined) on_success();
          }
        });
      });
    }
  }, {
    key: "display_current_execution_status",
    value: function display_current_execution_status(calling_context, terminal_identifier, client_id) {
      var _this16 = this;

      var perf_mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var post_params = {};
      post_params['client_id'] = client_id;
      post_params['perf_mode'] = perf_mode;
      var version_string = "1.0";
      (0,_main__WEBPACK_IMPORTED_MODULE_5__.REST_request)("/dace/api/v" + version_string + "/run/status/", post_params, function (xhr) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          // Show success/error depending on the exit code
          if (xhr.response.endsWith(" 0")) _this16.toast("Execution ended", "Run ended successfully", 'info');else _this16.toast("Execution ended", "Run failed", 'error'); // Flush remaining outputs

          var newdata = xhr.response.substr(xhr.seenBytes);

          _this16.goldenlayout.eventHub.emit(terminal_identifier, newdata);

          xhr.seenBytes = xhr.responseText.length;
        }

        if (xhr.readyState === 3) {
          var _newdata = xhr.response.substr(xhr.seenBytes);

          _this16.goldenlayout.eventHub.emit(terminal_identifier, _newdata);

          xhr.seenBytes = xhr.responseText.length;
        }
      });
    }
  }, {
    key: "toast",
    value: function toast(title, text) {
      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';
      var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10000;
      var icon = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
      var callback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
      var toast = VanillaToasts.create({
        title: title,
        text: text,
        type: type,
        // #TODO: Maybe add check for exit codes as well? (to show success/error)
        icon: icon,
        timeout: timeout,
        callback: callback
      });
      VanillaToasts.setTimeout(toast.id, timeout * 1.1);
    }
  }, {
    key: "optimize",
    value: function optimize(calling_context, optpath) {
      // The calling_context might be necessary when multiple, different programs are allowed
      if (optpath === undefined) {
        optpath = [];
      }

      var transthis = this;

      var on_data_available = function on_data_available(code_data, sdfgprop_data, from_code) {
        var code = null;

        if (from_code) {
          code = code_data;
        } else {
          code = code_data;
        }

        var props = null;
        if (sdfgprop_data != undefined) props = sdfgprop_data.sdfg_props;else props = undefined;

        var cb = function cb(resp) {
          transthis.replaceOrCreate(['extend-optgraph'], 'AvailableTransformationsComponent', resp, function (_) {
            transthis.OptGraphs_available(resp);
          });
        };

        transthis.compile(calling_context, code, optpath, props, {
          optpath_cb: cb,
          code_is_sdfg: !from_code
        });
      };

      calling_context.project().request(['input_code', 'sdfg_object'], function (data) {
        var from_code = true;

        if (data['sdfg_object'] != undefined) {
          from_code = false;
          data = data['sdfg_object'];
          data = JSON.parse(data);
        } else {
          data = data['input_code'];
        }

        on_data_available(data, undefined, from_code);
      });
    }
    /*
        Tries to talk to a pre-existing element to replace the contents.
        If the addressed element does not exist, a new element is created.
    */

  }, {
    key: "replaceOrCreate",
    value: function replaceOrCreate(replace_request, window_name, replace_params, recreate_func) {
      var open_windows = null;
      if (this.goldenlayout.root) open_windows = this.goldenlayout.root.getItemsByFilter(function (x) {
        return x.config.type == "component" && x.componentName == window_name;
      });

      if (open_windows && open_windows.length > 0) {
        // Replace
        this.getCurrentProject().request(replace_request, function (resp, tid) {}, {
          timeout: null,
          params: replace_params,
          timeout_id: null
        });
      } else {
        // Create
        recreate_func(replace_params);
      }
    }
    /*
        This function is used for debouncing, i.e. holding a task for a small amount of time
        such that it can be replaced with a newer function call which would otherwise get queued.
    */

  }, {
    key: "debounce",
    value: function debounce(group, func, timeout) {
      if (this._debouncing === undefined) {
        // The diode parent object was not created. The function cannot be debounced in this case.
        return func;
      }

      var transthis = this;

      var debounced = function debounced() {
        if (transthis._debouncing[group] !== undefined) {
          clearTimeout(transthis._debouncing[group]);
        }

        transthis._debouncing[group] = setTimeout(func, timeout);
      };

      return debounced;
    }
  }], [{
    key: "getHostList",
    value: function getHostList() {
      var tmp = localStorage.getItem("diode_host_list");
      if (tmp == null) return ['localhost'];else return JSON.parse(tmp);
    }
  }, {
    key: "setHostList",
    value: function setHostList(list) {
      localStorage.setItem("diode_host_list", JSON.stringify(list));
    }
  }, {
    key: "hash",
    value: function hash(data) {
      return btoa(crypto.subtle.digest('SHA-256', Uint8Array.from(data)));
    }
  }, {
    key: "filterComponentTree",
    value: function filterComponentTree(base) {
      var filterfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
        return x;
      };
      var ret = [];

      var _iterator27 = _createForOfIteratorHelper(base.contentItems),
          _step27;

      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var x = _step27.value;
          ret.push.apply(ret, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(this.filterComponentTree(x, filterfunc)));
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }

      return ret.filter(filterfunc);
    }
  }, {
    key: "filterComponentTreeByCname",
    value: function filterComponentTreeByCname(base, componentName) {
      var filterfunc = function filterfunc(x) {
        return x.config.type == "component" && x.componentName == componentName;
      };

      return base.getItemsByFilter(filterfunc);
    }
  }, {
    key: "editorTheme",
    value: function editorTheme() {
      var theme = localStorage.getItem('diode_ace_editor_theme');

      if (theme === null) {
        return "github";
      }

      return theme;
    }
  }, {
    key: "themeString",
    value: function themeString() {
      return "ace/theme/" + DIODE.editorTheme();
    }
  }, {
    key: "loadTheme",
    value: function loadTheme() {
      return $.getScript("external_lib/ace/theme-" + DIODE.editorTheme() + ".js");
    }
  }, {
    key: "setTheme",
    value: function setTheme(name) {
      localStorage.setItem('diode_ace_editor_theme', name);
    }
  }, {
    key: "recompileOnPropertyChange",
    value: function recompileOnPropertyChange() {
      // Set a tendency towards 'false' 
      return localStorage.getItem('diode_recompile_on_prop_change') == "true";
    }
  }, {
    key: "setRecompileOnPropertyChange",
    value: function setRecompileOnPropertyChange(boolean_value) {
      if (boolean_value) {
        localStorage.setItem('diode_recompile_on_prop_change', "true");
      } else {
        localStorage.setItem('diode_recompile_on_prop_change', "false");
      }
    }
  }, {
    key: "setDebugDevMode",
    value: function setDebugDevMode(boolean_value) {
      if (boolean_value) {
        localStorage.setItem('diode_DebugDevMode', "true");
      } else {
        localStorage.setItem('diode_DebugDevMode', "false");
      }
    }
  }, {
    key: "debugDevMode",
    value: function debugDevMode() {
      /*
          The DebugDev mode determines if internal, not-crucial-for-user properties are shown.
      */
      var v = localStorage.getItem("diode_DebugDevMode");
      return v === "true";
    }
  }]);

  return DIODE;
}();

/***/ }),

/***/ "./src/diode-ui/diode_appearance.js":
/*!******************************************!*\
  !*** ./src/diode-ui/diode_appearance.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Appearance": () => (/* binding */ Appearance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");


// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
var Appearance = /*#__PURE__*/function () {
  function Appearance(config) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Appearance);

    if (config === null) {
      config = {};
      config.style = Appearance["default"]();
    }

    if (typeof config == 'string') config = JSON.parse(config);
    this._change_callback = null;
    this._config = config;
    this.insertStylesheet(config.style);
    this._constructor_values = {};

    if (config.vals != undefined) {
      this._constructor_values = config.vals;
    }
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Appearance, [{
    key: "setOnChange",
    value: function setOnChange(func) {
      this._change_callback = func;
    }
  }, {
    key: "setChanged",
    value: function setChanged() {
      if (this._change_callback != null) {
        this._change_callback(this);
      }
    }
  }, {
    key: "apply",
    value: function apply() {
      this.insertStylesheet(this.getCSS());
    }
  }, {
    key: "insertStylesheet",
    value: function insertStylesheet(stylestring) {
      // This function does work in all browsers but IE (<= 8).
      var stylesheet = document.getElementById("appearance-stylesheet");
      var update = true;

      if (stylesheet == null || stylesheet == undefined) {
        stylesheet = document.createElement('style');
        update = false;
        stylesheet.id = "appearance-stylesheet";
        stylesheet.type = "text/css";
      }

      stylesheet.innerText = stylestring;

      if (!update) {
        document.head.appendChild(stylesheet);
      }

      this.setChanged();
    }
  }, {
    key: "setValue",
    value: function setValue(css_type, css_value) {
      this._constructor_values[css_type] = css_value;
      return this;
    }
  }, {
    key: "setFont",
    value: function setFont(shortname) {
      var f = Appearance.font(shortname);
      this._constructor_values['font-family'] = f;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return JSON.stringify(this._config);
    }
  }, {
    key: "getCSS",
    value: function getCSS() {
      var inner = "";

      for (var _i = 0, _Object$entries = Object.entries(this._constructor_values); _i < _Object$entries.length; _i++) {
        var x = _Object$entries[_i];
        inner += x[0] + ": " + x[1] + ";";
      }

      var ret = ".diode_appearance { ";
      ret += inner;
      ret += "}"; // Since the lm_content overrides the background, we re-override the background
      // Note that this is legal and works because local <style></style> always overrides imports from other files

      ret += ".lm_content { ";
      ret += inner;
      ret += "}";
      return ret;
    }
  }, {
    key: "toStorable",
    value: function toStorable() {
      return {
        style: this.getCSS(),
        vals: this._constructor_values
      };
    }
  }, {
    key: "setFromAceEditorTheme",
    value: function setFromAceEditorTheme(theme_name) {
      /*
          Sets background and foreground according to the theme identifed by `theme_name`
          Note: The css class selector used to determine current values is: '.ace-' + `theme_name`
      */
      var s = Appearance.getClassProperties("ace-" + theme_name);
      var bgc = s['background-color'];
      var bg = s['background'];
      if (bgc) this.setValue('background-color', bgc);
      if (bg) this.setValue('background', bg + " !important");
      this.setValue('color', s['color']);
      this.insertStylesheet(this.getCSS());
    }
  }], [{
    key: "getClassProperties",
    value: function getClassProperties(cssclassname) {
      var elem = document.createElement('div');
      elem.classList = cssclassname;
      elem.style = "width: 0; height: 0;";
      document.body.appendChild(elem);
      var style = JSON.parse(JSON.stringify(window.getComputedStyle(elem)));
      document.body.removeChild(elem);
      return style;
    }
  }, {
    key: "fonts",
    value: function fonts() {
      return ["Georgia", "Palatino", "Times", "Arial", "ArialBlack", "ComicSans", "Impact", "Lucida", "Tahoma", "Trebuchet", "Verdana", "Courier", "LucidaConsole"];
    }
  }, {
    key: "font",
    value: function font(shortname) {
      switch (shortname) {
        // Serif
        case "Georgia":
          return 'Georgia, serif';

        case "Palatino":
          return '"Palatino Linotype", "Book Antiqua", Palatino, serif';

        case "Times":
          return '"Times New Roman", Times, serif';
        // Sans-Serif

        case "Arial":
          return "Arial, Helvetica, sans-serif";

        case "ArialBlack":
          return '"Arial Black", Gadget, sans-serif';

        case "ComicSans":
          return '"Comic Sans MS", cursive, sans-serif';

        case "Impact":
          return 'Impact, Charcoal, sans-serif';

        case "Lucida":
          return '"Lucida Sans Unicode", "Lucida Grande", sans-serif';

        case "Tahoma":
          return 'Tahoma, Geneva, sans-serif';

        case "Trebuchet":
          return '"Trebuchet MS", Helvetica, sans-serif';

        case "Verdana":
          return 'Verdana, Geneva, sans-serif';
        // Monospace

        case "Courier":
          return '"Courier New", Courier, monospace';

        case "LucidaConsole":
          return '"Lucida Console", Monaco, monospace';

        default:
          throw "Unknown font (not websafe?)";
      }
    }
  }, {
    key: "default",
    value: function _default() {
      /*
          Builds a default configuration
      */
      var cssstring = "\n        .diode_appearance {\n            font-family: " + Appearance.font('Arial') + "\n        }\n        ";
      return cssstring;
    }
  }]);

  return Appearance;
}();

/***/ }),

/***/ "./src/diode-ui/diode_project.js":
/*!***************************************!*\
  !*** ./src/diode-ui/diode_project.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Project": () => (/* binding */ DIODE_Project)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*
Coordinates windows belonging to the same project.

*/
var DIODE_Project = /*#__PURE__*/function () {
  function DIODE_Project(diode) {
    var project_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, DIODE_Project);

    this._diode = diode;

    if (project_id === undefined || project_id === null) {
      this._project_id = diode.getPseudorandom();
    } else {
      this._project_id = project_id;
    }

    this.setup();
    this._callback = null;
    this._rcvbuf = {};
    this._waiter = {};
    this._listeners = {};
    this._closed_windows = [];
    this._blob = null;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DIODE_Project, [{
    key: "clearTransformationHistory",
    value: function clearTransformationHistory() {
      // Reset transformation history
      sessionStorage.removeItem("transformation_snapshots");
    }
  }, {
    key: "getTransformationSnapshots",
    value: function getTransformationSnapshots() {
      var sdata = sessionStorage.getItem("transformation_snapshots");

      if (sdata == null) {
        sdata = [];
      } else sdata = JSON.parse(sdata);

      return sdata;
    }
  }, {
    key: "getTransformationHistory",
    value: function getTransformationHistory() {
      var sdata = this.getTransformationSnapshots();
      return sdata.map(function (x) {
        return x[0];
      });
    }
  }, {
    key: "discardTransformationsAfter",
    value: function discardTransformationsAfter(index) {
      var sdata = this.getTransformationSnapshots(); // Cut the tail off and resave

      sessionStorage.setItem("transformation_snapshots", JSON.stringify(sdata.slice(0, index))); // Send the update notification

      this.request(['update-tfh'], function (x) {
        return x;
      }, {});
    }
  }, {
    key: "saveSnapshot",
    value: function saveSnapshot(sdfgs, changing_transformation) {
      /*
          Saves the current snapshot, defined by sdfgs and the current (new) transformation.
       */
      var sdata = this.getTransformationSnapshots();
      sdata.push([changing_transformation, sdfgs]);
      sessionStorage.setItem("transformation_snapshots", JSON.stringify(sdata));
    }
  }, {
    key: "reopenClosedWindow",
    value: function reopenClosedWindow(name) {
      var window = this.getConfigForClosedWindow(name, true);

      this._diode.addContentItem(window); // Emit the reopen event


      this._diode.goldenlayout.eventHub.emit('window-reopened-' + name);
    }
  }, {
    key: "getConfigForClosedWindow",
    value: function getConfigForClosedWindow(name) {
      var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var list = this.getClosedWindowsList();
      var new_list = [];
      var rets = [];

      var _iterator = _createForOfIteratorHelper(list),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          var cname = x[0];
          var state = x[1];

          if (state.created === name) {
            // Found the requested element
            rets.push([cname, state]);

            if (remove) {// Don't put into the new list
            } else {
              new_list.push([cname, state]);
            }
          } else {
            // Not found
            new_list.push([cname, state]);
          }
        } // Store back

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.setClosedWindowsList(new_list);
      console.assert(rets.length === 1, "Expected only 1 match!");
      var ret = rets[0]; // Build a config for this

      var config = {
        type: 'component',
        componentName: ret[0],
        componentState: ret[1]
      };
      return config;
    }
  }, {
    key: "setClosedWindowsList",
    value: function setClosedWindowsList(new_list) {
      this._closed_windows = new_list;
      sessionStorage.setItem(this._project_id + "-closed-window-list", JSON.stringify(this._closed_windows));
    }
  }, {
    key: "clearClosedWindowsList",
    value: function clearClosedWindowsList() {
      this._closed_windows = [];
      sessionStorage.setItem(this._project_id + "-closed-window-list", JSON.stringify(this._closed_windows));
    }
  }, {
    key: "addToClosedWindowsList",
    value: function addToClosedWindowsList(componentName, state) {
      this._closed_windows = this.getClosedWindowsList();

      this._closed_windows.push([componentName, state]);

      try {
        sessionStorage.setItem(this._project_id + "-closed-window-list", JSON.stringify(this._closed_windows));
      } catch (e) {
        console.error("Error when adding to closed windows list!", e);
        sessionStorage.clear();
      }
    }
  }, {
    key: "getClosedWindowsList",
    value: function getClosedWindowsList() {
      var tmp = sessionStorage.getItem(this._project_id + "-closed-window-list");

      if (typeof tmp === "string") {
        tmp = JSON.parse(tmp);
      }

      if (tmp === null) {
        return [];
      }

      return tmp;
    }
  }, {
    key: "eventString",
    value: function eventString(suffix) {
      console.assert(this._project_id != null, "project id valid");
      return this._project_id + suffix;
    }
  }, {
    key: "startListening",
    value: function startListening(event, id) {
      var hub = this._diode.goldenlayout.eventHub;
      var transthis = this;

      var cb = function cb(msg) {
        var tmp = transthis._rcvbuf[id][event];

        if (tmp instanceof Array) {
          transthis._rcvbuf[id][event].push(msg);
        } else if (tmp instanceof Object) {
          Object.assign(transthis._rcvbuf[id][event], msg);
        } else {
          transthis._rcvbuf[id][event] = msg;
        }
      };

      var params = [this.eventString(event), cb, this];
      hub.on.apply(hub, params);

      this._listeners[id].push(params);
    }
  }, {
    key: "stopListening",
    value: function stopListening(id) {
      var hub = this._diode.goldenlayout.eventHub;

      var _iterator2 = _createForOfIteratorHelper(this._listeners[id]),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          hub.unbind.apply(hub, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(x));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      delete this._listeners[id];
    }
  }, {
    key: "setup",
    value: function setup() {}
  }, {
    key: "createblob",
    value: function createblob(data) {
      var blob = new Blob([data], {
        type: 'text/plain'
      }); // If we are replacing a previously generated file we need to
      // manually revoke the object URL to avoid memory leaks.

      if (this._blob !== null) {
        window.URL.revokeObjectURL(this._blob);
      }

      this._blob = window.URL.createObjectURL(blob);
      return this._blob;
    }
  }, {
    key: "save",
    value: function save() {
      var _this = this;

      // Save current open file as SDFG
      this.request(['sdfg_object'], function (x) {
        var sdfg = x.sdfg_object;
        var filename = null;

        if (typeof sdfg != 'string') {
          filename = Object.keys(x.sdfg_object)[0];
          sdfg = stringify_sdfg(Object.values(x.sdfg_object)[0]);
        } else {
          var sdfg_obj = parse_sdfg(sdfg);
          filename = sdfg_obj.attributes.name;
        }

        filename += '.sdfg';
        var link = document.createElement('a');
        link.setAttribute('download', filename);
        link.href = _this.createblob(sdfg);
        document.body.appendChild(link); // wait for the link to be added to the document

        window.requestAnimationFrame(function () {
          var event = new MouseEvent('click');
          link.dispatchEvent(event);
          document.body.removeChild(link);
        });
      });
    }
  }, {
    key: "request",
    value: function request(list, callback) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      /*
          options:
              timeout: Number                 ms to wait until on_timeout is called
              on_timeout: [opt] Function      Function called on timeout
              params: [opt] object            Parameters to pass with the request
      */
      var tmp = new DIODE_Project(this._diode, this._project_id);
      return tmp.__impl_request(list, callback, options);
    }
  }, {
    key: "__impl_request",
    value: function __impl_request(list, callback) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      /*
          options:
              timeout: Number                 ms to wait until on_timeout is called
              on_timeout: [opt] Function      Function called on timeout
              params: [opt] object            Parameters to pass with the request
      */
      this._callback = callback;
      var params = options.params;

      var reqid = "id" + this._diode.getPseudorandom(); // Clear potentially stale values


      this._rcvbuf[reqid] = {};
      this._listeners[reqid] = [];

      var _iterator3 = _createForOfIteratorHelper(list),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var x = _step3.value;
          this.startListening(x, reqid);

          this._diode.goldenlayout.eventHub.emit(this.eventString("-req-" + x), params, this);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var transthis = this;
      var interval_step = 100;
      var timeout = options.timeout;
      this._waiter[reqid] = setInterval(function () {
        var missing = false;

        var _iterator4 = _createForOfIteratorHelper(list),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var x = _step4.value;

            if (!(x in transthis._rcvbuf[reqid])) {
              missing = true;
              break;
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        if (!missing) {
          clearInterval(transthis._waiter[reqid]);
          transthis.stopListening(reqid);
          transthis._waiter[reqid] = null;
          var tmp = transthis._rcvbuf[reqid];
          delete transthis._rcvbuf[reqid];
          return transthis._callback(tmp, options.timeout_id);
        } else if (timeout !== null) {
          timeout -= interval_step;

          if (timeout <= 0) {
            // Timed out - fail silently
            clearInterval(transthis._waiter[reqid]);
            transthis.stopListening(reqid);

            if (options.on_timeout != undefined) {
              options.on_timeout(transthis._rcvbuf[reqid]);
            }

            transthis._waiter[reqid] = null;
            delete transthis._rcvbuf[reqid];
          }
        }
      }, interval_step);
    }
  }], [{
    key: "load",
    value: function load(diode, project_name) {
      var pdata = DIODE_Project.getProjectData(project_name);
      var ret = new DIODE_Project(diode, pdata.project_id); // For simplicity, we copy the saved config over the current config
      // First, destroy the current layout

      diode.goldenlayout.destroy(); // Then, we copy over the config

      sessionStorage.setItem("savedState", JSON.stringify(pdata.data)); // ... and the project id

      sessionStorage.setItem("diode_project", ret._project_id); // ... and the transformation snapshots

      sessionStorage.setItem("transformation_snapshots", JSON.stringify(pdata.snapshots)); // Reload the page (This will create a new goldenlayout with the specified data)

      window.location.reload();
      return ret;
    }
  }, {
    key: "getProjectData",
    value: function getProjectData(project_name) {
      var pdata = localStorage.getItem("project_" + project_name);
      if (pdata == null) throw "Project must exist";
      return JSON.parse(pdata);
    }
  }, {
    key: "getSavedProjects",
    value: function getSavedProjects() {
      var tmp = localStorage.getItem("saved_projects");
      if (tmp == null) return [];
      return JSON.parse(tmp);
    }
  }]);

  return DIODE_Project;
}();

/***/ }),

/***/ "./src/diode-ui/diode_settings.js":
/*!****************************************!*\
  !*** ./src/diode-ui/diode_settings.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIODE_Settings": () => (/* binding */ DIODE_Settings)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");


var DIODE_Settings = /*#__PURE__*/function () {
  function DIODE_Settings() {
    var denormalized = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, DIODE_Settings);

    this.settings_values = denormalized;
    this.changed = {};
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(DIODE_Settings, [{
    key: "load",
    value: function load() {
      // Load the settings from localStorage
      this.settings_values = window.localStorage.getItem("DIODE/Settings/confirmed");
      this.changed = window.localStorage.getItem("DIODE/Settings/changed");
    }
  }, {
    key: "store",
    value: function store() {
      // Store the settings to localStorage
      window.localStorage.setItem("DIODE/Settings/confirmed", this.settings_values);
      window.localStorage.setItem("DIODE/Settings/changed", this.changed);
    }
  }, {
    key: "change",
    value: function change(setting, value) {
      this.changed[setting.join('/')] = value;
    }
  }, {
    key: "hasChanged",
    value: function hasChanged() {
      return this.changed != {};
    }
  }, {
    key: "changedValues",
    value: function changedValues() {
      return this.changed;
    }
  }, {
    key: "clearChanged",
    value: function clearChanged() {
      this.changed = {};
    }
  }, {
    key: "values",
    value: function values() {
      return this.settings_values;
    }
  }]);

  return DIODE_Settings;
}();

/***/ }),

/***/ "./src/diode-ui/table.js":
/*!*******************************!*\
  !*** ./src/diode-ui/table.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TableCategory": () => (/* binding */ TableCategory),
/* harmony export */   "Table": () => (/* binding */ Table)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
var TableCategory = /*#__PURE__*/function () {
  function TableCategory(table, parent_row) {
    var _this = this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, TableCategory);

    this._table = table;
    this._title_row = parent_row;
    this._cat_rows = [];

    this._title_row.classList.add("diode_property_header");

    this._title_row.addEventListener('click', function (ev) {
      var _iterator = _createForOfIteratorHelper(_this._cat_rows),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;

          if (x.style.display == "none") {
            x.style.display = null;

            _this._title_row.classList.remove("collapsed");
          } else {
            x.style.display = "none";

            _this._title_row.classList.add("collapsed");
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(TableCategory, [{
    key: "addContentRow",
    value: function addContentRow(row) {
      this._cat_rows.push(row);
    }
  }]);

  return TableCategory;
}();
var Table = /*#__PURE__*/function () {
  function Table() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Table);

    this.init();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Table, [{
    key: "init",
    value: function init() {
      this._table = document.createElement('table');
      this._thead = document.createElement('thead');
      this._tbody = document.createElement('tbody');

      this._table.appendChild(this._thead);

      this._table.appendChild(this._tbody);

      this._is_collapsed = false;
    }
  }, {
    key: "createIn",
    value: function createIn(elem) {
      elem.appendChild(this._table);
    }
  }, {
    key: "setHeaders",
    value: function setHeaders() {
      for (var _len = arguments.length, columns = new Array(_len), _key = 0; _key < _len; _key++) {
        columns[_key] = arguments[_key];
      }

      this._columns = columns;
      this._thead.innerHTML = "";
      var tr = document.createElement("tr");

      var _iterator2 = _createForOfIteratorHelper(this._columns),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          var th = document.createElement('th');

          if (typeof x === 'string') {
            th.innerText = x;
          } else {
            th.appendChild(x);
          }

          tr.appendChild(th);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this._thead.appendChild(tr);

      return tr;
    }
  }, {
    key: "addRow",
    value: function addRow() {
      for (var _len2 = arguments.length, columns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        columns[_key2] = arguments[_key2];
      }

      var tmp = columns;
      var tr = document.createElement("tr");

      for (var _i = 0, _tmp = tmp; _i < _tmp.length; _i++) {
        var x = _tmp[_i];
        var td = document.createElement('td');

        if (typeof x === 'string') {
          td.innerText = x;
        } else {
          td.appendChild(x);
        }

        tr.appendChild(td);
      }

      this._tbody.appendChild(tr);

      return tr;
    }
  }, {
    key: "collapseVertically",
    value: function collapseVertically() {
      this._table.style.display = "none";
      this._is_collapsed = true;
    }
  }, {
    key: "expandVertically",
    value: function expandVertically() {
      this._table.style.display = null;
      this._is_collapsed = false;
    }
  }, {
    key: "toggleVertically",
    value: function toggleVertically() {
      if (this._is_collapsed) {
        this.expandVertically();
      } else {
        this.collapseVertically();
      }
    }
  }, {
    key: "setCSSClass",
    value: function setCSSClass(classname) {
      this._table.classList = classname;
    }
  }]);

  return Table;
}();

/***/ }),

/***/ "./src/diode-ui/treeview.js":
/*!**********************************!*\
  !*** ./src/diode-ui/treeview.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueTreeNode": () => (/* binding */ ValueTreeNode),
/* harmony export */   "TreeView": () => (/* binding */ TreeView)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
var ValueTreeNode = /*#__PURE__*/function () {
  function ValueTreeNode(label) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, ValueTreeNode);

    this._label = label;
    this._prev = null;
    this._data = data;
    this._children = [];
    this._on_activate = null;
    this._representative = null;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(ValueTreeNode, [{
    key: "label",
    value: function label() {
      return this._label;
    }
  }, {
    key: "setPathLabel",
    value: function setPathLabel(l) {
      this._path_label = l;
    }
  }, {
    key: "pathLabel",
    value: function pathLabel() {
      if (this._path_label === undefined) return this.label();else return this._path_label;
    }
  }, {
    key: "data",
    value: function data() {
      return this._data;
    }
  }, {
    key: "children",
    value: function children() {
      return this._children;
    }
  }, {
    key: "parent",
    value: function parent() {
      return this._prev;
    }
  }, {
    key: "getChild",
    value: function getChild(pred) {
      var _iterator = _createForOfIteratorHelper(this.children()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          if (pred(x)) return x;
          var tmp = x.getChild(pred);
          if (tmp != null) return tmp;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }
  }, {
    key: "clearChildren",
    value: function clearChildren() {
      this._children = [];
    }
  }, {
    key: "head",
    value: function head() {
      var it = this;

      while (it._prev != null) {
        it = it._prev;
      }

      return it;
    }
  }, {
    key: "allLabelsInTree",
    value: function allLabelsInTree() {
      return this.head().asPreOrderArray(function (x) {
        return x.pathLabel();
      });
    }
  }, {
    key: "asPreOrderArray",
    value: function asPreOrderArray() {
      var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {
        return x;
      };
      var ret = [f(this)];

      var _iterator2 = _createForOfIteratorHelper(this.children()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          ret.push.apply(ret, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(x.asPreOrderArray(f)));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return ret;
    }
  }, {
    key: "path",
    value: function path() {
      var map_func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var ret = [];

      if (map_func === undefined) {
        map_func = function map_func(current) {
          return {
            'name': current.pathLabel(),
            'params': current.data()
          };
        };
      }

      var current = this;

      while (current._prev != null) {
        var e = map_func(current);

        if (e.name != " <virtual>") {
          // " <virtual>" (with the space) is a virtual identifier, i.e. do not include the node in the path
          ret = [e].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(ret));
        }

        current = current._prev;
      }

      return ret;
    }
  }, {
    key: "addNode",
    value: function addNode(label) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      /*
          options:
              .LabelConflictSameLevel
                  Function(new_node, labels) => new_node: 
                      Called before every new node is added to the list of children.
                      Can be used to assign different names on conflict in the same
                      group of children. (NOT globally!)
              .LabelConflictGlobal
                  Function(new_node, allNodeLabels) => new_node:
                      Called before every new node is added to the list of children.
                      Can be used to assign different names on conflict over all nodes.
                      
      */
      var new_node = new ValueTreeNode(label, data);
      new_node._prev = this;

      if (options.LabelConflictSameLevel != undefined) {
        new_node = options.LabelConflictSameLevel(new_node, this.children().map(function (x) {
          return x.label();
        }));
      }

      if (options.LabelConflictGlobal != undefined) {
        new_node = options.LabelConflictGlobal(new_node, this.allLabelsInTree());
      }

      new_node._prev = this; // Make sure that after potential reordering, the basic order is still enforced

      this._children.push(new_node);

      return new_node;
    }
  }, {
    key: "setHandler",
    value: function setHandler(type, handler) {
      // type: 'activate'
      // handler: function (this, level)
      if (type == "activate") {
        this._on_activate = handler;
      } else {
        console.assert(false, "type " + type + " is unknown");
      }
    }
  }, {
    key: "setRepresentative",
    value: function setRepresentative(obj) {
      this._representative = obj;
    }
  }, {
    key: "representative",
    value: function representative() {
      return this._representative;
    }
  }, {
    key: "activate",
    value: function activate(level) {
      if (this._on_activate != null) {
        this._on_activate(this, level);
      }
    }
  }]);

  return ValueTreeNode;
}();
/*
Classic TreeView implementation
*/

var TreeView = /*#__PURE__*/function () {
  function TreeView(value_tree_node) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, TreeView);

    this._tree = value_tree_node;
    this._debouncing = null;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(TreeView, [{
    key: "setDebouncing",
    value: function setDebouncing(obj) {
      this._debouncing = obj;
    }
    /*
        parent: Used for parent.append()
        depth: Depth information - unused
        node: Overriding the starting node. If undefined, this._tree is used
    */

  }, {
    key: "create_html_in",
    value: function create_html_in(parent) {
      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var current = node === undefined ? this._tree : node;
      var listitem = document.createElement("li");
      var listitemspan = document.createElement("span");
      listitemspan.innerText = current.label();
      listitem.append(listitemspan);
      var nextparent = document.createElement("ul");
      nextparent.classList.add("tree_view");
      nextparent.classList.add("collapsed_sublist");

      var onclickfunc = function onclickfunc() {
        nextparent.classList.toggle("collapsed_sublist");
        current.activate(1);
      };

      var ondblclickfunc = function ondblclickfunc() {
        current.activate(2);
      };

      var passed_click_func = onclickfunc;
      var passed_dblclick_func = onclickfunc;

      if (this._debouncing != null) {
        passed_click_func = this._debouncing.debounce("treeview-click", onclickfunc, 100);
        passed_dblclick_func = this._debouncing.debounce("treeview-click", ondblclickfunc, 10);
      }

      listitem.addEventListener("click", passed_click_func);
      listitem.addEventListener("mouseenter", function () {
        current.activate(0);
      });
      listitem.addEventListener("mouseleave", function () {
        current.activate(-1);
      });
      listitem.addEventListener("dblclick", passed_dblclick_func);
      current.setRepresentative(listitem);
      nextparent.append(listitem);
      var children = current.children();

      if (children.length == 0) {// current is a leaf node
      } else {
        // current is the root of a non-trivial subtree
        var _iterator3 = _createForOfIteratorHelper(children),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var n = _step3.value;
            this.create_html_in(nextparent, depth + 1, n);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      parent.append(nextparent);
    }
  }]);

  return TreeView;
}();

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find_object_cycles": () => (/* binding */ find_object_cycles),
/* harmony export */   "setup_drag_n_drop": () => (/* binding */ setup_drag_n_drop),
/* harmony export */   "REST_request": () => (/* binding */ REST_request),
/* harmony export */   "FormBuilder": () => (/* binding */ FormBuilder)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diode-ui/diode */ "./src/diode-ui/diode.js");
/* harmony import */ var _diode_ui_contexts_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diode-ui/contexts/settings */ "./src/diode-ui/contexts/settings.js");
/* harmony import */ var _diode_ui_contexts_diode_settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./diode-ui/contexts/diode_settings */ "./src/diode-ui/contexts/diode_settings.js");
/* harmony import */ var _diode_ui_contexts_code_in__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./diode-ui/contexts/code_in */ "./src/diode-ui/contexts/code_in.js");
/* harmony import */ var _diode_ui_contexts_terminal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./diode-ui/contexts/terminal */ "./src/diode-ui/contexts/terminal.js");
/* harmony import */ var _diode_ui_contexts_code_out__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./diode-ui/contexts/code_out */ "./src/diode-ui/contexts/code_out.js");
/* harmony import */ var _diode_ui_contexts_sdfg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./diode-ui/contexts/sdfg */ "./src/diode-ui/contexts/sdfg.js");
/* harmony import */ var _diode_ui_contexts_prop_window__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./diode-ui/contexts/prop_window */ "./src/diode-ui/contexts/prop_window.js");
/* harmony import */ var _diode_ui_contexts_runqueue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./diode-ui/contexts/runqueue */ "./src/diode-ui/contexts/runqueue.js");
/* harmony import */ var _diode_ui_contexts_start_page__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./diode-ui/contexts/start_page */ "./src/diode-ui/contexts/start_page.js");
/* harmony import */ var _diode_ui_contexts_transformation_history__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./diode-ui/contexts/transformation_history */ "./src/diode-ui/contexts/transformation_history.js");
/* harmony import */ var _diode_ui_contexts_available_transformations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./diode-ui/contexts/available_transformations */ "./src/diode-ui/contexts/available_transformations.js");
/* harmony import */ var _diode_ui_contexts_error__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./diode-ui/contexts/error */ "./src/diode-ui/contexts/error.js");
/* harmony import */ var _diode_ui_contexts_run_config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./diode-ui/contexts/run_config */ "./src/diode-ui/contexts/run_config.js");
/* harmony import */ var _diode_ui_contexts_perf_times__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./diode-ui/contexts/perf_times */ "./src/diode-ui/contexts/perf_times.js");
/* harmony import */ var _diode_ui_contexts_instrumentation_control__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./diode-ui/contexts/instrumentation_control */ "./src/diode-ui/contexts/instrumentation_control.js");
/* harmony import */ var _diode_ui_contexts_roofline__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./diode-ui/contexts/roofline */ "./src/diode-ui/contexts/roofline.js");




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

















var base_url = "//" + window.location.host;
globalThis.base_url = base_url; // we cannot import jQuery from npm because w2ui only hijacks the global jQuery instance and has no npm package available

var $ = globalThis.$;
start_DIODE();
function find_object_cycles(obj) {
  var found = [];

  var detect = function detect(x, path) {
    if (typeof x == "string") {} else if (x instanceof Array) {
      var index = 0;

      var _iterator = _createForOfIteratorHelper(x),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var y = _step.value;
          detect(y, [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__.default)(path), [index]));
          ++index;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else if (x instanceof Object) {
      if (found.indexOf(x) !== -1) {
        // Cycle found
        throw ["Cycle", path, x];
      }

      found.push(x);

      for (var _i = 0, _Object$keys = Object.keys(x); _i < _Object$keys.length; _i++) {
        var _y = _Object$keys[_i];

        if (x.hasOwnProperty(_y)) {
          detect(x[_y], [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__.default)(path), [_y]));
        }
      }
    }
  };

  return detect(obj, []);
}
function setup_drag_n_drop(elem, callbackSingle, callbackMultiple) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    readMode: "text",
    condition: function condition(elem) {
      return true;
    }
  };

  /*
      callbackSingle: (mimetype: string, content: string) => mixed
          Takes the file contents (text) and the mimetype.
      callbackMultiple: reserved
      options:
          .readmode: "text" or "binary"
          .condition: Function called with parameter "elem" determining if the current element should have the handler active
  */
  var drag_enter = function drag_enter(e) {
    if (!options.condition(elem)) return;
    e.stopPropagation();
    e.preventDefault();
  };

  var drag_over = function drag_over(e) {
    if (!options.condition(elem)) return;
    e.stopPropagation();
    e.preventDefault();
  };

  var drag_drop = function drag_drop(e) {
    if (!options.condition(elem)) return;
    var files = Array.from(e.dataTransfer.files);

    if (files.length === 1) {
      e.stopPropagation();
      e.preventDefault(); // A single file was provided

      var file = files[0];
      var mime = file.type;
      var reader = new FileReader();

      reader.onload = function (ev) {
        callbackSingle(mime, ev.target.result);
      };

      if (options.readMode == "text") {
        reader.readAsText(file);
      } else if (options.readMode == "binary") {
        reader.readAsArrayBuffer(file);
      } else {
        throw "Unimplemented read mode " + options.readMode;
      }
    } else if (files.length > 1) {
      e.stopPropagation();
      e.preventDefault(); // #TODO: Deferred 

      alert("Cannot handle more than 1 input file at this point");
      throw "Previous alert caused here";
    } else {
      alert("Can only drop files at this point - everything else is user-agent-specific!");
      throw "Previous alert caused here";
    }
  };

  elem.addEventListener("dragenter", drag_enter, false);
  elem.addEventListener("dragover", drag_over, false);
  elem.addEventListener("drop", drag_drop, false);
}
function REST_request(command, payload, callback) {
  var method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "POST";
  var xhr = new XMLHttpRequest();
  var url = base_url + command;
  xhr.open(method, url, true);
  xhr.setRequestHeader("Content-Type", "application/json");

  xhr.onreadystatechange = function () {
    callback(xhr);
  };

  xhr.onerror = function (e) {
    console.warn("Connection error", e);
    alert("Connection error");
  };

  if (payload != undefined) {
    var data = JSON.stringify(payload);
    xhr.send(data);
  } else {
    xhr.send();
  }
}
var FormBuilder = /*#__PURE__*/function () {
  function FormBuilder() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, FormBuilder);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(FormBuilder, null, [{
    key: "createContainer",
    value: function createContainer(idstr) {
      var elem = document.createElement("div");
      elem.id = idstr;
      elem.classList = "settings_key_value";
      return $(elem);
    }
  }, {
    key: "createHostInput",
    value: function createHostInput(id, onchange) {
      var known_list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['localhost'];
      var initial = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "localhost";
      var elem = document.createElement('input');
      elem.type = "list";
      elem.id = id;
      var dlist = document.getElementById("hosttype-dlist");

      if (!dlist) {
        dlist = document.createElement("datalist");
        dlist.id = "hosttype-dlist";
        document.body.appendChild(dlist);
      }

      $(elem).attr("list", "hosttype-dlist");
      dlist.innerHTML = "";

      var _iterator2 = _createForOfIteratorHelper(known_list),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var x = _step2.value;
          dlist.innerHTML += '<option value="' + x + '">';
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      elem.value = initial;

      elem.onchange = function () {
        onchange(elem);
      };

      return $(elem);
    }
  }, {
    key: "createComboboxInput",
    value: function createComboboxInput(id, onchange, known_list, initial) {
      var elem = document.createElement('div');
      var inputelem = document.createElement('input');
      inputelem.type = "list";
      inputelem.id = id;

      inputelem.onfocus = function () {
        // Clear (this will make it act more like a select)
        var oldvalue = inputelem.value;

        inputelem.onblur = function () {
          inputelem.value = oldvalue;
        };

        inputelem.value = "";
      };

      var dlist = document.createElement("datalist");
      dlist.id = id + "-dlist";
      elem.appendChild(dlist);
      $(inputelem).attr("list", id + "-dlist");
      dlist.innerHTML = "";

      var _iterator3 = _createForOfIteratorHelper(known_list),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var x = _step3.value;
          dlist.innerHTML += '<option value="' + x + '">';
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      inputelem.value = initial;

      inputelem.onchange = function () {
        inputelem.onblur = null;
        onchange(inputelem);
      };

      elem.appendChild(inputelem);
      return $(elem);
    }
  }, {
    key: "createCodeReference",
    value: function createCodeReference(id, onclick, obj) {
      var elem = document.createElement('span');
      elem.id = id;
      elem.addEventListener('click', function (x) {
        onclick(x);
      });
      elem.classList.add("code_ref");

      if (obj == null || obj.filename == null) {
        elem.innerText = "N/A";
        elem.title = "The DebugInfo for this element is not defined";
      } else {
        var split = obj.filename.split("/");
        var fname = split[split.length - 1];
        elem.innerText = fname + ":" + obj.start_line;
        elem.title = obj.filename;
      }

      return $(elem);
    }
  }, {
    key: "createLabel",
    value: function createLabel(id, labeltext, tooltip) {
      var elem = document.createElement("span");
      elem.id = id;
      elem.innerHTML = labeltext;
      elem.title = tooltip;
      elem.classList = "title";
      return $(elem);
    }
  }, {
    key: "createToggleSwitch",
    value: function createToggleSwitch(id, onchange) {
      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var legacy = false;
      var elem = document.createElement("input");

      elem.onchange = function () {
        onchange(elem);
      };

      elem.type = "checkbox";
      elem.id = id;
      elem.checked = initial;

      if (!legacy) {
        // Add CSS "toggle-slider" elements
        // This requires more HTML.
        var styled_elem = document.createElement("label");
        styled_elem.classList = "switch";
        $(styled_elem).append(elem);
        $(styled_elem).append($('<span class="slider round"></span>'));
        return $(styled_elem);
      }

      return $(elem);
    }
  }, {
    key: "createTextInput",
    value: function createTextInput(id, onchange) {
      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var elem = document.createElement("input"); // oninput triggers on every change (as opposed to onchange, which only changes on deselection)

      elem.onchange = function () {
        onchange(elem);
      };

      elem.type = "text";
      elem.id = id;
      elem.value = initial;
      return $(elem);
    }
  }, {
    key: "createLongTextInput",
    value: function createLongTextInput(id, onchange) {
      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var elem = document.createElement("textarea"); // oninput triggers on every change (as opposed to onchange, which only changes on deselection)

      elem.onchange = function () {
        onchange(elem.innerHTML);
      };

      elem.id = id;
      elem.innerHTML = initial;
      return $(elem);
    }
  }, {
    key: "createSelectInput",
    value: function createSelectInput(id, onchange, options) {
      var initial = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var elem = document.createElement("select");

      var _iterator4 = _createForOfIteratorHelper(options),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var option = _step4.value;
          var option_elem = document.createElement('option');
          option_elem.innerText = option;
          elem.append(option_elem);
        } // oninput triggers on every change (as opposed to onchange, which only changes on deselection)

      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      elem.oninput = function () {
        onchange(elem);
      };

      elem.id = id;
      elem.value = initial;
      return $(elem);
    }
  }, {
    key: "createIntInput",
    value: function createIntInput(id, onchange) {
      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var elem = document.createElement("input");

      elem.oninput = function () {
        onchange(elem);
      };

      elem.type = "number";
      elem.step = 1;
      elem.id = id;
      elem.value = initial;
      return $(elem);
    }
  }, {
    key: "createFloatInput",
    value: function createFloatInput(id, onchange) {
      var elem = document.createElement("input");

      elem.oninput = function () {
        onchange(elem);
      };

      elem.type = "number";
      elem.id = id;
      return $(elem);
    }
  }, {
    key: "createButton",
    value: function createButton(id, onclick, label) {
      var elem = document.createElement("button");

      elem.onclick = function () {
        onclick(elem);
      };

      elem.innerHTML = label;
      return $(elem);
    }
  }]);

  return FormBuilder;
}();

function start_DIODE() {
  var diode = new _diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__.DIODE();
  window.diode = diode;
  diode.initEnums();
  diode.pubSSH(true);
  $("#toolbar").w2toolbar({
    name: "toolbar",
    items: [{
      type: 'menu',
      id: 'file-menu',
      caption: 'File',
      icon: 'material-icons-outlined gmat-folder',
      items: [{
        text: 'Start',
        icon: 'material-icons-outlined gmat-new_folder',
        id: 'start'
      }, {
        text: 'Open',
        icon: 'material-icons-outlined gmat-open',
        id: 'open-file'
      }, {
        text: 'Save',
        icon: 'material-icons-outlined gmat-save',
        id: 'save'
      }]
    }, {
      type: 'break',
      id: 'break0'
    }, {
      type: 'menu',
      id: 'settings-menu',
      caption: 'Settings',
      icon: 'material-icons-outlined gmat-settings',
      items: [{
        text: 'DACE settings',
        icon: 'material-icons-outlined gmat-settings-cloud',
        id: 'diode-settings'
      }, {
        text: 'DIODE settings',
        icon: 'material-icons-outlined gmat-settings-application',
        id: 'diode-settings'
      }, {
        text: 'Run Configurations',
        icon: 'material-icons-outlined gmat-playlist_play',
        id: 'runoptions'
      }, {
        text: 'Runqueue',
        icon: 'material-icons-outlined gmat-view_list',
        id: 'runqueue'
      }, {
        text: 'Perfdata',
        id: 'perfdata'
      }, {
        text: 'Perftimes',
        id: 'perftimes'
      }]
    }, {
      type: 'menu',
      icon: 'material-icons-outlined gmat-build',
      id: 'compile-menu',
      caption: 'Compile',
      items: [{
        text: 'Compile',
        id: 'compile',
        icon: 'material-icons-outlined gmat-gavel'
      }, {
        text: 'Run',
        id: 'run',
        icon: 'material-icons-outlined gmat-play'
      }, {
        text: 'Discard changes and compile source',
        id: 'compile-clean',
        icon: 'material-icons-outlined gmat-clear'
      }]
    }, {
      type: 'menu-radio',
      id: 'runconfig',
      text: function text(item) {
        var t = typeof item.selected == 'string' ? item.selected : item.selected();
        var el = this.get('runconfig:' + t);
        return "Config: " + (el == null ? diode.getCurrentRunConfigName() : el.text);
      },
      selected: function selected(item) {
        return diode.getCurrentRunConfigName();
      },
      items: [{
        id: 'default',
        text: "default"
      }]
    }, {
      type: 'menu',
      id: 'transformation-menu',
      caption: 'Transformations',
      items: [{
        text: 'History',
        id: 'history'
      }, {
        text: 'Available Transformations',
        id: 'available'
      }]
    }, {
      type: 'menu',
      id: 'group-menu',
      caption: 'Group',
      icon: 'material-icons-outlined gmat-apps',
      items: [//{ text: 'Group by SDFGs', id: 'group-sdfgs' }, 
      {
        text: 'Group default',
        id: 'group-diode1'
      }]
    }, {
      type: 'menu',
      id: 'closed-windows',
      caption: 'Closed windows',
      icon: 'material-icons-outlined gmat-reopen',
      items: []
    }],
    onClick: function onClick(event) {
      if (event.target === 'file-menu:open-file') {
        diode.openUploader("code-python");
      }

      if (event.target === 'file-menu:start') {
        // Close all windows before opening Start component
        diode.closeAll();
        var config = {
          type: 'component',
          componentName: 'StartPageComponent',
          componentState: {}
        };
        diode.addContentItem(config);
      }

      if (event.target === 'file-menu:save') {
        diode.project().save();
      }

      if (event.target == "settings-menu:diode-settings") {
        diode.open_diode_settings();
      }

      if (event.target == "settings-menu:runqueue") {
        diode.open_runqueue();
      }

      if (event.target == "settings-menu:perfdata") {
        //diode.load_perfdata();
        diode.show_inst_options();
      }

      if (event.target == "settings-menu:perftimes") {
        diode.show_exec_times();
      }

      if (event.target == "group-menu:group-sdfgs") {
        diode.groupOptGraph();
        diode.groupSDFGsAndCodeOutsTogether();
      }

      if (event.target == "group-menu:group-diode1") {
        diode.groupLikeDIODE1();
      }

      if (event.target == "runconfig") {
        var m = this.get(event.target);
        var configs = diode.getRunConfigs();
        m.items = [];

        var _iterator5 = _createForOfIteratorHelper(configs),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var c = _step5.value;
            var cname = c['Configuration name'];
            m.items.push({
              id: cname,
              text: cname
            });
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }

      if (event.target.startsWith("runconfig:")) {
        var name = event.target.substr("runconfig:".length);
        diode.setCurrentRunConfig(name);
      }

      if (event.target == "transformation-menu:history") {
        diode.addContentItem({
          type: 'component',
          componentName: 'TransformationHistoryComponent',
          title: "Transformation History",
          componentState: {}
        });
      }

      if (event.target == "transformation-menu:available") {
        diode.addContentItem({
          type: 'component',
          componentName: 'AvailableTransformationsComponent',
          componentState: {}
        });
      }

      if (event.target == "compile-menu:compile") {
        // "Normal" recompilation
        diode.gatherProjectElementsAndCompile(diode, {}, {
          sdfg_over_code: true
        });
      }

      if (event.target == "compile-menu:compile-clean") {
        diode.project().request(["clear-errors"], function () {});
        diode.project().discardTransformationsAfter(0); // Compile, disregarding everything but the input code

        diode.project().request(['input_code'], function (msg) {
          diode.compile(diode, msg['input_code']);
        }, {
          timeout: 300,
          on_timeout: function on_timeout() {
            return alert("No input code found, open a new file");
          }
        });
      }

      if (event.target == "settings-menu:runoptions") {
        diode.show_run_options(diode);
      }

      if (event.target == "compile-menu:run") {
        // Running
        diode.ui_compile_and_run(diode);
      }

      if (event.target == "closed-windows") {
        var _m = this.get(event.target); // Clear the items first (they will be re-read from the project)


        _m.items = []; // Add a "clear all"

        _m.items.push({
          text: "Clear all",
          id: 'clear-closed-windows',
          icon: 'material-icons-outlined gmat-clear'
        });

        var elems = diode.project().getClosedWindowsList();

        var _iterator6 = _createForOfIteratorHelper(elems),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var x = _step6.value;
            var _name = x[0];

            _m.items.push({
              text: _name,
              id: 'open-closed-' + x[1].created
            });
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        this.refresh();
      }

      if (event.target == 'closed-windows:clear-closed-windows') {
        diode.project().clearClosedWindowsList();
      }

      if (event.target.startsWith("closed-windows:open-closed-")) {
        // This is a request to re-open a closed window
        var _name2 = event.target;
        _name2 = _name2.substr("closed-windows:open-closed-".length);
        diode.project().reopenClosedWindow(_name2);
      }
    }
  });
  var goldenlayout_config = {
    content: [{
      type: 'row',
      content: [{
        type: 'component',
        componentName: 'StartPageComponent',
        componentState: {}
      }]
    }]
  };
  var saved_config = sessionStorage.getItem('savedState'); //saved_config = null; // Don't save the config during development

  var goldenlayout = null;

  if (saved_config !== null) {
    goldenlayout = new GoldenLayout(JSON.parse(saved_config), $('#diode_gl_container'));
  } else {
    goldenlayout = new GoldenLayout(goldenlayout_config, $('#diode_gl_container'));
  }

  goldenlayout.on('stateChanged', diode.debounce("stateChanged", function () {
    if (!(goldenlayout.isInitialised && goldenlayout.openPopouts.every(function (popout) {
      return popout.isInitialised;
    }))) {
      return;
    } // Don't serialize SubWindows


    if (goldenlayout.isSubWindow) return;
    var tmp = goldenlayout.toConfig(); //find_object_cycles(tmp);

    var state = JSON.stringify(tmp);
    sessionStorage.setItem('savedState', state);
  }, 500));

  if (!goldenlayout.isSubWindow) {
    goldenlayout.eventHub.on('create-window-in-main', function (x) {
      var config = JSON.parse(x);
      diode.addContentItem(config);
    });
  }

  goldenlayout.registerComponent('testComponent', function (container, componentState) {
    container.getElement().html('<h2>' + componentState.label + '</h2>');
  });
  goldenlayout.registerComponent('SettingsComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_settings__WEBPACK_IMPORTED_MODULE_4__.DIODE_Context_Settings(diode, container, componentState);
    $(container.getElement()).load("settings_view.html", function () {
      diode_context.get_settings();
    });
  });
  goldenlayout.registerComponent('PerfTimesComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_perf_times__WEBPACK_IMPORTED_MODULE_17__.DIODE_Context_PerfTimes(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('InstControlComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_instrumentation_control__WEBPACK_IMPORTED_MODULE_18__.DIODE_Context_InstrumentationControl(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('RooflineComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_roofline__WEBPACK_IMPORTED_MODULE_19__.DIODE_Context_Roofline(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('SDFGComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_sdfg__WEBPACK_IMPORTED_MODULE_9__.DIODE_Context_SDFG(diode, container, componentState);
    diode_context.create_renderer_pane(componentState["sdfg_data"]);
    diode_context.setupEvents(diode.getCurrentProject());
  });
  goldenlayout.registerComponent('TransformationHistoryComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_transformation_history__WEBPACK_IMPORTED_MODULE_13__.DIODE_Context_TransformationHistory(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    var hist = diode_context.project().getTransformationHistory();
    diode_context.create(hist);
  });
  goldenlayout.registerComponent('AvailableTransformationsComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_available_transformations__WEBPACK_IMPORTED_MODULE_14__.DIODE_Context_AvailableTransformations(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('CodeInComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_code_in__WEBPACK_IMPORTED_MODULE_6__.DIODE_Context_CodeIn(diode, container, componentState);
    var editorstring = "code_in_" + diode_context.created;
    var parent_element = $(container.getElement());
    var new_element = $("<div id='" + editorstring + "' style='height: 100%; width: 100%; overflow-y:auto'></div>");
    parent_element.append(new_element);
    parent_element.hide().show(0);

    (function () {
      var editor_div = new_element;
      editor_div.attr("id", editorstring);
      editor_div.text(componentState.code_content);
      editor_div.hide().show(0);
      var editor = ace.edit(new_element[0]);
      editor.setTheme(_diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__.DIODE.themeString());
      editor.session.setMode("ace/mode/python");
      editor.getSession().on('change', function () {
        container.extendState({
          "code_content": editor.getValue()
        });
      });
      setup_drag_n_drop(new_element[0], function (mime, content) {
        // #TODO: Set session mode from mime type - but we need a switch to manually do that first
        console.log("File dropped", mime, content);
        editor.setValue(content);
        editor.clearSelection();
      });
      editor.resize();
      editor.commands.addCommand({
        name: 'Compile',
        bindKey: {
          win: 'Ctrl-P',
          mac: 'Command-P'
        },
        exec: function exec(editor) {
          alert("Compile pressed");
          diode_context.compile(editor.getValue());
        },
        readOnly: true // false if this command should not apply in readOnly mode

      });
      editor.commands.addCommand({
        name: 'Compile and Run',
        bindKey: {
          win: 'Alt-R',
          mac: 'Alt-R'
        },
        exec: function exec(editor) {
          alert("Compile & Run pressed");
          diode_context.compile_and_run(editor.getValue());
        },
        readOnly: true // false if this command should not apply in readOnly mode

      });
      diode_context.setEditorReference(editor);
      diode_context.setupEvents(diode.getCurrentProject());
    })();
  });
  goldenlayout.registerComponent('CodeOutComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_code_out__WEBPACK_IMPORTED_MODULE_8__.DIODE_Context_CodeOut(diode, container, componentState);
    var editorstring = "code_out_" + diode_context.created;
    var parent_element = $(container.getElement());
    var new_element = $("<div id='" + editorstring + "' style='height: 100%; width: 100%; overflow:auto'></div>");
    parent_element.append(new_element);
    parent_element.hide().show(0);

    (function () {
      var editor_div = new_element;
      editor_div.attr("id", editorstring);
      editor_div.hide().show(0);
      var editor = ace.edit(new_element[0]);
      editor.setTheme(_diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__.DIODE.themeString());
      editor.session.setMode("ace/mode/c_cpp");
      editor.setReadOnly(true);
      diode_context.setEditorReference(editor);
      diode_context.setupEvents(diode.getCurrentProject());
      var extracted = diode_context.getState().code;
      diode_context.setCode(extracted);
      editor.resize();
    })();
  }); // Create an error component which is used for all errors originating in python.
  // As such, the errors are usually tracebacks. The current implementation
  // (just displaying the output) is rudimentary and can/should be improved.
  // #TODO: Improve the error-out formatting

  goldenlayout.registerComponent('ErrorComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_error__WEBPACK_IMPORTED_MODULE_15__.DIODE_Context_Error(diode, container, componentState);
    var editorstring = "error_" + diode_context.created;
    var parent_element = $(container.getElement());
    var new_element = $("<div id='" + editorstring + "' style='height: 100%; width: 100%; overflow:auto'></div>");
    parent_element.append(new_element);
    parent_element.hide().show(0);

    (function () {
      var editor_div = new_element;
      editor_div.attr("id", editorstring);
      editor_div.hide().show(0);
      var editor = ace.edit(new_element[0]);
      editor.setTheme(_diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__.DIODE.themeString());
      editor.session.setMode("ace/mode/python");
      diode_context.setEditorReference(editor);
      diode_context.setupEvents(diode.getCurrentProject());
      var extracted = diode_context.getState().error;
      diode_context.setError(extracted);
      editor.resize();
    })();
  });
  goldenlayout.registerComponent('TerminalComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_terminal__WEBPACK_IMPORTED_MODULE_7__.DIODE_Context_Terminal(diode, container, componentState);
    var editorstring = "terminal_" + diode_context.created;
    var parent_element = $(container.getElement());
    var new_element = $("<div id='" + editorstring + "' style='height: 100%; width: 100%; overflow:auto'></div>");
    parent_element.append(new_element);
    parent_element.hide().show(0);
    var editor_div = new_element;
    editor_div.hide().show(0);
    var editor = ace.edit(new_element[0]);
    editor.setTheme(_diode_ui_diode__WEBPACK_IMPORTED_MODULE_3__.DIODE.themeString());
    editor.session.setMode("ace/mode/sh");
    editor.setReadOnly(true);
    var firstval = diode_context.getState().current_value;
    if (firstval !== undefined) editor.setValue(firstval);
    editor.clearSelection();
    diode_context.setEditorReference(editor);
    console.log("Client listening to", editorstring);
    goldenlayout.eventHub.on(editorstring, function (e) {
      diode_context.append(e);
    });
    diode_context.setupEvents(diode.getCurrentProject());
  });
  goldenlayout.registerComponent('DIODESettingsComponent', function (container, componentState) {
    var diode_context = new _diode_ui_contexts_diode_settings__WEBPACK_IMPORTED_MODULE_5__.DIODE_Context_DIODESettings(diode, container, componentState);
    var divstring = "diode_settings" + diode_context.created;
    var parent_element = $(container.getElement());
    var new_element = $("<div id='" + divstring + "' style='height: 100%; width: 100%; overflow:auto'></div>");
    new_element.append("<h1>DIODE settings</h1>");
    diode_context.setContainer(new_element);
    parent_element.append(new_element);
  });
  goldenlayout.registerComponent('RunConfigComponent', function (container, componentState) {
    var diode_context = new _diode_ui_contexts_run_config__WEBPACK_IMPORTED_MODULE_16__.DIODE_Context_RunConfig(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('PropWinComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_prop_window__WEBPACK_IMPORTED_MODULE_10__.DIODE_Context_PropWindow(diode, container, componentState);
    var elem = document.createElement('div');
    elem.classList.add("sdfgpropdiv");
    elem.style = "width: 100%; height: 100%";
    $(container.getElement()).append(elem);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.createFromState();
  });
  goldenlayout.registerComponent('StartPageComponent', function (container, componentState) {
    var diode_context = new _diode_ui_contexts_start_page__WEBPACK_IMPORTED_MODULE_12__.DIODE_Context_StartPage(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.registerComponent('RunqueueComponent', function (container, componentState) {
    // Wrap the component in a context 
    var diode_context = new _diode_ui_contexts_runqueue__WEBPACK_IMPORTED_MODULE_11__.DIODE_Context_Runqueue(diode, container, componentState);
    diode_context.setupEvents(diode.getCurrentProject());
    diode_context.create();
  });
  goldenlayout.on('itemDestroyed', function (e) {
    if (e.config.componentState === undefined) {
      // Skip non-components
      return;
    }

    var x = e.config.componentState.created;
    goldenlayout.eventHub.emit('destroy-' + x);
    console.log("itemDestroyed", e);
  });
  diode.setLayout(goldenlayout);
  diode.getProject();
  goldenlayout.init();
  window.addEventListener('resize', function (x) {
    // goldenlayout does not listen to resize events if it is not full-body
    // So it must be notified manually
    goldenlayout.updateSize();
  });
  document.body.addEventListener('keydown', function (ev) {
    diode.onKeyDown(ev);
  });
  document.body.addEventListener('keyup', function (ev) {
    diode.onKeyUp(ev);
  });
  diode.addKeyShortcut('gg', function () {
    diode.groupOptGraph();
    diode.groupSDFGsAndCodeOutsTogether();
  });
  diode.addKeyShortcut('gd', function () {
    diode.groupLikeDIODE1();
  });
  diode.addKeyShortcut('0', function () {
    diode.open_diode_settings();
  });
  diode.addKeyShortcut('r', function () {
    diode.gatherProjectElementsAndCompile(diode, {}, {
      sdfg_over_code: true
    });
  });
  diode.addKeyShortcut('s', function () {
    diode.project().save();
  }, false, true);
  diode.setupEvents(); // Add drag & drop for the empty goldenlayout container

  var dgc = $("#diode_gl_container");
  var glc = dgc[0].firstChild;
  setup_drag_n_drop(glc, function (mime, content) {
    console.log("File dropped", mime, content);
    var config = {
      type: "component",
      componentName: "CodeInComponent",
      componentState: {
        code_content: content
      }
    };
    diode.addContentItem(config);
  }, undefined, {
    readMode: "text",
    condition: function condition(elem) {
      return elem.childNodes.length == 0;
    } // Only if empty

  });
}

/***/ }),

/***/ "./src/overlay_manager.js":
/*!********************************!*\
  !*** ./src/overlay_manager.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OverlayManager": () => (/* binding */ OverlayManager)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _overlays_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlays/generic_sdfg_overlay */ "./src/overlays/generic_sdfg_overlay.js");
/* harmony import */ var _overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./overlays/runtime_micro_seconds_overlay */ "./src/overlays/runtime_micro_seconds_overlay.js");
/* harmony import */ var _overlays_static_flops_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./overlays/static_flops_overlay */ "./src/overlays/static_flops_overlay.js");
/* harmony import */ var _overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./overlays/memory_volume_overlay */ "./src/overlays/memory_volume_overlay.js");
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js");
/* harmony import */ var _utils_sanitization__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/sanitization */ "./src/utils/sanitization.ts");




var _templateObject;

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.








var SymbolResolver = /*#__PURE__*/function () {
  function SymbolResolver(renderer) {
    var _this = this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SymbolResolver);

    this.renderer = renderer;
    this.sdfg = this.renderer.sdfg;
    this.vscode = typeof vscode !== 'undefined' && vscode; // Initialize the symbol mapping to the graph's symbol table.

    this.symbol_value_map = {};
    Object.keys(this.sdfg.attributes.symbols).forEach(function (s) {
      if (_this.sdfg.attributes.constants_prop !== undefined && Object.keys(_this.sdfg.attributes.constants_prop).includes(s) && _this.sdfg.attributes.constants_prop[s][0]['type'] === 'Scalar') _this.symbol_value_map[s] = _this.sdfg.attributes.constants_prop[s][1];else _this.symbol_value_map[s] = undefined;
    });
    this.symbols_to_define = [];
    this.init_overlay_popup_dialogue();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SymbolResolver, [{
    key: "symbol_value_changed",
    value: function symbol_value_changed(symbol, value) {
      if (symbol in this.symbol_value_map) this.symbol_value_map[symbol] = value;
    }
  }, {
    key: "parse_symbol_expression",
    value: function parse_symbol_expression(expression_string, mapping) {
      var prompt_completion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var result = undefined;

      try {
        var expression_tree = (0,mathjs__WEBPACK_IMPORTED_MODULE_9__.parse)(expression_string);

        if (prompt_completion) {
          this.recursive_find_undefined_symbol(expression_tree, mapping);
          this.prompt_define_symbol(mapping, callback);
        } else {
          try {
            var evaluated = expression_tree.evaluate(mapping);
            if (evaluated !== undefined && !isNaN(evaluated) && Number.isInteger(+evaluated)) result = +evaluated;else result = undefined;
          } catch (e) {
            result = undefined;
          }
        }

        return result;
      } catch (exception) {
        console.error(exception);
      } finally {
        return result;
      }
    }
  }, {
    key: "prompt_define_symbol",
    value: function prompt_define_symbol(mapping) {
      var _this2 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (this.symbols_to_define.length > 0) {
        var symbol = this.symbols_to_define.pop();
        var that = this;

        this.popup_dialogue._show(symbol, mapping, function () {
          if (_this2.vscode) vscode.postMessage({
            type: 'analysis.define_symbol',
            symbol: symbol,
            definition: mapping[symbol]
          });
          if (callback !== undefined) callback();
          that.prompt_define_symbol(mapping, callback);
        });
      }
    }
  }, {
    key: "recursive_find_undefined_symbol",
    value: function recursive_find_undefined_symbol(expression_tree, mapping) {
      var _this3 = this;

      expression_tree.forEach(function (node, path, parent) {
        switch (node.type) {
          case 'SymbolNode':
            if (node.name in mapping && mapping[node.name] === undefined && !_this3.symbols_to_define.includes(node.name)) {
              // This is an undefined symbol.
              // Ask for it to be defined.
              _this3.symbols_to_define.push(node.name);
            }

            break;

          case 'OperatorNode':
          case 'ParenthesisNode':
            _this3.recursive_find_undefined_symbol(node, mapping);

            break;

          default:
            // Ignore
            break;
        }
      });
    }
  }, {
    key: "init_overlay_popup_dialogue",
    value: function init_overlay_popup_dialogue() {
      var dialogue_background = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['sdfv_modal_background'], document.body);

      dialogue_background._show = function () {
        this.style.display = 'block';
      };

      dialogue_background._hide = function () {
        this.style.display = 'none';
      };

      var popup_dialogue = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', 'sdfv_overlay_dialogue', ['sdfv_modal'], dialogue_background);
      popup_dialogue.addEventListener('click', function (ev) {
        ev.stopPropagation();
      });
      popup_dialogue.style.display = 'none';
      this.popup_dialogue = popup_dialogue;
      var header_bar = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['sdfv_modal_title_bar'], this.popup_dialogue);
      this.popup_dialogue._title = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('span', '', ['sdfv_modal_title'], header_bar);
      var close_button = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['modal_close'], header_bar);
      close_button.innerHTML = (0,_utils_sanitization__WEBPACK_IMPORTED_MODULE_8__.htmlSanitize)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__.default)(["<i class=\"material-icons\">close</i>"])));
      close_button.addEventListener('click', function () {
        popup_dialogue._hide();
      });
      var content_box = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['sdfv_modal_content_box'], this.popup_dialogue);
      this.popup_dialogue._content = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['sdfv_modal_content'], content_box);
      this.popup_dialogue._input = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('input', 'symbol_input', ['sdfv_modal_input_text'], this.popup_dialogue._content);

      function set_val() {
        if (popup_dialogue._map && popup_dialogue._symbol) {
          var val = popup_dialogue._input.value;

          if (val && !isNaN(val) && Number.isInteger(+val) && val > 0) {
            popup_dialogue._map[popup_dialogue._symbol] = val;

            popup_dialogue._hide();

            if (popup_dialogue._callback) popup_dialogue._callback();
            return;
          }
        }

        popup_dialogue._input.setCustomValidity('Invalid, not an integer');
      }

      this.popup_dialogue._input.addEventListener('keypress', function (ev) {
        if (ev.which === 13) set_val();
      });

      var footer_bar = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['sdfv_modal_footer_bar'], this.popup_dialogue);
      var confirm_button = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['button', 'sdfv_modal_confirm_button'], footer_bar);
      confirm_button.addEventListener('click', function (ev) {
        set_val();
      });
      var confirm_button_text = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('span', '', [], confirm_button);
      confirm_button_text.innerText = 'Confirm';
      (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createElement)('div', '', ['clearfix'], footer_bar);

      this.popup_dialogue._show = function (symbol, map, callback) {
        this.style.display = 'block';
        popup_dialogue._title.innerText = 'Define symbol ' + symbol;
        popup_dialogue._symbol = symbol;
        popup_dialogue._map = map;
        popup_dialogue._callback = callback;

        dialogue_background._show();
      };

      this.popup_dialogue._hide = function () {
        this.style.display = 'none';
        popup_dialogue._title.innerText = '';
        popup_dialogue._input.value = '';

        popup_dialogue._input.setCustomValidity('');

        dialogue_background._hide();
      };

      dialogue_background.addEventListener('click', function (ev) {
        popup_dialogue._hide();
      });
    }
  }]);

  return SymbolResolver;
}();

var OverlayManager = /*#__PURE__*/function () {
  function OverlayManager(renderer) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, OverlayManager);

    this.renderer = renderer;
    this.badness_scale_method = 'median';
    this.overlays = [];
    this.symbol_resolver = new SymbolResolver(this.renderer);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(OverlayManager, [{
    key: "register_overlay",
    value: function register_overlay(type) {
      switch (type) {
        case _overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_7__.MemoryVolumeOverlay:
        case _overlays_static_flops_overlay__WEBPACK_IMPORTED_MODULE_6__.StaticFlopsOverlay:
        case _overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_5__.RuntimeMicroSecondsOverlay:
          this.overlays.push(new type(this, this.renderer));
          break;

        default:
          // Object overlay
          this.overlays.push(type);
          break;
      }

      this.renderer.draw_async();
    }
  }, {
    key: "deregister_overlay",
    value: function deregister_overlay(type) {
      this.overlays = this.overlays.filter(function (overlay) {
        return !(overlay instanceof type);
      });
      this.renderer.draw_async();
    }
  }, {
    key: "is_overlay_active",
    value: function is_overlay_active(type) {
      return this.overlays.filter(function (overlay) {
        return overlay instanceof type;
      }).length > 0;
    }
  }, {
    key: "get_overlay",
    value: function get_overlay(type) {
      var overlay = undefined;
      this.overlays.forEach(function (ol) {
        if (ol instanceof type) {
          overlay = ol;
          return;
        }
      });
      return overlay;
    }
  }, {
    key: "symbol_value_changed",
    value: function symbol_value_changed(symbol, value) {
      this.symbol_resolver.symbol_value_changed(symbol, value);
      this.overlays.forEach(function (overlay) {
        overlay.refresh();
      });
    }
  }, {
    key: "update_badness_scale_method",
    value: function update_badness_scale_method(method) {
      this.badness_scale_method = method;
      this.overlays.forEach(function (overlay) {
        overlay.refresh();
      });
    }
  }, {
    key: "draw",
    value: function draw() {
      this.overlays.forEach(function (overlay) {
        overlay.draw();
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.overlays.forEach(function (overlay) {
        overlay.refresh();
      });
    }
  }, {
    key: "on_mouse_event",
    value: function on_mouse_event(type, ev, mousepos, elements, foreground_elem, ends_drag) {
      this.overlays.forEach(function (overlay) {
        overlay.on_mouse_event(type, ev, mousepos, elements, foreground_elem, ends_drag);
      });
    }
  }]);

  return OverlayManager;
}();

/***/ }),

/***/ "./src/overlays/generic_sdfg_overlay.js":
/*!**********************************************!*\
  !*** ./src/overlays/generic_sdfg_overlay.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GenericSdfgOverlay": () => (/* binding */ GenericSdfgOverlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");


var GenericSdfgOverlay = /*#__PURE__*/function () {
  function GenericSdfgOverlay(overlay_manager, renderer) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, GenericSdfgOverlay);

    this.overlay_manager = overlay_manager;
    this.symbol_resolver = this.overlay_manager.symbol_resolver;
    this.renderer = renderer;
    this.vscode = typeof vscode !== 'undefined' && vscode;
    this.badness_scale_center = 5;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(GenericSdfgOverlay, [{
    key: "draw",
    value: function draw() {}
  }, {
    key: "on_mouse_event",
    value: function on_mouse_event(type, ev, mousepos, elements, foreground_elem, ends_drag) {
      return false;
    }
  }, {
    key: "refresh",
    value: function refresh() {}
  }]);

  return GenericSdfgOverlay;
}();

/***/ }),

/***/ "./src/overlays/memory_volume_overlay.js":
/*!***********************************************!*\
  !*** ./src/overlays/memory_volume_overlay.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryVolumeOverlay": () => (/* binding */ MemoryVolumeOverlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generic_sdfg_overlay */ "./src/overlays/generic_sdfg_overlay.js");
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var MemoryVolumeOverlay = /*#__PURE__*/function (_GenericSdfgOverlay) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(MemoryVolumeOverlay, _GenericSdfgOverlay);

  var _super = _createSuper(MemoryVolumeOverlay);

  function MemoryVolumeOverlay(overlay_manager, renderer) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, MemoryVolumeOverlay);

    _this = _super.call(this, overlay_manager, renderer);

    _this.refresh();

    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(MemoryVolumeOverlay, [{
    key: "clear_cached_volume_values",
    value: function clear_cached_volume_values() {
      this.renderer.for_all_elements(0, 0, 0, 0, function (type, e, obj, isected) {
        if (obj.data) {
          if (obj.data.volume !== undefined) obj.data.volume = undefined;
        }
      });
    }
  }, {
    key: "calculate_volume_edge",
    value: function calculate_volume_edge(edge, symbol_map, volume_values) {
      var volume_string = undefined;

      if (edge.data && edge.data.attributes) {
        volume_string = edge.data.attributes.volume;

        if (volume_string !== undefined) {
          volume_string = volume_string.replace(/\*\*/g, '^');
          volume_string = volume_string.replace(/ceiling/g, 'ceil');
        }
      }

      var volume = undefined;
      if (volume_string !== undefined) volume = this.symbol_resolver.parse_symbol_expression(volume_string, symbol_map);
      edge.data.volume = volume;
      if (volume !== undefined && volume > 0) volume_values.push(volume);
      return volume;
    }
  }, {
    key: "calculate_volume_graph",
    value: function calculate_volume_graph(g, symbol_map, volume_values) {
      var that = this;
      g.nodes().forEach(function (v) {
        var state = g.node(v);
        var state_graph = state.data.graph;

        if (state_graph) {
          state_graph.edges().forEach(function (e) {
            var edge = state_graph.edge(e);
            if (edge instanceof Edge) that.calculate_volume_edge(edge, symbol_map, volume_values);
          });
          state_graph.nodes().forEach(function (v) {
            var node = state_graph.node(v);

            if (node instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
              var nested_symbols_map = {};
              var mapping = node.data.node.attributes.symbol_mapping; // Translate the symbol mappings for the nested SDFG
              // based on the mapping described on the node.

              Object.keys(mapping).forEach(function (symbol) {
                nested_symbols_map[symbol] = that.symbol_resolver.parse_symbol_expression(mapping[symbol], symbol_map);
              }); // Merge in the parent mappings.

              Object.keys(symbol_map).forEach(function (symbol) {
                if (!(symbol in nested_symbols_map)) nested_symbols_map[symbol] = symbol_map[symbol];
              });
              that.calculate_volume_graph(node.data.graph, nested_symbols_map, volume_values);
            }
          });
        }
      });
    }
  }, {
    key: "recalculate_volume_values",
    value: function recalculate_volume_values(graph) {
      this.badness_scale_center = 5;
      var volume_values = [0];
      this.calculate_volume_graph(graph, this.symbol_resolver.symbol_value_map, volume_values);

      switch (this.overlay_manager.badness_scale_method) {
        case 'mean':
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.mean)(volume_values);
          break;

        case 'median':
        default:
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.median)(volume_values);
          break;
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.clear_cached_volume_values();
      this.recalculate_volume_values(this.renderer.graph);
      this.renderer.draw_async();
    }
  }, {
    key: "shade_edge",
    value: function shade_edge(edge, ctx) {
      var volume = edge.data.volume;

      if (volume !== undefined) {
        // Only draw positive volumes.
        if (volume <= 0) return;
        var badness = 1 / (this.badness_scale_center * 2) * volume;
        if (badness < 0) badness = 0;
        if (badness > 1) badness = 1;
        var color = (0,_renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.getTempColor)(badness);
        edge.shade(this.renderer, ctx, color);
      }
    }
  }, {
    key: "recursively_shade_sdfg",
    value: function recursively_shade_sdfg(graph, ctx, ppp, visible_rect) {
      var _this2 = this;

      graph.nodes().forEach(function (v) {
        var state = graph.node(v); // If we're zoomed out enough that the contents aren't visible, we
        // skip the state.

        if (ctx.lod && (ppp >= STATE_LOD || state.width / ppp < STATE_LOD)) return; // If the node's invisible, we skip it.

        if (ctx.lod && !state.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;
        var state_graph = state.data.graph;

        if (state_graph && !state.data.state.attributes.is_collapsed) {
          state_graph.nodes().forEach(function (v) {
            var node = state_graph.node(v); // Skip the node if it's not visible.

            if (ctx.lod && !node.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return; // If we're zoomed out enough that the node's contents
            // aren't visible or the node is collapsed, we skip it.

            if (node.data.node.attributes.is_collapsed || ctx.lod && ppp >= NODE_LOD) return;
            if (node instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) _this2.recursively_shade_sdfg(node.data.graph, ctx, ppp, visible_rect);
          });
          state_graph.edges().forEach(function (e) {
            var edge = state_graph.edge(e);
            if (ctx.lod && !edge.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

            _this2.shade_edge(edge, ctx);
          });
        }
      });
    }
  }, {
    key: "draw",
    value: function draw() {
      this.recursively_shade_sdfg(this.renderer.graph, this.renderer.ctx, this.renderer.canvas_manager.points_per_pixel(), this.renderer.visible_rect);
    }
  }, {
    key: "on_mouse_event",
    value: function on_mouse_event(type, ev, mousepos, elements, foreground_elem, ends_drag) {
      if (type === 'click' && !ends_drag) {
        if (foreground_elem !== undefined && foreground_elem instanceof Edge) {
          if (foreground_elem.data.volume === undefined) {
            if (foreground_elem.data.attributes.volume) {
              var that = this;
              this.symbol_resolver.parse_symbol_expression(foreground_elem.data.attributes.volume, that.symbol_resolver.symbol_value_map, true, function () {
                that.clear_cached_volume_values();
                that.recalculate_volume_values(that.renderer.graph);
              });
            }
          }
        }
      }

      return false;
    }
  }]);

  return MemoryVolumeOverlay;
}(_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__.GenericSdfgOverlay);

/***/ }),

/***/ "./src/overlays/runtime_micro_seconds_overlay.js":
/*!*******************************************************!*\
  !*** ./src/overlays/runtime_micro_seconds_overlay.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RuntimeMicroSecondsOverlay": () => (/* binding */ RuntimeMicroSecondsOverlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generic_sdfg_overlay */ "./src/overlays/generic_sdfg_overlay.js");
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var RuntimeMicroSecondsOverlay = /*#__PURE__*/function (_GenericSdfgOverlay) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(RuntimeMicroSecondsOverlay, _GenericSdfgOverlay);

  var _super = _createSuper(RuntimeMicroSecondsOverlay);

  function RuntimeMicroSecondsOverlay(overlay_manager, renderer) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, RuntimeMicroSecondsOverlay);

    _this = _super.call(this, overlay_manager, renderer);
    _this.criterium = 'mean';
    _this.runtime_map = {};
    _this.badness_scale_center = 0;
    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(RuntimeMicroSecondsOverlay, [{
    key: "get_element_uuid",
    value: function get_element_uuid(element) {
      var undefined_val = -1;

      if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.State) {
        return element.sdfg.sdfg_list_id + '/' + element.id + '/' + undefined_val + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
        var sdfg_id = element.data.node.attributes.sdfg.sdfg_list_id;
        return sdfg_id + '/' + undefined_val + '/' + undefined_val + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.MapExit) {
        // For MapExit nodes, we want to get the uuid of the corresponding
        // entry node instead, because the runtime is held there.
        return element.sdfg.sdfg_list_id + '/' + element.parent_id + '/' + element.data.node.scope_entry + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.SDFGNode) {
        return element.sdfg.sdfg_list_id + '/' + element.parent_id + '/' + element.id + '/' + undefined_val;
      }

      return undefined_val + '/' + undefined_val + '/' + undefined_val + '/' + undefined_val;
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.badness_scale_center = 5;
      var micros_values = [0];

      for (var _i = 0, _Object$keys = Object.keys(this.runtime_map); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        // Make sure the overall SDFG's runtime isn't included in this.
        if (key !== '0/-1/-1/-1') micros_values.push(this.runtime_map[key][this.criterium]);
      }

      switch (this.overlay_manager.badness_scale_method) {
        case 'mean':
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.mean)(micros_values);
          break;

        case 'median':
        default:
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.median)(micros_values);
          break;
      }

      this.renderer.draw_async();
    }
  }, {
    key: "pretty_print_micros",
    value: function pretty_print_micros(micros) {
      var unit = 'µs';
      var value = micros;

      if (micros > 1000) {
        unit = 'ms';
        var millis = micros / 1000;
        value = millis;

        if (millis > 1000) {
          unit = 's';
          var seconds = millis / 1000;
          value = seconds;
        }
      }

      value = Math.round((value + Number.EPSILON) * 100) / 100;
      return value.toString() + ' ' + unit;
    }
  }, {
    key: "shade_node",
    value: function shade_node(node, ctx) {
      var _this2 = this;

      var rt_summary = this.runtime_map[this.get_element_uuid(node)];
      if (rt_summary === undefined) return;

      if (this.renderer.mousepos && node.intersect(this.renderer.mousepos.x, this.renderer.mousepos.y)) {
        // Show the measured runtime.
        if (rt_summary['min'] === rt_summary['max']) this.renderer.tooltip = function () {
          _this2.renderer.tooltip_container.innerText = _this2.pretty_print_micros(rt_summary['min']);
        };else this.renderer.tooltip = function () {
          _this2.renderer.tooltip_container.innerText = 'Min: ' + _this2.pretty_print_micros(rt_summary['min']) + '\nMax: ' + _this2.pretty_print_micros(rt_summary['max']) + '\nMean: ' + _this2.pretty_print_micros(rt_summary['mean']) + '\nMedian: ' + _this2.pretty_print_micros(rt_summary['med']) + '\nCount: ' + rt_summary['count'];
        };
      } // Calculate the 'badness' color.


      var micros = rt_summary[this.criterium];
      var badness = 1 / (this.badness_scale_center * 2) * micros;
      if (badness < 0) badness = 0;
      if (badness > 1) badness = 1;
      var color = (0,_renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.getTempColor)(badness);
      node.shade(this.renderer, ctx, color);
    }
  }, {
    key: "recursively_shade_sdfg",
    value: function recursively_shade_sdfg(graph, ctx, ppp, visible_rect) {
      var _this3 = this;

      // First go over visible states, skipping invisible ones. We only draw
      // something if the state is collapsed or we're zoomed out far enough.
      // In that case, we draw the measured runtime for the entire state.
      // If it's expanded or zoomed in close enough, we traverse inside.
      graph.nodes().forEach(function (v) {
        var state = graph.node(v); // If the node's invisible, we skip it.

        if (ctx.lod && !state.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

        if (ctx.lod && (ppp >= STATE_LOD || state.width / ppp <= STATE_LOD) || state.data.state.attributes.is_collapsed) {
          _this3.shade_node(state, ctx);
        } else {
          var state_graph = state.data.graph;

          if (state_graph) {
            state_graph.nodes().forEach(function (v) {
              var node = state_graph.node(v); // Skip the node if it's not visible.

              if (ctx.lod && !node.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

              if (node.data.node.attributes.is_collapsed || ctx.lod && ppp >= NODE_LOD) {
                _this3.shade_node(node, ctx);
              } else {
                if (node instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
                  _this3.recursively_shade_sdfg(node.data.graph, ctx, ppp, visible_rect);
                } else {
                  _this3.shade_node(node, ctx);
                }
              }
            });
          }
        }
      });
    }
  }, {
    key: "draw",
    value: function draw() {
      this.recursively_shade_sdfg(this.renderer.graph, this.renderer.ctx, this.renderer.canvas_manager.points_per_pixel(), this.renderer.visible_rect);
    }
  }]);

  return RuntimeMicroSecondsOverlay;
}(_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__.GenericSdfgOverlay);

/***/ }),

/***/ "./src/overlays/static_flops_overlay.js":
/*!**********************************************!*\
  !*** ./src/overlays/static_flops_overlay.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticFlopsOverlay": () => (/* binding */ StaticFlopsOverlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generic_sdfg_overlay */ "./src/overlays/generic_sdfg_overlay.js");
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var StaticFlopsOverlay = /*#__PURE__*/function (_GenericSdfgOverlay) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(StaticFlopsOverlay, _GenericSdfgOverlay);

  var _super = _createSuper(StaticFlopsOverlay);

  function StaticFlopsOverlay(overlay_manager, renderer) {
    var _this;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, StaticFlopsOverlay);

    _this = _super.call(this, overlay_manager, renderer);
    _this.flops_map = {};

    if (_this.vscode) {
      vscode.postMessage({
        type: 'dace.get_flops'
      });
    }

    return _this;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(StaticFlopsOverlay, [{
    key: "get_element_uuid",
    value: function get_element_uuid(element) {
      var undefined_val = -1;

      if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.State) {
        return element.sdfg.sdfg_list_id + '/' + element.id + '/' + undefined_val + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
        var sdfg_id = element.data.node.attributes.sdfg.sdfg_list_id;
        return sdfg_id + '/' + undefined_val + '/' + undefined_val + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.MapExit) {
        // For MapExit nodes, we want to get the uuid of the corresponding
        // entry node instead, because the FLOPS count is held there.
        return element.sdfg.sdfg_list_id + '/' + element.parent_id + '/' + element.data.node.scope_entry + '/' + undefined_val;
      } else if (element instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.SDFGNode) {
        return element.sdfg.sdfg_list_id + '/' + element.parent_id + '/' + element.id + '/' + undefined_val;
      }

      return undefined_val + '/' + undefined_val + '/' + undefined_val + '/' + undefined_val;
    }
  }, {
    key: "clear_cached_flops_values",
    value: function clear_cached_flops_values() {
      this.renderer.for_all_elements(0, 0, 0, 0, function (type, e, obj, isected) {
        if (obj.data) {
          if (obj.data.flops !== undefined) obj.data.flops = undefined;
          if (obj.data.flops_string !== undefined) obj.data.flops_string = undefined;
        }
      });
    }
  }, {
    key: "calculate_flops_node",
    value: function calculate_flops_node(node, symbol_map, flops_values) {
      var flops_string = this.flops_map[this.get_element_uuid(node)];
      var flops = undefined;
      if (flops_string !== undefined) flops = this.symbol_resolver.parse_symbol_expression(flops_string, symbol_map);
      node.data.flops_string = flops_string;
      node.data.flops = flops;
      if (flops !== undefined && flops > 0) flops_values.push(flops);
      return flops;
    }
  }, {
    key: "calculate_flops_graph",
    value: function calculate_flops_graph(g, symbol_map, flops_values) {
      var that = this;
      g.nodes().forEach(function (v) {
        var state = g.node(v);
        that.calculate_flops_node(state, symbol_map, flops_values);
        var state_graph = state.data.graph;

        if (state_graph) {
          state_graph.nodes().forEach(function (v) {
            var node = state_graph.node(v);

            if (node instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
              var nested_symbols_map = {};
              var mapping = node.data.node.attributes.symbol_mapping; // Translate the symbol mappings for the nested SDFG
              // based on the mapping described on the node.

              Object.keys(mapping).forEach(function (symbol) {
                nested_symbols_map[symbol] = that.symbol_resolver.parse_symbol_expression(mapping[symbol], symbol_map);
              }); // Merge in the parent mappings.

              Object.keys(symbol_map).forEach(function (symbol) {
                if (!(symbol in nested_symbols_map)) nested_symbols_map[symbol] = symbol_map[symbol];
              });
              that.calculate_flops_node(node, nested_symbols_map, flops_values);
              that.calculate_flops_graph(node.data.graph, nested_symbols_map, flops_values);
            } else {
              that.calculate_flops_node(node, symbol_map, flops_values);
            }
          });
        }
      });
    }
  }, {
    key: "recalculate_flops_values",
    value: function recalculate_flops_values(graph) {
      this.badness_scale_center = 5;
      var flops_values = [0];
      this.calculate_flops_graph(graph, this.symbol_resolver.symbol_value_map, flops_values);

      switch (this.overlay_manager.badness_scale_method) {
        case 'mean':
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.mean)(flops_values);
          break;

        case 'median':
        default:
          this.badness_scale_center = (0,mathjs__WEBPACK_IMPORTED_MODULE_7__.median)(flops_values);
          break;
      }
    }
  }, {
    key: "update_flops_map",
    value: function update_flops_map(flops_map) {
      this.flops_map = flops_map;
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.clear_cached_flops_values();
      this.recalculate_flops_values(this.renderer.graph);
      this.renderer.draw_async();
    }
  }, {
    key: "shade_node",
    value: function shade_node(node, ctx) {
      var _this2 = this;

      var flops = node.data.flops;
      var flops_string = node.data.flops_string;

      if (flops_string !== undefined && this.renderer.mousepos && node.intersect(this.renderer.mousepos.x, this.renderer.mousepos.y)) {
        // Show the computed FLOPS value if applicable.
        if (isNaN(flops_string) && flops !== undefined) this.renderer.tooltip = function () {
          _this2.renderer.tooltip_container.innerText = 'FLOPS: ' + flops_string + ' (' + flops + ')';
        };else this.renderer.tooltip = function () {
          _this2.renderer.tooltip_container.innerText = 'FLOPS: ' + flops_string;
        };
      }

      if (flops === undefined) {
        // If the FLOPS can't be calculated, but there's an entry for this
        // node's FLOPS, that means that there's an unresolved symbol. Shade
        // the node grey to indicate that.
        if (flops_string !== undefined) {
          node.shade(this.renderer, ctx, 'gray');
          return;
        } else {
          return;
        }
      } // Only draw positive FLOPS.


      if (flops <= 0) return; // Calculate the 'badness' color.

      var badness = 1 / (this.badness_scale_center * 2) * flops;
      if (badness < 0) badness = 0;
      if (badness > 1) badness = 1;
      var color = (0,_renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.getTempColor)(badness);
      node.shade(this.renderer, ctx, color);
    }
  }, {
    key: "recursively_shade_sdfg",
    value: function recursively_shade_sdfg(graph, ctx, ppp, visible_rect) {
      var _this3 = this;

      // First go over visible states, skipping invisible ones. We only draw
      // something if the state is collapsed or we're zoomed out far enough.
      // In that case, we draw the FLOPS calculated for the entire state.
      // If it's expanded or zoomed in close enough, we traverse inside.
      graph.nodes().forEach(function (v) {
        var state = graph.node(v); // If the node's invisible, we skip it.

        if (ctx.lod && !state.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

        if (ctx.lod && (ppp >= STATE_LOD || state.width / ppp <= STATE_LOD) || state.data.state.attributes.is_collapsed) {
          _this3.shade_node(state, ctx);
        } else {
          var state_graph = state.data.graph;

          if (state_graph) {
            state_graph.nodes().forEach(function (v) {
              var node = state_graph.node(v); // Skip the node if it's not visible.

              if (ctx.lod && !node.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

              if (node.data.node.attributes.is_collapsed || ctx.lod && ppp >= NODE_LOD) {
                _this3.shade_node(node, ctx);
              } else {
                if (node instanceof _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_5__.NestedSDFG) {
                  _this3.recursively_shade_sdfg(node.data.graph, ctx, ppp, visible_rect);
                } else {
                  _this3.shade_node(node, ctx);
                }
              }
            });
          }
        }
      });
    }
  }, {
    key: "draw",
    value: function draw() {
      this.recursively_shade_sdfg(this.renderer.graph, this.renderer.ctx, this.renderer.canvas_manager.points_per_pixel(), this.renderer.visible_rect);
    }
  }, {
    key: "on_mouse_event",
    value: function on_mouse_event(type, ev, mousepos, elements, foreground_elem, ends_drag) {
      if (type === 'click' && !ends_drag) {
        if (foreground_elem !== undefined && foreground_elem !== null && !(foreground_elem instanceof Edge)) {
          if (foreground_elem.data.flops === undefined) {
            var flops_string = this.flops_map[this.get_element_uuid(foreground_elem)];

            if (flops_string) {
              var that = this;
              this.symbol_resolver.parse_symbol_expression(flops_string, that.symbol_resolver.symbol_value_map, true, function () {
                that.clear_cached_flops_values();
                that.recalculate_flops_values(that.renderer.graph);
              });
            }
          }
        }
      }

      return false;
    }
  }]);

  return StaticFlopsOverlay;
}(_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_6__.GenericSdfgOverlay);

/***/ }),

/***/ "./src/renderer/canvas_manager.js":
/*!****************************************!*\
  !*** ./src/renderer/canvas_manager.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CanvasManager": () => (/* binding */ CanvasManager)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dagre/lib/util */ "./node_modules/dagre/lib/util.js");
/* harmony import */ var dagre_lib_util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _renderer_elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _utils_lerp_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/lerp_matrix */ "./src/utils/lerp_matrix.js");
/* harmony import */ var _utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/bounding_box */ "./src/utils/bounding_box.js");
/* harmony import */ var _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/sdfg/sdfg_utils */ "./src/utils/sdfg/sdfg_utils.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.





var animation_duration = 1000;

var animation_function = function animation_function(t) {
  return 1 - Math.pow(1 - t, 3);
}; // cubic ease out


var _canvas_manager_counter = 0;
var CanvasManager = /*#__PURE__*/function () {
  function CanvasManager(ctx, renderer, canvas) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, CanvasManager);

    this.ctx = ctx;
    this.ctx.lod = true;
    this.canvas = canvas;
    this.anim_id = null;
    this.prev_time = null;
    this.drawables = [];
    this.renderer = renderer;
    this.indices = [];
    this.animation_start = null;
    this.animation_end = null;
    this.animation_target = null;
    /**
     * Takes a number [0, 1] and returns a transformation matrix
     */

    this.animation = null;
    this.request_scale = false;
    this.scalef = 1.0;
    this._destroying = false;
    this.scale_origin = {
      x: 0,
      y: 0
    };
    this.contention = 0;
    this._svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
    this.user_transform = this._svg.createSVGMatrix();
    this.addCtxTransformTracking();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(CanvasManager, [{
    key: "stopAnimation",
    value: function stopAnimation() {
      this.animation_start = null;
      this.animation_end = null;
      this.animation = null;
      this.animation_target = null;
    }
  }, {
    key: "alreadyAnimatingTo",
    value: function alreadyAnimatingTo(new_transform) {
      if (this.animation_target) {
        var result = true;
        result &= this.animation_target.a == new_transform.a;
        result &= this.animation_target.b == new_transform.b;
        result &= this.animation_target.c == new_transform.c;
        result &= this.animation_target.d == new_transform.d;
        result &= this.animation_target.e == new_transform.e;
        result &= this.animation_target.f == new_transform.f;
        return result;
      } else return false;
    }
  }, {
    key: "animateTo",
    value: function animateTo(new_transform) {
      // If was already animating to the same target, jump to it directly
      if (this.alreadyAnimatingTo(new_transform)) {
        this.stopAnimation();
        this.user_transform = new_transform;
        return;
      }

      this.stopAnimation();
      this.animation = (0,_utils_lerp_matrix__WEBPACK_IMPORTED_MODULE_4__.lerpMatrix)(this.user_transform, new_transform);
      this.animation_target = new_transform;
    }
  }, {
    key: "svgPoint",
    value: function svgPoint(x, y) {
      var pt = this._svg.createSVGPoint();

      pt.x = x;
      pt.y = y;
      return pt;
    }
  }, {
    key: "applyUserTransform",
    value: function applyUserTransform() {
      var ut = this.user_transform;
      this.ctx.setTransform(ut.a, ut.b, ut.c, ut.d, ut.e, ut.f);
    }
  }, {
    key: "translation",
    get: function get() {
      return {
        x: this.user_transform.e,
        y: this.user_transform.f
      };
    }
  }, {
    key: "addCtxTransformTracking",
    value: function addCtxTransformTracking() {
      var _this = this;

      /* This function is a hack to provide the non-standardized functionality
      of getting the current transform from a RenderingContext.
      When (if) this is standardized, the standard should be used instead.
      This is made for "easy" transforms and does not support saving/restoring
      */
      var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
      this.ctx._custom_transform_matrix = svg.createSVGMatrix(); // Save/Restore is not supported.

      var checker = function checker() {
        console.assert(!isNaN(_this.ctx._custom_transform_matrix.f));
      };

      var _ctx = this.ctx;
      var scale_func = _ctx.scale;

      _ctx.scale = function (sx, sy) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.scaleNonUniform(sx, sy);
        checker();
        return scale_func.call(_ctx, sx, sy);
      };

      var translate_func = _ctx.translate;

      _ctx.translate = function (sx, sy) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.translate(sx, sy);
        checker();
        return translate_func.call(_ctx, sx, sy);
      };

      var rotate_func = _ctx.rotate;

      _ctx.rotate = function (r) {
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.rotate(r * 180.0 / Math.PI);
        checker();
        return rotate_func.call(_ctx, r);
      };

      var transform_func = _ctx.scale;

      _ctx.transform = function (a, b, c, d, e, f) {
        var m2 = svg.createSVGMatrix();
        m2.a = a;
        m2.b = b;
        m2.c = c;
        m2.d = d;
        m2.e = e;
        m2.f = f;
        _ctx._custom_transform_matrix = _ctx._custom_transform_matrix.multiply(m2);
        checker();
        return transform_func.call(_ctx, a, b, c, d, e, f);
      };

      var setTransform_func = _ctx.setTransform;

      _ctx.setTransform = function (a, b, c, d, e, f) {
        _ctx._custom_transform_matrix.a = a;
        _ctx._custom_transform_matrix.b = b;
        _ctx._custom_transform_matrix.c = c;
        _ctx._custom_transform_matrix.d = d;
        _ctx._custom_transform_matrix.e = e;
        _ctx._custom_transform_matrix.f = f;
        checker();
        return setTransform_func.call(_ctx, a, b, c, d, e, f);
      };

      _ctx.custom_inverseTransformMultiply = function (x, y) {
        var pt = svg.createSVGPoint();
        pt.x = x;
        pt.y = y;
        checker();
        return pt.matrixTransform(_ctx._custom_transform_matrix.inverse());
      };
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._destroying = true;
      this.clearDrawables();
    }
  }, {
    key: "addDrawable",
    value: function addDrawable(obj) {
      this.drawables.push(obj);
      this.indices.push({
        "c": CanvasManager.counter(),
        "d": obj
      });
    }
  }, {
    key: "removeDrawable",
    value: function removeDrawable(drawable) {
      this.drawables = this.drawables.filter(function (x) {
        return x != drawable;
      });
    }
  }, {
    key: "clearDrawables",
    value: function clearDrawables() {
      var _iterator = _createForOfIteratorHelper(this.drawables),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var x = _step.value;
          x.destroy();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.drawables = [];
      this.indices = [];
    }
  }, {
    key: "isBlank",
    value: function isBlank() {
      var ctx = this.canvas.getContext('2d');
      var topleft = ctx.getImageData(0, 0, 1, 1).data;
      if (topleft[0] != 0 || topleft[1] != 0 || topleft[2] != 0 || topleft[3] != 255) return false;
      var pixelBuffer = new Uint32Array(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height).data.buffer);
      return !pixelBuffer.some(function (color) {
        return color !== 0xff000000;
      });
    }
  }, {
    key: "scale",
    value: function scale(diff) {
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      this.stopAnimation();

      if (this.request_scale || this.contention > 0) {
        return;
      }

      this.contention++;
      this.request_scale = true;

      if (this.isBlank()) {
        this.renderer.bgcolor = 'black';
        this.renderer.zoom_to_view(null, false);
        diff = 0.01;
      }

      this.scale_origin.x = x;
      this.scale_origin.y = y;
      var sv = diff;
      var pt = this.svgPoint(this.scale_origin.x, this.scale_origin.y).matrixTransform(this.user_transform.inverse());
      this.user_transform = this.user_transform.translate(pt.x, pt.y);
      this.user_transform = this.user_transform.scale(sv, sv, 1, 0, 0, 0);
      this.scalef *= sv;
      this.user_transform = this.user_transform.translate(-pt.x, -pt.y);
      this.contention--;
    } // Sets the view to the square around the input rectangle

  }, {
    key: "set_view",
    value: function set_view(rect) {
      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var canvas_w = this.canvas.width;
      var canvas_h = this.canvas.height;
      if (canvas_w == 0 || canvas_h == 0) return;
      var scale = 1,
          tx = 0,
          ty = 0;

      if (rect.width > rect.height) {
        scale = canvas_w / rect.width;
        tx = -rect.x;
        ty = -rect.y - rect.height / 2 + canvas_h / scale / 2; // Now other dimension does not fit, scale it as well

        if (rect.height * scale > canvas_h) {
          scale = canvas_h / rect.height;
          tx = -rect.x - rect.width / 2 + canvas_w / scale / 2;
          ty = -rect.y;
        }
      } else {
        scale = canvas_h / rect.height;
        tx = -rect.x - rect.width / 2 + canvas_w / scale / 2;
        ty = -rect.y; // Now other dimension does not fit, scale it as well

        if (rect.width * scale > canvas_w) {
          scale = canvas_w / rect.width;
          tx = -rect.x;
          ty = -rect.y - rect.height / 2 + canvas_h / scale / 2;
        }
      } // Uniform scaling


      var new_transform = this._svg.createSVGMatrix().scale(scale, scale, 1, 0, 0, 0).translate(tx, ty);

      if (animate && this.prev_time !== null) {
        this.animateTo(new_transform);
      } else {
        this.stopAnimation();
        this.user_transform = new_transform;
      }

      this.scale_origin = {
        x: 0,
        y: 0
      };
      this.scalef = 1.0;
    }
  }, {
    key: "translate",
    value: function translate(x, y) {
      this.stopAnimation();
      this.user_transform = this.user_transform.translate(x / this.user_transform.a, y / this.user_transform.d);
    }
    /**
     * Move/translate an element in the graph by a change in x and y.
     * @param {*} el                Element to move
     * @param {*} old_mousepos      Old mouse position in canvas coordinates
     * @param {*} new_mousepos      New mouse position in canvas coordinates
     * @param {*} entire_graph      Reference to the entire graph
     * @param {*} sdfg_list         List of SDFGs and nested SDFGs
     * @param {*} state_parent_list List of parent elements to SDFG states
     * // TODO: update doc comment with parameters
     */

  }, {
    key: "translate_element",
    value: function translate_element(el, old_mousepos, new_mousepos, entire_graph, sdfg_list, state_parent_list, drag_start) {
      var update_position_info = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
      var move_entire_edge = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;
      var edge_dpoints = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : undefined;
      this.stopAnimation(); // Edges connected to the moving element

      var out_edges = [];
      var in_edges = []; // Find the parent graph in the list of available SDFGs

      var parent_graph = sdfg_list[el.sdfg.sdfg_list_id];
      var parent_element = null;

      if (entire_graph !== parent_graph && (el.data.state || el.data.type == 'InterstateEdge')) {
        // If the parent graph and the entire SDFG shown are not the same,
        // we're currently in a nested SDFG. If we're also moving a state,
        // this means that its parent element is found in the list of
        // parents to states (state_parent_list)
        parent_element = state_parent_list[el.sdfg.sdfg_list_id];
      } else if (el.parent_id !== null && parent_graph) {
        // If the parent_id isn't null and there is a parent graph, we can
        // look up the parent node via the element's parent_id
        parent_element = parent_graph.node(el.parent_id); // If our parent element is a state, we want the state's graph

        if (parent_element.data.state) parent_graph = parent_element.data.graph;
      }

      if (parent_graph && !(el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_3__.Edge)) {
        // Find all the edges connected to the moving node
        parent_graph.outEdges(el.id).forEach(function (edge_id) {
          out_edges.push(parent_graph.edge(edge_id));
        });
        parent_graph.inEdges(el.id).forEach(function (edge_id) {
          in_edges.push(parent_graph.edge(edge_id));
        });
      } // Compute theoretical initial displacement/movement


      var dx = new_mousepos.x - old_mousepos.x;
      var dy = new_mousepos.y - old_mousepos.y; // If edge, find closest point to drag start position

      var pt = -1;

      if (el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_3__.Edge) {
        if (move_entire_edge) {
          pt = -2;
        } else if (edge_dpoints && edge_dpoints.length > 0) {
          pt = -3;
        } else if (drag_start) {
          // Find closest point to old mouse position
          if (drag_start.edge_point === undefined) {
            var dist = null;
            el.points.forEach(function (p, i) {
              // Only allow dragging if the memlet has more than two
              // points
              if (i == 0 || i == el.points.length - 1) return;
              var ddx = p.x - drag_start.cx;
              var ddy = p.y - drag_start.cy;
              var curdist = ddx * ddx + ddy * ddy;

              if (dist === null || curdist < dist) {
                dist = curdist;
                pt = i;
              }
            });
            drag_start.edge_point = pt;
          } else {
            pt = drag_start.edge_point;
          }
        }
      }

      if (parent_element) {
        // Calculate the box to bind the element to. This is given by
        // the parent element, i.e. the element where out to-be-moved
        // element is contained within
        var parent_left_border = parent_element.x - parent_element.width / 2;
        var parent_right_border = parent_left_border + parent_element.width;
        var parent_top_border = parent_element.y - parent_element.height / 2;
        var parent_bottom_border = parent_top_border + parent_element.height;
        var el_h_margin = el.height / 2;
        var el_w_margin = el.width / 2;

        if (el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_3__.Edge) {
          el_h_margin = el_w_margin = 0;
        }

        var min_x = parent_left_border + el_w_margin;
        var min_y = parent_top_border + el_h_margin;
        var max_x = parent_right_border - el_w_margin;
        var max_y = parent_bottom_border - el_h_margin; // Make sure we don't move our element outside its parent's
        // bounding box. If either the element or the mouse pointer are
        // outside the parent, we clamp movement in that direction

        if (el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_3__.Edge) {
          if (pt > 0) {
            var target_x = el.points[pt].x + dx;
            var target_y = el.points[pt].y + dy;

            if (target_x <= min_x || new_mousepos.x <= parent_left_border) {
              dx = min_x - el.points[pt].x;
            } else if (target_x >= max_x || new_mousepos.x >= parent_right_border) {
              dx = max_x - el.points[pt].x;
            }

            if (target_y <= min_y || new_mousepos.y <= parent_top_border) {
              dy = min_y - el.points[pt].y;
            } else if (target_y >= max_y || new_mousepos.y >= parent_bottom_border) {
              dy = max_y - el.points[pt].y;
            }
          }
        } else {
          var _target_x = el.x + dx;

          var _target_y = el.y + dy;

          if (_target_x <= min_x || new_mousepos.x <= parent_left_border) {
            dx = min_x - el.x;
          } else if (_target_x >= max_x || new_mousepos.x >= parent_right_border) {
            dx = max_x - el.x;
          }

          if (_target_y <= min_y || new_mousepos.y <= parent_top_border) {
            dy = min_y - el.y;
          } else if (_target_y >= max_y || new_mousepos.y >= parent_bottom_border) {
            dy = max_y - el.y;
          }
        }
      }

      if (el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_3__.Edge) {
        var position;

        if (update_position_info) {
          position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_6__.get_positioning_info)(el);
          if (!position) position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_6__.initialize_positioning_info)(el);
        }

        if (pt > 0) {
          // Move point
          el.points[pt].x += dx;
          el.points[pt].y += dy; // Move edge bounding box

          (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(el);

          if (update_position_info) {
            if (!position.points) {
              position.points = Array(el.points.length);

              for (var i = 0; i < el.points.length; i++) {
                position.points[i] = {
                  dx: 0,
                  dy: 0
                };
              }
            }

            position.points[pt].dx += dx;
            position.points[pt].dy += dy;
          }
        } else if (pt == -2) {
          // Don't update first and last point (the connectors)
          for (var _i = 1; _i < el.points.length - 1; _i++) {
            el.points[_i].x += dx;
            el.points[_i].y += dy;
          }

          if (update_position_info) {
            for (var _i2 = 1; _i2 < el.points.length - 1; _i2++) {
              position.points[_i2].dx += dx;
              position.points[_i2].dy += dy;
            }
          }
        } else if (pt == -3) {
          for (var _i3 = 1; _i3 < el.points.length - 1; _i3++) {
            el.points[_i3].x += edge_dpoints[_i3].dx;
            el.points[_i3].y += edge_dpoints[_i3].dy;
          }
        } // The rest of the method doesn't apply to Edges


        return;
      } // Move a node together with its connectors if it has any


      function move_node_and_connectors(node) {
        node.x += dx;
        node.y += dy;
        if (node.data.node && node.data.node.type === 'NestedSDFG') translate_recursive(node.data.graph);
        if (node.in_connectors) node.in_connectors.forEach(function (c) {
          c.x += dx;
          c.y += dy;
        });
        if (node.out_connectors) node.out_connectors.forEach(function (c) {
          c.x += dx;
          c.y += dy;
        });
      } // Allow recursive translation of nested SDFGs


      function translate_recursive(ng) {
        ng.nodes().forEach(function (state_id) {
          var state = ng.node(state_id);
          state.x += dx;
          state.y += dy;
          var g = state.data.graph;

          if (g) {
            g.nodes().forEach(function (node_id) {
              var node = g.node(node_id);
              move_node_and_connectors(node);
            });
            g.edges().forEach(function (edge_id) {
              var edge = g.edge(edge_id);
              edge.x += dx;
              edge.y += dy;
              edge.points.forEach(function (point) {
                point.x += dx;
                point.y += dy;
              });
              (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(edge);
            });
          }
        });
        ng.edges().forEach(function (edge_id) {
          var edge = ng.edge(edge_id);
          edge.x += dx;
          edge.y += dy;
          edge.points.forEach(function (point) {
            point.x += dx;
            point.y += dy;
          });
          (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(edge);
        });
      } // Move the node


      move_node_and_connectors(el); // Store movement information in element (for relayouting)

      if (update_position_info) {
        var _position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_6__.get_positioning_info)(el);

        if (!_position) _position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_6__.initialize_positioning_info)(el);
        _position.dx += dx;
        _position.dy += dy; // Store movement information if EntryNode for other nodes of the same scope

        if (el instanceof EntryNode && el.data.node.attributes.is_collapsed) {
          if (!_position.scope_dx) {
            _position.scope_dx = 0;
            _position.scope_dy = 0;
          }

          _position.scope_dx += dx;
          _position.scope_dy += dy;
        }
      }

      if (el.data.state && !el.data.state.attributes.is_collapsed) {
        // We're moving a state, move all its contained elements
        var graph = el.data.graph;
        graph.nodes().forEach(function (node_id) {
          var node = graph.node(node_id);
          move_node_and_connectors(node);
        }); // Drag all the edges along

        graph.edges().forEach(function (edge_id) {
          var edge = graph.edge(edge_id);
          edge.x += dx;
          edge.y += dy;
          edge.points.forEach(function (point) {
            point.x += dx;
            point.y += dy;
          });
          (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(edge);
        });
      } // Move the connected edges along with the element


      out_edges.forEach(function (edge) {
        var n = edge.points.length - 1;
        var moved = false;

        if (edge.src_connector !== null) {
          for (var _i4 = 0; _i4 < el.out_connectors.length; _i4++) {
            if (el.out_connectors[_i4].data.name === edge.src_connector) {
              edge.points[0] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__.intersectRect)(el.out_connectors[_i4], edge.points[1]);
              moved = true;
              break;
            }
          }
        }

        if (!moved) {
          edge.points[0].x += dx;
          edge.points[0].y += dy;
        } // Also update destination point of edge


        if (edge.dst_connector !== null) {
          var _parent_element, _parent_element$data, _parent_element$data$;

          var e = (_parent_element = parent_element) === null || _parent_element === void 0 ? void 0 : (_parent_element$data = _parent_element.data) === null || _parent_element$data === void 0 ? void 0 : (_parent_element$data$ = _parent_element$data.state) === null || _parent_element$data$ === void 0 ? void 0 : _parent_element$data$.edges[edge.id];
          var dst_el = parent_graph.node(e === null || e === void 0 ? void 0 : e.dst);

          if (dst_el) {
            for (var _i5 = 0; _i5 < dst_el.in_connectors.length; _i5++) {
              var dst_name = dst_el.in_connectors[_i5].data.name;

              if (dst_name === edge.dst_connector) {
                edge.points[n] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__.intersectRect)(dst_el.in_connectors[_i5], edge.points[n - 1]);
                break;
              }
            }
          }
        }

        (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(edge);
      });
      in_edges.forEach(function (edge) {
        var n = edge.points.length - 1;
        var moved = false;

        if (edge.dst_connector !== null) {
          for (var _i6 = 0; _i6 < el.in_connectors.length; _i6++) {
            if (el.in_connectors[_i6].data.name === edge.dst_connector) {
              edge.points[n] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__.intersectRect)(el.in_connectors[_i6], edge.points[n - 1]);
              moved = true;
              break;
            }
          }
        }

        if (!moved) {
          edge.points[n].x += dx;
          edge.points[n].y += dy;
        } // Also update source point of edge


        if (edge.src_connector !== null) {
          var _parent_element2, _parent_element2$data, _parent_element2$data2;

          var e = (_parent_element2 = parent_element) === null || _parent_element2 === void 0 ? void 0 : (_parent_element2$data = _parent_element2.data) === null || _parent_element2$data === void 0 ? void 0 : (_parent_element2$data2 = _parent_element2$data.state) === null || _parent_element2$data2 === void 0 ? void 0 : _parent_element2$data2.edges[edge.id];
          var src_el = parent_graph.node(e === null || e === void 0 ? void 0 : e.src);

          if (src_el) {
            for (var _i7 = 0; _i7 < src_el.out_connectors.length; _i7++) {
              var out_name = src_el.out_connectors[_i7].data.name;

              if (out_name === edge.src_connector) {
                edge.points[0] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_2__.intersectRect)(src_el.out_connectors[_i7], edge.points[1]);
                break;
              }
            }
          }
        }

        (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_5__.updateEdgeBoundingBox)(edge);
      });
    }
  }, {
    key: "mapPixelToCoordsX",
    value: function mapPixelToCoordsX(xpos) {
      return this.svgPoint(xpos, 0).matrixTransform(this.user_transform.inverse()).x;
    }
  }, {
    key: "mapPixelToCoordsY",
    value: function mapPixelToCoordsY(ypos) {
      return this.svgPoint(0, ypos).matrixTransform(this.user_transform.inverse()).y;
    }
  }, {
    key: "noJitter",
    value: function noJitter(x) {
      x = parseFloat(x.toFixed(3));
      x = Math.round(x * 100) / 100;
      return x;
    }
  }, {
    key: "points_per_pixel",
    value: function points_per_pixel() {
      // Since we are using uniform scaling, (bottom-top)/height and
      // (right-left)/width should be equivalent
      var left = this.mapPixelToCoordsX(0);
      var right = this.mapPixelToCoordsX(this.canvas.width);
      return (right - left) / this.canvas.width;
    }
  }, {
    key: "animation_step",
    value: function animation_step(now) {
      if (this.animation === null) {
        return;
      }

      if (this.animation_start === null) {
        this.animation_start = now;
        this.animation_end = now + animation_duration;
      }

      if (now >= this.animation_end) {
        this.user_transform = this.animation(1);
        this.stopAnimation();
        return;
      }

      var start = this.animation_start;
      var end = this.animation_end;
      this.user_transform = this.animation(animation_function((now - start) / (end - start)));
    }
  }, {
    key: "draw_now",
    value: function draw_now(now) {
      if (this._destroying) return;
      var dt = now - this.prev_time;
      if (!this.prev_time) dt = null;
      this.prev_time = now;
      if (this.contention > 0) return;
      this.contention += 1;
      var ctx = this.ctx; // Clear with default transform

      ctx.save();
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.fillStyle = this.renderer.bgcolor;
      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.restore();
      this.animation_step(now);
      this.applyUserTransform();
      if (this.request_scale) this.request_scale = this.contention !== 1;
      this.renderer.draw(dt);
      this.contention -= 1;
      if (this.animation_end !== null && now < this.animation_end) this.draw_async();
    }
  }, {
    key: "draw_async",
    value: function draw_async() {
      var _this2 = this;

      this.anim_id = window.requestAnimationFrame(function (now) {
        return _this2.draw_now(now);
      });
    }
  }], [{
    key: "counter",
    value: // Manages translation and scaling of canvas rendering
    function counter() {
      return _canvas_manager_counter++;
    }
  }]);

  return CanvasManager;
}();

/***/ }),

/***/ "./src/renderer/renderer.js":
/*!**********************************!*\
  !*** ./src/renderer/renderer.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDFGRenderer": () => (/* binding */ SDFGRenderer)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var dagre__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dagre */ "./node_modules/dagre/index.js");
/* harmony import */ var dagre__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var dagre_lib_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dagre/lib/util */ "./node_modules/dagre/lib/util.js");
/* harmony import */ var dagre_lib_util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dagre_lib_util__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sdfg/sdfg_utils */ "./src/utils/sdfg/sdfg_utils.js");
/* harmony import */ var _utils_utils_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils.ts */ "./src/utils/utils.ts");
/* harmony import */ var _utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/sdfg/traversal */ "./src/utils/sdfg/traversal.js");
/* harmony import */ var _utils_context_menu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/context_menu */ "./src/utils/context_menu.js");
/* harmony import */ var _renderer_elements__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _canvas_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./canvas_manager */ "./src/renderer/canvas_manager.js");
/* harmony import */ var _utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/bounding_box */ "./src/utils/bounding_box.js");
/* harmony import */ var _overlay_manager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../overlay_manager */ "./src/overlay_manager.js");
/* harmony import */ var _sdfv__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sdfv */ "./src/sdfv.js");
/* harmony import */ var _overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../overlays/memory_volume_overlay */ "./src/overlays/memory_volume_overlay.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.















function check_valid_add_position(type, foreground_elem, lib, mousepos) {
  switch (type) {
    case 'SDFGState':
      return foreground_elem instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.NestedSDFG || foreground_elem === null;

    case 'Edge':
      return foreground_elem instanceof SDFGNode || foreground_elem instanceof State;

    case 'LibraryNode':
      return foreground_elem instanceof State && lib;

    default:
      return foreground_elem instanceof State;
  }
}

var SDFGRenderer = /*#__PURE__*/function () {
  function SDFGRenderer(sdfg, container) {
    var on_mouse_event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var user_transform = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var debug_draw = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var background = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var mode_buttons = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, SDFGRenderer);

    // DIODE/SDFV-related fields
    this.sdfg = sdfg;
    this.sdfg_list = {};
    this.state_parent_list = {}; // List of all state's parent elements
    // Rendering-related fields

    this.container = container;
    this.ctx = null;
    this.canvas = null;
    this.last_visible_elements = null;
    this.last_hovered_elements = null;
    this.last_clicked_elements = null;
    this.last_dragged_element = null;
    this.tooltip = null;
    this.tooltip_container = null; // Toolbar-related fields

    this.menu = null;
    this.toolbar = null;
    this.panmode_btn = null;
    this.movemode_btn = null;
    this.selectmode_btn = null;
    this.addmode_btns = null;
    this.add_type = null;
    this.add_mode_lib = null;
    this.addmode_divs = null;
    this.mode_selected_bg_color = "#CCCCCC";
    this.mouse_follow_svgs = null;
    this.mouse_follow_element = null; // Memlet-Tree related fields

    this.all_memlet_trees_sdfg = []; // View options

    this.inclusive_ranges = false;
    this.omit_access_nodes = false; // Mouse-related fields

    this.mouse_mode = 'pan'; // Mouse mode - pan, move, select

    this.box_select_rect = null;
    this.mousepos = null; // Last position of the mouse pointer (in canvas coordinates)

    this.realmousepos = null; // Last position of the mouse pointer (in pixel coordinates)

    this.dragging = false;
    this.drag_start = null; // Null if the mouse/touch is not activated

    this.drag_second_start = null; // Null if two touch points are not activated

    this.external_mouse_handler = on_mouse_event;
    this.ctrl_key_selection = false;
    this.shift_key_movement = false;
    this.add_uuid = null;
    this.add_position = null;
    this.add_edge_start = null; // Selection related fields

    this.selected_elements = []; // Overlay fields

    try {
      this.overlay_manager = new _overlay_manager__WEBPACK_IMPORTED_MODULE_11__.OverlayManager(this);
    } catch (ex) {
      this.overlay_manager = null;
    }

    this.in_vscode = false;

    try {
      vscode;
      if (vscode) this.in_vscode = true;
    } catch (ex) {} // Draw debug aids.


    this.debug_draw = debug_draw;
    this.init_elements(user_transform, background, mode_buttons);
    this.relayout();
    this.all_memlet_trees_sdfg = (0,_utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_6__.memlet_tree_complete)(this.sdfg);
    this.update_fast_memlet_lookup();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(SDFGRenderer, [{
    key: "destroy",
    value: function destroy() {
      try {
        if (this.menu) this.menu.destroy();
        this.canvas_manager.destroy();
        this.container.removeChild(this.canvas);
        this.container.removeChild(this.toolbar);
        this.container.removeChild(this.tooltip_container);
      } catch (ex) {// Do nothing
      }
    }
  }, {
    key: "view_settings",
    value: function view_settings() {
      return {
        inclusive_ranges: this.inclusive_ranges
      };
    } // Updates buttons based on cursor mode

  }, {
    key: "update_toggle_buttons",
    value: function update_toggle_buttons() {
      // First clear out of all modes, then jump in to the correct mode.
      this.canvas.style.cursor = 'default';
      this.interaction_info_box.style.display = 'none';
      this.interaction_info_text.innerHTML = '';
      this.panmode_btn.style = 'padding-bottom: 0px; user-select: none';
      this.movemode_btn.style = 'padding-bottom: 0px; user-select: none';
      this.selectmode_btn.style = 'padding-bottom: 0px; user-select: none';
      this.mouse_follow_element.innerHTML = null;

      var _iterator = _createForOfIteratorHelper(this.addmode_btns),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var add_btn = _step.value;

          if (add_btn.getAttribute('type') == this.add_type) {
            add_btn.style = 'user-select: none; background: ' + this.mode_selected_bg_color;
            this.mouse_follow_element.innerHTML = this.mouse_follow_svgs[this.add_type];
          } else {
            add_btn.style = 'user-select: none;';
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      switch (this.mouse_mode) {
        case 'move':
          this.movemode_btn.style = 'padding-bottom: 0px; ' + 'user-select: none; ' + 'background: ' + this.mode_selected_bg_color;
          this.interaction_info_box.style.display = 'block';
          this.interaction_info_text.innerHTML = 'Middle Mouse: Pan view<br>' + 'Right Click: Reset position';
          break;

        case 'select':
          this.selectmode_btn.style = 'padding-bottom: 0px; ' + 'user-select: none; ' + 'background: ' + this.mode_selected_bg_color;
          this.interaction_info_box.style.display = 'block';
          this.canvas.style.cursor = 'crosshair';

          if (this.ctrl_key_selection) {
            this.interaction_info_text.innerHTML = 'Middle Mouse: Pan view';
          } else {
            this.interaction_info_text.innerHTML = 'Shift: Add to selection<br>' + 'Ctrl: Remove from selection<br>' + 'Middle Mouse: Pan view';
          }

          break;

        case 'add':
          this.interaction_info_box.style.display = 'block';

          if (this.add_type === 'Edge') {
            if (this.add_edge_start) this.interaction_info_text.innerHTML = 'Left Click: Select second element (to)<br>' + 'Middle Mouse: Pan view<br>' + 'Right Click / Esc: Abort';else this.interaction_info_text.innerHTML = 'Left Click: Select first element (from)<br>' + 'Middle Mouse: Pan view<br>' + 'Right Click / Esc: Abort';
          } else {
            this.interaction_info_text.innerHTML = 'Left Click: Place element<br>' + 'Ctrl + Left Click: Place and stay in Add Mode<br>' + 'Middle Mouse: Pan view<br>' + 'Right Click / Esc: Abort';
          }

          break;

        case 'pan':
        default:
          this.panmode_btn.style = 'padding-bottom: 0px; ' + 'user-select: none; ' + 'background: ' + this.mode_selected_bg_color;
          break;
      }
    } // Initializes the DOM

  }, {
    key: "init_elements",
    value: function init_elements(user_transform, background, mode_buttons) {
      var _this2 = this;

      this.canvas = document.createElement('canvas');
      this.canvas.classList.add('sdfg_canvas');
      if (background) this.canvas.style.backgroundColor = background;else this.canvas.style.backgroundColor = 'inherit';
      this.container.append(this.canvas);

      if (this.debug_draw) {
        this.dbg_info_box = document.createElement('div');
        this.dbg_info_box.style.position = 'absolute';
        this.dbg_info_box.style.bottom = '.5rem';
        this.dbg_info_box.style.right = '.5rem';
        this.dbg_info_box.style.backgroundColor = 'black';
        this.dbg_info_box.style.padding = '.3rem';
        this.dbg_mouse_coords = document.createElement('span');
        this.dbg_mouse_coords.style.color = 'white';
        this.dbg_mouse_coords.style.fontSize = '1rem';
        this.dbg_mouse_coords.innerText = 'x: N/A / y: N/A';
        this.dbg_info_box.appendChild(this.dbg_mouse_coords);
        this.container.appendChild(this.dbg_info_box);
      } // Add an info box for interaction hints to the bottom left of the
      // canvas.


      this.interaction_info_box = document.createElement('div');
      this.interaction_info_box.style.position = 'absolute';
      this.interaction_info_box.style.bottom = '.5rem', this.interaction_info_box.style.left = '.5rem', this.interaction_info_box.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
      this.interaction_info_box.style.borderRadius = '5px';
      this.interaction_info_box.style.padding = '.3rem';
      this.interaction_info_box.style.display = 'none';
      this.interaction_info_text = document.createElement('span');
      this.interaction_info_text.style.color = '#eeeeee';
      this.interaction_info_text.innerHTML = '';
      this.interaction_info_box.appendChild(this.interaction_info_text);
      this.container.appendChild(this.interaction_info_box); // Add buttons

      this.toolbar = document.createElement('div');
      this.toolbar.style = 'position:absolute; top:10px; left: 10px;';
      var d; // Menu bar

      try {
        _utils_context_menu__WEBPACK_IMPORTED_MODULE_7__.ContextMenu;
        d = document.createElement('button');
        d.className = 'button';
        d.innerHTML = '<i class="material-icons">menu</i>';
        d.style = 'padding-bottom: 0px; user-select: none';

        var _that = this;

        d.onclick = function () {
          var _this = this;

          if (_that.menu && _that.menu.visible()) {
            _that.menu.destroy();

            return;
          }

          var rect = this.getBoundingClientRect();
          var cmenu = new _utils_context_menu__WEBPACK_IMPORTED_MODULE_7__.ContextMenu();
          cmenu.addOption("Save view as PNG", function (x) {
            return _that.save_as_png();
          });

          if (_that.has_pdf()) {
            cmenu.addOption("Save view as PDF", function (x) {
              return _that.save_as_pdf();
            });
            cmenu.addOption("Save all as PDF", function (x) {
              return _that.save_as_pdf(true);
            });
          }

          cmenu.addCheckableOption("Inclusive ranges", _that.inclusive_ranges, function (x, checked) {
            _that.inclusive_ranges = checked;
          });
          cmenu.addCheckableOption("Adaptive content hiding", _that.ctx.lod, function (x, checked) {
            _that.ctx.lod = checked;
          });
          if (!this.in_vscode) cmenu.addOption('Overlays', function () {
            if (_that.overlays_menu && _that.overlays_menu.visible()) {
              _that.overlays_menu.destroy();

              return;
            }

            var rect = cmenu._cmenu_elem.getBoundingClientRect();

            var overlays_cmenu = new _utils_context_menu__WEBPACK_IMPORTED_MODULE_7__.ContextMenu();
            overlays_cmenu.addCheckableOption('Memory volume analysis', _that.overlay_manager.is_overlay_active(_overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_13__.MemoryVolumeOverlay), function (x, checked) {
              if (checked) _that.overlay_manager.register_overlay(_overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_13__.MemoryVolumeOverlay);else _that.overlay_manager.deregister_overlay(_overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_13__.MemoryVolumeOverlay);

              _that.draw_async();

              if (_this.in_vscode) refresh_analysis_pane();
            });
            _that.overlays_menu = overlays_cmenu;

            _that.overlays_menu.show(rect.left, rect.top);
          });
          cmenu.addCheckableOption("Hide Access Nodes", _that.omit_access_nodes, function (_, checked) {
            _that.omit_access_nodes = checked;

            _that.relayout();

            _that.draw_async();
          });
          cmenu.addOption("Reset positions", function () {
            return _that.reset_positions();
          });
          _that.menu = cmenu;

          _that.menu.show(rect.left, rect.bottom);
        };

        d.title = 'Menu';
        this.toolbar.appendChild(d);
      } catch (ex) {} // Zoom to fit


      d = document.createElement('button');
      d.className = 'button';
      d.innerHTML = '<i class="material-icons">filter_center_focus</i>';
      d.style = 'padding-bottom: 0px; user-select: none';

      d.onclick = function () {
        return _this2.zoom_to_view();
      };

      d.title = 'Zoom to fit SDFG';
      this.toolbar.appendChild(d); // Collapse all

      d = document.createElement('button');
      d.className = 'button';
      d.innerHTML = '<i class="material-icons">unfold_less</i>';
      d.style = 'padding-bottom: 0px; user-select: none';

      d.onclick = function () {
        return _this2.collapse_all();
      };

      d.title = 'Collapse all elements';
      this.toolbar.appendChild(d); // Expand all

      d = document.createElement('button');
      d.className = 'button';
      d.innerHTML = '<i class="material-icons">unfold_more</i>';
      d.style = 'padding-bottom: 0px; user-select: none';

      d.onclick = function () {
        return _this2.expand_all();
      };

      d.title = 'Expand all elements';
      this.toolbar.appendChild(d);

      if (mode_buttons) {
        // If we get the "external" mode buttons we are in vscode and do
        // not need to create them.
        this.panmode_btn = mode_buttons.pan;
        this.movemode_btn = mode_buttons.move;
        this.selectmode_btn = mode_buttons.select;
        this.addmode_btns = mode_buttons.add_btns;

        var _iterator2 = _createForOfIteratorHelper(this.addmode_btns),
            _step2;

        try {
          var _loop = function _loop() {
            var add_btn = _step2.value;

            if (add_btn.getAttribute('type') === 'LibraryNode') {
              add_btn.onclick = function () {
                _this2.show_select_library_node_dialog(function () {
                  _this2.mouse_mode = 'add';
                  _this2.add_type = 'LibraryNode';
                  _this2.add_edge_start = null;

                  _this2.update_toggle_buttons();
                });
              };
            } else {
              add_btn.onclick = function () {
                if (!daemon_connected) {
                  _this2.show_no_daemon_dialog();
                } else {
                  _this2.mouse_mode = 'add';
                  _this2.add_type = add_btn.getAttribute('type');
                  _this2.add_mode_lib = null;
                  _this2.add_edge_start = null;

                  _this2.update_toggle_buttons();
                }
              };
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this.mode_selected_bg_color = '#22A4FE';
      } else {
        // Mode buttons are empty in standalone SDFV
        this.addmode_btns = []; // Create pan mode button

        var pan_mode_btn = document.createElement('button');
        pan_mode_btn.className = 'button';
        pan_mode_btn.innerHTML = '<i class="material-icons">pan_tool</i>';
        pan_mode_btn.style = 'padding-bottom: 0px; user-select: none; background: ' + this.mode_selected_bg_color;
        pan_mode_btn.title = 'Pan mode';
        this.panmode_btn = pan_mode_btn;
        this.toolbar.appendChild(pan_mode_btn); // Create move mode button

        var move_mode_btn = document.createElement('button');
        move_mode_btn.className = 'button';
        move_mode_btn.innerHTML = '<i class="material-icons">open_with</i>';
        move_mode_btn.style = 'padding-bottom: 0px; user-select: none';
        move_mode_btn.title = 'Object moving mode';
        this.movemode_btn = move_mode_btn;
        this.toolbar.appendChild(move_mode_btn); // Create select mode button

        var box_select_btn = document.createElement('button');
        box_select_btn.className = 'button';
        box_select_btn.innerHTML = '<i class="material-icons">border_style</i>';
        box_select_btn.style = 'padding-bottom: 0px; user-select: none';
        box_select_btn.title = 'Select mode';
        this.selectmode_btn = box_select_btn;
        this.toolbar.appendChild(box_select_btn);
      } // Enter pan mode


      this.panmode_btn.onclick = function () {
        _this2.mouse_mode = 'pan';
        _this2.add_type = null;
        _this2.add_mode_lib = null;
        _this2.add_edge_start = null;

        _this2.update_toggle_buttons();
      }; // Enter object moving mode


      this.movemode_btn.onclick = function (_, shift_click) {
        // shift_click is false if shift key has been released and
        // undefined if it has been a normal mouse click
        if (_this2.shift_key_movement && shift_click === false) _this2.mouse_mode = 'pan';else _this2.mouse_mode = 'move';
        _this2.add_type = null;
        _this2.add_mode_lib = null;
        _this2.add_edge_start = null;
        _this2.shift_key_movement = shift_click;

        _this2.update_toggle_buttons();
      }; // Enter box selection mode


      this.selectmode_btn.onclick = function (_, ctrl_click) {
        // ctrl_click is false if ctrl key has been released and
        // undefined if it has been a normal mouse click
        if (_this2.ctrl_key_selection && ctrl_click === false) _this2.mouse_mode = 'pan';else _this2.mouse_mode = 'select';
        _this2.add_type = null;
        _this2.add_mode_lib = null;
        _this2.add_edge_start = null;
        _this2.ctrl_key_selection = ctrl_click;

        _this2.update_toggle_buttons();
      }; // React to ctrl and shift key presses


      document.addEventListener('keydown', function (e) {
        return _this2.on_key_event(e);
      });
      document.addEventListener('keyup', function (e) {
        return _this2.on_key_event(e);
      }); // Exit previewing mode

      if (this.in_vscode) {
        var exit_preview_btn = document.createElement('button');
        exit_preview_btn.id = 'exit-preview-button';
        exit_preview_btn.className = 'button hidden';
        exit_preview_btn.innerHTML = '<i class="material-icons">close</i>';
        exit_preview_btn.style = 'padding-bottom: 0px; user-select: none';

        exit_preview_btn.onclick = function () {
          exit_preview_btn.className = 'button hidden';
          window.viewing_history_state = false;

          if (vscode) {
            vscode.postMessage({
              type: 'sdfv.get_current_sdfg',
              prevent_refreshes: true
            });
            vscode.postMessage({
              type: 'transformation_history.refresh',
              reset_active: true
            });
          }
        };

        exit_preview_btn.title = 'Exit preview';
        this.toolbar.appendChild(exit_preview_btn);
      }

      this.container.append(this.toolbar); // End of buttons
      // Tooltip HTML container

      this.tooltip_container = document.createElement('div');
      this.tooltip_container.innerHTML = '';
      this.tooltip_container.className = 'sdfvtooltip';

      this.tooltip_container.onmouseover = function () {
        return _this2.tooltip_container.style.display = "none";
      };

      this.container.appendChild(this.tooltip_container); // HTML container for error popovers with invalid SDFGs

      this.error_popover_container = document.createElement('div');
      this.error_popover_container.innerHTML = '';
      this.error_popover_container.className = 'invalid_popup';
      this.error_popover_text = document.createElement('div');
      var error_popover_dismiss = document.createElement('button');
      var that = this;

      error_popover_dismiss.onclick = function () {
        that.sdfg.error = undefined;
        that.error_popover_text.innerText = '';
        that.error_popover_container.style.display = 'none';
      };

      error_popover_dismiss.style["float"] = 'right';
      error_popover_dismiss.style.cursor = 'pointer';
      error_popover_dismiss.style.color = 'white';
      error_popover_dismiss.innerHTML = '<i class="material-icons">close</i>';
      this.error_popover_container.appendChild(error_popover_dismiss);
      this.error_popover_container.appendChild(this.error_popover_text);
      this.container.appendChild(this.error_popover_container);
      this.ctx = this.canvas.getContext("2d"); // Translation/scaling management

      this.canvas_manager = new _canvas_manager__WEBPACK_IMPORTED_MODULE_9__.CanvasManager(this.ctx, this, this.canvas);
      if (user_transform !== null) this.canvas_manager.user_transform = user_transform; // Resize event for container

      var observer = new MutationObserver(function (mutations) {
        _this2.onresize();

        _this2.draw_async();
      });
      observer.observe(this.container, {
        attributes: true
      }); // Set inherited properties

      if (background) this.bgcolor = background;else this.bgcolor = window.getComputedStyle(this.canvas).backgroundColor; // Create the initial SDFG layout

      this.relayout(); // Set mouse event handlers

      this.set_mouse_handlers(); // Set initial zoom, if not already set

      if (user_transform === null) this.zoom_to_view();
      var svgs = {};
      svgs['Map'] = "<svg width=\"8rem\" height=\"2rem\" viewBox=\"0 0 800 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <line x1=\"10\" x2=\"190\" y1=\"190\" y2=\"10\"/>\n                <line x1=\"190\" x2=\"600\" y1=\"10\" y2=\"10\"/>\n                <line x1=\"600\" x2=\"790\" y1=\"10\" y2=\"190\"/>\n                <line x1=\"790\" x2=\"10\" y1=\"190\" y2=\"190\"/>\n            </svg>";
      svgs['Consume'] = "<svg width=\"8rem\" height=\"2rem\" viewBox=\"0 0 800 200\" stroke=\"black\" stroke-width=\"10\" stroke-dasharray=\"60,25\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <line x1=\"10\"x2=\"190\" y1=\"190\" y2=\"10\"/>\n                <line x1=\"190\" x2=\"600\" y1=\"10\" y2=\"10\"/>\n                <line x1=\"600\" x2=\"790\" y1=\"10\" y2=\"190\"/>\n                <line x1=\"790\" x2=\"10\" y1=\"190\" y2=\"190\"/>\n            </svg>";
      svgs['Tasklet'] = "<svg width=\"2.6rem\" height=\"1.3rem\" viewBox=\"0 0 400 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <line x1=\"10\" x2=\"70\" y1=\"130\" y2=\"190\"/>\n                <line x1=\"70\" x2=\"330\" y1=\"190\" y2=\"190\"/>\n                <line x1=\"330\" x2=\"390\" y1=\"190\" y2=\"130\"/>\n                <line x1=\"390\" x2=\"390\" y1=\"130\" y2=\"70\"/>\n                <line x1=\"390\" x2=\"330\" y1=\"70\" y2=\"10\"/>\n                <line x1=\"330\" x2=\"70\" y1=\"10\" y2=\"10\"/>\n                <line x1=\"70\" x2=\"10\" y1=\"10\" y2=\"70\"/>\n                <line x1=\"10\" x2=\"10\" y1=\"70\" y2=\"130\"/>\n            </svg>";
      svgs['NestedSDFG'] = "<svg width=\"2.6rem\" height=\"1.3rem\" viewBox=\"0 0 400 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <line x1=\"40\" x2=\"80\" y1=\"120\" y2=\"160\"/>\n                <line x1=\"80\" x2=\"320\" y1=\"160\" y2=\"160\"/>\n                <line x1=\"320\" x2=\"360\" y1=\"160\" y2=\"120\"/>\n                <line x1=\"360\" x2=\"360\" y1=\"120\" y2=\"80\"/>\n                <line x1=\"360\" x2=\"320\" y1=\"80\" y2=\"40\"/>\n                <line x1=\"320\" x2=\"80\" y1=\"40\" y2=\"40\"/>\n                <line x1=\"80\" x2=\"40\" y1=\"40\" y2=\"80\"/>\n                <line x1=\"40\" x2=\"40\" y1=\"80\" y2=\"120\"/>\n                \n                <line x1=\"10\" x2=\"70\" y1=\"130\" y2=\"190\"/>\n                <line x1=\"70\" x2=\"330\" y1=\"190\" y2=\"190\"/>\n                <line x1=\"330\" x2=\"390\" y1=\"190\" y2=\"130\"/>\n                <line x1=\"390\" x2=\"390\" y1=\"130\" y2=\"70\"/>\n                <line x1=\"390\" x2=\"330\" y1=\"70\" y2=\"10\"/>\n                <line x1=\"330\" x2=\"70\" y1=\"10\" y2=\"10\"/>\n                <line x1=\"70\" x2=\"10\" y1=\"10\" y2=\"70\"/>\n                <line x1=\"10\" x2=\"10\" y1=\"70\" y2=\"130\"/>\n            </svg>";
      svgs['LibraryNode'] = "<svg width=\"2.6rem\" height=\"1.3rem\" viewBox=\"0 0 400 200\" stroke=\"white\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <line x1=\"10\" x2=\"10\" y1=\"10\" y2=\"190\"/>\n                        <line x1=\"10\" x2=\"390\" y1=\"190\" y2=\"190\"/>\n                        <line x1=\"390\" x2=\"390\" y1=\"190\" y2=\"55\"/>\n                        <line x1=\"390\" x2=\"345\" y1=\"55\" y2=\"10\"/>\n                        <line x1=\"345\" x2=\"10\" y1=\"10\" y2=\"10\"/>\n                        <line x1=\"345\" x2=\"345\" y1=\"10\" y2=\"55\"/>\n                        <line x1=\"345\" x2=\"390\" y1=\"55\" y2=\"55\"/>\n            </svg>";
      svgs['AccessNode'] = "<svg width=\"1.3rem\" height=\"1.3rem\" viewBox=\"0 0 200 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\"/>\n            </svg>";
      svgs['Stream'] = "<svg width=\"1.3rem\" height=\"1.3rem\" viewBox=\"0 0 200 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" stroke-dasharray=\"60,25\"/>\n            </svg>";
      svgs['SDFGState'] = "<svg width=\"1.3rem\" height=\"1.3rem\" viewBox=\"0 0 200 200\" stroke=\"black\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"20\" y=\"20\" width=\"160\" height=\"160\" style=\"fill:#deebf7;\" />\n            </svg>";
      svgs['Connector'] = "<svg width=\"1.3rem\" height=\"1.3rem\" viewBox=\"0 0 200 200\" stroke=\"white\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"100\" cy=\"100\" r=\"40\" fill=\"none\"/>\n            </svg>";
      svgs['Edge'] = "<svg width=\"1.3rem\" height=\"1.3rem\" viewBox=\"0 0 200 200\" stroke=\"white\" stroke-width=\"10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\"  refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n                <line x1=\"20\" y1=\"20\" x2=\"180\" y2=\"180\" marker-end=\"url(#arrowhead)\" />\n            </svg>";
      var el = document.createElement('div');
      el.style = 'position: absolute; top: 0px; left: 0px; user-select: none; pointer-events: none;';
      this.container.appendChild(el);
      this.mouse_follow_element = el;
      this.mouse_follow_svgs = svgs;
      this.update_toggle_buttons(); // Queue first render

      this.draw_async();
    }
  }, {
    key: "draw_async",
    value: function draw_async() {
      this.canvas_manager.draw_async();
    } // --------------------------------------------------------------
    // These functions are only implemented in the context of VSCode.

  }, {
    key: "send_new_sdfg_to_vscode",
    value: function send_new_sdfg_to_vscode() {}
  }, {
    key: "add_node_to_graph",
    value: function add_node_to_graph() {}
  }, {
    key: "remove_graph_nodes",
    value: function remove_graph_nodes() {}
  }, {
    key: "update_new_element",
    value: function update_new_element() {}
  }, {
    key: "show_no_daemon_dialog",
    value: function show_no_daemon_dialog() {}
  }, {
    key: "show_select_library_node_dialog",
    value: function show_select_library_node_dialog() {} // END VSCode specific functions.
    // --------------------------------------------------------------

  }, {
    key: "set_sdfg",
    value: function set_sdfg(new_sdfg) {
      this.sdfg = new_sdfg;
      this.relayout();
      this.draw_async(); // Update info box

      if (this.selected_elements.length == 1) {
        var uuid = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_uuid_graph_element)(this.selected_elements[0]);
        (0,_sdfv__WEBPACK_IMPORTED_MODULE_12__.fill_info)((0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.find_graph_element_by_uuid)(this.graph, uuid).element);
      }
    } // Set mouse events (e.g., click, drag, zoom)

  }, {
    key: "set_mouse_handlers",
    value: function set_mouse_handlers() {
      var _this3 = this;

      var canvas = this.canvas;

      var br = function br() {
        return canvas.getBoundingClientRect();
      };

      var comp_x = function comp_x(event) {
        return _this3.canvas_manager.mapPixelToCoordsX(event.clientX - br().left);
      };

      var comp_y = function comp_y(event) {
        return _this3.canvas_manager.mapPixelToCoordsY(event.clientY - br().top);
      }; // Mouse handler event types


      var _loop2 = function _loop2() {
        var evtype = _arr[_i];
        canvas.addEventListener(evtype, function (x) {
          var cancelled = _this3.on_mouse_event(x, comp_x, comp_y, evtype);

          if (cancelled) return;

          if (!_this3.in_vscode) {
            x.stopPropagation();
            x.preventDefault();
          }
        });
      };

      for (var _i = 0, _arr = ['mousedown', 'mousemove', 'mouseup', 'touchstart', 'touchmove', 'touchend', 'wheel', 'click', 'dblclick', 'contextmenu']; _i < _arr.length; _i++) {
        _loop2();
      }
    }
  }, {
    key: "onresize",
    value: function onresize() {
      // Set canvas size
      this.canvas.style.width = '99%';
      this.canvas.style.height = '99%';
      this.canvas.width = this.canvas.offsetWidth;
      this.canvas.height = this.canvas.offsetHeight;
    } // Update memlet tree collection for faster lookup

  }, {
    key: "update_fast_memlet_lookup",
    value: function update_fast_memlet_lookup() {
      this.all_memlet_trees = [];

      var _iterator3 = _createForOfIteratorHelper(this.all_memlet_trees_sdfg),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var tree = _step3.value;
          var s = new Set();

          var _iterator4 = _createForOfIteratorHelper(tree),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var edge = _step4.value;
              s.add(edge.attributes.data.edge);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          this.all_memlet_trees.push(s);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    } // Re-layout graph and nested graphs

  }, {
    key: "relayout",
    value: function relayout() {
      this.sdfg_list = {};
      this.graph = relayout_sdfg(this.ctx, this.sdfg, this.sdfg_list, this.state_parent_list, this.omit_access_nodes);
      this.onresize();
      this.update_fast_memlet_lookup(); // Move the elements based on its positioning information

      this.translate_moved_elements(); // Make sure all visible overlays get recalculated if there are any.

      if (this.overlay_manager !== null) this.overlay_manager.refresh(); // If we're in a VSCode context, we also want to refresh the outline.

      try {
        if (vscode) outline(this, this.graph);
      } catch (ex) {}

      return this.graph;
    }
  }, {
    key: "translate_moved_elements",
    value: function translate_moved_elements() {
      var _this4 = this;

      (0,_utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_6__.traverse_sdfg_scopes)(this.graph, function (node, graph) {
        var _graph$inEdges;

        var scope_dx = 0;
        var scope_dy = 0;

        function add_scope_movement(n) {
          if (n.data.node.scope_entry) {
            var scope_entry_node = graph.node(n.data.node.scope_entry);
            var sp = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_positioning_info)(scope_entry_node);

            if (sp && Number.isFinite(sp.scope_dx) && Number.isFinite(sp.scope_dy)) {
              scope_dx += sp.scope_dx;
              scope_dy += sp.scope_dy;
            }

            if (scope_entry_node) {
              add_scope_movement(scope_entry_node);
            }
          }
        } // Only add scope movement for nodes (and not states)


        if (node instanceof Node) add_scope_movement(node);
        var dx = scope_dx;
        var dy = scope_dy;
        var position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_positioning_info)(node);

        if (position) {
          dx += position.dx;
          dy += position.dy;
        }

        if (dx || dy) {
          // Move the element
          _this4.canvas_manager.translate_element(node, {
            x: node.x,
            y: node.y
          }, {
            x: node.x + dx,
            y: node.y + dy
          }, _this4.graph, _this4.sdfg_list, _this4.state_parent_list, undefined, false);
        }

        graph.inEdges(node.id).forEach(function (_) {}); // Move edges (outgoing only)

        (_graph$inEdges = graph.inEdges(node.id)) === null || _graph$inEdges === void 0 ? void 0 : _graph$inEdges.forEach(function (e_id) {
          var edge = graph.edge(e_id);
          var edge_pos = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_positioning_info)(edge);
          var final_pos_d; // If edges are moved within a given scope, update the point movements

          if (scope_dx || scope_dy) {
            final_pos_d = [];
            final_pos_d.push({
              dx: 0,
              dy: 0
            }); // never move first (and last) point manually

            for (var i = 1; i < edge.points.length - 1; i++) {
              final_pos_d.push({
                dx: scope_dx,
                dy: scope_dy
              });

              if (edge_pos !== null && edge_pos !== void 0 && edge_pos.points) {
                final_pos_d[i].dx += edge_pos.points[i].dx;
                final_pos_d[i].dx += edge_pos.points[i].dy;
              }
            }

            final_pos_d.push({
              dx: 0,
              dy: 0
            }); // never move last (and first) point manually
          } else if (edge_pos !== null && edge_pos !== void 0 && edge_pos.points) {
            final_pos_d = edge_pos.points;
          }

          if (final_pos_d) {
            // Move the element
            _this4.canvas_manager.translate_element(edge, {
              x: 0,
              y: 0
            }, {
              x: 0,
              y: 0
            }, _this4.graph, _this4.sdfg_list, _this4.state_parent_list, undefined, false, false, final_pos_d);
          }
        });
        return true;
      });
    } // Change translation and scale such that the chosen elements
    // (or entire graph if null) is in view

  }, {
    key: "zoom_to_view",
    value: function zoom_to_view() {
      var _this5 = this;

      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!elements || elements.length == 0) elements = this.graph.nodes().map(function (x) {
        return _this5.graph.node(x);
      });
      var bb = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.boundingBox)(elements);
      this.canvas_manager.set_view(bb, animate);
      this.draw_async();
    }
  }, {
    key: "collapse_all",
    value: function collapse_all() {
      this.for_all_sdfg_elements(function (otype, odict, obj) {
        if ('is_collapsed' in obj.attributes && !obj.type.endsWith('Exit')) obj.attributes.is_collapsed = true;
      });
      this.send_new_sdfg_to_vscode();
      this.relayout();
      this.draw_async();
    }
  }, {
    key: "expand_all",
    value: function expand_all() {
      this.for_all_sdfg_elements(function (otype, odict, obj) {
        if ('is_collapsed' in obj.attributes && !obj.type.endsWith('Exit')) obj.attributes.is_collapsed = false;
      });
      this.send_new_sdfg_to_vscode();
      this.relayout();
      this.draw_async();
    }
  }, {
    key: "reset_positions",
    value: function reset_positions() {
      this.for_all_sdfg_elements(function (otype, odict, obj) {
        (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.delete_positioning_info)(obj);
      });
      this.send_new_sdfg_to_vscode();
      this.relayout();
      this.draw_async();
    } // Save functions

  }, {
    key: "save",
    value: function save(filename, contents) {
      var link = document.createElement('a');
      link.setAttribute('download', filename);
      link.href = contents;
      document.body.appendChild(link); // wait for the link to be added to the document

      window.requestAnimationFrame(function () {
        var event = new MouseEvent('click');
        link.dispatchEvent(event);
        document.body.removeChild(link);
      });
    }
  }, {
    key: "save_as_png",
    value: function save_as_png() {
      this.save('sdfg.png', this.canvas.toDataURL('image/png'));
    }
  }, {
    key: "has_pdf",
    value: function has_pdf() {
      try {
        blobStream;
        canvas2pdf.PdfContext;
        return true;
      } catch (e) {
        return false;
      }
    }
  }, {
    key: "save_as_pdf",
    value: function save_as_pdf() {
      var _this6 = this;

      var save_all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var stream = blobStream(); // Compute document size

      var curx = this.canvas_manager.mapPixelToCoordsX(0);
      var cury = this.canvas_manager.mapPixelToCoordsY(0);
      var size;

      if (save_all) {
        // Get size of entire graph
        var elements = this.graph.nodes().map(function (x) {
          return _this6.graph.node(x);
        });
        var bb = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.boundingBox)(elements);
        size = [bb.width, bb.height];
      } else {
        // Get size of current view
        var endx = this.canvas_manager.mapPixelToCoordsX(this.canvas.width);
        var endy = this.canvas_manager.mapPixelToCoordsY(this.canvas.height);
        var curw = endx - curx,
            curh = endy - cury;
        size = [curw, curh];
      } //


      var ctx = new canvas2pdf.PdfContext(stream, {
        size: size
      });
      var oldctx = this.ctx;
      this.ctx = ctx;
      this.ctx.lod = !save_all;
      this.ctx.pdf = true; // Center on saved region

      if (!save_all) this.ctx.translate(-curx, -cury);
      this.draw_async();
      ctx.stream.on('finish', function () {
        _this6.save('sdfg.pdf', ctx.stream.toBlobURL('application/pdf'));

        _this6.ctx = oldctx;

        _this6.draw_async();
      });
    } // Draw a debug grid on the canvas to indicate coordinates.

  }, {
    key: "debug_draw_grid",
    value: function debug_draw_grid(curx, cury, endx, endy) {
      var grid_width = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
      var lim_x_min = Math.floor(curx / grid_width) * grid_width;
      var lim_x_max = Math.ceil(endx / grid_width) * grid_width;
      var lim_y_min = Math.floor(cury / grid_width) * grid_width;
      var lim_y_max = Math.ceil(endy / grid_width) * grid_width;

      for (var i = lim_x_min; i <= lim_x_max; i += grid_width) {
        this.ctx.moveTo(i, lim_y_min);
        this.ctx.lineTo(i, lim_y_max);
      }

      for (var i = lim_y_min; i <= lim_y_max; i += grid_width) {
        this.ctx.moveTo(lim_x_min, i);
        this.ctx.lineTo(lim_x_max, i);
      }

      this.ctx.strokeStyle = 'yellow';
      this.ctx.stroke(); // Draw the zero-point.

      this.ctx.beginPath();
      this.ctx.arc(0, 0, 10, 0, 2 * Math.PI, false);
      this.ctx.fillStyle = 'red';
      this.ctx.fill();
      this.ctx.strokeStyle = 'red';
      this.ctx.stroke();
    } // Render SDFG

  }, {
    key: "draw",
    value: function draw(dt) {
      var ctx = this.ctx;
      var g = this.graph;
      var curx = this.canvas_manager.mapPixelToCoordsX(0);
      var cury = this.canvas_manager.mapPixelToCoordsY(0);
      var endx = this.canvas_manager.mapPixelToCoordsX(this.canvas.width);
      var endy = this.canvas_manager.mapPixelToCoordsY(this.canvas.height);
      var curw = endx - curx,
          curh = endy - cury;
      this.visible_rect = {
        x: curx,
        y: cury,
        w: curw,
        h: curh
      };
      this.on_pre_draw();
      (0,_renderer_elements__WEBPACK_IMPORTED_MODULE_8__.draw_sdfg)(this, ctx, g, this.mousepos, this.debug_draw);

      if (this.box_select_rect) {
        this.ctx.beginPath();
        var old_line_width = this.ctx.lineWidth;
        this.ctx.lineWidth = this.canvas_manager.points_per_pixel();
        this.ctx.strokeStyle = 'grey';
        this.ctx.rect(this.box_select_rect.x_start, this.box_select_rect.y_start, this.box_select_rect.x_end - this.box_select_rect.x_start, this.box_select_rect.y_end - this.box_select_rect.y_start);
        this.ctx.stroke();
        this.ctx.lineWidth = old_line_width;
      }

      if (this.debug_draw) {
        this.debug_draw_grid(curx, cury, endx, endy, 100);

        if (this.mousepos) {
          this.dbg_mouse_coords.innerText = 'x: ' + Math.floor(this.mousepos.x) + ' / y: ' + Math.floor(this.mousepos.y);
        } else {
          this.dbg_mouse_coords.innerText = 'x: N/A / y: N/A';
        }
      }

      this.on_post_draw();
    }
  }, {
    key: "on_pre_draw",
    value: function on_pre_draw() {}
  }, {
    key: "on_post_draw",
    value: function on_post_draw() {
      if (this.overlay_manager !== null) this.overlay_manager.draw();

      try {
        this.ctx.end();
      } catch (ex) {// TODO make sure no error is thrown instead of catching and silently ignoring it?
      }

      if (this.tooltip) {
        var br = this.canvas.getBoundingClientRect();
        var pos = {
          x: this.realmousepos.x - br.x,
          y: this.realmousepos.y - br.y
        }; // Clear style and contents

        this.tooltip_container.style = '';
        this.tooltip_container.innerHTML = '';
        this.tooltip_container.style.display = 'block'; // Invoke custom container

        this.tooltip(this.tooltip_container); // Make visible near mouse pointer

        this.tooltip_container.style.top = pos.y + 'px';
        this.tooltip_container.style.left = pos.x + 20 + 'px';
      } else {
        this.tooltip_container.style.display = 'none';
      }

      if (this.sdfg.error) {
        var error = this.sdfg.error;
        var type = '';
        var state_id = -1;
        var el_id = -1;

        if (error.isedge_id !== undefined) {
          type = 'isedge';
          el_id = error.isedge_id;
        } else if (error.state_id !== undefined) {
          state_id = error.state_id;

          if (error.node_id !== undefined) {
            type = 'node';
            el_id = error.node_id;
          } else if (error.edge_id !== undefined) {
            type = 'edge';
            el_id = error.edge_id;
          } else {
            type = 'state';
          }
        } else {
          return;
        }

        var offending_element = find_graph_element(this.graph, type, error.sdfg_id, state_id, el_id);

        if (offending_element) {
          this.zoom_to_view([offending_element]);
          this.error_popover_container.style.display = 'block';
          this.error_popover_container.style.bottom = '5%';
          this.error_popover_container.style.left = '5%';
          this.error_popover_text.innerText = error.message;
        }
      } else {
        this.error_popover_container.style.display = 'none';
      }
    }
  }, {
    key: "visible_elements",
    value: function visible_elements() {
      var curx = this.canvas_manager.mapPixelToCoordsX(0);
      var cury = this.canvas_manager.mapPixelToCoordsY(0);
      var endx = this.canvas_manager.mapPixelToCoordsX(this.canvas.width);
      var endy = this.canvas_manager.mapPixelToCoordsY(this.canvas.height);
      var curw = endx - curx;
      var curh = endy - cury;
      var elements = [];
      this.do_for_intersected_elements(curx, cury, curw, curh, function (type, e, obj) {
        var state_id = e.state ? Number(e.state) : -1;
        var el_type = 'other';
        if (type === 'nodes') el_type = 'node';else if (type === 'states') el_type = 'state';else if (type === 'edges') el_type = 'edge';else if (type === 'isedges') el_type = 'isedge';else if (type === 'connectors') el_type = 'connector';
        elements.push({
          type: el_type,
          sdfg_id: Number(e.sdfg_id),
          state_id: state_id,
          id: Number(e.id)
        });
      });
      return elements;
    } // Returns a dictionary of SDFG elements in a given rectangle. Used for
    // selection, rendering, localized transformations, etc.
    // The output is a dictionary of lists of dictionaries. The top-level keys are:
    // states, nodes, connectors, edges, isedges (interstate edges). For example:
    // {'states': [{sdfg: sdfg_name, state: 1}, ...], nodes: [sdfg: sdfg_name, state: 1, node: 5],
    //              edges: [], isedges: [], connectors: []}

  }, {
    key: "elements_in_rect",
    value: function elements_in_rect(x, y, w, h) {
      var elements = {
        states: [],
        nodes: [],
        connectors: [],
        edges: [],
        isedges: []
      };
      this.do_for_intersected_elements(x, y, w, h, function (type, e, obj) {
        e.obj = obj;
        elements[type].push(e);
      });
      return elements;
    }
  }, {
    key: "do_for_intersected_elements",
    value: function do_for_intersected_elements(x, y, w, h, func) {
      // Traverse nested SDFGs recursively
      function traverse_recursive(g, sdfg_name, sdfg_id) {
        g.nodes().forEach(function (state_id) {
          var state = g.node(state_id);
          if (!state) return;

          if (state.intersect(x, y, w, h)) {
            // States
            func('states', {
              sdfg: sdfg_name,
              sdfg_id: sdfg_id,
              id: state_id
            }, state);
            if (state.data.state.attributes.is_collapsed) return;
            var ng = state.data.graph;
            if (!ng) return;
            ng.nodes().forEach(function (node_id) {
              var node = ng.node(node_id);

              if (node.intersect(x, y, w, h)) {
                // Selected nodes
                func('nodes', {
                  sdfg: sdfg_name,
                  sdfg_id: sdfg_id,
                  state: state_id,
                  id: node_id
                }, node); // If nested SDFG, traverse recursively

                if (node.data.node.type === "NestedSDFG") traverse_recursive(node.data.graph, node.data.node.attributes.sdfg.attributes.name, node.data.node.attributes.sdfg.sdfg_list_id);
              } // Connectors


              node.in_connectors.forEach(function (c, i) {
                if (c.intersect(x, y, w, h)) func('connectors', {
                  sdfg: sdfg_name,
                  sdfg_id: sdfg_id,
                  state: state_id,
                  node: node_id,
                  connector: i,
                  conntype: "in"
                }, c);
              });
              node.out_connectors.forEach(function (c, i) {
                if (c.intersect(x, y, w, h)) func('connectors', {
                  sdfg: sdfg_name,
                  sdfg_id: sdfg_id,
                  state: state_id,
                  node: node_id,
                  connector: i,
                  conntype: "out"
                }, c);
              });
            }); // Selected edges

            ng.edges().forEach(function (edge_id) {
              var edge = ng.edge(edge_id);

              if (edge.intersect(x, y, w, h)) {
                func('edges', {
                  sdfg: sdfg_name,
                  sdfg_id: sdfg_id,
                  state: state_id,
                  id: edge.id
                }, edge);
              }
            });
          }
        }); // Selected inter-state edges

        g.edges().forEach(function (isedge_id) {
          var isedge = g.edge(isedge_id);

          if (isedge.intersect(x, y, w, h)) {
            func('isedges', {
              sdfg: sdfg_name,
              sdfg_id: sdfg_id,
              id: isedge.id
            }, isedge);
          }
        });
      } // Start with top-level SDFG


      traverse_recursive(this.graph, this.sdfg.attributes.name, this.sdfg.sdfg_list_id);
    }
  }, {
    key: "for_all_sdfg_elements",
    value: function for_all_sdfg_elements(func) {
      // Traverse nested SDFGs recursively
      function traverse_recursive(sdfg) {
        sdfg.nodes.forEach(function (state, state_id) {
          // States
          func('states', {
            sdfg: sdfg,
            id: state_id
          }, state);
          state.nodes.forEach(function (node, node_id) {
            // Nodes
            func('nodes', {
              sdfg: sdfg,
              state: state_id,
              id: node_id
            }, node); // If nested SDFG, traverse recursively

            if (node.type === "NestedSDFG") traverse_recursive(node.attributes.sdfg);
          }); // Edges

          state.edges.forEach(function (edge, edge_id) {
            func('edges', {
              sdfg: sdfg,
              state: state_id,
              id: edge_id
            }, edge);
          });
        }); // Selected inter-state edges

        sdfg.edges.forEach(function (isedge, isedge_id) {
          func('isedges', {
            sdfg: sdfg,
            id: isedge_id
          }, isedge);
        });
      } // Start with top-level SDFG


      traverse_recursive(this.sdfg);
    }
  }, {
    key: "for_all_elements",
    value: function for_all_elements(x, y, w, h, func) {
      // Traverse nested SDFGs recursively
      function traverse_recursive(g, sdfg_name) {
        g.nodes().forEach(function (state_id) {
          var state = g.node(state_id);
          if (!state) return; // States

          func('states', {
            sdfg: sdfg_name,
            id: state_id,
            graph: g
          }, state, state.intersect(x, y, w, h));
          if (state.data.state.attributes.is_collapsed) return;
          var ng = state.data.graph;
          if (!ng) return;
          ng.nodes().forEach(function (node_id) {
            var node = ng.node(node_id); // Selected nodes

            func('nodes', {
              sdfg: sdfg_name,
              state: state_id,
              id: node_id,
              graph: ng
            }, node, node.intersect(x, y, w, h)); // If nested SDFG, traverse recursively

            if (node.data.node.type === "NestedSDFG") traverse_recursive(node.data.graph, node.data.node.attributes.sdfg.attributes.name); // Connectors

            node.in_connectors.forEach(function (c, i) {
              func('connectors', {
                sdfg: sdfg_name,
                state: state_id,
                node: node_id,
                connector: i,
                conntype: "in",
                graph: ng
              }, c, c.intersect(x, y, w, h));
            });
            node.out_connectors.forEach(function (c, i) {
              func('connectors', {
                sdfg: sdfg_name,
                state: state_id,
                node: node_id,
                connector: i,
                conntype: "out",
                graph: ng
              }, c, c.intersect(x, y, w, h));
            });
          }); // Selected edges

          ng.edges().forEach(function (edge_id) {
            var edge = ng.edge(edge_id);
            func('edges', {
              sdfg: sdfg_name,
              state: state_id,
              id: edge.id,
              graph: ng
            }, edge, edge.intersect(x, y, w, h));
          });
        }); // Selected inter-state edges

        g.edges().forEach(function (isedge_id) {
          var isedge = g.edge(isedge_id);
          func('isedges', {
            sdfg: sdfg_name,
            id: isedge.id,
            graph: g
          }, isedge, isedge.intersect(x, y, w, h));
        });
      } // Start with top-level SDFG


      traverse_recursive(this.graph, this.sdfg.attributes.name);
    }
  }, {
    key: "get_nested_memlet_tree",
    value: function get_nested_memlet_tree(edge) {
      var _iterator5 = _createForOfIteratorHelper(this.all_memlet_trees),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var tree = _step5.value;
          if (tree.has(edge)) return tree;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return [];
    }
  }, {
    key: "find_elements_under_cursor",
    value: function find_elements_under_cursor(mouse_pos_x, mouse_pos_y) {
      // Find all elements under the cursor.
      var elements = this.elements_in_rect(mouse_pos_x, mouse_pos_y, 0, 0);
      var clicked_states = elements.states;
      var clicked_nodes = elements.nodes;
      var clicked_edges = elements.edges;
      var clicked_interstate_edges = elements.isedges;
      var clicked_connectors = elements.connectors;
      var total_elements = clicked_states.length + clicked_nodes.length + clicked_edges.length + clicked_interstate_edges.length + clicked_connectors.length;
      var foreground_elem = null,
          foreground_surface = -1; // Find the top-most element under the mouse cursor (i.e. the one with
      // the smallest dimensions).

      var categories = [clicked_states, clicked_interstate_edges, clicked_nodes, clicked_edges];

      for (var _i2 = 0, _categories = categories; _i2 < _categories.length; _i2++) {
        var category = _categories[_i2];

        for (var i = 0; i < category.length; i++) {
          var s = category[i].obj.width * category[i].obj.height;

          if (foreground_surface < 0 || s < foreground_surface) {
            foreground_surface = s;
            foreground_elem = category[i].obj;
          }
        }
      }

      return {
        total_elements: total_elements,
        elements: elements,
        foreground_elem: foreground_elem
      };
    }
  }, {
    key: "on_key_event",
    value: function on_key_event(event) {
      // Prevent handling of the event if the event is designed for something
      // other than the body, like an input element.
      if (event.target !== document.body) return;
      if (this.ctrl_key_selection && !event.ctrlKey) this.selectmode_btn.onclick(event, false);
      if (this.shift_key_movement && !event.shiftKey) this.movemode_btn.onclick(event, false);

      if (this.mouse_mode !== 'pan') {
        if (event.key === 'Escape' && !event.ctrlKey && !event.shiftKey) this.panmode_btn.onclick();
        return;
      } else if (event.key === 'Escape') {
        if (this.selected_elements.length > 0) {
          this.selected_elements.forEach(function (el) {
            el.selected = false;
          });
          this.selected_elements = [];
          this.draw_async();
        }
      } else if (event.key === 'Delete' && event.type === 'keyup') {
        if (this.selected_elements.length > 0) this.remove_graph_nodes(this.selected_elements);
        this.selected_elements = [];
      }

      if (event.ctrlKey && !event.shiftKey) this.selectmode_btn.onclick(event, true);
      if (event.shiftKey && !event.ctrlKey) this.movemode_btn.onclick(event, true);
      return true;
    }
  }, {
    key: "on_mouse_event",
    value: function on_mouse_event(event, comp_x_func, comp_y_func) {
      var _this7 = this;

      var evtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "other";
      if (this.ctrl_key_selection || this.shift_key_movement) this.on_key_event(event);
      var dirty = false; // Whether to redraw at the end
      // Whether the set of visible or selected elements changed

      var element_focus_changed = false; // Whether the current multi-selection changed

      var multi_selection_changed = false;

      if (evtype === "mousedown" || evtype === "touchstart") {
        this.drag_start = event;
      } else if (evtype === "mouseup") {
        this.drag_start = null;
        this.last_dragged_element = null;
      } else if (evtype === "touchend") {
        if (event.touches.length == 0) this.drag_start = null;else this.drag_start = event;
      } else if (evtype === "mousemove") {
        // Calculate the change in mouse position in canvas coordinates
        var old_mousepos = this.mousepos;
        this.mousepos = {
          x: comp_x_func(event),
          y: comp_y_func(event)
        };
        this.realmousepos = {
          x: event.clientX,
          y: event.clientY
        }; // Only accept the primary mouse button as dragging source

        if (this.drag_start && event.buttons & 1) {
          this.dragging = true;

          if (this.mouse_mode === 'move') {
            if (this.last_dragged_element) {
              this.canvas.style.cursor = 'grabbing';
              this.drag_start.cx = comp_x_func(this.drag_start);
              this.drag_start.cy = comp_y_func(this.drag_start);
              var elements_to_move = [this.last_dragged_element];

              if (this.selected_elements.includes(this.last_dragged_element) && this.selected_elements.length > 1) {
                elements_to_move = this.selected_elements.filter(function (el) {
                  // Do not move connectors (individually)
                  if (el instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Connector) return false;
                  var list_id = el.sdfg.sdfg_list_id; // Do not move element individually if it is
                  // moved together with a nested SDFG

                  var nested_sdfg_parent = _this7.state_parent_list[list_id];
                  if (nested_sdfg_parent && _this7.selected_elements.includes(nested_sdfg_parent)) return false; // Do not move element individually if it is
                  // moved together with its parent state

                  var state_parent = _this7.sdfg_list[list_id].node(el.parent_id);

                  if (state_parent && _this7.selected_elements.includes(state_parent)) return false; // Otherwise move individually

                  return true;
                });
              }

              var move_entire_edge = elements_to_move.length > 1;

              var _iterator6 = _createForOfIteratorHelper(elements_to_move),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var el = _step6.value;
                  this.canvas_manager.translate_element(el, old_mousepos, this.mousepos, this.graph, this.sdfg_list, this.state_parent_list, this.drag_start, true, move_entire_edge);
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }

              dirty = true;
              this.draw_async();
              return false;
            } else {
              var mouse_elements = this.find_elements_under_cursor(this.mousepos.x, this.mousepos.y);

              if (mouse_elements.foreground_elem) {
                this.last_dragged_element = mouse_elements.foreground_elem;
                this.canvas.style.cursor = 'grabbing';
                return false;
              }

              return true;
            }
          } else if (this.mouse_mode === 'select') {
            this.box_select_rect = {
              x_start: comp_x_func(this.drag_start),
              y_start: comp_y_func(this.drag_start),
              x_end: this.mousepos.x,
              y_end: this.mousepos.y
            }; // Mark for redraw

            dirty = true;
          } else {
            this.canvas_manager.translate(event.movementX, event.movementY); // Mark for redraw

            dirty = true;
          }
        } else if (this.drag_start && event.buttons & 4) {
          // Pan the view with the middle mouse button
          this.dragging = true;
          this.canvas_manager.translate(event.movementX, event.movementY);
          dirty = true;
          element_focus_changed = true;
        } else {
          this.drag_start = null;
          this.last_dragged_element = null;
          if (event.buttons & 1 || event.buttons & 4) return true; // Don't stop propagation
        }
      } else if (evtype === "touchmove") {
        if (this.drag_start.touches.length != event.touches.length) {
          // Different number of touches, ignore and reset drag_start
          this.drag_start = event;
        } else if (event.touches.length == 1) {
          // Move/drag
          this.canvas_manager.translate(event.touches[0].clientX - this.drag_start.touches[0].clientX, event.touches[0].clientY - this.drag_start.touches[0].clientY);
          this.drag_start = event; // Mark for redraw

          dirty = true;
          this.draw_async();
          return false;
        } else if (event.touches.length == 2) {
          // Find relative distance between two touches before and after.
          // Then, center and zoom to their midpoint.
          var touch1 = this.drag_start.touches[0];
          var touch2 = this.drag_start.touches[1];
          var x1 = touch1.clientX,
              x2 = touch2.clientX;
          var y1 = touch1.clientY,
              y2 = touch2.clientY;
          var oldCenter = [(x1 + x2) / 2.0, (y1 + y2) / 2.0];
          var initialDistance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
          x1 = event.touches[0].clientX;
          x2 = event.touches[1].clientX;
          y1 = event.touches[0].clientY;
          y2 = event.touches[1].clientY;
          var currentDistance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
          var newCenter = [(x1 + x2) / 2.0, (y1 + y2) / 2.0]; // First, translate according to movement of center point

          this.canvas_manager.translate(newCenter[0] - oldCenter[0], newCenter[1] - oldCenter[1]); // Then scale

          this.canvas_manager.scale(currentDistance / initialDistance, newCenter[0], newCenter[1]);
          this.drag_start = event; // Mark for redraw

          dirty = true;
          this.draw_async();
          return false;
        }
      } else if (evtype === "wheel") {
        // Get physical x,y coordinates (rather than canvas coordinates)
        var br = this.canvas.getBoundingClientRect();
        var x = event.clientX - br.x;
        var y = event.clientY - br.y;
        this.canvas_manager.scale(event.deltaY > 0 ? 0.9 : 1.1, x, y);
        dirty = true;
        element_focus_changed = true;
      } // End of mouse-move/touch-based events


      if (!this.mousepos) return true; // Find elements under cursor

      var elements_under_cursor = this.find_elements_under_cursor(this.mousepos.x, this.mousepos.y);
      var elements = elements_under_cursor.elements;
      var total_elements = elements_under_cursor.total_elements;
      var foreground_elem = elements_under_cursor.foreground_elem;

      if (this.mouse_mode == 'add') {
        var _el = this.mouse_follow_element;
        if (check_valid_add_position(this.add_type, foreground_elem, this.add_mode_lib, this.mousepos)) _el.firstElementChild.setAttribute('stroke', 'green');else _el.firstElementChild.setAttribute('stroke', 'red');
        _el.style.left = event.layerX - _el.firstElementChild.clientWidth / 2 + 'px';
        _el.style.top = event.layerY - _el.firstElementChild.clientHeight / 2 + 'px';
      } // Change mouse cursor accordingly


      if (this.mouse_mode === 'select') {
        this.canvas.style.cursor = 'crosshair';
      } else if (total_elements > 0) {
        if (this.mouse_mode === 'move' && this.drag_start) {
          this.canvas.style.cursor = 'grabbing';
        } else if (this.mouse_mode === 'move') {
          this.canvas.style.cursor = 'grab';
        } else {
          // Hovering over an element while not in any specific mode.
          if (foreground_elem.data.state && foreground_elem.data.state.attributes.is_collapsed || foreground_elem.data.node && foreground_elem.data.node.attributes.is_collapsed) {
            // This is a collapsed node or state, show with the cursor
            // shape that this can be expanded.
            this.canvas.style.cursor = 'alias';
          } else {
            this.canvas.style.cursor = 'pointer';
          }
        }
      } else {
        this.canvas.style.cursor = 'auto';
      }

      this.tooltip = null;
      this.last_hovered_elements = elements; // De-highlight all elements.

      this.for_all_elements(this.mousepos.x, this.mousepos.y, 0, 0, function (type, e, obj, intersected) {
        obj.hovered = false;
        obj.highlighted = false;
      }); // Mark hovered and highlighted elements.

      this.for_all_elements(this.mousepos.x, this.mousepos.y, 0, 0, function (type, e, obj, intersected) {
        // Highlight all edges of the memlet tree
        if (intersected && obj instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Edge && obj.parent_id != null) {
          var tree = _this7.get_nested_memlet_tree(obj);

          tree.forEach(function (te) {
            if (te != obj && te !== undefined) {
              te.highlighted = true;
            }
          });
        } // Highlight all access nodes with the same name in the same nested sdfg


        if (intersected && obj instanceof AccessNode) {
          (0,_utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_6__.traverse_sdfg_scopes)(_this7.sdfg_list[obj.sdfg.sdfg_list_id], function (node) {
            // If node is a state, then visit sub-scope
            if (node instanceof State) {
              return true;
            }

            if (node instanceof AccessNode && node.data.node.label === obj.data.node.label) {
              node.highlighted = true;
            } // No need to visit sub-scope


            return false;
          });
        } // Highlight all access nodes with the same name as the hovered connector in the nested sdfg


        if (intersected && obj instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Connector) {
          var nested_graph = e.graph.node(obj.parent_id).data.graph;

          if (nested_graph) {
            (0,_utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_6__.traverse_sdfg_scopes)(nested_graph, function (node) {
              // If node is a state, then visit sub-scope
              if (node instanceof State) {
                return true;
              }

              if (node instanceof AccessNode && node.data.node.label === obj.label()) {
                node.highlighted = true;
              } // No need to visit sub-scope


              return false;
            });
          }
        }

        if (intersected) obj.hovered = true;
      }); // If adding an edge, mark/highlight the first/from element, if it has
      // already been selected.

      if (this.mouse_mode === 'add' && this.add_type === 'Edge' && this.add_edge_start) {
        this.add_edge_start.highlighted = true;
      }

      if (evtype === "mousemove") {
        // TODO: Draw only if elements have changed
        dirty = true;
      }

      if (evtype === "dblclick") {
        var sdfg = foreground_elem ? foreground_elem.sdfg : null;
        var sdfg_elem = null;
        if (foreground_elem instanceof State) sdfg_elem = foreground_elem.data.state;else if (foreground_elem instanceof SDFGNode) {
          sdfg_elem = foreground_elem.data.node; // If a scope exit node, use entry instead

          if (sdfg_elem.type.endsWith("Exit")) sdfg_elem = sdfg.nodes[foreground_elem.parent_id].nodes[sdfg_elem.scope_entry];
        } else sdfg_elem = null; // Toggle collapsed state

        if (sdfg_elem && 'is_collapsed' in sdfg_elem.attributes) {
          sdfg_elem.attributes.is_collapsed = !sdfg_elem.attributes.is_collapsed;
          this.send_new_sdfg_to_vscode(); // Re-layout SDFG

          this.relayout();
          dirty = true;
          element_focus_changed = true;
        }
      }

      var ends_drag = false;

      if (evtype === 'click') {
        if (this.dragging) {
          // This click ends a drag.
          this.dragging = false;
          ends_drag = true;
          element_focus_changed = true;

          if (this.box_select_rect) {
            var elements_in_selection = [];
            var start_x = Math.min(this.box_select_rect.x_start, this.box_select_rect.x_end);
            var end_x = Math.max(this.box_select_rect.x_start, this.box_select_rect.x_end);
            var start_y = Math.min(this.box_select_rect.y_start, this.box_select_rect.y_end);
            var end_y = Math.max(this.box_select_rect.y_start, this.box_select_rect.y_end);
            var w = end_x - start_x;
            var h = end_y - start_y;
            this.do_for_intersected_elements(start_x, start_y, w, h, function (type, e, obj) {
              if (obj.contained_in(start_x, start_y, w, h)) elements_in_selection.push(obj);
            });

            if (event.shiftKey && !this.ctrl_key_selection) {
              elements_in_selection.forEach(function (el) {
                if (!_this7.selected_elements.includes(el)) _this7.selected_elements.push(el);
              });
            } else if (event.ctrlKey && !this.ctrl_key_selection) {
              elements_in_selection.forEach(function (el) {
                if (_this7.selected_elements.includes(el)) {
                  _this7.selected_elements = _this7.selected_elements.filter(function (val) {
                    val.selected = false;
                    return val !== el;
                  });
                }
              });
            } else {
              this.selected_elements.forEach(function (el) {
                el.selected = false;
              });
              this.selected_elements = elements_in_selection;
            }

            this.box_select_rect = null;
            dirty = true;
            element_focus_changed = true;
            multi_selection_changed = true;
          }

          if (this.mouse_mode === 'move') this.send_new_sdfg_to_vscode();
        } else {
          if (this.mouse_mode === 'add') {
            if (check_valid_add_position(this.add_type, foreground_elem, this.add_mode_lib, this.mousepos)) {
              if (this.add_type === 'Edge') {
                if (this.add_edge_start) {
                  var start = this.add_edge_start;
                  this.add_edge_start = undefined;
                  this.add_node_to_graph(this.add_type, (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_uuid_graph_element)(foreground_elem), (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_uuid_graph_element)(start));
                } else {
                  this.add_edge_start = foreground_elem;
                  this.update_toggle_buttons();
                }
              } else if (this.add_type === 'LibraryNode') {
                this.add_position = this.mousepos;
                this.add_node_to_graph(this.add_type + '|' + this.add_mode_lib, (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_uuid_graph_element)(foreground_elem));
              } else {
                this.add_position = this.mousepos;
                this.add_node_to_graph(this.add_type, (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_uuid_graph_element)(foreground_elem));
              }

              if (!event.ctrlKey && !(this.add_type === 'Edge' && this.add_edge_start)) {
                // Cancel add mode.
                this.panmode_btn.onclick();
              }
            }
          }

          if (foreground_elem) {
            if (event.ctrlKey) {
              // Ctrl + click on an object, add it, or remove it from
              // the selection if it was previously in it.
              if (this.selected_elements.includes(foreground_elem)) {
                foreground_elem.selected = false;
                this.selected_elements = this.selected_elements.filter(function (el) {
                  return el !== foreground_elem;
                });
              } else {
                this.selected_elements.push(foreground_elem);
              } // Indicate that the multi-selection changed.


              multi_selection_changed = true;
            } else if (event.shiftKey) {// TODO: Implement shift-clicks for path selection.
            } else {
              // Clicked an element, select it and nothing else.
              // If there was a multi-selection prior to this,
              // indicate that it changed.
              if (this.selected_elements.length > 1) multi_selection_changed = true;
              this.selected_elements.forEach(function (el) {
                el.selected = false;
              });
              this.selected_elements = [foreground_elem];
            }
          } else {
            // Clicked nothing, clear the selection.
            // If there was a multi-selection prior to this, indicate
            // that it changed.
            if (this.selected_elements.length > 1) multi_selection_changed = true;
            this.selected_elements.forEach(function (el) {
              el.selected = false;
            });
            this.selected_elements = [];
          }

          dirty = true;
          element_focus_changed = true;
        }
      }

      this.selected_elements.forEach(function (el) {
        el.selected = true;
      });

      if (evtype === "contextmenu") {
        if (this.mouse_mode == 'move') {
          var elements_to_reset = [foreground_elem];
          if (this.selected_elements.includes(foreground_elem)) elements_to_reset = this.selected_elements;
          var element_moved = false;
          var relayout_necessary = false;

          var _iterator7 = _createForOfIteratorHelper(elements_to_reset),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _el2 = _step7.value;
              var position = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.get_positioning_info)(_el2);

              if (_el2 && !(_el2 instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Connector) && position) {
                // Reset the position of the element (if it has been
                // manually moved)
                if (_el2 instanceof _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Edge) {
                  if (!position.points) continue; // Create inverted points to move it back

                  var new_points = new Array(_el2.points.length);

                  for (var j = 1; j < _el2.points.length - 1; j++) {
                    new_points[j] = {
                      dx: -position.points[j].dx,
                      dy: -position.points[j].dy
                    }; // Reset the point movement

                    position.points[j].dx = 0;
                    position.points[j].dy = 0;
                  } // Move it to original position


                  this.canvas_manager.translate_element(_el2, {
                    x: 0,
                    y: 0
                  }, {
                    x: 0,
                    y: 0
                  }, this.graph, this.sdfg_list, this.state_parent_list, undefined, false, false, new_points);
                  element_moved = true;
                } else {
                  var new_x = void 0,
                      new_y = void 0;
                  if (!position.dx && !position.dy) continue; // Calculate original position with the relative
                  // movement

                  new_x = _el2.x - position.dx;
                  new_y = _el2.y - position.dy;
                  position.dx = 0;
                  position.dy = 0; // Move it to original position

                  this.canvas_manager.translate_element(_el2, {
                    x: _el2.x,
                    y: _el2.y
                  }, {
                    x: new_x,
                    y: new_y
                  }, this.graph, this.sdfg_list, this.state_parent_list, undefined, false, false, undefined);
                  element_moved = true;
                }

                if (_el2 instanceof EntryNode) {
                  // Also update scope position
                  position.scope_dx = 0;
                  position.scope_dy = 0;
                  if (!_el2.data.node.attributes.is_collapsed) relayout_necessary = true;
                }
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          if (relayout_necessary) this.relayout();
          this.draw_async();
          if (element_moved) this.send_new_sdfg_to_vscode();
        } else if (this.mouse_mode == 'add') {
          // Cancel add mode
          this.panmode_btn.onclick();
        }
      }

      var mouse_x = comp_x_func(event);
      var mouse_y = comp_y_func(event);
      if (this.external_mouse_handler) dirty |= this.external_mouse_handler(evtype, event, {
        x: mouse_x,
        y: mouse_y
      }, elements, this, this.selected_elements, ends_drag);

      if (this.overlay_manager !== null) {
        dirty |= this.overlay_manager.on_mouse_event(evtype, event, {
          x: mouse_x,
          y: mouse_y
        }, elements, foreground_elem, ends_drag);
      }

      if (dirty) {
        this.draw_async();
      }

      if (element_focus_changed) {
        // If a listener in VSCode is present, update it about the new
        // viewport and tell it to re-sort the shown transformations.
        try {
          if (vscode) vscode_handle_event('on_renderer_selection_changed', {
            multi_selection_changed: multi_selection_changed
          });
        } catch (ex) {// Do nothing
        }
      }

      return false;
    }
  }]);

  return SDFGRenderer;
}();

function calculateNodeSize(sdfg_state, node, ctx) {
  var labelsize = ctx.measureText(node.label).width;
  var inconnsize = 2 * LINEHEIGHT * Object.keys(node.attributes.layout.in_connectors).length - LINEHEIGHT;
  var outconnsize = 2 * LINEHEIGHT * Object.keys(node.attributes.layout.out_connectors).length - LINEHEIGHT;
  var maxwidth = Math.max(labelsize, inconnsize, outconnsize);
  var maxheight = 2 * LINEHEIGHT;
  maxheight += 4 * LINEHEIGHT;
  var size = {
    width: maxwidth,
    height: maxheight
  }; // add something to the size based on the shape of the node

  if (node.type === "AccessNode") {
    size.height -= 4 * LINEHEIGHT;
    size.width += size.height;
  } else if (node.type.endsWith("Entry")) {
    size.width += 2.0 * size.height;
    size.height /= 1.75;
  } else if (node.type.endsWith("Exit")) {
    size.width += 2.0 * size.height;
    size.height /= 1.75;
  } else if (node.type === "Tasklet") {
    size.width += 2.0 * (size.height / 3.0);
    size.height /= 1.75;
  } else if (node.type === "LibraryNode") {
    size.width += 2.0 * (size.height / 3.0);
    size.height /= 1.75;
  } else if (node.type === "Reduce") {
    size.height -= 4 * LINEHEIGHT;
    size.width *= 2;
    size.height = size.width / 3.0;
  } else {}

  return size;
} // Layout SDFG elements (states, nodes, scopes, nested SDFGs)


function relayout_sdfg(ctx, sdfg, sdfg_list, state_parent_list, omit_access_nodes) {
  var STATE_MARGIN = 4 * LINEHEIGHT; // Layout the SDFG as a dagre graph

  var g = new (dagre__WEBPACK_IMPORTED_MODULE_2___default().graphlib.Graph)();
  g.setGraph({});
  g.setDefaultEdgeLabel(function (u, v) {
    return {};
  }); // layout each state to get its size

  sdfg.nodes.forEach(function (state) {
    var stateinfo = {};
    stateinfo.label = state.id;
    var state_g = null;

    if (state.attributes.is_collapsed) {
      stateinfo.width = ctx.measureText(stateinfo.label).width;
      stateinfo.height = LINEHEIGHT;
    } else {
      state_g = relayout_state(ctx, state, sdfg, sdfg_list, state_parent_list, omit_access_nodes);
      stateinfo = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.calculateBoundingBox)(state_g);
    }

    stateinfo.width += 2 * STATE_MARGIN;
    stateinfo.height += 2 * STATE_MARGIN;
    g.setNode(state.id, new State({
      state: state,
      layout: stateinfo,
      graph: state_g
    }, state.id, sdfg));
  });
  sdfg.edges.forEach(function (edge, id) {
    g.setEdge(edge.src, edge.dst, new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Edge(edge.attributes.data, id, sdfg));
  });
  dagre__WEBPACK_IMPORTED_MODULE_2___default().layout(g); // Annotate the sdfg with its layout info

  sdfg.nodes.forEach(function (state) {
    var gnode = g.node(state.id);
    state.attributes.layout = {};
    state.attributes.layout.x = gnode.x;
    state.attributes.layout.y = gnode.y;
    state.attributes.layout.width = gnode.width;
    state.attributes.layout.height = gnode.height;
  });
  sdfg.edges.forEach(function (edge) {
    var gedge = g.edge(edge.src, edge.dst);
    var bb = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.calculateEdgeBoundingBox)(gedge); // Convert from top-left to center

    bb.x += bb.width / 2.0;
    bb.y += bb.height / 2.0;
    gedge.x = bb.x;
    gedge.y = bb.y;
    gedge.width = bb.width;
    gedge.height = bb.height;
    edge.attributes.layout = {};
    edge.attributes.layout.width = bb.width;
    edge.attributes.layout.height = bb.height;
    edge.attributes.layout.x = bb.x;
    edge.attributes.layout.y = bb.y;
    edge.attributes.layout.points = gedge.points;
  }); // Offset node and edge locations to be in state margins

  sdfg.nodes.forEach(function (s, sid) {
    if (s.attributes.is_collapsed) return;
    var state = g.node(sid);
    var topleft = state.topleft();
    (0,_renderer_elements__WEBPACK_IMPORTED_MODULE_8__.offset_state)(s, state, {
      x: topleft.x + STATE_MARGIN,
      y: topleft.y + STATE_MARGIN
    });
  });
  var bb = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.calculateBoundingBox)(g);
  g.width = bb.width;
  g.height = bb.height; // Add SDFG to global store

  sdfg_list[sdfg.sdfg_list_id] = g;
  return g;
}

function relayout_state(ctx, sdfg_state, sdfg, sdfg_list, state_parent_list, omit_access_nodes) {
  // layout the state as a dagre graph
  var g = new (dagre__WEBPACK_IMPORTED_MODULE_2___default().graphlib.Graph)({
    multigraph: true
  }); // Set layout options and a simpler algorithm for large graphs

  var layout_options = {
    ranksep: 30
  };
  if (sdfg_state.nodes.length >= 1000) layout_options.ranker = 'longest-path';
  g.setGraph(layout_options); // Set an object for the graph label

  g.setDefaultEdgeLabel(function (u, v) {
    return {};
  }); // Add nodes to the graph. The first argument is the node id. The
  // second is metadata about the node (label, width, height),
  // which will be updated by dagre.layout (will add x,y).
  // Process nodes hierarchically

  var toplevel_nodes = sdfg_state.scope_dict[-1];
  if (toplevel_nodes === undefined) toplevel_nodes = Object.keys(sdfg_state.nodes);
  var drawn_nodes = new Set();
  var hidden_nodes = new Map();

  function layout_node(node) {
    if (omit_access_nodes && node.type == "AccessNode") {
      // add access node to hidden nodes; source and destinations will be set later
      hidden_nodes.set(node.id.toString(), {
        node: node,
        src: null,
        dsts: []
      });
      return;
    }

    var nested_g = null;
    node.attributes.layout = {}; // Set connectors prior to computing node size

    node.attributes.layout.in_connectors = node.attributes.in_connectors;
    if ('is_collapsed' in node.attributes && node.attributes.is_collapsed && node.type !== "NestedSDFG") node.attributes.layout.out_connectors = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.find_exit_for_entry)(sdfg_state.nodes, node).attributes.out_connectors;else node.attributes.layout.out_connectors = node.attributes.out_connectors;
    var nodesize = calculateNodeSize(sdfg_state, node, ctx);
    node.attributes.layout.width = nodesize.width;
    node.attributes.layout.height = nodesize.height;
    node.attributes.layout.label = node.label; // Recursively lay out nested SDFGs

    if (node.type === "NestedSDFG") {
      nested_g = relayout_sdfg(ctx, node.attributes.sdfg, sdfg_list, state_parent_list, omit_access_nodes);
      var sdfginfo = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.calculateBoundingBox)(nested_g);
      node.attributes.layout.width = sdfginfo.width + 2 * LINEHEIGHT;
      node.attributes.layout.height = sdfginfo.height + 2 * LINEHEIGHT;
    } // Dynamically create node type


    var obj = new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.SDFGElements[node.type]({
      node: node,
      graph: nested_g
    }, node.id, sdfg, sdfg_state.id); // If it's a nested SDFG, we need to record the node as all of its
    // state's parent node

    if (node.type === 'NestedSDFG') state_parent_list[node.attributes.sdfg.sdfg_list_id] = obj; // Add input connectors

    var i = 0;
    var conns;
    if (Array.isArray(node.attributes.layout.in_connectors)) conns = node.attributes.layout.in_connectors;else conns = Object.keys(node.attributes.layout.in_connectors);

    var _iterator8 = _createForOfIteratorHelper(conns),
        _step8;

    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var cname = _step8.value;
        var conn = new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Connector({
          name: cname
        }, i, sdfg, node.id);
        obj.in_connectors.push(conn);
        i += 1;
      } // Add output connectors -- if collapsed, uses exit node connectors

    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }

    i = 0;
    if (Array.isArray(node.attributes.layout.out_connectors)) conns = node.attributes.layout.out_connectors;else conns = Object.keys(node.attributes.layout.out_connectors);

    var _iterator9 = _createForOfIteratorHelper(conns),
        _step9;

    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var _cname = _step9.value;

        var _conn = new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Connector({
          name: _cname
        }, i, sdfg, node.id);

        obj.out_connectors.push(_conn);
        i += 1;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }

    g.setNode(node.id, obj);
    drawn_nodes.add(node.id.toString()); // Recursively draw nodes

    if (node.id in sdfg_state.scope_dict) {
      if (node.attributes.is_collapsed) return;
      sdfg_state.scope_dict[node.id].forEach(function (nodeid) {
        var node = sdfg_state.nodes[nodeid];
        layout_node(node);
      });
    }
  }

  toplevel_nodes.forEach(function (nodeid) {
    var node = sdfg_state.nodes[nodeid];
    layout_node(node);
  }); // add info to calculate shortcut edges

  function add_edge_info_if_hidden(edge) {
    var hidden_src = hidden_nodes.get(edge.src);
    var hidden_dst = hidden_nodes.get(edge.dst);

    if (hidden_src && hidden_dst) {
      // if we have edges from an AccessNode to an AccessNode then just connect destinations
      hidden_src.dsts = hidden_dst.dsts;
      edge.attributes.data.attributes.shortcut = false;
    } else if (hidden_src) {
      // if edge starts at hidden node, then add it as destination
      hidden_src.dsts.push(edge);
      edge.attributes.data.attributes.shortcut = false;
      return true;
    } else if (hidden_dst) {
      // if edge ends at hidden node, then add it as source
      hidden_dst.src = edge;
      edge.attributes.data.attributes.shortcut = false;
      return true;
    } // if it is a shortcut edge, but we don't omit access nodes, then ignore this edge


    if (!omit_access_nodes && edge.attributes.data.attributes.shortcut) return true;
    return false;
  }

  sdfg_state.edges.forEach(function (edge, id) {
    if (add_edge_info_if_hidden(edge)) return;
    edge = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.check_and_redirect_edge)(edge, drawn_nodes, sdfg_state);
    if (!edge) return;
    var e = new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Edge(edge.attributes.data, id, sdfg, sdfg_state.id);
    edge.attributes.data.edge = e;
    e.src_connector = edge.src_connector;
    e.dst_connector = edge.dst_connector;
    g.setEdge(edge.src, edge.dst, e, id);
  });
  hidden_nodes.forEach(function (hidden_node) {
    if (hidden_node.src) {
      hidden_node.dsts.forEach(function (e) {
        // create shortcut edge with new destination
        var tmp_edge = e.attributes.data.edge;
        e.attributes.data.edge = null;
        var shortcut_e = (0,_utils_utils_ts__WEBPACK_IMPORTED_MODULE_5__.deepCopy)(e);
        e.attributes.data.edge = tmp_edge;
        shortcut_e.src = hidden_node.src.src;
        shortcut_e.src_connector = hidden_node.src.src_connector;
        shortcut_e.dst_connector = e.dst_connector; // attribute that only shortcut edges have; if it is explicitly false, then edge is ignored in omit access node mode

        shortcut_e.attributes.data.attributes.shortcut = true; // draw the redirected edge

        var redirected_e = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.check_and_redirect_edge)(shortcut_e, drawn_nodes, sdfg_state);
        if (!redirected_e) return; // abort if shortcut edge already exists

        var edges = g.outEdges(redirected_e.src);

        var _iterator10 = _createForOfIteratorHelper(edges),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var oe = _step10.value;

            if (oe.w == e.dst && sdfg_state.edges[oe.name].dst_connector == e.dst_connector) {
              return;
            }
          } // add shortcut edge (redirection is not done in this list)

        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }

        sdfg_state.edges.push(shortcut_e); // add redirected shortcut edge to graph

        var edge_id = sdfg_state.edges.length - 1;
        var shortcut_edge = new _renderer_elements__WEBPACK_IMPORTED_MODULE_8__.Edge((0,_utils_utils_ts__WEBPACK_IMPORTED_MODULE_5__.deepCopy)(redirected_e.attributes.data), edge_id, sdfg, sdfg_state.id);
        shortcut_edge.src_connector = redirected_e.src_connector;
        shortcut_edge.dst_connector = redirected_e.dst_connector;
        shortcut_edge.data.attributes.shortcut = true;
        g.setEdge(redirected_e.src, redirected_e.dst, shortcut_edge, edge_id);
      });
    }
  });
  dagre__WEBPACK_IMPORTED_MODULE_2___default().layout(g); // Layout connectors and nested SDFGs

  sdfg_state.nodes.forEach(function (node, id) {
    var gnode = g.node(id);

    if (!gnode || omit_access_nodes && gnode instanceof AccessNode) {
      // ignore nodes that should not be drawn
      return;
    }

    var topleft = gnode.topleft(); // Offset nested SDFG

    if (node.type === "NestedSDFG") {
      (0,_renderer_elements__WEBPACK_IMPORTED_MODULE_8__.offset_sdfg)(node.attributes.sdfg, gnode.data.graph, {
        x: topleft.x + LINEHEIGHT,
        y: topleft.y + LINEHEIGHT
      });
    } // Connector management 


    var SPACING = LINEHEIGHT;
    var iconn_length = (LINEHEIGHT + SPACING) * Object.keys(node.attributes.layout.in_connectors).length - SPACING;
    var oconn_length = (LINEHEIGHT + SPACING) * Object.keys(node.attributes.layout.out_connectors).length - SPACING;
    var iconn_x = gnode.x - iconn_length / 2.0 + LINEHEIGHT / 2.0;
    var oconn_x = gnode.x - oconn_length / 2.0 + LINEHEIGHT / 2.0;

    var _iterator11 = _createForOfIteratorHelper(gnode.in_connectors),
        _step11;

    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var c = _step11.value;
        c.width = LINEHEIGHT;
        c.height = LINEHEIGHT;
        c.x = iconn_x;
        iconn_x += LINEHEIGHT + SPACING;
        c.y = topleft.y;
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }

    var _iterator12 = _createForOfIteratorHelper(gnode.out_connectors),
        _step12;

    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var _c = _step12.value;
        _c.width = LINEHEIGHT;
        _c.height = LINEHEIGHT;
        _c.x = oconn_x;
        oconn_x += LINEHEIGHT + SPACING;
        _c.y = topleft.y + gnode.height;
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
  });
  sdfg_state.edges.forEach(function (edge, id) {
    edge = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_4__.check_and_redirect_edge)(edge, drawn_nodes, sdfg_state);
    if (!edge) return;
    var gedge = g.edge(edge.src, edge.dst, id);

    if (!gedge || omit_access_nodes && gedge.data.attributes.shortcut === false || !omit_access_nodes && gedge.data.attributes.shortcut) {
      // if access nodes omitted, don't draw non-shortcut edges and vice versa
      return;
    } // Reposition first and last points according to connectors


    var src_conn = null,
        dst_conn = null;

    if (edge.src_connector) {
      var src_node = g.node(edge.src);
      var cindex = -1;

      for (var i = 0; i < src_node.out_connectors.length; i++) {
        if (src_node.out_connectors[i].data.name == edge.src_connector) {
          cindex = i;
          break;
        }
      }

      if (cindex >= 0) {
        gedge.points[0].x = src_node.out_connectors[cindex].x;
        gedge.points[0].y = src_node.out_connectors[cindex].y;
        src_conn = src_node.out_connectors[cindex];
      }
    }

    if (edge.dst_connector) {
      var dst_node = g.node(edge.dst);

      var _cindex = -1;

      for (var _i3 = 0; _i3 < dst_node.in_connectors.length; _i3++) {
        if (dst_node.in_connectors[_i3].data.name == edge.dst_connector) {
          _cindex = _i3;
          break;
        }
      }

      if (_cindex >= 0) {
        gedge.points[gedge.points.length - 1].x = dst_node.in_connectors[_cindex].x;
        gedge.points[gedge.points.length - 1].y = dst_node.in_connectors[_cindex].y;
        dst_conn = dst_node.in_connectors[_cindex];
      }
    }

    var n = gedge.points.length - 1;
    if (src_conn !== null) gedge.points[0] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_3__.intersectRect)(src_conn, gedge.points[n]);
    if (dst_conn !== null) gedge.points[n] = (0,dagre_lib_util__WEBPACK_IMPORTED_MODULE_3__.intersectRect)(dst_conn, gedge.points[0]);
    if (gedge.points.length == 3 && gedge.points[0].x == gedge.points[n].x) gedge.points = [gedge.points[0], gedge.points[n]];
    var bb = (0,_utils_bounding_box__WEBPACK_IMPORTED_MODULE_10__.calculateEdgeBoundingBox)(gedge); // Convert from top-left to center

    bb.x += bb.width / 2.0;
    bb.y += bb.height / 2.0;
    edge.width = bb.width;
    edge.height = bb.height;
    edge.x = bb.x;
    edge.y = bb.y;
    gedge.width = bb.width;
    gedge.height = bb.height;
    gedge.x = bb.x;
    gedge.y = bb.y;
  });
  return g;
}

/***/ }),

/***/ "./src/renderer/renderer_elements.js":
/*!*******************************************!*\
  !*** ./src/renderer/renderer_elements.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDFGElement": () => (/* binding */ SDFGElement),
/* harmony export */   "SDFG": () => (/* binding */ SDFG),
/* harmony export */   "State": () => (/* binding */ State),
/* harmony export */   "SDFGNode": () => (/* binding */ SDFGNode),
/* harmony export */   "Edge": () => (/* binding */ Edge),
/* harmony export */   "Connector": () => (/* binding */ Connector),
/* harmony export */   "AccessNode": () => (/* binding */ AccessNode),
/* harmony export */   "ScopeNode": () => (/* binding */ ScopeNode),
/* harmony export */   "EntryNode": () => (/* binding */ EntryNode),
/* harmony export */   "ExitNode": () => (/* binding */ ExitNode),
/* harmony export */   "MapEntry": () => (/* binding */ MapEntry),
/* harmony export */   "MapExit": () => (/* binding */ MapExit),
/* harmony export */   "ConsumeEntry": () => (/* binding */ ConsumeEntry),
/* harmony export */   "ConsumeExit": () => (/* binding */ ConsumeExit),
/* harmony export */   "PipelineEntry": () => (/* binding */ PipelineEntry),
/* harmony export */   "PipelineExit": () => (/* binding */ PipelineExit),
/* harmony export */   "Tasklet": () => (/* binding */ Tasklet),
/* harmony export */   "Reduce": () => (/* binding */ Reduce),
/* harmony export */   "NestedSDFG": () => (/* binding */ NestedSDFG),
/* harmony export */   "LibraryNode": () => (/* binding */ LibraryNode),
/* harmony export */   "draw_sdfg": () => (/* binding */ draw_sdfg),
/* harmony export */   "offset_sdfg": () => (/* binding */ offset_sdfg),
/* harmony export */   "offset_state": () => (/* binding */ offset_state),
/* harmony export */   "drawAdaptiveText": () => (/* binding */ drawAdaptiveText),
/* harmony export */   "drawHexagon": () => (/* binding */ drawHexagon),
/* harmony export */   "drawOctagon": () => (/* binding */ drawOctagon),
/* harmony export */   "drawEllipse": () => (/* binding */ drawEllipse),
/* harmony export */   "drawArrow": () => (/* binding */ drawArrow),
/* harmony export */   "drawTrapezoid": () => (/* binding */ drawTrapezoid),
/* harmony export */   "ptLineDistance": () => (/* binding */ ptLineDistance),
/* harmony export */   "getTempColor": () => (/* binding */ getTempColor),
/* harmony export */   "SDFGElements": () => (/* binding */ SDFGElements)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/sdfg/display */ "./src/utils/sdfg/display.js");
/* harmony import */ var _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/sdfg/sdfg_utils */ "./src/utils/sdfg/sdfg_utils.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.



var SDFGElement = /*#__PURE__*/function () {
  // Parent ID is the state ID, if relevant
  function SDFGElement(elem, elem_id, sdfg) {
    var parent_id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SDFGElement);

    this.data = elem;
    this.id = elem_id;
    this.parent_id = parent_id;
    this.sdfg = sdfg;
    this.in_connectors = [];
    this.out_connectors = []; // Indicate special drawing conditions based on interactions.

    this.selected = false;
    this.highlighted = false;
    this.hovered = false;
    this.set_layout();
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(SDFGElement, [{
    key: "set_layout",
    value: function set_layout() {
      // dagre does not work well with properties, only fields
      this.width = this.data.layout.width;
      this.height = this.data.layout.height;
    }
  }, {
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {}
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
    }
  }, {
    key: "debug_draw",
    value: function debug_draw(renderer, ctx) {
      if (renderer.debug_draw) {
        // Print the center and bounding box in debug mode.
        ctx.beginPath();
        ctx.arc(this.x, this.y, 1, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'red';
        ctx.fill();
        ctx.strokeStyle = 'red';
        ctx.stroke();
        ctx.strokeRect(this.x - this.width / 2.0, this.y - this.height / 2.0, this.width, this.height);
      }
    }
  }, {
    key: "attributes",
    value: function attributes() {
      return this.data.attributes;
    }
  }, {
    key: "type",
    value: function type() {
      return this.data.type;
    }
  }, {
    key: "label",
    value: function label() {
      return this.data.label;
    }
  }, {
    key: "long_label",
    value: function long_label() {
      return this.label();
    } // Produces HTML for a hover-tooltip

  }, {
    key: "tooltip",
    value: function tooltip(container) {
      container.className = 'sdfvtooltip';
    }
  }, {
    key: "topleft",
    value: function topleft() {
      return {
        x: this.x - this.width / 2,
        y: this.y - this.height / 2
      };
    }
  }, {
    key: "strokeStyle",
    value: function strokeStyle() {
      var renderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (this.selected) {
        if (this.hovered) return this.getCssProperty(renderer, '--color-selected-hovered');else if (this.highlighted) return this.getCssProperty(renderer, '--color-selected-highlighted');else return this.getCssProperty(renderer, '--color-selected');
      } else {
        if (this.hovered) return this.getCssProperty(renderer, '--color-hovered');else if (this.highlighted) return this.getCssProperty(renderer, '--color-highlighted');
      }

      return this.getCssProperty(renderer, '--color-default');
    } // General bounding-box intersection function. Returns true iff point or rectangle intersect element.

  }, {
    key: "intersect",
    value: function intersect(x, y) {
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      if (w == 0 || h == 0) {
        // Point-element intersection
        return x >= this.x - this.width / 2.0 && x <= this.x + this.width / 2.0 && y >= this.y - this.height / 2.0 && y <= this.y + this.height / 2.0;
      } else {
        // Box-element intersection
        return x <= this.x + this.width / 2.0 && x + w >= this.x - this.width / 2.0 && y <= this.y + this.height / 2.0 && y + h >= this.y - this.height / 2.0;
      }
    }
  }, {
    key: "contained_in",
    value: function contained_in(x, y) {
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      if (w === 0 || h === 0) return false;
      var box_start_x = x;
      var box_end_x = x + w;
      var box_start_y = y;
      var box_end_y = y + h;
      var el_start_x = this.x - this.width / 2.0;
      var el_end_x = this.x + this.width / 2.0;
      var el_start_y = this.y - this.height / 2.0;
      var el_end_y = this.y + this.height / 2.0;
      return box_start_x <= el_start_x && box_end_x >= el_end_x && box_start_y <= el_start_y && box_end_y >= el_end_y;
    }
  }, {
    key: "getCssProperty",
    value: function getCssProperty(renderer, propertyName) {
      return window.getComputedStyle(renderer.canvas).getPropertyValue(propertyName).trim();
    }
  }]);

  return SDFGElement;
}(); // SDFG as an element (to support properties)

var SDFG = /*#__PURE__*/function (_SDFGElement) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(SDFG, _SDFGElement);

  var _super = _createSuper(SDFG);

  function SDFG(sdfg) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SDFG);

    return _super.call(this, sdfg, -1, sdfg);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(SDFG, [{
    key: "set_layout",
    value: function set_layout() {}
  }, {
    key: "label",
    value: function label() {
      return this.data.attributes.name;
    }
  }]);

  return SDFG;
}(SDFGElement);
var State = /*#__PURE__*/function (_SDFGElement2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(State, _SDFGElement2);

  var _super2 = _createSuper(State);

  function State() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, State);

    return _super2.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(State, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var topleft = this.topleft();
      var visible_rect = renderer.visible_rect;
      var clamped = {
        x: Math.max(topleft.x, visible_rect.x),
        y: Math.max(topleft.y, visible_rect.y),
        x2: Math.min(topleft.x + this.width, visible_rect.x + visible_rect.w),
        y2: Math.min(topleft.y + this.height, visible_rect.y + visible_rect.h)
      };
      clamped.w = clamped.x2 - clamped.x;
      clamped.h = clamped.y2 - clamped.y;
      if (!ctx.lod) clamped = {
        x: topleft.x,
        y: topleft.y,
        w: this.width,
        h: this.height
      };
      ctx.fillStyle = this.getCssProperty(renderer, '--state-background-color');
      ctx.fillRect(clamped.x, clamped.y, clamped.w, clamped.h);
      ctx.fillStyle = this.getCssProperty(renderer, '--state-foreground-color');
      if (visible_rect.x <= topleft.x && visible_rect.y <= topleft.y + LINEHEIGHT) ctx.fillText(this.label(), topleft.x, topleft.y + LINEHEIGHT); // If this state is selected or hovered

      if ((this.selected || this.highlighted || this.hovered) && (clamped.x === topleft.x || clamped.y === topleft.y || clamped.x2 === topleft.x + this.width || clamped.y2 === topleft.y + this.height)) {
        ctx.strokeStyle = this.strokeStyle(renderer);
        ctx.strokeRect(clamped.x, clamped.y, clamped.w, clamped.h);
      } // If collapsed, draw a "+" sign in the middle


      if (this.data.state.attributes.is_collapsed) {
        ctx.beginPath();
        ctx.moveTo(this.x, this.y - LINEHEIGHT);
        ctx.lineTo(this.x, this.y + LINEHEIGHT);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(this.x - LINEHEIGHT, this.y);
        ctx.lineTo(this.x + LINEHEIGHT, this.y);
        ctx.stroke();
      }

      ctx.strokeStyle = "black";
    }
  }, {
    key: "simple_draw",
    value: function simple_draw(renderer, ctx, mousepos) {
      var _this = this;

      // Fast drawing function for small states
      var topleft = this.topleft();
      ctx.fillStyle = this.getCssProperty(renderer, '--state-background-color');
      ctx.fillRect(topleft.x, topleft.y, this.width, this.height);
      ctx.fillStyle = this.getCssProperty(renderer, '--state-text-color');
      if (mousepos && this.intersect(mousepos.x, mousepos.y)) renderer.tooltip = function (c) {
        return _this.tooltip(c);
      }; // Draw state name in center without contents (does not look good)

      /*
      let FONTSIZE = Math.min(renderer.canvas_manager.points_per_pixel() * 16, 100);
      let label = this.label();
       let oldfont = ctx.font;
      ctx.font = FONTSIZE + "px Arial";
       let textmetrics = ctx.measureText(label);
      ctx.fillText(label, this.x - textmetrics.width / 2.0, this.y - this.height / 6.0 + FONTSIZE / 2.0);
       ctx.font = oldfont;
      */
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      var topleft = this.topleft();
      ctx.fillRect(topleft.x, topleft.y, this.width, this.height); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }, {
    key: "tooltip",
    value: function tooltip(container) {
      container.innerText = 'State: ' + this.label();
    }
  }, {
    key: "attributes",
    value: function attributes() {
      return this.data.state.attributes;
    }
  }, {
    key: "label",
    value: function label() {
      return this.data.state.label;
    }
  }, {
    key: "type",
    value: function type() {
      return this.data.state.type;
    }
  }]);

  return State;
}(SDFGElement);
var SDFGNode = /*#__PURE__*/function (_SDFGElement3) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(SDFGNode, _SDFGElement3);

  var _super3 = _createSuper(SDFGNode);

  function SDFGNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SDFGNode);

    return _super3.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(SDFGNode, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var fgstyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '--node-foreground-color';
      var bgstyle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '--node-background-color';
      var topleft = this.topleft();
      ctx.fillStyle = this.getCssProperty(renderer, bgstyle);
      ctx.fillRect(topleft.x, topleft.y, this.width, this.height);
      ctx.strokeStyle = this.strokeStyle(renderer);
      ctx.strokeRect(topleft.x, topleft.y, this.width, this.height);
      ctx.fillStyle = this.getCssProperty(renderer, fgstyle);
      var textw = ctx.measureText(this.label()).width;
      ctx.fillText(this.label(), this.x - textw / 2, this.y + LINEHEIGHT / 4);
    }
  }, {
    key: "simple_draw",
    value: function simple_draw(renderer, ctx, mousepos) {
      // Fast drawing function for small nodes
      var topleft = this.topleft();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
      ctx.fillRect(topleft.x, topleft.y, this.width, this.height);
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      var topleft = this.topleft();
      ctx.fillRect(topleft.x, topleft.y, this.width, this.height); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }, {
    key: "label",
    value: function label() {
      return this.data.node.label;
    }
  }, {
    key: "attributes",
    value: function attributes() {
      return this.data.node.attributes;
    }
  }, {
    key: "type",
    value: function type() {
      return this.data.node.type;
    }
  }, {
    key: "set_layout",
    value: function set_layout() {
      this.width = this.data.node.attributes.layout.width;
      this.height = this.data.node.attributes.layout.height;
    }
  }]);

  return SDFGNode;
}(SDFGElement);
var Edge = /*#__PURE__*/function (_SDFGElement4) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(Edge, _SDFGElement4);

  var _super4 = _createSuper(Edge);

  function Edge() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, Edge);

    return _super4.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(Edge, [{
    key: "create_arrow_line",
    value: function create_arrow_line(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.points[0].x, this.points[0].y);

      if (this.points.length === 2) {
        // Straight line can be drawn
        ctx.lineTo(this.points[1].x, this.points[1].y);
      } else {
        var i;

        for (i = 1; i < this.points.length - 2; i++) {
          var xm = (this.points[i].x + this.points[i + 1].x) / 2.0;
          var ym = (this.points[i].y + this.points[i + 1].y) / 2.0;
          ctx.quadraticCurveTo(this.points[i].x, this.points[i].y, xm, ym);
        }

        ctx.quadraticCurveTo(this.points[i].x, this.points[i].y, this.points[i + 1].x, this.points[i + 1].y);
      }
    }
  }, {
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var _this2 = this;

      var edge = this;
      this.create_arrow_line(ctx);
      var style = this.strokeStyle(renderer);
      if (this.hovered) renderer.tooltip = function (c) {
        return _this2.tooltip(c, renderer);
      };

      if (this.parent_id == null && style === this.getCssProperty(renderer, '--color-default')) {
        // Interstate edge
        style = this.getCssProperty(renderer, '--interstate-edge-color');
      }

      ctx.fillStyle = ctx.strokeStyle = style; // CR edges have dashed lines

      if (this.parent_id != null && this.data.attributes.wcr != null) ctx.setLineDash([2, 2]);else ctx.setLineDash([1, 0]);
      ctx.stroke();
      ctx.setLineDash([1, 0]);
      if (edge.points.length < 2) return; // Show anchor points for moving

      if (this.selected && renderer.mouse_mode === 'move') {
        var i;

        for (i = 1; i < this.points.length - 1; i++) {
          ctx.strokeRect(this.points[i].x - 5, this.points[i].y - 5, 8, 8);
        }
      }

      drawArrow(ctx, edge.points[edge.points.length - 2], edge.points[edge.points.length - 1], 3);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      this.create_arrow_line(ctx); // Save current style properties.

      var orig_stroke_style = ctx.strokeStyle;
      var orig_fill_style = ctx.fillStyle;
      var orig_line_cap = ctx.lineCap;
      var orig_line_width = ctx.lineWidth;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.lineWidth = orig_line_width + 1;
      ctx.fillStyle = color;
      ctx.strokeStyle = color;
      ctx.lineCap = 'round';
      ctx.stroke();
      if (this.points.length < 2) return;
      drawArrow(ctx, this.points[this.points.length - 2], this.points[this.points.length - 1], 3, 0, 2); // Restore previous stroke style, width, and opacity.

      ctx.strokeStyle = orig_stroke_style;
      ctx.fillStyle = orig_fill_style;
      ctx.lineCap = orig_line_cap;
      ctx.lineWidth = orig_line_width;
      ctx.globalAlpha = orig_alpha;
    }
  }, {
    key: "tooltip",
    value: function tooltip(container, renderer) {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(Edge.prototype), "tooltip", this).call(this, container);

      var dsettings = renderer.view_settings();
      var attr = this.attributes(); // Memlet

      if (attr.subset !== undefined) {
        if (attr.subset === null) {
          // Empty memlet
          container.style.display = 'none';
          return;
        }

        var contents = attr.data;
        contents += (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_property_to_string)(attr.subset, dsettings);
        if (attr.other_subset) contents += ' -> ' + (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_property_to_string)(attr.other_subset, dsettings);
        if (attr.wcr) contents += '<br /><b>CR: ' + (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_property_to_string)(attr.wcr, dsettings) + '</b>';
        var num_accesses = null;
        if (attr.volume) num_accesses = (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_property_to_string)(attr.volume, dsettings);else num_accesses = (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_property_to_string)(attr.num_accesses, dsettings);

        if (attr.dynamic) {
          if (num_accesses == 0 || num_accesses == -1) num_accesses = "<b>Dynamic (unbounded)</b>";else num_accesses = "<b>Dynamic</b> (up to " + num_accesses + ")";
        } else if (num_accesses == -1) {
          num_accesses = "<b>Dynamic (unbounded)</b>";
        }

        contents += '<br /><font style="font-size: 14px">Volume: ' + num_accesses + '</font>';
        container.innerHTML = contents;
      } else {
        // Interstate edge
        container.classList.add('sdfvtooltip--interstate-edge');
        container.innerText = this.label();
        if (!this.label()) container.style.display = 'none';
      }
    }
  }, {
    key: "set_layout",
    value: function set_layout() {// NOTE: Setting this.width/height will disrupt dagre in self-edges
    }
  }, {
    key: "label",
    value: function label() {
      // Memlet
      if (this.data.attributes.subset !== undefined) return "";
      return (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(Edge.prototype), "label", this).call(this);
    }
  }, {
    key: "intersect",
    value: function intersect(x, y) {
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      // First, check bounding box
      if (!(0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(Edge.prototype), "intersect", this).call(this, x, y, w, h)) return false; // Then (if point), check distance from line

      if (w == 0 || h == 0) {
        for (var i = 0; i < this.points.length - 1; i++) {
          var dist = ptLineDistance({
            x: x,
            y: y
          }, this.points[i], this.points[i + 1]);
          if (dist <= 5.0) return true;
        }

        return false;
      }

      return true;
    }
  }]);

  return Edge;
}(SDFGElement);
var Connector = /*#__PURE__*/function (_SDFGElement5) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(Connector, _SDFGElement5);

  var _super5 = _createSuper(Connector);

  function Connector() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, Connector);

    return _super5.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(Connector, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var _this3 = this;

      var scope_connector = this.data.name.startsWith("IN_") || this.data.name.startsWith("OUT_");
      var topleft = this.topleft();
      ctx.beginPath();
      drawEllipse(ctx, topleft.x, topleft.y, this.width, this.height);
      ctx.closePath();
      ctx.strokeStyle = this.strokeStyle(renderer);
      var fillColor;

      if (scope_connector) {
        var cname = this.data.name;
        if (cname.startsWith("IN_")) cname = cname.substring(3);else cname = cname.substring(4);
        ctx.lineWidth = 0.4;
        ctx.stroke();
        ctx.lineWidth = 1.0;
        fillColor = this.getCssProperty(renderer, '--connector-scoped-color');
      } else {
        ctx.stroke();
        fillColor = this.getCssProperty(renderer, '--connector-unscoped-color');
      }

      if (ctx.pdf) // PDFs do not support transparent fill colors
        fillColor = fillColor.substr(0, 7);
      ctx.fillStyle = fillColor;

      if (ctx.pdf) {
        // PDFs do not support stroke and fill on the same object
        ctx.beginPath();
        drawEllipse(ctx, topleft.x, topleft.y, this.width, this.height);
        ctx.closePath();
      }

      ctx.fill();
      if (this.strokeStyle(renderer) !== this.getCssProperty(renderer, '--color-default')) renderer.tooltip = function (c) {
        return _this3.tooltip(c);
      };
    }
  }, {
    key: "attributes",
    value: function attributes() {
      return {};
    }
  }, {
    key: "set_layout",
    value: function set_layout() {}
  }, {
    key: "label",
    value: function label() {
      return this.data.name;
    }
  }, {
    key: "tooltip",
    value: function tooltip(container) {
      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(Connector.prototype), "tooltip", this).call(this, container);

      container.classList.add('sdfvtooltip--connector');
      container.innerText = this.label();
    }
  }]);

  return Connector;
}(SDFGElement);
var AccessNode = /*#__PURE__*/function (_SDFGNode) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(AccessNode, _SDFGNode);

  var _super6 = _createSuper(AccessNode);

  function AccessNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, AccessNode);

    return _super6.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(AccessNode, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var topleft = this.topleft();
      ctx.beginPath();
      drawEllipse(ctx, topleft.x, topleft.y, this.width, this.height);
      ctx.closePath();
      ctx.strokeStyle = this.strokeStyle(renderer);
      var nodedesc = this.sdfg.attributes._arrays[this.data.node.attributes.data]; // Streams have dashed edges

      if (nodedesc && nodedesc.type === "Stream") {
        ctx.setLineDash([5, 3]);
      } else {
        ctx.setLineDash([1, 0]);
      } // Non-transient (external) data is thicker


      if (nodedesc && nodedesc.attributes["transient"] === false) {
        ctx.lineWidth = 3.0;
      } else {
        ctx.lineWidth = 1.0;
      }

      ctx.stroke();
      ctx.lineWidth = 1.0;
      ctx.setLineDash([1, 0]); // Views are colored like connectors

      if (nodedesc && nodedesc.type === "View") {
        ctx.fillStyle = this.getCssProperty(renderer, '--connector-unscoped-color');
      } else {
        ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
      }

      if (ctx.pdf) {
        // PDFs do not support stroke and fill on the same object
        ctx.beginPath();
        drawEllipse(ctx, topleft.x, topleft.y, this.width, this.height);
        ctx.closePath();
      }

      ctx.fill();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
      var textmetrics = ctx.measureText(this.label());
      ctx.fillText(this.label(), this.x - textmetrics.width / 2.0, this.y + LINEHEIGHT / 4.0);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      var topleft = this.topleft();
      ctx.beginPath();
      drawEllipse(ctx, topleft.x, topleft.y, this.width, this.height);
      ctx.closePath();
      ctx.fill(); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }]);

  return AccessNode;
}(SDFGNode);
var ScopeNode = /*#__PURE__*/function (_SDFGNode2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(ScopeNode, _SDFGNode2);

  var _super7 = _createSuper(ScopeNode);

  function ScopeNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, ScopeNode);

    return _super7.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(ScopeNode, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var _this4 = this;

      var draw_shape;

      if (this.data.node.attributes.is_collapsed) {
        draw_shape = function draw_shape() {
          return drawHexagon(ctx, _this4.x, _this4.y, _this4.width, _this4.height);
        };
      } else {
        draw_shape = function draw_shape() {
          return drawTrapezoid(ctx, _this4.topleft(), _this4, _this4.scopeend());
        };
      }

      ctx.strokeStyle = this.strokeStyle(renderer); // Consume scopes have dashed edges

      if (this.data.node.type.startsWith("Consume")) ctx.setLineDash([5, 3]);else ctx.setLineDash([1, 0]);
      draw_shape();
      ctx.stroke();
      ctx.setLineDash([1, 0]);
      ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
      if (ctx.pdf) // PDFs do not support stroke and fill on the same object
        draw_shape();
      ctx.fill();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
      var far_label = this.far_label();
      drawAdaptiveText(ctx, renderer, far_label, this.close_label(renderer), this.x, this.y, this.width, this.height, SCOPE_LOD);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      if (this.data.node.attributes.is_collapsed) drawHexagon(ctx, this.x, this.y, this.width, this.height);else drawTrapezoid(ctx, this.topleft(), this, this.scopeend());
      ctx.fill(); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }, {
    key: "far_label",
    value: function far_label() {
      var result = this.attributes().label;

      if (this.scopeend()) {
        // Get label from scope entry
        var entry = this.sdfg.nodes[this.parent_id].nodes[this.data.node.scope_entry];
        if (entry !== undefined) result = entry.attributes.label;else {
          result = this.data.node.label;
          var ind = result.indexOf('[');
          if (ind > 0) result = result.substring(0, ind);
        }
      }

      return result;
    }
  }, {
    key: "close_label",
    value: function close_label(renderer) {
      if (!renderer.inclusive_ranges) return this.label();
      var result = this.far_label();
      var attrs = this.attributes();

      if (this.scopeend()) {
        var entry = this.sdfg.nodes[this.parent_id].nodes[this.data.node.scope_entry];
        if (entry !== undefined) attrs = entry.attributes;else return this.label();
      }

      result += ' [';

      if (this instanceof ConsumeEntry || this instanceof ConsumeExit) {
        result += attrs.pe_index + '=' + '0..' + (attrs.num_pes - 1).toString();
      } else {
        for (var i = 0; i < attrs.params.length; ++i) {
          result += attrs.params[i] + '=';
          result += (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_6__.sdfg_range_elem_to_string)(attrs.range.ranges[i], renderer.view_settings()) + ', ';
        }

        result = result.substring(0, result.length - 2); // Remove trailing comma
      }

      return result + ']';
    }
  }]);

  return ScopeNode;
}(SDFGNode);
var EntryNode = /*#__PURE__*/function (_ScopeNode) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(EntryNode, _ScopeNode);

  var _super8 = _createSuper(EntryNode);

  function EntryNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, EntryNode);

    return _super8.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(EntryNode, [{
    key: "scopeend",
    value: function scopeend() {
      return false;
    }
  }]);

  return EntryNode;
}(ScopeNode);
var ExitNode = /*#__PURE__*/function (_ScopeNode2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(ExitNode, _ScopeNode2);

  var _super9 = _createSuper(ExitNode);

  function ExitNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, ExitNode);

    return _super9.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(ExitNode, [{
    key: "scopeend",
    value: function scopeend() {
      return true;
    }
  }]);

  return ExitNode;
}(ScopeNode);
var MapEntry = /*#__PURE__*/function (_EntryNode) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(MapEntry, _EntryNode);

  var _super10 = _createSuper(MapEntry);

  function MapEntry() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, MapEntry);

    return _super10.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MapEntry, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([1, 0]);
    }
  }]);

  return MapEntry;
}(EntryNode);
var MapExit = /*#__PURE__*/function (_ExitNode) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(MapExit, _ExitNode);

  var _super11 = _createSuper(MapExit);

  function MapExit() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, MapExit);

    return _super11.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MapExit, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([1, 0]);
    }
  }]);

  return MapExit;
}(ExitNode);
var ConsumeEntry = /*#__PURE__*/function (_EntryNode2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(ConsumeEntry, _EntryNode2);

  var _super12 = _createSuper(ConsumeEntry);

  function ConsumeEntry() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, ConsumeEntry);

    return _super12.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(ConsumeEntry, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([5, 3]);
    }
  }]);

  return ConsumeEntry;
}(EntryNode);
var ConsumeExit = /*#__PURE__*/function (_ExitNode2) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(ConsumeExit, _ExitNode2);

  var _super13 = _createSuper(ConsumeExit);

  function ConsumeExit() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, ConsumeExit);

    return _super13.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(ConsumeExit, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([5, 3]);
    }
  }]);

  return ConsumeExit;
}(ExitNode);
var PipelineEntry = /*#__PURE__*/function (_EntryNode3) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(PipelineEntry, _EntryNode3);

  var _super14 = _createSuper(PipelineEntry);

  function PipelineEntry() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, PipelineEntry);

    return _super14.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(PipelineEntry, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([10, 3]);
    }
  }]);

  return PipelineEntry;
}(EntryNode);
var PipelineExit = /*#__PURE__*/function (_ExitNode3) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(PipelineExit, _ExitNode3);

  var _super15 = _createSuper(PipelineExit);

  function PipelineExit() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, PipelineExit);

    return _super15.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(PipelineExit, [{
    key: "stroketype",
    value: function stroketype(ctx) {
      ctx.setLineDash([10, 3]);
    }
  }]);

  return PipelineExit;
}(ExitNode);
var Tasklet = /*#__PURE__*/function (_SDFGNode3) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(Tasklet, _SDFGNode3);

  var _super16 = _createSuper(Tasklet);

  function Tasklet() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, Tasklet);

    return _super16.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(Tasklet, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var topleft = this.topleft();
      drawOctagon(ctx, topleft, this.width, this.height);
      ctx.strokeStyle = this.strokeStyle(renderer);
      ctx.stroke();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
      if (ctx.pdf) // PDFs do not support stroke and fill on the same object
        drawOctagon(ctx, topleft, this.width, this.height);
      ctx.fill();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
      var ppp = renderer.canvas_manager.points_per_pixel();

      if (!ctx.lod || ppp < TASKLET_LOD) {
        // If we are close to the tasklet, show its contents
        var code = this.attributes().code.string_data;
        var lines = code.split('\n');
        var maxline = 0,
            maxline_len = 0;

        for (var i = 0; i < lines.length; i++) {
          if (lines[i].length > maxline_len) {
            maxline = i;
            maxline_len = lines[i].length;
          }
        }

        var oldfont = ctx.font;
        ctx.font = "10px courier new";

        var _textmetrics = ctx.measureText(lines[maxline]); // Fit font size to 80% height and width of tasklet


        var height = lines.length * LINEHEIGHT * 1.05;
        var width = _textmetrics.width;
        var TASKLET_WRATIO = 0.9,
            TASKLET_HRATIO = 0.5;
        var hr = height / (this.height * TASKLET_HRATIO);
        var wr = width / (this.width * TASKLET_WRATIO);
        var FONTSIZE = Math.min(10 / hr, 10 / wr);
        var text_yoffset = FONTSIZE / 4;
        ctx.font = FONTSIZE + "px courier new"; // Set the start offset such that the middle row of the text is in this.y

        var y = this.y + text_yoffset - (lines.length - 1) / 2 * FONTSIZE * 1.05;

        for (var _i = 0; _i < lines.length; _i++) {
          ctx.fillText(lines[_i], this.x - this.width * TASKLET_WRATIO / 2.0, y + _i * FONTSIZE * 1.05);
        }

        ctx.font = oldfont;
        return;
      }

      var textmetrics = ctx.measureText(this.label());
      ctx.fillText(this.label(), this.x - textmetrics.width / 2.0, this.y + LINEHEIGHT / 2.0);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      drawOctagon(ctx, this.topleft(), this.width, this.height);
      ctx.fill(); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }]);

  return Tasklet;
}(SDFGNode);
var Reduce = /*#__PURE__*/function (_SDFGNode4) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(Reduce, _SDFGNode4);

  var _super17 = _createSuper(Reduce);

  function Reduce() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, Reduce);

    return _super17.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(Reduce, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      var _this5 = this;

      var topleft = this.topleft();

      var draw_shape = function draw_shape() {
        ctx.beginPath();
        ctx.moveTo(topleft.x, topleft.y);
        ctx.lineTo(topleft.x + _this5.width / 2, topleft.y + _this5.height);
        ctx.lineTo(topleft.x + _this5.width, topleft.y);
        ctx.lineTo(topleft.x, topleft.y);
        ctx.closePath();
      };

      ctx.strokeStyle = this.strokeStyle(renderer);
      draw_shape();
      ctx.stroke();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
      if (ctx.pdf) // PDFs do not support stroke and fill on the same object
        draw_shape();
      ctx.fill();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
      var far_label = this.label().substring(4, this.label().indexOf(','));
      drawAdaptiveText(ctx, renderer, far_label, this.label(), this.x, this.y - this.height * 0.2, this.width, this.height, SCOPE_LOD);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;
      var topleft = this.topleft();
      ctx.beginPath();
      ctx.moveTo(topleft.x, topleft.y);
      ctx.lineTo(topleft.x + this.width / 2, topleft.y + this.height);
      ctx.lineTo(topleft.x + this.width, topleft.y);
      ctx.lineTo(topleft.x, topleft.y);
      ctx.closePath();
      ctx.fill(); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }]);

  return Reduce;
}(SDFGNode);
var NestedSDFG = /*#__PURE__*/function (_SDFGNode5) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(NestedSDFG, _SDFGNode5);

  var _super18 = _createSuper(NestedSDFG);

  function NestedSDFG() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, NestedSDFG);

    return _super18.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(NestedSDFG, [{
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      if (this.data.node.attributes.is_collapsed) {
        var topleft = this.topleft();
        drawOctagon(ctx, topleft, this.width, this.height);
        ctx.strokeStyle = this.strokeStyle(renderer);
        ctx.stroke();
        drawOctagon(ctx, {
          x: topleft.x + 2.5,
          y: topleft.y + 2.5
        }, this.width - 5, this.height - 5);
        ctx.strokeStyle = this.strokeStyle(renderer);
        ctx.stroke();
        ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');
        if (ctx.pdf) // PDFs do not support stroke and fill on the same object
          drawOctagon(ctx, {
            x: topleft.x + 2.5,
            y: topleft.y + 2.5
          }, this.width - 5, this.height - 5);
        ctx.fill();
        ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
        var label = this.data.node.attributes.label;
        var textmetrics = ctx.measureText(label);
        ctx.fillText(label, this.x - textmetrics.width / 2.0, this.y + LINEHEIGHT / 4.0);
        return;
      } // Draw square around nested SDFG


      (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(NestedSDFG.prototype), "draw", this).call(this, renderer, ctx, mousepos, '--nested-sdfg-foreground-color', '--nested-sdfg-background-color'); // Draw nested graph


      draw_sdfg(renderer, ctx, this.data.graph, mousepos);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';

      if (this.data.node.attributes.is_collapsed) {
        // Save the current style properties.
        var orig_fill_style = ctx.fillStyle;
        var orig_alpha = ctx.globalAlpha;
        ctx.globalAlpha = alpha;
        ctx.fillStyle = color;
        drawOctagon(ctx, this.topleft(), this.width, this.height);
        ctx.fill(); // Restore the previous style properties.

        ctx.fillStyle = orig_fill_style;
        ctx.globalAlpha = orig_alpha;
      } else {
        (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(NestedSDFG.prototype), "shade", this).call(this, renderer, ctx, color, alpha);
      }
    }
  }, {
    key: "set_layout",
    value: function set_layout() {
      if (this.data.node.attributes.is_collapsed) {
        var labelsize = this.data.node.attributes.label.length * LINEHEIGHT * 0.8;
        var inconnsize = 2 * LINEHEIGHT * Object.keys(this.data.node.attributes.in_connectors).length - LINEHEIGHT;
        var outconnsize = 2 * LINEHEIGHT * Object.keys(this.data.node.attributes.out_connectors).length - LINEHEIGHT;
        var maxwidth = Math.max(labelsize, inconnsize, outconnsize);
        var maxheight = 2 * LINEHEIGHT;
        maxheight += 4 * LINEHEIGHT;
        var size = {
          width: maxwidth,
          height: maxheight
        };
        size.width += 2.0 * (size.height / 3.0);
        size.height /= 1.75;
        this.width = size.width;
        this.height = size.height;
      } else {
        this.width = this.data.node.attributes.layout.width;
        this.height = this.data.node.attributes.layout.height;
      }
    }
  }, {
    key: "label",
    value: function label() {
      return "";
    }
  }]);

  return NestedSDFG;
}(SDFGNode);
var LibraryNode = /*#__PURE__*/function (_SDFGNode6) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(LibraryNode, _SDFGNode6);

  var _super19 = _createSuper(LibraryNode);

  function LibraryNode() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, LibraryNode);

    return _super19.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(LibraryNode, [{
    key: "_path",
    value: function _path(ctx) {
      var hexseg = this.height / 6.0;
      var topleft = this.topleft();
      ctx.beginPath();
      ctx.moveTo(topleft.x, topleft.y);
      ctx.lineTo(topleft.x + this.width - hexseg, topleft.y);
      ctx.lineTo(topleft.x + this.width, topleft.y + hexseg);
      ctx.lineTo(topleft.x + this.width, topleft.y + this.height);
      ctx.lineTo(topleft.x, topleft.y + this.height);
      ctx.closePath();
    }
  }, {
    key: "_path2",
    value: function _path2(ctx) {
      var hexseg = this.height / 6.0;
      var topleft = this.topleft();
      ctx.beginPath();
      ctx.moveTo(topleft.x + this.width - hexseg, topleft.y);
      ctx.lineTo(topleft.x + this.width - hexseg, topleft.y + hexseg);
      ctx.lineTo(topleft.x + this.width, topleft.y + hexseg);
    }
  }, {
    key: "draw",
    value: function draw(renderer, ctx, mousepos) {
      ctx.fillStyle = this.getCssProperty(renderer, '--node-background-color');

      this._path(ctx);

      ctx.fill();
      ctx.strokeStyle = this.strokeStyle(renderer);

      this._path(ctx);

      ctx.stroke();

      this._path2(ctx);

      ctx.stroke();
      ctx.fillStyle = this.getCssProperty(renderer, '--node-foreground-color');
      var textw = ctx.measureText(this.label()).width;
      ctx.fillText(this.label(), this.x - textw / 2, this.y + LINEHEIGHT / 4);
    }
  }, {
    key: "shade",
    value: function shade(renderer, ctx, color) {
      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0.6';
      // Save the current style properties.
      var orig_fill_style = ctx.fillStyle;
      var orig_alpha = ctx.globalAlpha;
      ctx.globalAlpha = alpha;
      ctx.fillStyle = color;

      this._path(ctx);

      ctx.fill(); // Restore the previous style properties.

      ctx.fillStyle = orig_fill_style;
      ctx.globalAlpha = orig_alpha;
    }
  }]);

  return LibraryNode;
}(SDFGNode); //////////////////////////////////////////////////////
// Draw an entire SDFG

function draw_sdfg(renderer, ctx, sdfg_dagre, mousepos) {
  var ppp = renderer.canvas_manager.points_per_pixel(); // Render state machine

  var g = sdfg_dagre;
  if (!ctx.lod || ppp < EDGE_LOD) g.edges().forEach(function (e) {
    var edge = g.edge(e);
    edge.draw(renderer, ctx, mousepos);
    edge.debug_draw(renderer, ctx);
  });
  var visible_rect = renderer.visible_rect; // Render each visible state's contents

  g.nodes().forEach(function (v) {
    var node = g.node(v);

    if (ctx.lod && (ppp >= STATE_LOD || node.width / ppp < STATE_LOD)) {
      node.simple_draw(renderer, ctx, mousepos);
      node.debug_draw(renderer, ctx);
      return;
    } // Skip invisible states


    if (ctx.lod && !node.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;
    node.draw(renderer, ctx, mousepos);
    node.debug_draw(renderer, ctx);
    var ng = node.data.graph;

    if (!node.data.state.attributes.is_collapsed && ng) {
      ng.nodes().forEach(function (v) {
        var n = ng.node(v);
        if (ctx.lod && !n.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;

        if (ctx.lod && ppp >= NODE_LOD) {
          n.simple_draw(renderer, ctx, mousepos);
          n.debug_draw(renderer, ctx);
          return;
        }

        n.draw(renderer, ctx, mousepos);
        n.debug_draw(renderer, ctx);
        n.in_connectors.forEach(function (c) {
          c.draw(renderer, ctx, mousepos);
          c.debug_draw(renderer, ctx);
        });
        n.out_connectors.forEach(function (c) {
          c.draw(renderer, ctx, mousepos);
          c.debug_draw(renderer, ctx);
        });
      });
      if (ctx.lod && ppp >= EDGE_LOD) return;
      ng.edges().forEach(function (e) {
        var edge = ng.edge(e);
        if (ctx.lod && !edge.intersect(visible_rect.x, visible_rect.y, visible_rect.w, visible_rect.h)) return;
        edge.draw(renderer, ctx, mousepos);
        edge.debug_draw(renderer, ctx);
      });
    }
  });
} // Translate an SDFG by a given offset

function offset_sdfg(sdfg, sdfg_graph, offset) {
  sdfg.nodes.forEach(function (state, id) {
    var g = sdfg_graph.node(id);
    g.x += offset.x;
    g.y += offset.y;
    if (!state.attributes.is_collapsed) offset_state(state, g, offset);
  });
  sdfg.edges.forEach(function (e, eid) {
    var edge = sdfg_graph.edge(e.src, e.dst);
    edge.x += offset.x;
    edge.y += offset.y;
    edge.points.forEach(function (p) {
      p.x += offset.x;
      p.y += offset.y;
    });
  });
} // Translate nodes, edges, and connectors in a given SDFG state by an offset

function offset_state(state, state_graph, offset) {
  var drawn_nodes = new Set();
  state.nodes.forEach(function (n, nid) {
    var node = state_graph.data.graph.node(nid);
    if (!node) return;
    drawn_nodes.add(nid.toString());
    node.x += offset.x;
    node.y += offset.y;
    node.in_connectors.forEach(function (c) {
      c.x += offset.x;
      c.y += offset.y;
    });
    node.out_connectors.forEach(function (c) {
      c.x += offset.x;
      c.y += offset.y;
    });
    if (node.data.node.type === 'NestedSDFG') offset_sdfg(node.data.node.attributes.sdfg, node.data.graph, offset);
  });
  state.edges.forEach(function (e, eid) {
    e = (0,_utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_7__.check_and_redirect_edge)(e, drawn_nodes, state);
    if (!e) return;
    var edge = state_graph.data.graph.edge(e.src, e.dst, eid);
    if (!edge) return;
    edge.x += offset.x;
    edge.y += offset.y;
    edge.points.forEach(function (p) {
      p.x += offset.x;
      p.y += offset.y;
    });
  });
} ///////////////////////////////////////////////////////

function drawAdaptiveText(ctx, renderer, far_text, close_text, x, y, w, h, ppp_thres) {
  var max_font_size = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 50;
  var font_multiplier = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 16;
  var ppp = renderer.canvas_manager.points_per_pixel();
  var label = close_text;
  var FONTSIZE = Math.min(ppp * font_multiplier, max_font_size);
  var yoffset = LINEHEIGHT / 2.0;
  var oldfont = ctx.font;

  if (ctx.lod && ppp >= ppp_thres) {
    // Far text
    ctx.font = FONTSIZE + "px sans-serif";
    label = far_text;
    yoffset = FONTSIZE / 2.0 - h / 6.0;
  }

  var textmetrics = ctx.measureText(label);
  var tw = textmetrics.width;

  if (ctx.lod && ppp >= ppp_thres && tw > w) {
    FONTSIZE = FONTSIZE / (tw / w);
    ctx.font = FONTSIZE + "px sans-serif";
    yoffset = FONTSIZE / 2.0 - h / 6.0;
    tw = w;
  }

  ctx.fillText(label, x - tw / 2.0, y + yoffset);
  if (ctx.lod && ppp >= ppp_thres) ctx.font = oldfont;
}
function drawHexagon(ctx, x, y, w, h, offset) {
  var topleft = {
    x: x - w / 2.0,
    y: y - h / 2.0
  };
  var hexseg = h / 3.0;
  ctx.beginPath();
  ctx.moveTo(topleft.x, y);
  ctx.lineTo(topleft.x + hexseg, topleft.y);
  ctx.lineTo(topleft.x + w - hexseg, topleft.y);
  ctx.lineTo(topleft.x + w, y);
  ctx.lineTo(topleft.x + w - hexseg, topleft.y + h);
  ctx.lineTo(topleft.x + hexseg, topleft.y + h);
  ctx.lineTo(topleft.x, y);
  ctx.closePath();
}
function drawOctagon(ctx, topleft, width, height) {
  var octseg = height / 3.0;
  ctx.beginPath();
  ctx.moveTo(topleft.x, topleft.y + octseg);
  ctx.lineTo(topleft.x + octseg, topleft.y);
  ctx.lineTo(topleft.x + width - octseg, topleft.y);
  ctx.lineTo(topleft.x + width, topleft.y + octseg);
  ctx.lineTo(topleft.x + width, topleft.y + 2 * octseg);
  ctx.lineTo(topleft.x + width - octseg, topleft.y + height);
  ctx.lineTo(topleft.x + octseg, topleft.y + height);
  ctx.lineTo(topleft.x, topleft.y + 2 * octseg);
  ctx.lineTo(topleft.x, topleft.y + 1 * octseg);
  ctx.closePath();
} // Adapted from https://stackoverflow.com/a/2173084/6489142

function drawEllipse(ctx, x, y, w, h) {
  var kappa = .5522848,
      ox = w / 2 * kappa,
      // control point offset horizontal
  oy = h / 2 * kappa,
      // control point offset vertical
  xe = x + w,
      // x-end
  ye = y + h,
      // y-end
  xm = x + w / 2,
      // x-middle
  ym = y + h / 2; // y-middle

  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
}
function drawArrow(ctx, p1, p2, size) {
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  ctx.save(); // Rotate the context to point along the path

  var dx = p2.x - p1.x;
  var dy = p2.y - p1.y;
  ctx.translate(p2.x, p2.y);
  ctx.rotate(Math.atan2(dy, dx)); // arrowhead

  ctx.beginPath();
  ctx.moveTo(0 + padding + offset, 0);
  ctx.lineTo(-2 * size - padding - offset, -(size + padding));
  ctx.lineTo(-2 * size - padding - offset, size + padding);
  ctx.closePath();
  ctx.fill();
  ctx.restore();
}
function drawTrapezoid(ctx, topleft, node) {
  var inverted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  ctx.beginPath();

  if (inverted) {
    ctx.moveTo(topleft.x, topleft.y);
    ctx.lineTo(topleft.x + node.width, topleft.y);
    ctx.lineTo(topleft.x + node.width - node.height, topleft.y + node.height);
    ctx.lineTo(topleft.x + node.height, topleft.y + node.height);
    ctx.lineTo(topleft.x, topleft.y);
  } else {
    ctx.moveTo(topleft.x, topleft.y + node.height);
    ctx.lineTo(topleft.x + node.width, topleft.y + node.height);
    ctx.lineTo(topleft.x + node.width - node.height, topleft.y);
    ctx.lineTo(topleft.x + node.height, topleft.y);
    ctx.lineTo(topleft.x, topleft.y + node.height);
  }

  ctx.closePath();
} // Returns the distance from point p to line defined by two points (line1, line2)

function ptLineDistance(p, line1, line2) {
  var dx = line2.x - line1.x;
  var dy = line2.y - line1.y;
  var res = dy * p.x - dx * p.y + line2.x * line1.y - line2.y * line1.x;
  return Math.abs(res) / Math.sqrt(dy * dy + dx * dx);
}
/**
 * Get the color on a green-red temperature scale based on a fractional value.
 * @param {Number} val Value between 0 and 1, 0 = green, .5 = yellow, 1 = red
 * @returns            HSL color string
 */

function getTempColor(val) {
  if (val < 0) val = 0;
  if (val > 1) val = 1;
  var hue = ((1 - val) * 120).toString(10);
  return 'hsl(' + hue + ',100%,50%)';
}
var SDFGElements = {
  SDFGElement: SDFGElement,
  SDFG: SDFG,
  State: State,
  SDFGNode: SDFGNode,
  Edge: Edge,
  Connector: Connector,
  AccessNode: AccessNode,
  ScopeNode: ScopeNode,
  EntryNode: EntryNode,
  ExitNode: ExitNode,
  MapEntry: MapEntry,
  MapExit: MapExit,
  ConsumeEntry: ConsumeEntry,
  ConsumeExit: ConsumeExit,
  Tasklet: Tasklet,
  Reduce: Reduce,
  PipelineEntry: PipelineEntry,
  PipelineExit: PipelineExit,
  NestedSDFG: NestedSDFG,
  LibraryNode: LibraryNode
}; // TODO remove this global variable assignment once DIODE is removed/no longer relies on it

Object.assign(globalThis, SDFGElements);

/***/ }),

/***/ "./src/sdfv.js":
/*!*********************!*\
  !*** ./src/sdfv.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "globals": () => (/* binding */ globals),
/* harmony export */   "fill_info": () => (/* binding */ fill_info)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/sdfg/json_serializer */ "./src/utils/sdfg/json_serializer.ts");
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js");
/* harmony import */ var _renderer_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer/renderer */ "./src/renderer/renderer.js");
/* harmony import */ var _overlays_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlays/generic_sdfg_overlay */ "./src/overlays/generic_sdfg_overlay.js");
/* harmony import */ var _sdfv_ui_handlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdfv_ui_handlers */ "./src/sdfv_ui_handlers.js");
/* harmony import */ var _utils_sanitization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/sanitization */ "./src/utils/sanitization.ts");
/* harmony import */ var _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./renderer/renderer_elements */ "./src/renderer/renderer_elements.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/sdfg/display */ "./src/utils/sdfg/display.js");
/* harmony import */ var _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/sdfg/sdfg_utils */ "./src/utils/sdfg/sdfg_utils.js");
/* harmony import */ var _utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/sdfg/traversal */ "./src/utils/sdfg/traversal.js");
/* harmony import */ var _overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./overlays/runtime_micro_seconds_overlay */ "./src/overlays/runtime_micro_seconds_overlay.js");
/* harmony import */ var _overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./overlays/memory_volume_overlay */ "./src/overlays/memory_volume_overlay.js");
/* harmony import */ var _overlays_static_flops_overlay__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./overlays/static_flops_overlay */ "./src/overlays/static_flops_overlay.js");


var _templateObject;

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.














var $ = globalThis.$;
var fr;
var file = null;
var instrumentation_file = null; // TODO: This is a workaround to utilize components of this module in non-ts
// components of the vscode extension. This is subject to change when these
// components are moved over from js to ts.

var globals = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_7__.assignIfNotExists)(
/** @type {{}} */
globalThis, {
  daceRenderer: null,
  daceUIHandlers: _sdfv_ui_handlers__WEBPACK_IMPORTED_MODULE_4__.SDFVUIHandlers,
  daceInitSDFV: init_sdfv,
  daceParseSDFG: _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__.parse_sdfg,
  daceStringifySDFG: _utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__.stringify_sdfg,
  daceFindInGraph: find_in_graph,
  daceSDFGPropertyToString: _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_8__.sdfg_property_to_string,
  daceSDFGRangeElemToString: _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_8__.sdfg_range_elem_to_string,
  daceGetUUIDGraphElement: _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_9__.get_uuid_graph_element,
  daceFindGraphElementByUUID: _utils_sdfg_sdfg_utils__WEBPACK_IMPORTED_MODULE_9__.find_graph_element_by_uuid,
  daceTraverseSDFGScopes: _utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_10__.traverse_sdfg_scopes,
  daceSDFGTypeclassToString: _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_8__.sdfg_typeclass_to_string,
  daceStringToSDFGTypeclass: _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_8__.string_to_sdfg_typeclass,
  daceSDFGRenderer: _renderer_renderer__WEBPACK_IMPORTED_MODULE_2__.SDFGRenderer,
  daceSDFGElements: _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_6__.SDFGElements,
  daceGenericSDFGOverlay: _overlays_generic_sdfg_overlay__WEBPACK_IMPORTED_MODULE_3__.GenericSdfgOverlay,
  daceMemoryVolumeOverlay: _overlays_memory_volume_overlay__WEBPACK_IMPORTED_MODULE_12__.MemoryVolumeOverlay,
  daceRuntimeMicroSecondsOverlay: _overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_11__.RuntimeMicroSecondsOverlay,
  daceStaticFlopsOverlay: _overlays_static_flops_overlay__WEBPACK_IMPORTED_MODULE_13__.StaticFlopsOverlay,
  daceMouseEvent: mouse_event
});

if (document.currentScript.hasAttribute('data-sdfg-json')) {
  init_sdfv((0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__.parse_sdfg)(document.currentScript.getAttribute('data-sdfg-json')));
} else {
  var url = getParameterByName('url');
  if (url) load_sdfg_from_url(url);else init_sdfv(null);
}

function init_sdfv(sdfg) {
  var user_transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var debug_draw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  $('#sdfg-file-input').change(function (e) {
    if (e.target.files.length < 1) return;
    file = e.target.files[0];
    reload_file();
  });
  $('#menuclose').click(function () {
    return close_menu();
  });
  $('#reload').click(function () {
    reload_file();
  });
  $('#instrumentation-report-file-input').change(function (e) {
    if (e.target.files.length < 1) return;
    instrumentation_file = e.target.files[0];
    load_instrumentation_report();
  });
  $('#outline').click(function () {
    if (globals.daceRenderer) setTimeout(function () {
      return outline(globals.daceRenderer, globals.daceRenderer.graph);
    }, 1);
  });
  $('#search-btn').click(function () {
    if (globals.daceRenderer) setTimeout(function () {
      find_in_graph(globals.daceRenderer, globals.daceRenderer.graph, $('#search').val(), $('#search-case')[0].checked);
    }, 1);
  });
  $('#search').on('keydown', function (e) {
    if (e.key == 'Enter' || e.which == 13) {
      start_find_in_graph();
      e.preventDefault();
    }
  });
  var mode_buttons = null;
  var pan_btn = document.getElementById("pan-btn");
  var move_btn = document.getElementById("move-btn");
  var select_btn = document.getElementById("select-btn");
  var add_btns = [];
  add_btns.push(document.getElementById('elem_map'));
  add_btns.push(document.getElementById('elem_consume'));
  add_btns.push(document.getElementById('elem_tasklet'));
  add_btns.push(document.getElementById('elem_nested_sdfg'));
  add_btns.push(document.getElementById('elem_access_node'));
  add_btns.push(document.getElementById('elem_stream'));
  add_btns.push(document.getElementById('elem_state'));
  if (pan_btn) mode_buttons = {
    pan: pan_btn,
    move: move_btn,
    select: select_btn,
    add_btns: add_btns
  };
  if (sdfg !== null) globals.daceRenderer = new _renderer_renderer__WEBPACK_IMPORTED_MODULE_2__.SDFGRenderer(sdfg, document.getElementById('contents'), mouse_event, user_transform, debug_draw, null, mode_buttons);
}

function start_find_in_graph() {
  if (globals.daceRenderer) setTimeout(function () {
    find_in_graph(globals.daceRenderer, globals.daceRenderer.graph, $('#search').val(), $('#search-case')[0].checked);
  }, 1);
}

function reload_file() {
  if (!file) return;
  fr = new FileReader();
  fr.onload = file_read_complete;
  fr.readAsText(file);
}

function file_read_complete() {
  var _globals$daceRenderer;

  var sdfg = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__.parse_sdfg)(fr.result);
  (_globals$daceRenderer = globals.daceRenderer) === null || _globals$daceRenderer === void 0 ? void 0 : _globals$daceRenderer.destroy();
  globals.daceRenderer = new _renderer_renderer__WEBPACK_IMPORTED_MODULE_2__.SDFGRenderer(sdfg, document.getElementById('contents'), mouse_event);
  close_menu();
}

function load_instrumentation_report() {
  if (!instrumentation_file) return;
  fr = new FileReader();
  fr.onload = load_instrumentation_report_callback;
  fr.readAsText(instrumentation_file);
}

function load_instrumentation_report_callback() {
  instrumentation_report_read_complete(JSON.parse(fr.result));
}
/**
 * Get the min/max values of an array.
 * This is more stable than Math.min/max for large arrays, since Math.min/max
 * is recursive and causes a too high stack-length with long arrays.
 */


function get_minmax(arr) {
  var max = -Number.MAX_VALUE;
  var min = Number.MAX_VALUE;
  arr.forEach(function (val) {
    if (val > max) max = val;
    if (val < min) min = val;
  });
  return [min, max];
}

function instrumentation_report_read_complete(report) {
  var _globals$daceRenderer2;

  var runtime_map = {};

  if (report.traceEvents && (_globals$daceRenderer2 = globals.daceRenderer) !== null && _globals$daceRenderer2 !== void 0 && _globals$daceRenderer2.sdfg) {
    var _iterator = _createForOfIteratorHelper(report.traceEvents),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var event = _step.value;

        if (event.ph === 'X') {
          var uuid = event.args.sdfg_id + '/';

          if (event.args.state_id !== undefined) {
            uuid += event.args.state_id + '/';
            if (event.args.id !== undefined) uuid += event.args.id + '/-1';else uuid += '-1/-1';
          } else {
            uuid += '-1/-1/-1';
          }

          if (runtime_map[uuid] !== undefined) runtime_map[uuid].push(event.dur);else runtime_map[uuid] = [event.dur];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    for (var key in runtime_map) {
      var values = runtime_map[key];
      var minmax = get_minmax(values);
      var min = minmax[0];
      var max = minmax[1];
      var runtime_summary = {
        'min': min,
        'max': max,
        'mean': (0,mathjs__WEBPACK_IMPORTED_MODULE_14__.mean)(values),
        'med': (0,mathjs__WEBPACK_IMPORTED_MODULE_14__.median)(values),
        'count': values.length
      };
      runtime_map[key] = runtime_summary;
    }

    var renderer = globals.daceRenderer;

    if (renderer.overlay_manager) {
      if (!renderer.overlay_manager.is_overlay_active(_overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_11__.RuntimeMicroSecondsOverlay)) {
        renderer.overlay_manager.register_overlay(_overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_11__.RuntimeMicroSecondsOverlay);
      }

      var ol = renderer.overlay_manager.get_overlay(_overlays_runtime_micro_seconds_overlay__WEBPACK_IMPORTED_MODULE_11__.RuntimeMicroSecondsOverlay);

      if (ol) {
        ol.runtime_map = runtime_map;
        ol.refresh();
      }
    }
  }
} // https://stackoverflow.com/a/901144/6489142


function getParameterByName(name) {
  var url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

function load_sdfg_from_url(url) {
  var request = new XMLHttpRequest();
  request.responseType = 'text'; // Will be parsed as JSON by parse_sdfg

  request.onload = function () {
    if (request.status == 200) {
      var sdfg = (0,_utils_sdfg_json_serializer__WEBPACK_IMPORTED_MODULE_1__.parse_sdfg)(request.response);
      if (globals.daceRenderer) globals.daceRenderer.destroy();
      init_sdfv(sdfg);
    } else {
      alert("Failed to load SDFG from URL");
      init_sdfv(null);
    }
  };

  request.onerror = function () {
    alert("Failed to load SDFG from URL: " + request.status);
    init_sdfv(null);
  };

  request.open('GET', url + (/\?/.test(url) ? "&" : "?") + new Date().getTime(), true);
  request.send();
}

function find_recursive(graph, query, results, case_sensitive) {
  var _iterator2 = _createForOfIteratorHelper(graph.nodes()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var nodeid = _step2.value;
      var node = graph.node(nodeid);
      var label = node.label();
      if (!case_sensitive) label = label.toLowerCase();
      if (label.indexOf(query) !== -1) results.push(node); // Enter states or nested SDFGs recursively

      if (node.data.graph) find_recursive(node.data.graph, query, results, case_sensitive);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = _createForOfIteratorHelper(graph.edges()),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var edgeid = _step3.value;
      var edge = graph.edge(edgeid);

      var _label = edge.label();

      if (_label !== undefined) {
        if (!case_sensitive) _label = _label.toLowerCase();
        if (_label.indexOf(query) !== -1) results.push(edge);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}

function find_in_graph(renderer, sdfg, query) {
  var case_sensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  sidebar_set_title('Search Results for "' + query + '"');
  var results = [];
  if (!case_sensitive) query = query.toLowerCase();
  find_recursive(sdfg, query, results, case_sensitive); // Zoom to bounding box of all results first

  if (results.length > 0) renderer.zoom_to_view(results); // Show clickable results in sidebar

  var sidebar = sidebar_get_contents();
  sidebar.innerHTML = '';

  var _loop = function _loop() {
    var result = _results[_i];
    var d = document.createElement('div');
    d.className = 'context_menu_option';
    d.innerHTML = (0,_utils_sanitization__WEBPACK_IMPORTED_MODULE_5__.htmlSanitize)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__.default)(["", " ", ""])), result.type(), result.label());

    d.onclick = function () {
      renderer.zoom_to_view([result]);
    };

    d.onmouseenter = function () {
      if (!result.highlighted) {
        result.highlighted = true;
        renderer.draw_async();
      }
    };

    d.onmouseleave = function () {
      if (result.highlighted) {
        result.highlighted = false;
        renderer.draw_async();
      }
    };

    sidebar.appendChild(d);
  };

  for (var _i = 0, _results = results; _i < _results.length; _i++) {
    _loop();
  }

  sidebar_show();
}

function recursive_find_graph(graph, sdfg_id) {
  var found = undefined;
  graph.nodes().forEach(function (n_id) {
    var n = graph.node(n_id);

    if (n && n.sdfg.sdfg_list_id === sdfg_id) {
      found = graph;
      return found;
    } else if (n && n.data.graph) {
      found = recursive_find_graph(n.data.graph, sdfg_id);
      if (found) return found;
    }
  });
  return found;
}

function find_state(graph, state_id) {
  var state = undefined;
  graph.nodes().forEach(function (s_id) {
    if (Number(s_id) === state_id) {
      state = graph.node(s_id);
      return state;
    }
  });
  return state;
}

function find_node(state, node_id) {
  var node = undefined;
  state.data.graph.nodes().forEach(function (n_id) {
    if (Number(n_id) === node_id) {
      node = state.data.graph.node(n_id);
      return node;
    }
  });
  return node;
}

function find_edge(state, edge_id) {
  var edge = undefined;
  state.data.graph.edges().forEach(function (e_id) {
    if (Number(e_id.name) === edge_id) {
      edge = state.data.graph.edge(e_id);
      return edge;
    }
  });
  return edge;
}

function find_graph_element(graph, type, sdfg_id) {
  var state_id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var el_id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
  var requested_graph = recursive_find_graph(graph, sdfg_id);
  var state;

  if (requested_graph) {
    switch (type) {
      case 'edge':
        state = find_state(requested_graph, state_id);
        if (state) return find_edge(state, el_id);
        break;

      case 'state':
        return find_state(requested_graph, state_id);

      case 'node':
        state = find_state(requested_graph, state_id);
        if (state) return find_node(state, el_id);
        break;

      case 'isedge':
        var isedge = undefined;
        Object.values(requested_graph._edgeLabels).forEach(function (ise) {
          if (ise.id === el_id) {
            isedge = ise;
            return isedge;
          }
        });
        return isedge;

      default:
        return undefined;
    }
  }

  return undefined;
}

function mouse_event(evtype, event, mousepos, elements, renderer, selected_elements, ends_drag) {
  if (evtype === 'click' && !ends_drag || evtype === 'dblclick') {
    if (renderer.menu) renderer.menu.destroy();
    var element;
    if (selected_elements.length === 0) element = new SDFG(renderer.sdfg);else if (selected_elements.length === 1) element = selected_elements[0];else element = null;

    if (element !== null) {
      sidebar_set_title(element.type() + " " + element.label());
      fill_info(element);
    } else {
      close_menu();
      sidebar_set_title("Multiple elements selected");
    }

    sidebar_show();
  }
}

function init_menu() {
  return globals.daceUIHandlers.on_init_menu();
}

function sidebar_set_title(title) {
  return globals.daceUIHandlers.on_sidebar_set_title(title);
}

function sidebar_show() {
  return globals.daceUIHandlers.on_sidebar_show();
}

function sidebar_get_contents() {
  return globals.daceUIHandlers.sidebar_get_contents();
}

function close_menu() {
  return globals.daceUIHandlers.on_close_menu();
}

function outline(renderer, sdfg) {
  return globals.daceUIHandlers.on_outline(renderer, sdfg);
}

function fill_info(elem) {
  return globals.daceUIHandlers.on_fill_info(elem);
}
$('document').ready(function () {
  init_menu();
});

/***/ }),

/***/ "./src/sdfv_ui_handlers.js":
/*!*********************************!*\
  !*** ./src/sdfv_ui_handlers.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDFVUIHandlers": () => (/* binding */ SDFVUIHandlers)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _utils_sdfg_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/sdfg/display */ "./src/utils/sdfg/display.js");
/* harmony import */ var _utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/sdfg/traversal */ "./src/utils/sdfg/traversal.js");
/* harmony import */ var _utils_sanitization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/sanitization */ "./src/utils/sanitization.ts");
/* harmony import */ var _sdfv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdfv */ "./src/sdfv.js");


var _templateObject, _templateObject2;

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.




var SDFVUIHandlers = {
  on_init_menu: on_init_menu,
  on_sidebar_set_title: on_sidebar_set_title,
  on_sidebar_show: on_sidebar_show,
  sidebar_get_contents: sidebar_get_contents,
  on_close_menu: on_close_menu,
  on_outline: on_outline,
  on_fill_info: on_fill_info
};

function on_sidebar_set_title(title) {
  // Modify sidebar header
  document.getElementById("sidebar-header").innerText = title;
}

function sidebar_get_contents() {
  return document.getElementById("sidebar-contents");
}

function on_sidebar_show() {
  // Open sidebar if closed
  document.getElementById("sidebar").style.display = "flex";
}

function on_fill_info(elem) {
  var contents = sidebar_get_contents();
  var html = "";

  if (elem instanceof Edge && elem.data.type === "Memlet") {
    var sdfg_edge = elem.sdfg.nodes[elem.parent_id].edges[elem.id];
    html += "<h4>Connectors: " + sdfg_edge.src_connector + " &rarr; " + sdfg_edge.dst_connector + "</h4>";
  }

  html += "<hr />";

  for (var _i = 0, _Object$entries = Object.entries(elem.attributes()); _i < _Object$entries.length; _i++) {
    var attr = _Object$entries[_i];
    if (attr[0] === "layout" || attr[0] === "sdfg" || attr[0] === "_arrays" || attr[0].startsWith("_meta_") || attr[0] == "position") continue;
    html += "<b>" + attr[0] + "</b>:&nbsp;&nbsp;";
    html += (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_1__.sdfg_property_to_string)(attr[1], _sdfv__WEBPACK_IMPORTED_MODULE_4__.globals.daceRenderer.view_settings()) + "</p>";
  } // If access node, add array information too


  if (elem instanceof AccessNode) {
    var sdfg_array = elem.sdfg.attributes._arrays[elem.attributes().data];

    html += "<br /><h4>" + sdfg_array.type + " properties:</h4>";

    for (var _i2 = 0, _Object$entries2 = Object.entries(sdfg_array.attributes); _i2 < _Object$entries2.length; _i2++) {
      var _attr = _Object$entries2[_i2];
      if (_attr[0] === "layout" || _attr[0] === "sdfg" || _attr[0].startsWith("_meta_")) continue;
      html += "<b>" + _attr[0] + "</b>:&nbsp;&nbsp;";
      html += (0,_utils_sdfg_display__WEBPACK_IMPORTED_MODULE_1__.sdfg_property_to_string)(_attr[1], _sdfv__WEBPACK_IMPORTED_MODULE_4__.globals.daceRenderer.view_settings()) + "</p>";
    }
  }

  contents.innerHTML = html;
}

function on_outline(renderer, sdfg) {
  on_sidebar_set_title('SDFG Outline');
  var sidebar = sidebar_get_contents();
  sidebar.innerHTML = ''; // Entire SDFG

  var d = document.createElement('div');
  d.className = 'context_menu_option';
  d.innerHTML = (0,_utils_sanitization__WEBPACK_IMPORTED_MODULE_3__.htmlSanitize)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__.default)(["<i class=\"material-icons\" style=\"font-size: inherit\">filter_center_focus</i> SDFG ", ""])), renderer.sdfg.attributes.name);

  d.onclick = function () {
    return renderer.zoom_to_view();
  };

  sidebar.appendChild(d);
  var stack = [sidebar]; // Add elements to tree view in sidebar

  (0,_utils_sdfg_traversal__WEBPACK_IMPORTED_MODULE_2__.traverse_sdfg_scopes)(sdfg, function (node, parent) {
    // Skip exit nodes when scopes are known
    if (node.type().endsWith('Exit') && node.data.node.scope_entry >= 0) {
      stack.push(null);
      return true;
    } // Create element


    var d = document.createElement('div');
    d.className = 'context_menu_option';
    var is_collapsed = node.attributes().is_collapsed;
    is_collapsed = is_collapsed === undefined ? false : is_collapsed;
    var node_type = node.type(); // If a scope has children, remove the name "Entry" from the type

    if (node.type().endsWith('Entry')) {
      var state = node.sdfg.nodes[node.parent_id];

      if (state.scope_dict[node.id] !== undefined) {
        node_type = node_type.slice(0, -5);
      }
    }

    d.innerHTML = (0,_utils_sanitization__WEBPACK_IMPORTED_MODULE_3__.htmlSanitize)(_templateObject2 || (_templateObject2 = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__.default)(["", " ", "", ""])), node_type, node.label(), is_collapsed ? " (collapsed)" : "");

    d.onclick = function (e) {
      // Show node or entire scope
      var nodes_to_display = [node];

      if (node.type().endsWith('Entry')) {
        var _state = node.sdfg.nodes[node.parent_id];

        if (_state.scope_dict[node.id] !== undefined) {
          var _iterator = _createForOfIteratorHelper(_state.scope_dict[node.id]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var subnode_id = _step.value;
              nodes_to_display.push(parent.node(subnode_id));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }

      renderer.zoom_to_view(nodes_to_display); // Ensure that the innermost div is the one that handles the event

      if (!e) e = window.event;
      e.cancelBubble = true;
      if (e.stopPropagation) e.stopPropagation();
    };

    stack.push(d); // If is collapsed, don't traverse further

    if (is_collapsed) return false;
  }, function (node, parent) {
    // After scope ends, pop ourselves as the current element 
    // and add to parent
    var elem = stack.pop();
    if (elem) stack[stack.length - 1].appendChild(elem);
  });
  on_sidebar_show();
}

function on_close_menu() {
  document.getElementById("sidebar").style.display = "none";
}

function on_init_menu() {
  var right = document.getElementById('sidebar');
  var bar = document.getElementById('dragbar');

  var drag = function drag(e) {
    document.selection ? document.selection.empty() : window.getSelection().removeAllRanges();
    right.style.width = Math.max(e.view.innerWidth - e.pageX, 20) + 'px';
  };

  bar.addEventListener('mousedown', function () {
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', function () {
      document.removeEventListener('mousemove', drag);
    });
  });
}

/***/ }),

/***/ "./src/utils/bounding_box.js":
/*!***********************************!*\
  !*** ./src/utils/bounding_box.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateBoundingBox": () => (/* binding */ calculateBoundingBox),
/* harmony export */   "boundingBox": () => (/* binding */ boundingBox),
/* harmony export */   "calculateEdgeBoundingBox": () => (/* binding */ calculateEdgeBoundingBox),
/* harmony export */   "updateEdgeBoundingBox": () => (/* binding */ updateEdgeBoundingBox)
/* harmony export */ });
// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
function calculateBoundingBox(g) {
  // iterate over all objects, calculate the size of the bounding box
  var bb = {};
  bb.width = 0;
  bb.height = 0;
  g.nodes().forEach(function (v) {
    var x = g.node(v).x + g.node(v).width / 2.0;
    var y = g.node(v).y + g.node(v).height / 2.0;
    if (x > bb.width) bb.width = x;
    if (y > bb.height) bb.height = y;
  });
  return bb;
}
function boundingBox(elements) {
  var bb = {
    x1: null,
    y1: null,
    x2: null,
    y2: null
  };
  elements.forEach(function (v) {
    var topleft = v.topleft();
    if (bb.x1 === null || topleft.x < bb.x1) bb.x1 = topleft.x;
    if (bb.y1 === null || topleft.y < bb.y1) bb.y1 = topleft.y;
    var x2 = v.x + v.width / 2.0;
    var y2 = v.y + v.height / 2.0;
    if (bb.x2 === null || x2 > bb.x2) bb.x2 = x2;
    if (bb.y2 === null || y2 > bb.y2) bb.y2 = y2;
  });
  return {
    x: bb.x1,
    y: bb.y1,
    width: bb.x2 - bb.x1,
    height: bb.y2 - bb.y1
  };
}
function calculateEdgeBoundingBox(edge) {
  // iterate over all points, calculate the size of the bounding box
  var bb = {};
  bb.x1 = edge.points[0].x;
  bb.y1 = edge.points[0].y;
  bb.x2 = edge.points[0].x;
  bb.y2 = edge.points[0].y;
  edge.points.forEach(function (p) {
    bb.x1 = p.x < bb.x1 ? p.x : bb.x1;
    bb.y1 = p.y < bb.y1 ? p.y : bb.y1;
    bb.x2 = p.x > bb.x2 ? p.x : bb.x2;
    bb.y2 = p.y > bb.y2 ? p.y : bb.y2;
  });
  bb = {
    'x': bb.x1,
    'y': bb.y1,
    'width': bb.x2 - bb.x1,
    'height': bb.y2 - bb.y1
  };

  if (bb.width <= 5) {
    bb.width = 10;
    bb.x -= 5;
  }

  if (bb.height <= 5) {
    bb.height = 10;
    bb.y -= 5;
  }

  return bb;
}
function updateEdgeBoundingBox(edge) {
  var bb = calculateEdgeBoundingBox(edge);
  edge.x = bb.x + bb.width / 2;
  edge.y = bb.y + bb.height / 2;
  edge.width = bb.width;
  edge.height = bb.height;
}

/***/ }),

/***/ "./src/utils/context_menu.js":
/*!***********************************!*\
  !*** ./src/utils/context_menu.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContextMenu": () => (/* binding */ ContextMenu)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _sanitization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sanitization */ "./src/utils/sanitization.ts");





var _templateObject;

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

var $ = globalThis.$;
var ContextMenu = /*#__PURE__*/function () {
  /*
      Implementation for a custom context menu
  */
  function ContextMenu() {
    var _this = this;

    var html_content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ContextMenu);

    this._html_content = html_content;
    this._click_close_handlers = [];
    this._ = setTimeout(function () {
      _this._click_close_handlers = [['click', function (x) {
        _this.destroy();
      }], ['contextmenu', function (x) {
        _this.destroy();
      }]];

      var _iterator = _createForOfIteratorHelper(_this._click_close_handlers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _window;

          var x = _step.value;

          (_window = window).addEventListener.apply(_window, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(x));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }, 30);
    this._options = [];
    this._cmenu_elem = null;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ContextMenu, [{
    key: "width",
    value: function width() {
      return this._cmenu_elem.offsetWidth;
    }
  }, {
    key: "visible",
    value: function visible() {
      return this._cmenu_elem != null;
    }
  }, {
    key: "addOption",
    value: function addOption(name, onselect) {
      var onhover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._options.push({
        name: name,
        func: onselect,
        onhover: onhover
      });
    }
  }, {
    key: "addCheckableOption",
    value: function addCheckableOption(name, checked, onselect) {
      var onhover = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      this._options.push({
        name: name,
        checkbox: true,
        checked: checked,
        func: onselect,
        onhover: onhover
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (!this._cmenu_elem) return; // Clear everything
      // Remove the context menu

      document.body.removeChild(this._cmenu_elem);

      var _iterator2 = _createForOfIteratorHelper(this._click_close_handlers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _window2;

          var x = _step2.value;

          (_window2 = window).removeEventListener.apply(_window2, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(x));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this._cmenu_elem = null;
    }
  }, {
    key: "show",
    value: function show(x, y) {
      /*
          Shows the context menu originating at point (x,y)
      */
      var cmenu_div = document.createElement('div');
      cmenu_div.id = "contextmenu";
      $(cmenu_div).css('left', x + "px");
      $(cmenu_div).css('top', y + "px");
      cmenu_div.classList.add("context_menu");

      if (this._html_content == null) {
        // Set default context menu
        var _iterator3 = _createForOfIteratorHelper(this._options),
            _step3;

        try {
          var _loop = function _loop() {
            var x = _step3.value;
            var elem = document.createElement('div');
            elem.addEventListener('click', x.func);
            elem.classList.add("context_menu_option");

            if (x.checkbox) {
              var markelem = document.createElement('span');
              markelem.classList = x.checked ? 'checkmark_checked' : 'checkmark';
              elem.appendChild(markelem);
              elem.innerHTML += (0,_sanitization__WEBPACK_IMPORTED_MODULE_4__.htmlSanitize)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__.default)(["", ""])), x.name);
              elem.addEventListener('click', function (elem) {
                x.checked = !x.checked;
                x.func(elem, x.checked);
              });
            } else {
              elem.innerText = x.name;
              elem.addEventListener('click', x.func);
            }

            cmenu_div.appendChild(elem);
          };

          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      } else {
        cmenu_div.innerHTML = this._html_content;
      }

      this._cmenu_elem = cmenu_div;
      document.body.appendChild(cmenu_div);
    }
  }]);

  return ContextMenu;
}();

/***/ }),

/***/ "./src/utils/lerp_matrix.js":
/*!**********************************!*\
  !*** ./src/utils/lerp_matrix.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lerpMatrix": () => (/* binding */ lerpMatrix)
/* harmony export */ });
// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

/**
 * Returns a function taking a number from 0 to 1 which linearly interpolates between two matrices.
 * Uses the matrix interpolation algorithm for CSS animations
 * https://www.w3.org/TR/css-transforms-1/#decomposing-a-2d-matrix
 */
function lerpMatrix(m1, m2) {
  function decompose(m) {
    var scale = [Math.sqrt(m.a * m.a + m.b * m.b), Math.sqrt(m.c * m.c + m.d * m.d)];
    var det = m.a * m.d - m.b * m.c;

    if (det < 0) {
      if (m.a < m.d) scale[0] = -scale[0];else scale[1] = -scale[1];
    }

    var row0x = m.a / (scale[0] || 1);
    var row0y = m.b / (scale[0] || 1);
    var row1x = m.c / (scale[1] || 1);
    var row1y = m.d / (scale[1] || 1);
    var skew11 = row0x * row0x - row0y * row1x;
    var skew12 = row0x * row0y - row0y * row1y;
    var skew21 = row0x * row1x - row0y * row0x;
    var skew22 = row0x * row1y - row0y * row0y;
    var angle = Math.atan2(m.b, m.a) * 180 / Math.PI;
    return {
      translate: [m.e, m.f],
      scale: scale,
      skew11: skew11,
      skew12: skew12,
      skew21: skew21,
      skew22: skew22,
      angle: angle
    };
  }

  function lerpDecomposed(d1, d2, t) {
    function lerp(a, b) {
      return (b - a) * t + a;
    }

    var d1Angle = d1.angle || 360;
    var d2Angle = d2.angle || 360;
    var d1Scale = d1.scale;

    if (d1.scale[0] < 0 && d2.scale[1] < 0 || d1.scale[1] < 0 && d2.scale[0] < 0) {
      d1Scale = [-d1Scale[0], -d1Scale[1]];
      d1Angle += d1Angle < 0 ? 180 : -180;
    }

    if (Math.abs(d1Angle - d2Angle) > 180) {
      if (d1Angle > d2Angle) {
        d1Angle -= 360;
      } else {
        d2Angle -= 360;
      }
    }

    return {
      translate: [lerp(d1.translate[0], d2.translate[0]), lerp(d1.translate[1], d2.translate[1])],
      scale: [lerp(d1Scale[0], d2.scale[0]), lerp(d1Scale[1], d2.scale[1])],
      skew11: lerp(d1.skew11, d2.skew11),
      skew12: lerp(d1.skew12, d2.skew12),
      skew21: lerp(d1.skew21, d2.skew21),
      skew22: lerp(d1.skew22, d2.skew22),
      angle: lerp(d1Angle, d2Angle)
    };
  }

  function recompose(d) {
    var matrix = document.createElementNS("http://www.w3.org/2000/svg", 'svg').createSVGMatrix();
    matrix.a = d.skew11;
    matrix.b = d.skew12;
    matrix.c = d.skew21;
    matrix.d = d.skew22;
    matrix.e = d.translate[0] * d.skew11 + d.translate[1] * d.skew21;
    matrix.f = d.translate[0] * d.skew12 + d.translate[1] * d.skew22;
    return matrix.rotate(0, 0, d.angle * Math.PI / 180).scale(d.scale[0], d.scale[1]);
  }

  var d1 = decompose(m1);
  var d2 = decompose(m2);
  return function (t) {
    return recompose(lerpDecomposed(d1, d2, t));
  };
}

/***/ }),

/***/ "./src/utils/sanitization.ts":
/*!***********************************!*\
  !*** ./src/utils/sanitization.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeHTML": () => (/* binding */ escapeHTML),
/* harmony export */   "htmlSanitize": () => (/* binding */ htmlSanitize)
/* harmony export */ });
// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
function escapeHTML(s) {
  var escapeCharacters = new Map([['&', '&amp;'], ['<', '&lt;'], ['>', '&gt;'], ['"', '&quot;'], ["'", '&#039;']]);
  return "".concat(s).replace(/[&<>"']/g, function (m) {
    return escapeCharacters.get(m);
  });
}
function htmlSanitize(strings) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  return strings.length === 1 ? strings[0] : strings.reduce(function (s, n, i) {
    return "".concat(s).concat(escapeHTML(String(values[i - 1]))).concat(n);
  });
}

/***/ }),

/***/ "./src/utils/sdfg/display.js":
/*!***********************************!*\
  !*** ./src/utils/sdfg/display.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sdfg_range_elem_to_string": () => (/* binding */ sdfg_range_elem_to_string),
/* harmony export */   "sdfg_property_to_string": () => (/* binding */ sdfg_property_to_string),
/* harmony export */   "string_to_sdfg_typeclass": () => (/* binding */ string_to_sdfg_typeclass),
/* harmony export */   "sdfg_typeclass_to_string": () => (/* binding */ sdfg_typeclass_to_string)
/* harmony export */ });
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mathjs */ "./node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

function sdfg_range_elem_to_string(range) {
  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var preview = '';
  if (range.start == range.end && range.step == 1 && range.tile == 1) preview += sdfg_property_to_string(range.start, settings);else {
    if (settings && settings.inclusive_ranges) {
      preview += sdfg_property_to_string(range.start, settings) + '..' + sdfg_property_to_string(range.end, settings);
    } else {
      var endp1 = sdfg_property_to_string(range.end, settings) + ' + 1';

      try {
        endp1 = (0,mathjs__WEBPACK_IMPORTED_MODULE_0__.simplify)(endp1).toString();
      } catch (e) {}

      preview += sdfg_property_to_string(range.start, settings) + ':' + endp1;
    }

    if (range.step != 1) {
      preview += ':' + sdfg_property_to_string(range.step, settings);
      if (range.tile != 1) preview += ':' + sdfg_property_to_string(range.tile, settings);
    } else if (range.tile != 1) {
      preview += '::' + sdfg_property_to_string(range.tile, settings);
    }
  }
  return preview;
} // Includes various properties and returns their string representation

function sdfg_property_to_string(prop) {
  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (prop === null) return prop;

  if (typeof prop === 'boolean') {
    if (prop) return 'True';
    return 'False';
  } else if (prop.type === "Indices" || prop.type === "subsets.Indices") {
    var indices = prop.indices;
    var preview = '[';

    var _iterator = _createForOfIteratorHelper(indices),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var index = _step.value;
        preview += sdfg_property_to_string(index, settings) + ', ';
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return preview.slice(0, -2) + ']';
  } else if (prop.type === "Range" || prop.type === "subsets.Range") {
    var ranges = prop.ranges; // Generate string from range

    var _preview = '[';

    var _iterator2 = _createForOfIteratorHelper(ranges),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var range = _step2.value;
        _preview += sdfg_range_elem_to_string(range, settings) + ', ';
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return _preview.slice(0, -2) + ']';
  } else if (prop.language !== undefined) {
    // Code
    if (prop.string_data !== '' && prop.string_data !== undefined && prop.string_data !== null) return '<pre class="code"><code>' + prop.string_data.trim() + '</code></pre><div class="clearfix"></div>';
    return '';
  } else if (prop.approx !== undefined && prop.main !== undefined) {
    // SymExpr
    return prop.main;
  } else if (prop.constructor == Object) {
    // General dictionary
    return '<pre class="code"><code>' + JSON.stringify(prop, undefined, 4) + '</code></pre><div class="clearfix"></div>';
  } else if (prop.constructor == Array) {
    // General array
    var result = '[ ';
    var first = true;

    var _iterator3 = _createForOfIteratorHelper(prop),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var subprop = _step3.value;
        if (!first) result += ', ';
        result += sdfg_property_to_string(subprop, settings);
        first = false;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return result + ' ]';
  } else {
    return prop;
  }
}
function string_to_sdfg_typeclass(str) {
  str.replace(/\s+/g, '');
  if (str === '' || str === 'null') return null;

  if (str.endsWith(')')) {
    if (str.startsWith('vector(')) {
      var argstring = str.substring(7, str.length - 1);

      if (argstring) {
        var splitidx = argstring.lastIndexOf(',');

        if (splitidx) {
          var dtype = string_to_sdfg_typeclass(argstring.substring(0, splitidx));
          var count = argstring.substring(splitidx);
          if (dtype && count) return {
            type: 'vector',
            dtype: dtype,
            elements: count
          };
        }
      }
    } else if (str.startsWith('pointer(')) {
      var _argstring = str.substring(8, str.length - 1);

      if (_argstring) return {
        type: 'pointer',
        dtype: string_to_sdfg_typeclass(_argstring)
      };
    } else if (str.startsWith('opaque(')) {
      var _argstring2 = str.substring(7, str.length - 1);

      if (_argstring2) return {
        type: 'opaque',
        name: _argstring2
      };
    } else if (str.startsWith('callback(')) {
      var _argstring3 = str.substring(9, str.length - 1);

      if (_argstring3) {
        var _splitidx = _argstring3.lastIndexOf(',');

        if (_splitidx) {
          var cb_argstring = _argstring3.substring(0, _splitidx);

          if (cb_argstring.startsWith('[') && cb_argstring.endsWith(']')) {
            var cb_args_raw = cb_argstring.substring(1, cb_argstring.length - 1).split(',');
            var ret_type = string_to_sdfg_typeclass(_argstring3.substring(_splitidx));
            var cb_args = [];
            if (cb_args_raw) cb_args_raw.forEach(function (raw_arg) {
              cb_args.push(string_to_sdfg_typeclass(raw_arg));
            });
            if (cb_args && ret_type) return {
              type: 'callback',
              arguments: cb_args,
              returntype: ret_type
            };
          }
        }
      }
    }
  }

  return str;
}
function sdfg_typeclass_to_string(typeclass) {
  if (typeclass === undefined || typeclass === null) return 'null';

  if (typeclass.constructor === Object) {
    if (typeclass.type !== undefined) {
      switch (typeclass.type) {
        case 'vector':
          if (typeclass.elements !== undefined && typeclass.dtype !== undefined) return 'vector(' + sdfg_typeclass_to_string(typeclass.dtype) + ', ' + typeclass.elements + ')';
          break;

        case 'pointer':
          if (typeclass.dtype !== undefined) return 'pointer(' + sdfg_typeclass_to_string(typeclass.dtype) + ')';
          break;

        case 'opaque':
          if (typeclass.name !== undefined) return 'opaque(' + typeclass.name + ')';
          break;

        case 'callback':
          if (typeclass.arguments !== undefined) {
            var str = 'callback([';

            for (var i = 0; i < typeclass.arguments.length; i++) {
              str += sdfg_typeclass_to_string(typeclass.arguments[i]);
              if (i < typeclass.arguments.length - 1) str += ', ';
            }

            str += '], ';
            if (typeclass.returntype !== undefined) str += sdfg_typeclass_to_string(typeclass.returntype);else str += 'None';
            str += ')';
            return str;
          }

          break;
      }
    } // This is an unknown typeclass, just show the entire JSON.


    return sdfg_property_to_string(typeclass);
  } // This typeclass already is a regular string.


  return typeclass;
}

/***/ }),

/***/ "./src/utils/sdfg/json_serializer.ts":
/*!*******************************************!*\
  !*** ./src/utils/sdfg/json_serializer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse_sdfg": () => (/* binding */ parse_sdfg),
/* harmony export */   "stringify_sdfg": () => (/* binding */ stringify_sdfg)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
// Recursively parse SDFG, including nested SDFG nodes
function parse_sdfg(sdfg_json) {
  return JSON.parse(sdfg_json, reviver);
}
function stringify_sdfg(sdfg) {
  return JSON.stringify(sdfg, function (name, val) {
    return replacer(name, val, sdfg);
  });
}

function reviver(name, val) {
  if (name == 'sdfg' && val && typeof val === 'string' && val[0] === '{') {
    return JSON.parse(val, reviver);
  }

  return val;
}

function isDict(v) {
  return (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(v) === 'object' && v !== null && !(v instanceof Array) && !(v instanceof Date);
}

function replacer(name, val, orig_sdfg) {
  if (val && isDict(val) && val !== orig_sdfg && 'type' in val && val.type === 'SDFG') {
    return JSON.stringify(val, function (n, v) {
      return replacer(n, v, val);
    });
  }

  return val;
}

/***/ }),

/***/ "./src/utils/sdfg/sdfg_parser.js":
/*!***************************************!*\
  !*** ./src/utils/sdfg/sdfg_parser.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDFG_Parser": () => (/* binding */ SDFG_Parser),
/* harmony export */   "SDFG_State_Parser": () => (/* binding */ SDFG_State_Parser),
/* harmony export */   "SDFG_Node_Parser": () => (/* binding */ SDFG_Node_Parser),
/* harmony export */   "SDFG_PropUtil": () => (/* binding */ SDFG_PropUtil)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
var SDFG_Parser = /*#__PURE__*/function () {
  function SDFG_Parser(sdfg) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SDFG_Parser);

    this._sdfg = sdfg;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SDFG_Parser, [{
    key: "getStates",
    value: function getStates() {
      return this._sdfg.nodes.map(function (x) {
        return new SDFG_State_Parser(x);
      });
    }
  }], [{
    key: "lookup_symbols",
    value: function lookup_symbols(sdfg, state_id, elem, symbols_to_resolve) {
      var depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      // Resolve used symbols by following connectors in reverse order
      var state = sdfg.nodes[state_id];
      var syms = [];

      if (elem.constructor == Object) {
        // Memlet
        var memlets = state.edges.filter(function (x) {
          return x.dst == elem.dst && x.src == elem.src;
        }); // Recurse into parent (since this a multigraph, all edges need to be looked at)

        var _iterator = _createForOfIteratorHelper(memlets),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var m = _step.value;
            // Find symbols used (may be Indices or Range)
            var mdata = m.attributes.data.attributes.subset; // Check for indices

            if (mdata.type == "subsets.Indices") {
              // These are constants or variables
              // Reverse to have smallest unit first
              var _tmp = mdata.indices.map(function (x) {
                return x;
              }).reverse();

              var _iterator2 = _createForOfIteratorHelper(_tmp),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var x = _step2.value;
                  // Add the used variables as null and hope that they will be resolved
                  depth += 1;
                  syms.push({
                    "var": x,
                    val: null,
                    depth: depth
                  });
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            } else if (mdata.type == "subsets.Range") {// These are ranges
              // These ranges are not of interest, as they specify what is copied and don't define new variables 
            } // Find parent nodes


            var parent = sdfg.nodes[state_id].nodes[m.src];
            var tmp = SDFG_Parser.lookup_symbols(sdfg, state_id, m.src, symbols_to_resolve, depth + 1);
            syms = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(syms), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(tmp));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        // Node
        var node = state.nodes[elem]; // Maps (and Consumes) define ranges, extract symbols from there

        try {
          (function () {
            var rngs = node.attributes.range.ranges.map(function (x) {
              return x;
            }); // The iterator ranges

            var params = node.attributes.params.map(function (x) {
              return x;
            }); // The iterators

            console.assert(rngs.length == params.length, "Ranges and params should have the same count of elements"); // Reverse from big -> little to little -> big (or outer -> inner to inner -> outer)

            rngs.reverse();
            params.reverse();

            var _loop = function _loop(i) {
              // Check first if the variable is already defined, and if yes, if the value is the same
              var fltrd = syms.filter(function (x) {
                return x["var"] == params[i];
              });

              if (fltrd.length == 0) {
                depth += 1;
                syms.push({
                  "var": params[i],
                  val: rngs[i],
                  depth: depth
                });
              } else {
                if (JSON.stringify(fltrd[0].val) != JSON.stringify(rngs[i])) {
                  console.warn("Colliding definitions for var " + params[i], fltrd[0].val, rngs[i]);
                }
              }
            };

            for (var i = 0; i < rngs.length; ++i) {
              _loop(i);
            }
          })();
        } catch (e) {// Not a node defining ranges (every node except maps / consumes)
        } // Find all incoming edges


        var inc_edges = state.edges.filter(function (x) {
          return x.dst == elem;
        });

        var _iterator3 = _createForOfIteratorHelper(inc_edges),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var e = _step3.value;

            var _tmp2 = SDFG_Parser.lookup_symbols(sdfg, state_id, e, symbols_to_resolve, depth + 1);

            syms = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(syms), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(_tmp2));
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      return syms;
    }
  }]);

  return SDFG_Parser;
}();
var SDFG_State_Parser = /*#__PURE__*/function () {
  function SDFG_State_Parser(sdfg_state) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SDFG_State_Parser);

    this._sdfg_state = sdfg_state;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SDFG_State_Parser, [{
    key: "getNodes",
    value: function getNodes() {
      return this._sdfg_state.nodes.map(function (x) {
        return new SDFG_Node_Parser(x);
      });
    }
  }]);

  return SDFG_State_Parser;
}();
var SDFG_Node_Parser = /*#__PURE__*/function () {
  function SDFG_Node_Parser(node) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SDFG_Node_Parser);

    this._node = node;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SDFG_Node_Parser, [{
    key: "isNodeType",
    value: function isNodeType(node_type) {
      return this._node.attributes.type === node_type;
    }
  }]);

  return SDFG_Node_Parser;
}();
var SDFG_PropUtil = /*#__PURE__*/function () {
  function SDFG_PropUtil() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, SDFG_PropUtil);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SDFG_PropUtil, null, [{
    key: "getMetaFor",
    value: function getMetaFor(obj, attr_name) {
      return obj.attributes['_meta_' + attr_name];
    }
  }, {
    key: "getAttributeNames",
    value: function getAttributeNames(obj) {
      var keys = Object.keys(obj.attributes);
      var list = keys.filter(function (x) {
        return keys.includes('_meta_' + x);
      });
      return list;
    }
  }]);

  return SDFG_PropUtil;
}();

/***/ }),

/***/ "./src/utils/sdfg/sdfg_utils.js":
/*!**************************************!*\
  !*** ./src/utils/sdfg/sdfg_utils.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "recursively_find_graph": () => (/* binding */ recursively_find_graph),
/* harmony export */   "find_exit_for_entry": () => (/* binding */ find_exit_for_entry),
/* harmony export */   "get_uuid_graph_element": () => (/* binding */ get_uuid_graph_element),
/* harmony export */   "check_and_redirect_edge": () => (/* binding */ check_and_redirect_edge),
/* harmony export */   "find_graph_element_by_uuid": () => (/* binding */ find_graph_element_by_uuid),
/* harmony export */   "initialize_positioning_info": () => (/* binding */ initialize_positioning_info),
/* harmony export */   "set_positioning_info": () => (/* binding */ set_positioning_info),
/* harmony export */   "get_positioning_info": () => (/* binding */ get_positioning_info),
/* harmony export */   "delete_positioning_info": () => (/* binding */ delete_positioning_info),
/* harmony export */   "add_elem_to_sdfg": () => (/* binding */ add_elem_to_sdfg)
/* harmony export */ });
/* harmony import */ var _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../renderer/renderer_elements */ "./src/renderer/renderer_elements.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

var NestedSDFG = _renderer_renderer_elements__WEBPACK_IMPORTED_MODULE_0__.SDFGElements.NestedSDFG;
function recursively_find_graph(graph, graph_id) {
  var ns_node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

  if (graph.node(0).sdfg.sdfg_list_id === graph_id) {
    return {
      graph: graph,
      node: ns_node
    };
  } else {
    var result = {
      graph: undefined,
      node: undefined
    };

    var _iterator = _createForOfIteratorHelper(graph.nodes()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var state_id = _step.value;
        var state = graph.node(state_id);

        if (state.data.graph !== undefined && state.data.graph !== null) {
          var _iterator2 = _createForOfIteratorHelper(state.data.graph.nodes()),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var node_id = _step2.value;
              var node = state.data.graph.node(node_id);

              if (node instanceof NestedSDFG) {
                var search_graph = recursively_find_graph(node.data.graph, graph_id, node);

                if (search_graph.graph !== undefined) {
                  return search_graph;
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return result;
  }
}
function find_exit_for_entry(nodes, entry_node) {
  var _iterator3 = _createForOfIteratorHelper(nodes),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var n = _step3.value;

      if (n.type.endsWith("Exit") && parseInt(n.scope_entry) == entry_node.id) {
        return n;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  console.warn("Did not find corresponding exit");
  return null;
}
/**
 * Return the string UUID for an SDFG graph element.
 *
 * UUIDs have the form of "G/S/N/E", where:
 * G = Graph list id
 * S = State ID (-1 for (nested) SDFGs)
 * N = SDFGNode ID (-1 for States, SDFGs, and Edges)
 * E = Edge ID (-1 for States, SDFGs, and Nodes)
 *
 * @param {*} element   Element to generate the UUID for.
 *
 * @returns             String containing the UUID
 */

function get_uuid_graph_element(element) {
  var undefined_val = -1;

  if (element instanceof State) {
    return element.sdfg.sdfg_list_id + '/' + element.id + '/' + undefined_val + '/' + undefined_val;
  } else if (element instanceof SDFGNode) {
    return element.sdfg.sdfg_list_id + '/' + element.parent_id + '/' + element.id + '/' + undefined_val;
  } else if (element instanceof Edge) {
    var parent_id = undefined_val;
    if (element.parent_id !== null && element.parent_id !== undefined) parent_id = element.parent_id;
    return element.sdfg.sdfg_list_id + '/' + parent_id + '/' + undefined_val + '/' + element.id;
  }

  return undefined_val + '/' + undefined_val + '/' + undefined_val + '/' + undefined_val;
}
function check_and_redirect_edge(edge, drawn_nodes, sdfg_state) {
  // If destination is not drawn, no need to draw the edge
  if (!drawn_nodes.has(edge.dst)) return null; // If both source and destination are in the graph, draw edge as-is

  if (drawn_nodes.has(edge.src)) return edge; // If immediate scope parent node is in the graph, redirect

  var scope_src = sdfg_state.nodes[edge.src].scope_entry;
  if (!drawn_nodes.has(scope_src)) return null; // Clone edge for redirection, change source to parent

  var new_edge = Object.assign({}, edge);
  new_edge.src = scope_src;
  return new_edge;
}
function find_graph_element_by_uuid(p_graph, uuid) {
  var uuid_split = uuid.split('/');
  var graph_id = Number(uuid_split[0]);
  var state_id = Number(uuid_split[1]);
  var node_id = Number(uuid_split[2]);
  var edge_id = Number(uuid_split[3]);
  var result = {
    parent: undefined,
    element: undefined
  };
  var graph = p_graph;

  if (graph_id > 0) {
    var found_graph = recursively_find_graph(graph, graph_id);
    if (found_graph.graph === undefined) throw new Error();
    graph = found_graph.graph;
    result = {
      parent: graph,
      element: found_graph.node
    };
  }

  var state = undefined;

  if (state_id !== -1 && graph !== undefined) {
    state = graph.node(state_id);
    result = {
      parent: graph,
      element: state
    };
  }

  if (node_id !== -1 && state !== undefined && state.data.graph !== null) {
    // Look for a node in a state.
    result = {
      parent: state.data.graph,
      element: state.data.graph.node(node_id)
    };
  } else if (edge_id !== -1 && state !== undefined && state.data.graph !== null) {
    // Look for an edge in a state.
    result = {
      parent: state.data.graph,
      element: state.data.graph.edge(edge_id)
    };
  } else if (edge_id !== -1 && state === undefined) {
    // Look for an inter-state edge.
    result = {
      parent: graph,
      element: graph.edge(edge_id)
    };
  }

  return result;
}
/**
 * Initializes positioning information on the given element.
 *
 * @param {SDFGElement} elem    The element that gets new positioning information
 * @returns                     The initial positioning information that has been created
 */

function initialize_positioning_info(elem) {
  var position;

  if (elem instanceof Edge || elem.type === "MultiConnectorEdge") {
    var points = undefined;
    if (elem.points) points = Array(elem.points.length);
    position = {
      points: points,
      scope_dx: 0,
      scope_dy: 0
    };

    for (var i = 0; elem.points && i < elem.points.length; i++) {
      position.points[i] = {
        dx: 0,
        dy: 0
      };
    }
  } else {
    position = {
      dx: 0,
      dy: 0,
      scope_dx: 0,
      scope_dy: 0
    };
  }

  set_positioning_info(elem, position);
  return position;
}
/**
 * Sets the positioning information on a given element. Replaces old
 * positioning information.
 * 
 * @param {SDFGElement} elem    The element that receives new positioning info
 * @param {*} position          The positioning information
 */

function set_positioning_info(elem, position) {
  if (elem instanceof State) elem.data.state.attributes.position = position;else if (elem instanceof SDFGNode) elem.data.node.attributes.position = position;else if (elem instanceof Edge) elem.data.attributes.position = position;else if (elem.type === "MultiConnectorEdge") elem.attributes.data.attributes.position = position; // Works also for other objects with attributes
  else if (elem.attributes) elem.attributes.position = position;
}
/**
 * Finds the positioning information of the given element
 *
 * @param {SDFGElement} elem    The element that contains the information
 * @returns                     The positioning information if available, undefined otherwise
 */

function get_positioning_info(elem) {
  var _elem$attributes, _elem$attributes$data, _elem$attributes$data2;

  if (elem instanceof State) return elem.data.state.attributes.position;
  if (elem instanceof SDFGNode) return elem.data.node.attributes.position;
  if (elem instanceof Edge) return elem.data.attributes.position;
  if ((elem === null || elem === void 0 ? void 0 : elem.type) === "MultiConnectorEdge") return elem === null || elem === void 0 ? void 0 : (_elem$attributes = elem.attributes) === null || _elem$attributes === void 0 ? void 0 : (_elem$attributes$data = _elem$attributes.data) === null || _elem$attributes$data === void 0 ? void 0 : (_elem$attributes$data2 = _elem$attributes$data.attributes) === null || _elem$attributes$data2 === void 0 ? void 0 : _elem$attributes$data2.position; // Works also for other objects with attributes

  if (elem !== null && elem !== void 0 && elem.attributes) return elem.attributes.position;
  return undefined;
}
/**
 * Deletes the positioning information of the given element
 *
 * @param {SDFGElement} elem    The element that contains the information
 */

function delete_positioning_info(elem) {
  if (elem instanceof State) delete elem.data.state.attributes.position;
  if (elem instanceof SDFGNode) delete elem.data.node.attributes.position;
  if (elem instanceof Edge) delete elem.data.attributes.position;
  if ((elem === null || elem === void 0 ? void 0 : elem.type) === "MultiConnectorEdge") delete elem.attributes.data.attributes.position; // Works also for other objects with attributes

  if (elem !== null && elem !== void 0 && elem.attributes) delete elem.attributes.position;
}
/**
 * Creates a new SDFGElement of the given type and adds it to the state.
 * Returns the new SDFG element on success, otherwise null.
 *
 * @param sdfg      the sdfg that contains the parent state
 * @param elem_type the type of the new element
 * @param state     the parent state
 * @returns         the new element or null when creation failed
 */

function add_elem_to_sdfg(sdfg, elem_type, state) {
  var new_elem = {};
  var attributes = {};
  attributes.in_construction = true;
  new_elem.attributes = attributes;

  switch (elem_type) {
    case "MapEntry":
      return null;

    case "ConsumeEntry":
      return null;

    case "Tasklet":
      return null;

    case "NestedSDFG":
      return null;

    case "AccessNode":
      attributes.access = "ReadWrite";
      attributes.data = "";
      attributes.debuginfo = null;
      attributes.in_connectors = {};
      attributes.out_connectors = {};
      attributes.setzero = false;
      new_elem.id = state.data.state.nodes.length;
      new_elem.label = "";
      new_elem.scope_entry = null;
      new_elem.scope_exit = null;
      new_elem.type = elem_type;
      break;

    case "Stream":
      return null;

    case "SDFGState":
      return null;

    default:
      return null;
  }

  if (elem_type !== "SDFGState") {
    state.data.state.scope_dict['-1'].push(new_elem.id);
    state.data.state.nodes.push(new_elem);
  }

  return new_elem;
}

/***/ }),

/***/ "./src/utils/sdfg/traversal.js":
/*!*************************************!*\
  !*** ./src/utils/sdfg/traversal.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "traverse_sdfg_scopes": () => (/* binding */ traverse_sdfg_scopes),
/* harmony export */   "memlet_tree": () => (/* binding */ memlet_tree),
/* harmony export */   "memlet_tree_nested": () => (/* binding */ memlet_tree_nested),
/* harmony export */   "memlet_tree_recursive": () => (/* binding */ memlet_tree_recursive),
/* harmony export */   "memlet_tree_complete": () => (/* binding */ memlet_tree_complete)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.

/**
 * Receives a callback that accepts (node, parent graph) and returns a value.
 * This function is invoked recursively per scope (including scope nodes), unless the return
 * value is false, upon which the sub-scope will not be visited.
 * The function also accepts an optional post-subscope callback (same signature as `func`).
 **/
function traverse_sdfg_scopes(sdfg, func) {
  var post_subscope_func = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  function scopes_recursive(graph, nodes) {
    var processed_nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (processed_nodes === null) processed_nodes = new Set();

    var _iterator = _createForOfIteratorHelper(nodes),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var nodeid = _step.value;
        var node = graph.node(nodeid);
        if (node === undefined || processed_nodes.has(node.id.toString())) continue; // Invoke function

        var result = func(node, graph); // Skip in case of e.g., collapsed nodes

        if (result !== false) {
          // Traverse scopes recursively (if scope_dict provided)
          if (node.type().endsWith('Entry')) {
            var state = node.sdfg.nodes[node.parent_id];
            if (state.scope_dict[node.id] !== undefined) scopes_recursive(graph, state.scope_dict[node.id], processed_nodes);
          } // Traverse states or nested SDFGs


          if (node.data.graph) {
            var _state = node.data.state;
            if (_state !== undefined && _state.scope_dict[-1] !== undefined) scopes_recursive(node.data.graph, _state.scope_dict[-1]);else // No scope_dict, traverse all nodes as a flat hierarchy
              scopes_recursive(node.data.graph, node.data.graph.nodes());
          }
        }

        if (post_subscope_func) post_subscope_func(node, graph);
        processed_nodes.add(node.id.toString());
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  scopes_recursive(sdfg, sdfg.nodes());
}
/**
 * Returns a partial memlet tree from a given edge, from the root node
 * through all children (without siblings). Calling this function with
 * the root edge returns the entire memlet tree.
 **/

function memlet_tree(graph, edge) {
  var root_only = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var result = [];
  var graph_edges = {};
  graph.edges().forEach(function (e) {
    graph_edges[e.name] = e;
  });

  function src(e) {
    var ge = graph_edges[e.id];
    return graph.node(ge.v);
  }

  function dst(e) {
    var ge = graph_edges[e.id];
    return graph.node(ge.w);
  } // Determine direction


  var propagate_forward = false,
      propagate_backward = false;
  if (edge.src_connector && src(edge) instanceof EntryNode || edge.dst_connector && dst(edge) instanceof EntryNode && edge.dst_connector.startsWith('IN_')) propagate_forward = true;
  if (edge.src_connector && src(edge) instanceof ExitNode || edge.dst_connector && dst(edge) instanceof ExitNode) propagate_backward = true;
  result.push(edge); // If either both are false (no scopes involved) or both are true
  // (invalid SDFG), we return only the current edge as a degenerate tree

  if (propagate_forward == propagate_backward) return result; // Ascend (find tree root) while prepending

  var curedge = edge;

  if (propagate_forward) {
    var source = src(curedge);

    var _loop = function _loop() {
      if (source.attributes().is_collapsed) return "break";
      var cname = curedge.src_connector.substring(4); // Remove OUT_

      curedge = null;
      graph.inEdges(source.id).forEach(function (e) {
        var ge = graph.edge(e);
        if (ge.dst_connector == 'IN_' + cname) curedge = ge;
      });

      if (curedge) {
        result.unshift(curedge);
        source = src(curedge);
      }
    };

    while (source instanceof EntryNode && curedge && curedge.src_connector) {
      var _ret = _loop();

      if (_ret === "break") break;
    }
  } else if (propagate_backward) {
    var dest = dst(curedge);

    var _loop2 = function _loop2() {
      var cname = curedge.dst_connector.substring(3); // Remove IN_

      curedge = null;
      graph.outEdges(dest.id).forEach(function (e) {
        var ge = graph.edge(e);
        if (ge.src_connector == 'OUT_' + cname) curedge = ge;
      });

      if (curedge) {
        result.unshift(curedge);
        dest = dst(curedge);
      }
    };

    while (dest instanceof ExitNode && curedge && curedge.dst_connector) {
      _loop2();
    }
  }

  if (root_only) return [result[0]]; // Descend recursively

  function add_children(edge) {
    var children = [];

    if (propagate_forward) {
      var next_node = dst(edge);
      if (!(next_node instanceof EntryNode) || !edge.dst_connector || !edge.dst_connector.startsWith('IN_')) return;
      if (next_node.attributes().is_collapsed) return;
      var conn = edge.dst_connector.substring(3);
      graph.outEdges(next_node.id).forEach(function (e) {
        var ge = graph.edge(e);

        if (ge.src_connector == 'OUT_' + conn) {
          children.push(ge);
          result.push(ge);
        }
      });
    } else if (propagate_backward) {
      var _next_node = src(edge);

      if (!(_next_node instanceof ExitNode) || !edge.src_connector) return;

      var _conn = edge.src_connector.substring(4);

      graph.inEdges(_next_node.id).forEach(function (e) {
        var ge = graph.edge(e);

        if (ge.dst_connector == 'IN_' + _conn) {
          children.push(ge);
          result.push(ge);
        }
      });
    }

    for (var _i = 0, _children = children; _i < _children.length; _i++) {
      var child = _children[_i];
      add_children(child);
    }
  } // Start from current edge


  add_children(edge);
  return result;
}
/**
 * Returns a partial memlet tree from a given edge. It descends into nested SDFGs.
 * @param visited_edges is used to speed up the computation of the memlet trees
 **/

function memlet_tree_nested(sdfg, state, edge) {
  var visited_edges = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  if (visited_edges.includes(edge) || edge.attributes.data.attributes.shortcut) {
    return [];
  }

  visited_edges.push(edge);
  var result = [];

  function src(e) {
    return state.nodes[e.src];
  }

  function dst(e) {
    return state.nodes[e.dst];
  }

  function isview(node) {
    if (node.type == "AccessNode") {
      var nodedesc = sdfg.attributes._arrays[node.attributes.data];
      return nodedesc && nodedesc.type === "View";
    }

    return false;
  } // Determine direction


  var propagate_forward = false,
      propagate_backward = false;
  if (edge.src_connector && src(edge).type.endsWith("Entry") || edge.dst_connector && dst(edge).type.endsWith("Entry") && edge.dst_connector.startsWith('IN_') || dst(edge).type == "NestedSDFG" || isview(dst(edge))) propagate_forward = true;
  if (edge.src_connector && src(edge).type.endsWith("Exit") || edge.dst_connector && dst(edge).type.endsWith("Exit") || src(edge).type == "NestedSDFG" || isview(src(edge))) propagate_backward = true;
  result.push(edge); // If either both are false (no scopes involved), we 
  // return only the current edge as a degenerate tree

  if (propagate_forward == propagate_backward && propagate_backward === false) return result; // Descend recursively

  function add_children(edge) {
    var children = [];

    if (propagate_forward) {
      var next_node = dst(edge); // Descend into nested SDFG

      if (next_node.type == "NestedSDFG") {
        var name = edge.dst_connector;
        var nested_sdfg = next_node.attributes.sdfg;
        nested_sdfg.nodes.forEach(function (nstate) {
          nstate.edges.forEach(function (e) {
            var node = nstate.nodes[e.src];

            if (node.type == "AccessNode" && node.attributes.data === name) {
              result = result.concat(memlet_tree_nested(nested_sdfg, nstate, e, visited_edges));
            }
          });
        });
      }

      if (isview(next_node)) {
        state.edges.forEach(function (e) {
          if (e.src == next_node.id) {
            children.push(e);

            if (!e.attributes.data.attributes.shortcut) {
              result.push(e);
            }
          }
        });
      } else {
        if (!next_node.type.endsWith("Entry") || !edge.dst_connector || !edge.dst_connector.startsWith('IN_')) return;
        if (next_node.attributes.is_collapsed) return;
        var conn = edge.dst_connector.substring(3);
        state.edges.forEach(function (e) {
          if (e.src == next_node.id && e.src_connector == 'OUT_' + conn) {
            children.push(e);

            if (!e.attributes.data.attributes.shortcut) {
              result.push(e);
            }
          }
        });
      }
    }

    if (propagate_backward) {
      var _next_node2 = src(edge); // Descend into nested SDFG


      if (_next_node2.type == "NestedSDFG") {
        var _name = edge.src_connector;
        var _nested_sdfg = _next_node2.attributes.sdfg;

        _nested_sdfg.nodes.forEach(function (nstate) {
          nstate.edges.forEach(function (e) {
            var node = nstate.nodes[e.dst];

            if (node.type == "AccessNode" && node.attributes.data == _name) {
              result = result.concat(memlet_tree_nested(_nested_sdfg, nstate, e, visited_edges));
            }
          });
        });
      }

      if (isview(_next_node2)) {
        state.edges.forEach(function (e) {
          if (e.dst == _next_node2.id) {
            children.push(e);
            result.push(e);
          }
        });
      } else {
        if (!_next_node2.type.endsWith("Exit") || !edge.src_connector) return;

        var _conn2 = edge.src_connector.substring(4);

        state.edges.forEach(function (e) {
          if (e.dst == _next_node2.id && e.dst_connector == 'IN_' + _conn2) {
            children.push(e);
            result.push(e);
          }
        });
      }
    }

    for (var _i2 = 0, _children2 = children; _i2 < _children2.length; _i2++) {
      var child = _children2[_i2];
      add_children(child);
    }
  } // Start from current edge


  add_children(edge);
  return result;
}
/**
 * Calls memlet_tree_nested for every nested SDFG and its edges and returns a list with all memlet trees.
 * As edges are visited only in one direction (from outer SDFGs to inner SDFGs) a memlet can be split into several
 * arrays.
 */

function memlet_tree_recursive(root_sdfg) {
  var trees = [];
  var visited_edges = [];
  root_sdfg.nodes.forEach(function (state) {
    state.edges.forEach(function (e) {
      var tree = memlet_tree_nested(root_sdfg, state, e, visited_edges);

      if (tree.length > 1) {
        trees.push(tree);
      }
    });
    state.nodes.forEach(function (n) {
      if (n.type == "NestedSDFG") {
        var t = memlet_tree_recursive(n.attributes.sdfg);
        trees = trees.concat(t);
      }
    });
  });
  return trees;
}
/**
 * Returns all memlet trees as sets for the given graph.
 * 
 * @param {Graph} root_graph The top level graph.
 */

function memlet_tree_complete(sdfg) {
  var all_memlet_trees = [];
  var memlet_trees = memlet_tree_recursive(sdfg); // combine trees as memlet_tree_recursive does not necessarily return the complete trees (they might be split into several trees)

  memlet_trees.forEach(function (tree) {
    var common_edge = false;

    var _iterator2 = _createForOfIteratorHelper(all_memlet_trees),
        _step2;

    try {
      var _loop3 = function _loop3() {
        var mt = _step2.value;

        var _iterator3 = _createForOfIteratorHelper(tree),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var edge = _step3.value;

            if (mt.has(edge)) {
              tree.forEach(function (e) {
                return mt.add(e);
              });
              common_edge = true;
              break;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (common_edge) return "break";
      };

      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _ret2 = _loop3();

        if (_ret2 === "break") break;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    if (!common_edge) all_memlet_trees.push(new Set(tree));
  });
  return all_memlet_trees;
}

/***/ }),

/***/ "./src/utils/utils.ts":
/*!****************************!*\
  !*** ./src/utils/utils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equals": () => (/* binding */ equals),
/* harmony export */   "deepCopy": () => (/* binding */ deepCopy),
/* harmony export */   "createElement": () => (/* binding */ createElement),
/* harmony export */   "assignIfNotExists": () => (/* binding */ assignIfNotExists)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");



// Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.
function equals(a, b) {
  return JSON.stringify(a) === JSON.stringify(b);
}
function deepCopy(obj) {
  if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__.default)(obj) !== 'object' || obj === null) return obj;

  if (Array.isArray(obj)) {
    return obj.map(function (o) {
      return deepCopy(o);
    });
  } else {
    return Object.fromEntries(deepCopy((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__.default)(Object.entries(obj))));
  }
}
/**
 * Create a DOM element with an optional given ID and class list.
 *
 * If a parent is provided, the element is automatically added as a child.
 *
 * @param {*} type      Element tag (div, span, etc.)
 * @param {*} id        Optional element id
 * @param {*} classList Optional array of class names
 * @param {*} parent    Optional parent element
 *
 * @returns             The created DOM element
 */

function createElement(type) {
  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var classList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
  var element = document.createElement(type);
  if (id !== '') element.id = id;
  if (classList !== []) classList.forEach(function (class_name) {
    if (!element.classList.contains(class_name)) element.classList.add(class_name);
  });
  if (parent) parent.appendChild(element);
  return element;
}
/**
 * Similar to Object.assign, but skips properties that already exist in `obj`.
 */

function assignIfNotExists(obj, other) {
  var o = obj;

  for (var _i = 0, _Object$entries = Object.entries(other); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        val = _Object$entries$_i[1];

    if (!(key in obj)) o[key] = val;
  }

  return o;
}

/***/ }),

/***/ "./node_modules/complex.js/complex.js":
/*!********************************************!*\
  !*** ./node_modules/complex.js/complex.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license Complex.js v2.0.12 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

/**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */

(function(root) {

  'use strict';

  var cosh = function(x) {
    return (Math.exp(x) + Math.exp(-x)) * 0.5;
  };

  var sinh = function(x) {
    return (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  /**
   * Calculates cos(x) - 1 using Taylor series if x is small.
   *
   * @param {number} x
   * @returns {number} cos(x) - 1
   */

  var cosm1 = function(x) {
    var limit = Math.PI/4;
    if (x < -limit || x > limit) {
      return (Math.cos(x) - 1.0);
    }

    var xx = x * x;
    return xx *
      (-0.5 + xx *
        (1/24 + xx *
          (-1/720 + xx *
            (1/40320 + xx *
              (-1/3628800 + xx *
                (1/4790014600 + xx *
                  (-1/87178291200 + xx *
                    (1/20922789888000)
                  )
                )
              )
            )
          )
        )
      )
  };

  var hypot = function(x, y) {

    var a = Math.abs(x);
    var b = Math.abs(y);

    if (a < 3000 && b < 3000) {
      return Math.sqrt(a * a + b * b);
    }

    if (a < b) {
      a = b;
      b = x / y;
    } else {
      b = y / x;
    }
    return a * Math.sqrt(1 + b * b);
  };

  var parser_exit = function() {
    throw SyntaxError('Invalid Param');
  };

  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function logHypot(a, b) {

    var _a = Math.abs(a);
    var _b = Math.abs(b);

    if (a === 0) {
      return Math.log(_b);
    }

    if (b === 0) {
      return Math.log(_a);
    }

    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }

    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */

    return Math.log(a / Math.cos(Math.atan2(b, a)));
  }

  var parse = function(a, b) {

    var z = {'re': 0, 'im': 0};

    if (a === undefined || a === null) {
      z['re'] =
              z['im'] = 0;
    } else if (b !== undefined) {
      z['re'] = a;
      z['im'] = b;
    } else
      switch (typeof a) {

        case 'object':

          if ('im' in a && 're' in a) {
            z['re'] = a['re'];
            z['im'] = a['im'];
          } else if ('abs' in a && 'arg' in a) {
            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['abs'] * Math.cos(a['arg']);
            z['im'] = a['abs'] * Math.sin(a['arg']);
          } else if ('r' in a && 'phi' in a) {
            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['r'] * Math.cos(a['phi']);
            z['im'] = a['r'] * Math.sin(a['phi']);
          } else if (a.length === 2) { // Quick array check
            z['re'] = a[0];
            z['im'] = a[1];
          } else {
            parser_exit();
          }
          break;

        case 'string':

          z['im'] = /* void */
                  z['re'] = 0;

          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
          var plus = 1;
          var minus = 0;

          if (tokens === null) {
            parser_exit();
          }

          for (var i = 0; i < tokens.length; i++) {

            var c = tokens[i];

            if (c === ' ' || c === '\t' || c === '\n') {
              /* void */
            } else if (c === '+') {
              plus++;
            } else if (c === '-') {
              minus++;
            } else if (c === 'i' || c === 'I') {

              if (plus + minus === 0) {
                parser_exit();
              }

              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                i++;
              } else {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
              }
              plus = minus = 0;

            } else {

              if (plus + minus === 0 || isNaN(c)) {
                parser_exit();
              }

              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                i++;
              } else {
                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
              }
              plus = minus = 0;
            }
          }

          // Still something on the stack
          if (plus + minus > 0) {
            parser_exit();
          }
          break;

        case 'number':
          z['im'] = 0;
          z['re'] = a;
          break;

        default:
          parser_exit();
      }

    if (isNaN(z['re']) || isNaN(z['im'])) {
      // If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }

    return z;
  };

  /**
   * @constructor
   * @returns {Complex}
   */
  function Complex(a, b) {

    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }

    var z = parse(a, b);

    this['re'] = z['re'];
    this['im'] = z['im'];
  }

  Complex.prototype = {

    're': 0,
    'im': 0,

    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function() {

      var abs = this['abs']();

      return new Complex(
              this['re'] / abs,
              this['im'] / abs);
    },

    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function(a, b) {

      var z = new Complex(a, b);

      // Infinity + Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity + z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] + z['re'],
              this['im'] + z['im']);
    },

    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function(a, b) {

      var z = new Complex(a, b);

      // Infinity - Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity - z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] - z['re'],
              this['im'] - z['im']);
    },

    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function(a, b) {

      var z = new Complex(a, b);

      // Infinity * 0 = NaN
      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity * z = Infinity { where z != 0 }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      // Short circuit for real values
      if (z['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * z['re'], 0);
      }

      return new Complex(
              this['re'] * z['re'] - this['im'] * z['im'],
              this['re'] * z['im'] + this['im'] * z['re']);
    },

    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function(a, b) {

      var z = new Complex(a, b);

      // 0 / 0 = NaN and Infinity / Infinity = NaN
      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity / 0 = Infinity
      if (this['isInfinite']() || z['isZero']()) {
        return Complex['INFINITY'];
      }

      // 0 / Infinity = 0
      if (this['isZero']() || z['isInfinite']()) {
        return Complex['ZERO'];
      }

      a = this['re'];
      b = this['im'];

      var c = z['re'];
      var d = z['im'];
      var t, x;

      if (0 === d) {
        // Divisor is real
        return new Complex(a / c, b / c);
      }

      if (Math.abs(c) < Math.abs(d)) {

        x = c / d;
        t = c * x + d;

        return new Complex(
                (a * x + b) / t,
                (b * x - a) / t);

      } else {

        x = d / c;
        t = d * x + c;

        return new Complex(
                (a + b * x) / t,
                (b - a * x) / t);
      }
    },

    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function(a, b) {

      var z = new Complex(a, b);

      a = this['re'];
      b = this['im'];

      if (z['isZero']()) {
        return Complex['ONE'];
      }

      // If the exponent is real
      if (z['im'] === 0) {

        if (b === 0) {

          return new Complex(Math.pow(a, z['re']), 0);

        } else if (a === 0) { // If base is fully imaginary

          switch ((z['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, z['re']), 0);
            case 1:
              return new Complex(0, Math.pow(b, z['re']));
            case 2:
              return new Complex(-Math.pow(b, z['re']), 0);
            case 3:
              return new Complex(0, -Math.pow(b, z['re']));
          }
        }
      }

      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
        return Complex['ZERO'];
      }

      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);

      a = Math.exp(z['re'] * loh - z['im'] * arg);
      b = z['im'] * loh + z['re'] * arg;
      return new Complex(
              a * Math.cos(b),
              a * Math.sin(b));
    },

    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function() {

      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();

      var re, im;

      if (a >= 0) {

        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }

        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }

      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }

      return new Complex(re, b < 0 ? -im : im);
    },

    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function() {

      var tmp = Math.exp(this['re']);

      if (this['im'] === 0) {
        //return new Complex(tmp, 0);
      }
      return new Complex(
              tmp * Math.cos(this['im']),
              tmp * Math.sin(this['im']));
    },

    /**
     * Calculate the complex exponent and subtracts one.
     *
     * This may be more accurate than `Complex(x).exp().sub(1)` if
     * `x` is small.
     *
     * @returns {Complex}
     */
    'expm1': function() {

      /**
       * exp(a + i*b) - 1
       = exp(a) * (cos(b) + j*sin(b)) - 1
       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
       */

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.expm1(a) * Math.cos(b) + cosm1(b),
              Math.exp(a) * Math.sin(b));
    },

    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function() {

      var a = this['re'];
      var b = this['im'];

      if (b === 0 && a > 0) {
        //return new Complex(Math.log(a), 0);
      }

      return new Complex(
              logHypot(a, b),
              Math.atan2(b, a));
    },

    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function() {

      return hypot(this['re'], this['im']);
    },

    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function() {

      return Math.atan2(this['im'], this['re']);
    },

    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function() {

      // sin(c) = (e^b - e^(-b)) / (2i)

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.sin(a) * cosh(b),
              Math.cos(a) * sinh(b));
    },

    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function() {

      // cos(z) = (e^b + e^(-b)) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.cos(a) * cosh(b),
              -Math.sin(a) * sinh(b));
    },

    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function() {

      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) + cosh(b);

      return new Complex(
              Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function() {

      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) - cosh(b);

      return new Complex(
              -Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function() {

      // sec(c) = 2 / (e^(ci) + e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.cos(a) * cosh(b) / d,
              Math.sin(a) * sinh(b) / d);
    },

    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function() {

      // csc(c) = 2i / (e^(ci) - e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.sin(a) * cosh(b) / d,
              -Math.cos(a) * sinh(b) / d);
    },

    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function() {

      // asin(c) = -i * log(ci + sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(t2['im'], -t2['re']);
    },

    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function() {

      // acos(c) = i * log(c - i * sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },

    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function() {

      // atan(c) = i / 2 log((i + x) / (i - x))

      var a = this['re'];
      var b = this['im'];

      if (a === 0) {

        if (b === 1) {
          return new Complex(0, Infinity);
        }

        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }

      var d = a * a + (1.0 - b) * (1.0 - b);

      var t1 = new Complex(
              (1 - b * b - a * a) / d,
              -2 * a / d).log();

      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },

    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function() {

      // acot(c) = i / 2 log((c - i) / (c + i))

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atan()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atan();
    },

    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function() {

      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acos()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acos();
    },

    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function() {

      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asin()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asin();
    },

    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function() {

      // sinh(c) = (e^c - e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              sinh(a) * Math.cos(b),
              cosh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function() {

      // cosh(c) = (e^c + e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              cosh(a) * Math.cos(b),
              sinh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function() {

      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) + Math.cos(b);

      return new Complex(
              sinh(a) / d,
              Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function() {

      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) - Math.cos(b);

      return new Complex(
              sinh(a) / d,
              -Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function() {

      // csch(c) = 2 / (e^c - e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) - cosh(2 * a);

      return new Complex(
              -2 * sinh(a) * Math.cos(b) / d,
              2 * cosh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function() {

      // sech(c) = 2 / (e^c + e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) + cosh(2 * a);

      return new Complex(
              2 * cosh(a) * Math.cos(b) / d,
              -2 * sinh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function() {

      // asinh(c) = log(c + sqrt(c^2 + 1))

      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();

      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];

      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },

    /**
     * Calculate the complex acosh
     *
     * @returns {Complex}
     */
    'acosh': function() {

      // acosh(c) = log(c + sqrt(c^2 - 1))

      var res = this['acos']();
      if (res['im'] <= 0) {
        var tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        var tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }
      return res;
    },

    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function() {

      // atanh(c) = log((1+c) / (1-c)) / 2

      var a = this['re'];
      var b = this['im'];

      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;

      var x = (d !== 0)
              ? new Complex(
                      (onePlus * oneMinus - b * b) / d,
                      (b * oneMinus + onePlus * b) / d)
              : new Complex(
                      (a !== -1) ? (a / 0) : 0,
                      (b !== 0) ? (b / 0) : 0);

      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;
      if (noIM) {
        x['im'] = -x['im'];
      }
      return x;
    },

    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function() {

      // acoth(c) = log((c+1) / (c-1)) / 2

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Math.PI / 2);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atanh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atanh();
    },

    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function() {

      // acsch(c) = log((1+sqrt(1+c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {

        return new Complex(
                (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asinh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asinh();
    },

    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function() {

      // asech(c) = log((1+sqrt(1-c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acosh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acosh();
    },

    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function() {

      // 1 / 0 = Infinity and 1 / Infinity = 0
      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      if (this['isInfinite']()) {
        return Complex['ZERO'];
      }

      var a = this['re'];
      var b = this['im'];

      var d = a * a + b * b;

      return new Complex(a / d, -b / d);
    },

    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function() {

      return new Complex(this['re'], -this['im']);
    },

    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function() {

      return new Complex(-this['re'], -this['im']);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.ceil(this['re'] * places) / places,
              Math.ceil(this['im'] * places) / places);
    },

    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.floor(this['re'] * places) / places,
              Math.floor(this['im'] * places) / places);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.round(this['re'] * places) / places,
              Math.round(this['im'] * places) / places);
    },

    /**
     * Compares two complex numbers
     *
     * **Note:** new Complex(Infinity).equals(Infinity) === false
     *
     * @returns {boolean}
     */
    'equals': function(a, b) {

      var z = new Complex(a, b);

      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
    },

    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function() {

      return new Complex(this['re'], this['im']);
    },

    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function() {

      var a = this['re'];
      var b = this['im'];
      var ret = "";

      if (this['isNaN']()) {
        return 'NaN';
      }

      if (this['isInfinite']()) {
        return 'Infinity';
      }

      // If is real number
      if (b === 0) {
        return ret + a;
      }

      if (a !== 0) {
        ret+= a;
        ret+= " ";
        if (b < 0) {
          b = -b;
          ret+= "-";
        } else {
          ret+= "+";
        }
        ret+= " ";
      } else if (b < 0) {
        b = -b;
        ret+= "-";
      }

      if (1 !== b) { // b is the absolute imaginary part
        ret+= b;
      }
      return ret + "i";
    },

    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function() {

      return [this['re'], this['im']];
    },

    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function() {

      if (this['im'] === 0) {
        return this['re'];
      }
      return null;
    },

    /**
     * Determines whether a complex number is not on the Riemann sphere.
     *
     * @returns {boolean}
     */
    'isNaN': function() {
      return isNaN(this['re']) || isNaN(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the zero pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isZero': function() {
      return this['im'] === 0 && this['re'] === 0;
    },

    /**
     * Determines whether a complex number is not at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isFinite': function() {
      return isFinite(this['re']) && isFinite(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isInfinite': function() {
      return !(this['isNaN']() || this['isFinite']());
    }
  };

  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['INFINITY'] = new Complex(Infinity, Infinity);
  Complex['NAN'] = new Complex(NaN, NaN);
  Complex['EPSILON'] = 1e-16;

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return Complex;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

})(this);


/***/ }),

/***/ "./node_modules/dagre/index.js":
/*!*************************************!*\
  !*** ./node_modules/dagre/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
Copyright (c) 2012-2014 Chris Pettitt

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

module.exports = {
  graphlib: __webpack_require__(/*! ./lib/graphlib */ "./node_modules/dagre/lib/graphlib.js"),

  layout: __webpack_require__(/*! ./lib/layout */ "./node_modules/dagre/lib/layout.js"),
  debug: __webpack_require__(/*! ./lib/debug */ "./node_modules/dagre/lib/debug.js"),
  util: {
    time: __webpack_require__(/*! ./lib/util */ "./node_modules/dagre/lib/util.js").time,
    notime: __webpack_require__(/*! ./lib/util */ "./node_modules/dagre/lib/util.js").notime
  },
  version: __webpack_require__(/*! ./lib/version */ "./node_modules/dagre/lib/version.js")
};


/***/ }),

/***/ "./node_modules/dagre/lib/acyclic.js":
/*!*******************************************!*\
  !*** ./node_modules/dagre/lib/acyclic.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var greedyFAS = __webpack_require__(/*! ./greedy-fas */ "./node_modules/dagre/lib/greedy-fas.js");

module.exports = {
  run: run,
  undo: undo
};

function run(g) {
  var fas = (g.graph().acyclicer === "greedy"
    ? greedyFAS(g, weightFn(g))
    : dfsFAS(g));
  _.forEach(fas, function(e) {
    var label = g.edge(e);
    g.removeEdge(e);
    label.forwardName = e.name;
    label.reversed = true;
    g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
  });

  function weightFn(g) {
    return function(e) {
      return g.edge(e).weight;
    };
  }
}

function dfsFAS(g) {
  var fas = [];
  var stack = {};
  var visited = {};

  function dfs(v) {
    if (_.has(visited, v)) {
      return;
    }
    visited[v] = true;
    stack[v] = true;
    _.forEach(g.outEdges(v), function(e) {
      if (_.has(stack, e.w)) {
        fas.push(e);
      } else {
        dfs(e.w);
      }
    });
    delete stack[v];
  }

  _.forEach(g.nodes(), dfs);
  return fas;
}

function undo(g) {
  _.forEach(g.edges(), function(e) {
    var label = g.edge(e);
    if (label.reversed) {
      g.removeEdge(e);

      var forwardName = label.forwardName;
      delete label.reversed;
      delete label.forwardName;
      g.setEdge(e.w, e.v, label, forwardName);
    }
  });
}


/***/ }),

/***/ "./node_modules/dagre/lib/add-border-segments.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/add-border-segments.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js");

module.exports = addBorderSegments;

function addBorderSegments(g) {
  function dfs(v) {
    var children = g.children(v);
    var node = g.node(v);
    if (children.length) {
      _.forEach(children, dfs);
    }

    if (_.has(node, "minRank")) {
      node.borderLeft = [];
      node.borderRight = [];
      for (var rank = node.minRank, maxRank = node.maxRank + 1;
        rank < maxRank;
        ++rank) {
        addBorderNode(g, "borderLeft", "_bl", v, node, rank);
        addBorderNode(g, "borderRight", "_br", v, node, rank);
      }
    }
  }

  _.forEach(g.children(), dfs);
}

function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
  var label = { width: 0, height: 0, rank: rank, borderType: prop };
  var prev = sgNode[prop][rank - 1];
  var curr = util.addDummyNode(g, "border", label, prefix);
  sgNode[prop][rank] = curr;
  g.setParent(curr, sg);
  if (prev) {
    g.setEdge(prev, curr, { weight: 1 });
  }
}


/***/ }),

/***/ "./node_modules/dagre/lib/coordinate-system.js":
/*!*****************************************************!*\
  !*** ./node_modules/dagre/lib/coordinate-system.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = {
  adjust: adjust,
  undo: undo
};

function adjust(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "lr" || rankDir === "rl") {
    swapWidthHeight(g);
  }
}

function undo(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "bt" || rankDir === "rl") {
    reverseY(g);
  }

  if (rankDir === "lr" || rankDir === "rl") {
    swapXY(g);
    swapWidthHeight(g);
  }
}

function swapWidthHeight(g) {
  _.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
  _.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
}

function swapWidthHeightOne(attrs) {
  var w = attrs.width;
  attrs.width = attrs.height;
  attrs.height = w;
}

function reverseY(g) {
  _.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, reverseYOne);
    if (_.has(edge, "y")) {
      reverseYOne(edge);
    }
  });
}

function reverseYOne(attrs) {
  attrs.y = -attrs.y;
}

function swapXY(g) {
  _.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, swapXYOne);
    if (_.has(edge, "x")) {
      swapXYOne(edge);
    }
  });
}

function swapXYOne(attrs) {
  var x = attrs.x;
  attrs.x = attrs.y;
  attrs.y = x;
}


/***/ }),

/***/ "./node_modules/dagre/lib/data/list.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/data/list.js ***!
  \*********************************************/
/***/ ((module) => {

/*
 * Simple doubly linked list implementation derived from Cormen, et al.,
 * "Introduction to Algorithms".
 */

module.exports = List;

function List() {
  var sentinel = {};
  sentinel._next = sentinel._prev = sentinel;
  this._sentinel = sentinel;
}

List.prototype.dequeue = function() {
  var sentinel = this._sentinel;
  var entry = sentinel._prev;
  if (entry !== sentinel) {
    unlink(entry);
    return entry;
  }
};

List.prototype.enqueue = function(entry) {
  var sentinel = this._sentinel;
  if (entry._prev && entry._next) {
    unlink(entry);
  }
  entry._next = sentinel._next;
  sentinel._next._prev = entry;
  sentinel._next = entry;
  entry._prev = sentinel;
};

List.prototype.toString = function() {
  var strs = [];
  var sentinel = this._sentinel;
  var curr = sentinel._prev;
  while (curr !== sentinel) {
    strs.push(JSON.stringify(curr, filterOutLinks));
    curr = curr._prev;
  }
  return "[" + strs.join(", ") + "]";
};

function unlink(entry) {
  entry._prev._next = entry._next;
  entry._next._prev = entry._prev;
  delete entry._next;
  delete entry._prev;
}

function filterOutLinks(k, v) {
  if (k !== "_next" && k !== "_prev") {
    return v;
  }
}


/***/ }),

/***/ "./node_modules/dagre/lib/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/dagre/lib/debug.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js");
var Graph = __webpack_require__(/*! ./graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;

module.exports = {
  debugOrdering: debugOrdering
};

/* istanbul ignore next */
function debugOrdering(g) {
  var layerMatrix = util.buildLayerMatrix(g);

  var h = new Graph({ compound: true, multigraph: true }).setGraph({});

  _.forEach(g.nodes(), function(v) {
    h.setNode(v, { label: v });
    h.setParent(v, "layer" + g.node(v).rank);
  });

  _.forEach(g.edges(), function(e) {
    h.setEdge(e.v, e.w, {}, e.name);
  });

  _.forEach(layerMatrix, function(layer, i) {
    var layerV = "layer" + i;
    h.setNode(layerV, { rank: "same" });
    _.reduce(layer, function(u, v) {
      h.setEdge(u, v, { style: "invis" });
      return v;
    });
  });

  return h;
}


/***/ }),

/***/ "./node_modules/dagre/lib/graphlib.js":
/*!********************************************!*\
  !*** ./node_modules/dagre/lib/graphlib.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global window */

var graphlib;

if (true) {
  try {
    graphlib = __webpack_require__(/*! graphlib */ "./node_modules/graphlib/index.js");
  } catch (e) {
    // continue regardless of error
  }
}

if (!graphlib) {
  graphlib = window.graphlib;
}

module.exports = graphlib;


/***/ }),

/***/ "./node_modules/dagre/lib/greedy-fas.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/greedy-fas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var Graph = __webpack_require__(/*! ./graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;
var List = __webpack_require__(/*! ./data/list */ "./node_modules/dagre/lib/data/list.js");

/*
 * A greedy heuristic for finding a feedback arc set for a graph. A feedback
 * arc set is a set of edges that can be removed to make a graph acyclic.
 * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
 * effective heuristic for the feedback arc set problem." This implementation
 * adjusts that from the paper to allow for weighted edges.
 */
module.exports = greedyFAS;

var DEFAULT_WEIGHT_FN = _.constant(1);

function greedyFAS(g, weightFn) {
  if (g.nodeCount() <= 1) {
    return [];
  }
  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

  // Expand multi-edges
  return _.flatten(_.map(results, function(e) {
    return g.outEdges(e.v, e.w);
  }), true);
}

function doGreedyFAS(g, buckets, zeroIdx) {
  var results = [];
  var sources = buckets[buckets.length - 1];
  var sinks = buckets[0];

  var entry;
  while (g.nodeCount()) {
    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
    if (g.nodeCount()) {
      for (var i = buckets.length - 2; i > 0; --i) {
        entry = buckets[i].dequeue();
        if (entry) {
          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
          break;
        }
      }
    }
  }

  return results;
}

function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
  var results = collectPredecessors ? [] : undefined;

  _.forEach(g.inEdges(entry.v), function(edge) {
    var weight = g.edge(edge);
    var uEntry = g.node(edge.v);

    if (collectPredecessors) {
      results.push({ v: edge.v, w: edge.w });
    }

    uEntry.out -= weight;
    assignBucket(buckets, zeroIdx, uEntry);
  });

  _.forEach(g.outEdges(entry.v), function(edge) {
    var weight = g.edge(edge);
    var w = edge.w;
    var wEntry = g.node(w);
    wEntry["in"] -= weight;
    assignBucket(buckets, zeroIdx, wEntry);
  });

  g.removeNode(entry.v);

  return results;
}

function buildState(g, weightFn) {
  var fasGraph = new Graph();
  var maxIn = 0;
  var maxOut = 0;

  _.forEach(g.nodes(), function(v) {
    fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
  });

  // Aggregate weights on nodes, but also sum the weights across multi-edges
  // into a single edge for the fasGraph.
  _.forEach(g.edges(), function(e) {
    var prevWeight = fasGraph.edge(e.v, e.w) || 0;
    var weight = weightFn(e);
    var edgeWeight = prevWeight + weight;
    fasGraph.setEdge(e.v, e.w, edgeWeight);
    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
  });

  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });
  var zeroIdx = maxIn + 1;

  _.forEach(fasGraph.nodes(), function(v) {
    assignBucket(buckets, zeroIdx, fasGraph.node(v));
  });

  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
}

function assignBucket(buckets, zeroIdx, entry) {
  if (!entry.out) {
    buckets[0].enqueue(entry);
  } else if (!entry["in"]) {
    buckets[buckets.length - 1].enqueue(entry);
  } else {
    buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
  }
}


/***/ }),

/***/ "./node_modules/dagre/lib/layout.js":
/*!******************************************!*\
  !*** ./node_modules/dagre/lib/layout.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var acyclic = __webpack_require__(/*! ./acyclic */ "./node_modules/dagre/lib/acyclic.js");
var normalize = __webpack_require__(/*! ./normalize */ "./node_modules/dagre/lib/normalize.js");
var rank = __webpack_require__(/*! ./rank */ "./node_modules/dagre/lib/rank/index.js");
var normalizeRanks = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js").normalizeRanks;
var parentDummyChains = __webpack_require__(/*! ./parent-dummy-chains */ "./node_modules/dagre/lib/parent-dummy-chains.js");
var removeEmptyRanks = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js").removeEmptyRanks;
var nestingGraph = __webpack_require__(/*! ./nesting-graph */ "./node_modules/dagre/lib/nesting-graph.js");
var addBorderSegments = __webpack_require__(/*! ./add-border-segments */ "./node_modules/dagre/lib/add-border-segments.js");
var coordinateSystem = __webpack_require__(/*! ./coordinate-system */ "./node_modules/dagre/lib/coordinate-system.js");
var order = __webpack_require__(/*! ./order */ "./node_modules/dagre/lib/order/index.js");
var position = __webpack_require__(/*! ./position */ "./node_modules/dagre/lib/position/index.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js");
var Graph = __webpack_require__(/*! ./graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;

module.exports = layout;

function layout(g, opts) {
  var time = opts && opts.debugTiming ? util.time : util.notime;
  time("layout", function() {
    var layoutGraph = 
      time("  buildLayoutGraph", function() { return buildLayoutGraph(g); });
    time("  runLayout",        function() { runLayout(layoutGraph, time); });
    time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
  });
}

function runLayout(g, time) {
  time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
  time("    removeSelfEdges",        function() { removeSelfEdges(g); });
  time("    acyclic",                function() { acyclic.run(g); });
  time("    nestingGraph.run",       function() { nestingGraph.run(g); });
  time("    rank",                   function() { rank(util.asNonCompoundGraph(g)); });
  time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
  time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
  time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
  time("    normalizeRanks",         function() { normalizeRanks(g); });
  time("    assignRankMinMax",       function() { assignRankMinMax(g); });
  time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
  time("    normalize.run",          function() { normalize.run(g); });
  time("    parentDummyChains",      function() { parentDummyChains(g); });
  time("    addBorderSegments",      function() { addBorderSegments(g); });
  time("    order",                  function() { order(g); });
  time("    insertSelfEdges",        function() { insertSelfEdges(g); });
  time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
  time("    position",               function() { position(g); });
  time("    positionSelfEdges",      function() { positionSelfEdges(g); });
  time("    removeBorderNodes",      function() { removeBorderNodes(g); });
  time("    normalize.undo",         function() { normalize.undo(g); });
  time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
  time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
  time("    translateGraph",         function() { translateGraph(g); });
  time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
  time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
  time("    acyclic.undo",           function() { acyclic.undo(g); });
}

/*
 * Copies final layout information from the layout graph back to the input
 * graph. This process only copies whitelisted attributes from the layout graph
 * to the input graph, so it serves as a good place to determine what
 * attributes can influence layout.
 */
function updateInputGraph(inputGraph, layoutGraph) {
  _.forEach(inputGraph.nodes(), function(v) {
    var inputLabel = inputGraph.node(v);
    var layoutLabel = layoutGraph.node(v);

    if (inputLabel) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;

      if (layoutGraph.children(v).length) {
        inputLabel.width = layoutLabel.width;
        inputLabel.height = layoutLabel.height;
      }
    }
  });

  _.forEach(inputGraph.edges(), function(e) {
    var inputLabel = inputGraph.edge(e);
    var layoutLabel = layoutGraph.edge(e);

    inputLabel.points = layoutLabel.points;
    if (_.has(layoutLabel, "x")) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;
    }
  });

  inputGraph.graph().width = layoutGraph.graph().width;
  inputGraph.graph().height = layoutGraph.graph().height;
}

var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
var nodeNumAttrs = ["width", "height"];
var nodeDefaults = { width: 0, height: 0 };
var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
var edgeDefaults = {
  minlen: 1, weight: 1, width: 0, height: 0,
  labeloffset: 10, labelpos: "r"
};
var edgeAttrs = ["labelpos"];

/*
 * Constructs a new graph from the input graph, which can be used for layout.
 * This process copies only whitelisted attributes from the input graph to the
 * layout graph. Thus this function serves as a good place to determine what
 * attributes can influence layout.
 */
function buildLayoutGraph(inputGraph) {
  var g = new Graph({ multigraph: true, compound: true });
  var graph = canonicalize(inputGraph.graph());

  g.setGraph(_.merge({},
    graphDefaults,
    selectNumberAttrs(graph, graphNumAttrs),
    _.pick(graph, graphAttrs)));

  _.forEach(inputGraph.nodes(), function(v) {
    var node = canonicalize(inputGraph.node(v));
    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
    g.setParent(v, inputGraph.parent(v));
  });

  _.forEach(inputGraph.edges(), function(e) {
    var edge = canonicalize(inputGraph.edge(e));
    g.setEdge(e, _.merge({},
      edgeDefaults,
      selectNumberAttrs(edge, edgeNumAttrs),
      _.pick(edge, edgeAttrs)));
  });

  return g;
}

/*
 * This idea comes from the Gansner paper: to account for edge labels in our
 * layout we split each rank in half by doubling minlen and halving ranksep.
 * Then we can place labels at these mid-points between nodes.
 *
 * We also add some minimal padding to the width to push the label for the edge
 * away from the edge itself a bit.
 */
function makeSpaceForEdgeLabels(g) {
  var graph = g.graph();
  graph.ranksep /= 2;
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    edge.minlen *= 2;
    if (edge.labelpos.toLowerCase() !== "c") {
      if (graph.rankdir === "TB" || graph.rankdir === "BT") {
        edge.width += edge.labeloffset;
      } else {
        edge.height += edge.labeloffset;
      }
    }
  });
}

/*
 * Creates temporary dummy nodes that capture the rank in which each edge's
 * label is going to, if it has one of non-zero width and height. We do this
 * so that we can safely remove empty ranks while preserving balance for the
 * label's position.
 */
function injectEdgeLabelProxies(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.width && edge.height) {
      var v = g.node(e.v);
      var w = g.node(e.w);
      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
      util.addDummyNode(g, "edge-proxy", label, "_ep");
    }
  });
}

function assignRankMinMax(g) {
  var maxRank = 0;
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.borderTop) {
      node.minRank = g.node(node.borderTop).rank;
      node.maxRank = g.node(node.borderBottom).rank;
      maxRank = _.max(maxRank, node.maxRank);
    }
  });
  g.graph().maxRank = maxRank;
}

function removeEdgeLabelProxies(g) {
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "edge-proxy") {
      g.edge(node.e).labelRank = node.rank;
      g.removeNode(v);
    }
  });
}

function translateGraph(g) {
  var minX = Number.POSITIVE_INFINITY;
  var maxX = 0;
  var minY = Number.POSITIVE_INFINITY;
  var maxY = 0;
  var graphLabel = g.graph();
  var marginX = graphLabel.marginx || 0;
  var marginY = graphLabel.marginy || 0;

  function getExtremes(attrs) {
    var x = attrs.x;
    var y = attrs.y;
    var w = attrs.width;
    var h = attrs.height;
    minX = Math.min(minX, x - w / 2);
    maxX = Math.max(maxX, x + w / 2);
    minY = Math.min(minY, y - h / 2);
    maxY = Math.max(maxY, y + h / 2);
  }

  _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      getExtremes(edge);
    }
  });

  minX -= marginX;
  minY -= marginY;

  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    node.x -= minX;
    node.y -= minY;
  });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, function(p) {
      p.x -= minX;
      p.y -= minY;
    });
    if (_.has(edge, "x")) { edge.x -= minX; }
    if (_.has(edge, "y")) { edge.y -= minY; }
  });

  graphLabel.width = maxX - minX + marginX;
  graphLabel.height = maxY - minY + marginY;
}

function assignNodeIntersects(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    var nodeV = g.node(e.v);
    var nodeW = g.node(e.w);
    var p1, p2;
    if (!edge.points) {
      edge.points = [];
      p1 = nodeW;
      p2 = nodeV;
    } else {
      p1 = edge.points[0];
      p2 = edge.points[edge.points.length - 1];
    }
    edge.points.unshift(util.intersectRect(nodeV, p1));
    edge.points.push(util.intersectRect(nodeW, p2));
  });
}

function fixupEdgeLabelCoords(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      if (edge.labelpos === "l" || edge.labelpos === "r") {
        edge.width -= edge.labeloffset;
      }
      switch (edge.labelpos) {
      case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
      case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
      }
    }
  });
}

function reversePointsForReversedEdges(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.reversed) {
      edge.points.reverse();
    }
  });
}

function removeBorderNodes(g) {
  _.forEach(g.nodes(), function(v) {
    if (g.children(v).length) {
      var node = g.node(v);
      var t = g.node(node.borderTop);
      var b = g.node(node.borderBottom);
      var l = g.node(_.last(node.borderLeft));
      var r = g.node(_.last(node.borderRight));

      node.width = Math.abs(r.x - l.x);
      node.height = Math.abs(b.y - t.y);
      node.x = l.x + node.width / 2;
      node.y = t.y + node.height / 2;
    }
  });

  _.forEach(g.nodes(), function(v) {
    if (g.node(v).dummy === "border") {
      g.removeNode(v);
    }
  });
}

function removeSelfEdges(g) {
  _.forEach(g.edges(), function(e) {
    if (e.v === e.w) {
      var node = g.node(e.v);
      if (!node.selfEdges) {
        node.selfEdges = [];
      }
      node.selfEdges.push({ e: e, label: g.edge(e) });
      g.removeEdge(e);
    }
  });
}

function insertSelfEdges(g) {
  var layers = util.buildLayerMatrix(g);
  _.forEach(layers, function(layer) {
    var orderShift = 0;
    _.forEach(layer, function(v, i) {
      var node = g.node(v);
      node.order = i + orderShift;
      _.forEach(node.selfEdges, function(selfEdge) {
        util.addDummyNode(g, "selfedge", {
          width: selfEdge.label.width,
          height: selfEdge.label.height,
          rank: node.rank,
          order: i + (++orderShift),
          e: selfEdge.e,
          label: selfEdge.label
        }, "_se");
      });
      delete node.selfEdges;
    });
  });
}

function positionSelfEdges(g) {
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "selfedge") {
      var selfNode = g.node(node.e.v);
      var x = selfNode.x + selfNode.width / 2;
      var y = selfNode.y;
      var dx = node.x - x;
      var dy = selfNode.height / 2;
      g.setEdge(node.e, node.label);
      g.removeNode(v);
      node.label.points = [
        { x: x + 2 * dx / 3, y: y - dy },
        { x: x + 5 * dx / 6, y: y - dy },
        { x: x +     dx    , y: y },
        { x: x + 5 * dx / 6, y: y + dy },
        { x: x + 2 * dx / 3, y: y + dy }
      ];
      node.label.x = node.x;
      node.label.y = node.y;
    }
  });
}

function selectNumberAttrs(obj, attrs) {
  return _.mapValues(_.pick(obj, attrs), Number);
}

function canonicalize(attrs) {
  var newAttrs = {};
  _.forEach(attrs, function(v, k) {
    newAttrs[k.toLowerCase()] = v;
  });
  return newAttrs;
}


/***/ }),

/***/ "./node_modules/dagre/lib/lodash.js":
/*!******************************************!*\
  !*** ./node_modules/dagre/lib/lodash.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global window */

var lodash;

if (true) {
  try {
    lodash = {
      cloneDeep: __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"),
      constant: __webpack_require__(/*! lodash/constant */ "./node_modules/lodash/constant.js"),
      defaults: __webpack_require__(/*! lodash/defaults */ "./node_modules/lodash/defaults.js"),
      each: __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js"),
      filter: __webpack_require__(/*! lodash/filter */ "./node_modules/lodash/filter.js"),
      find: __webpack_require__(/*! lodash/find */ "./node_modules/lodash/find.js"),
      flatten: __webpack_require__(/*! lodash/flatten */ "./node_modules/lodash/flatten.js"),
      forEach: __webpack_require__(/*! lodash/forEach */ "./node_modules/lodash/forEach.js"),
      forIn: __webpack_require__(/*! lodash/forIn */ "./node_modules/lodash/forIn.js"),
      has:  __webpack_require__(/*! lodash/has */ "./node_modules/lodash/has.js"),
      isUndefined: __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js"),
      last: __webpack_require__(/*! lodash/last */ "./node_modules/lodash/last.js"),
      map: __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js"),
      mapValues: __webpack_require__(/*! lodash/mapValues */ "./node_modules/lodash/mapValues.js"),
      max: __webpack_require__(/*! lodash/max */ "./node_modules/lodash/max.js"),
      merge: __webpack_require__(/*! lodash/merge */ "./node_modules/lodash/merge.js"),
      min: __webpack_require__(/*! lodash/min */ "./node_modules/lodash/min.js"),
      minBy: __webpack_require__(/*! lodash/minBy */ "./node_modules/lodash/minBy.js"),
      now: __webpack_require__(/*! lodash/now */ "./node_modules/lodash/now.js"),
      pick: __webpack_require__(/*! lodash/pick */ "./node_modules/lodash/pick.js"),
      range: __webpack_require__(/*! lodash/range */ "./node_modules/lodash/range.js"),
      reduce: __webpack_require__(/*! lodash/reduce */ "./node_modules/lodash/reduce.js"),
      sortBy: __webpack_require__(/*! lodash/sortBy */ "./node_modules/lodash/sortBy.js"),
      uniqueId: __webpack_require__(/*! lodash/uniqueId */ "./node_modules/lodash/uniqueId.js"),
      values: __webpack_require__(/*! lodash/values */ "./node_modules/lodash/values.js"),
      zipObject: __webpack_require__(/*! lodash/zipObject */ "./node_modules/lodash/zipObject.js"),
    };
  } catch (e) {
    // continue regardless of error
  }
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;


/***/ }),

/***/ "./node_modules/dagre/lib/nesting-graph.js":
/*!*************************************************!*\
  !*** ./node_modules/dagre/lib/nesting-graph.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js");

module.exports = {
  run: run,
  cleanup: cleanup
};

/*
 * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
 * adds appropriate edges to ensure that all cluster nodes are placed between
 * these boundries, and ensures that the graph is connected.
 *
 * In addition we ensure, through the use of the minlen property, that nodes
 * and subgraph border nodes to not end up on the same rank.
 *
 * Preconditions:
 *
 *    1. Input graph is a DAG
 *    2. Nodes in the input graph has a minlen attribute
 *
 * Postconditions:
 *
 *    1. Input graph is connected.
 *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
 *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
 *       get placed on the same rank as subgraph border nodes.
 *
 * The nesting graph idea comes from Sander, "Layout of Compound Directed
 * Graphs."
 */
function run(g) {
  var root = util.addDummyNode(g, "root", {}, "_root");
  var depths = treeDepths(g);
  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array
  var nodeSep = 2 * height + 1;

  g.graph().nestingRoot = root;

  // Multiply minlen by nodeSep to align nodes on non-border ranks.
  _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

  // Calculate a weight that is sufficient to keep subgraphs vertically compact
  var weight = sumWeights(g) + 1;

  // Create border nodes and link them up
  _.forEach(g.children(), function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);
  });

  // Save the multiplier for node layers for later removal of empty border
  // layers.
  g.graph().nodeRankFactor = nodeSep;
}

function dfs(g, root, nodeSep, weight, height, depths, v) {
  var children = g.children(v);
  if (!children.length) {
    if (v !== root) {
      g.setEdge(root, v, { weight: 0, minlen: nodeSep });
    }
    return;
  }

  var top = util.addBorderNode(g, "_bt");
  var bottom = util.addBorderNode(g, "_bb");
  var label = g.node(v);

  g.setParent(top, v);
  label.borderTop = top;
  g.setParent(bottom, v);
  label.borderBottom = bottom;

  _.forEach(children, function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);

    var childNode = g.node(child);
    var childTop = childNode.borderTop ? childNode.borderTop : child;
    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
    var thisWeight = childNode.borderTop ? weight : 2 * weight;
    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

    g.setEdge(top, childTop, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });

    g.setEdge(childBottom, bottom, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });
  });

  if (!g.parent(v)) {
    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
  }
}

function treeDepths(g) {
  var depths = {};
  function dfs(v, depth) {
    var children = g.children(v);
    if (children && children.length) {
      _.forEach(children, function(child) {
        dfs(child, depth + 1);
      });
    }
    depths[v] = depth;
  }
  _.forEach(g.children(), function(v) { dfs(v, 1); });
  return depths;
}

function sumWeights(g) {
  return _.reduce(g.edges(), function(acc, e) {
    return acc + g.edge(e).weight;
  }, 0);
}

function cleanup(g) {
  var graphLabel = g.graph();
  g.removeNode(graphLabel.nestingRoot);
  delete graphLabel.nestingRoot;
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.nestingEdge) {
      g.removeEdge(e);
    }
  });
}


/***/ }),

/***/ "./node_modules/dagre/lib/normalize.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/normalize.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/util.js");

module.exports = {
  run: run,
  undo: undo
};

/*
 * Breaks any long edges in the graph into short segments that span 1 layer
 * each. This operation is undoable with the denormalize function.
 *
 * Pre-conditions:
 *
 *    1. The input graph is a DAG.
 *    2. Each node in the graph has a "rank" property.
 *
 * Post-condition:
 *
 *    1. All edges in the graph have a length of 1.
 *    2. Dummy nodes are added where edges have been split into segments.
 *    3. The graph is augmented with a "dummyChains" attribute which contains
 *       the first dummy in each chain of dummy nodes produced.
 */
function run(g) {
  g.graph().dummyChains = [];
  _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });
}

function normalizeEdge(g, e) {
  var v = e.v;
  var vRank = g.node(v).rank;
  var w = e.w;
  var wRank = g.node(w).rank;
  var name = e.name;
  var edgeLabel = g.edge(e);
  var labelRank = edgeLabel.labelRank;

  if (wRank === vRank + 1) return;

  g.removeEdge(e);

  var dummy, attrs, i;
  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
    edgeLabel.points = [];
    attrs = {
      width: 0, height: 0,
      edgeLabel: edgeLabel, edgeObj: e,
      rank: vRank
    };
    dummy = util.addDummyNode(g, "edge", attrs, "_d");
    if (vRank === labelRank) {
      attrs.width = edgeLabel.width;
      attrs.height = edgeLabel.height;
      attrs.dummy = "edge-label";
      attrs.labelpos = edgeLabel.labelpos;
    }
    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
    if (i === 0) {
      g.graph().dummyChains.push(dummy);
    }
    v = dummy;
  }

  g.setEdge(v, w, { weight: edgeLabel.weight }, name);
}

function undo(g) {
  _.forEach(g.graph().dummyChains, function(v) {
    var node = g.node(v);
    var origLabel = node.edgeLabel;
    var w;
    g.setEdge(node.edgeObj, origLabel);
    while (node.dummy) {
      w = g.successors(v)[0];
      g.removeNode(v);
      origLabel.points.push({ x: node.x, y: node.y });
      if (node.dummy === "edge-label") {
        origLabel.x = node.x;
        origLabel.y = node.y;
        origLabel.width = node.width;
        origLabel.height = node.height;
      }
      v = w;
      node = g.node(v);
    }
  });
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/add-subgraph-constraints.js":
/*!******************************************************************!*\
  !*** ./node_modules/dagre/lib/order/add-subgraph-constraints.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = addSubgraphConstraints;

function addSubgraphConstraints(g, cg, vs) {
  var prev = {},
    rootPrev;

  _.forEach(vs, function(v) {
    var child = g.parent(v),
      parent,
      prevChild;
    while (child) {
      parent = g.parent(child);
      if (parent) {
        prevChild = prev[parent];
        prev[parent] = child;
      } else {
        prevChild = rootPrev;
        rootPrev = child;
      }
      if (prevChild && prevChild !== child) {
        cg.setEdge(prevChild, child);
        return;
      }
      child = parent;
    }
  });

  /*
  function dfs(v) {
    var children = v ? g.children(v) : g.children();
    if (children.length) {
      var min = Number.POSITIVE_INFINITY,
          subgraphs = [];
      _.each(children, function(child) {
        var childMin = dfs(child);
        if (g.children(child).length) {
          subgraphs.push({ v: child, order: childMin });
        }
        min = Math.min(min, childMin);
      });
      _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
        cg.setEdge(prev.v, curr.v);
        return curr;
      });
      return min;
    }
    return g.node(v).order;
  }
  dfs(undefined);
  */
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/barycenter.js":
/*!****************************************************!*\
  !*** ./node_modules/dagre/lib/order/barycenter.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = barycenter;

function barycenter(g, movable) {
  return _.map(movable, function(v) {
    var inV = g.inEdges(v);
    if (!inV.length) {
      return { v: v };
    } else {
      var result = _.reduce(inV, function(acc, e) {
        var edge = g.edge(e),
          nodeU = g.node(e.v);
        return {
          sum: acc.sum + (edge.weight * nodeU.order),
          weight: acc.weight + edge.weight
        };
      }, { sum: 0, weight: 0 });

      return {
        v: v,
        barycenter: result.sum / result.weight,
        weight: result.weight
      };
    }
  });
}



/***/ }),

/***/ "./node_modules/dagre/lib/order/build-layer-graph.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre/lib/order/build-layer-graph.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var Graph = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;

module.exports = buildLayerGraph;

/*
 * Constructs a graph that can be used to sort a layer of nodes. The graph will
 * contain all base and subgraph nodes from the request layer in their original
 * hierarchy and any edges that are incident on these nodes and are of the type
 * requested by the "relationship" parameter.
 *
 * Nodes from the requested rank that do not have parents are assigned a root
 * node in the output graph, which is set in the root graph attribute. This
 * makes it easy to walk the hierarchy of movable nodes during ordering.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG
 *    2. Base nodes in the input graph have a rank attribute
 *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
 *    4. Edges have an assigned weight
 *
 * Post-conditions:
 *
 *    1. Output graph has all nodes in the movable rank with preserved
 *       hierarchy.
 *    2. Root nodes in the movable layer are made children of the node
 *       indicated by the root attribute of the graph.
 *    3. Non-movable nodes incident on movable nodes, selected by the
 *       relationship parameter, are included in the graph (without hierarchy).
 *    4. Edges incident on movable nodes, selected by the relationship
 *       parameter, are added to the output graph.
 *    5. The weights for copied edges are aggregated as need, since the output
 *       graph is not a multi-graph.
 */
function buildLayerGraph(g, rank, relationship) {
  var root = createRootNode(g),
    result = new Graph({ compound: true }).setGraph({ root: root })
      .setDefaultNodeLabel(function(v) { return g.node(v); });

  _.forEach(g.nodes(), function(v) {
    var node = g.node(v),
      parent = g.parent(v);

    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
      result.setNode(v);
      result.setParent(v, parent || root);

      // This assumes we have only short edges!
      _.forEach(g[relationship](v), function(e) {
        var u = e.v === v ? e.w : e.v,
          edge = result.edge(u, v),
          weight = !_.isUndefined(edge) ? edge.weight : 0;
        result.setEdge(u, v, { weight: g.edge(e).weight + weight });
      });

      if (_.has(node, "minRank")) {
        result.setNode(v, {
          borderLeft: node.borderLeft[rank],
          borderRight: node.borderRight[rank]
        });
      }
    }
  });

  return result;
}

function createRootNode(g) {
  var v;
  while (g.hasNode((v = _.uniqueId("_root"))));
  return v;
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/cross-count.js":
/*!*****************************************************!*\
  !*** ./node_modules/dagre/lib/order/cross-count.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = crossCount;

/*
 * A function that takes a layering (an array of layers, each with an array of
 * ordererd nodes) and a graph and returns a weighted crossing count.
 *
 * Pre-conditions:
 *
 *    1. Input graph must be simple (not a multigraph), directed, and include
 *       only simple edges.
 *    2. Edges in the input graph must have assigned weights.
 *
 * Post-conditions:
 *
 *    1. The graph and layering matrix are left unchanged.
 *
 * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
 */
function crossCount(g, layering) {
  var cc = 0;
  for (var i = 1; i < layering.length; ++i) {
    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
  }
  return cc;
}

function twoLayerCrossCount(g, northLayer, southLayer) {
  // Sort all of the edges between the north and south layers by their position
  // in the north layer and then the south. Map these edges to the position of
  // their head in the south layer.
  var southPos = _.zipObject(southLayer,
    _.map(southLayer, function (v, i) { return i; }));
  var southEntries = _.flatten(_.map(northLayer, function(v) {
    return _.sortBy(_.map(g.outEdges(v), function(e) {
      return { pos: southPos[e.w], weight: g.edge(e).weight };
    }), "pos");
  }), true);

  // Build the accumulator tree
  var firstIndex = 1;
  while (firstIndex < southLayer.length) firstIndex <<= 1;
  var treeSize = 2 * firstIndex - 1;
  firstIndex -= 1;
  var tree = _.map(new Array(treeSize), function() { return 0; });

  // Calculate the weighted crossings
  var cc = 0;
  _.forEach(southEntries.forEach(function(entry) {
    var index = entry.pos + firstIndex;
    tree[index] += entry.weight;
    var weightSum = 0;
    while (index > 0) {
      if (index % 2) {
        weightSum += tree[index + 1];
      }
      index = (index - 1) >> 1;
      tree[index] += entry.weight;
    }
    cc += entry.weight * weightSum;
  }));

  return cc;
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/index.js":
/*!***********************************************!*\
  !*** ./node_modules/dagre/lib/order/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var initOrder = __webpack_require__(/*! ./init-order */ "./node_modules/dagre/lib/order/init-order.js");
var crossCount = __webpack_require__(/*! ./cross-count */ "./node_modules/dagre/lib/order/cross-count.js");
var sortSubgraph = __webpack_require__(/*! ./sort-subgraph */ "./node_modules/dagre/lib/order/sort-subgraph.js");
var buildLayerGraph = __webpack_require__(/*! ./build-layer-graph */ "./node_modules/dagre/lib/order/build-layer-graph.js");
var addSubgraphConstraints = __webpack_require__(/*! ./add-subgraph-constraints */ "./node_modules/dagre/lib/order/add-subgraph-constraints.js");
var Graph = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;
var util = __webpack_require__(/*! ../util */ "./node_modules/dagre/lib/util.js");

module.exports = order;

/*
 * Applies heuristics to minimize edge crossings in the graph and sets the best
 * order solution as an order attribute on each node.
 *
 * Pre-conditions:
 *
 *    1. Graph must be DAG
 *    2. Graph nodes must be objects with a "rank" attribute
 *    3. Graph edges must have the "weight" attribute
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have an "order" attribute based on the results of the
 *       algorithm.
 */
function order(g) {
  var maxRank = util.maxRank(g),
    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"),
    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");

  var layering = initOrder(g);
  assignOrder(g, layering);

  var bestCC = Number.POSITIVE_INFINITY,
    best;

  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

    layering = util.buildLayerMatrix(g);
    var cc = crossCount(g, layering);
    if (cc < bestCC) {
      lastBest = 0;
      best = _.cloneDeep(layering);
      bestCC = cc;
    }
  }

  assignOrder(g, best);
}

function buildLayerGraphs(g, ranks, relationship) {
  return _.map(ranks, function(rank) {
    return buildLayerGraph(g, rank, relationship);
  });
}

function sweepLayerGraphs(layerGraphs, biasRight) {
  var cg = new Graph();
  _.forEach(layerGraphs, function(lg) {
    var root = lg.graph().root;
    var sorted = sortSubgraph(lg, root, cg, biasRight);
    _.forEach(sorted.vs, function(v, i) {
      lg.node(v).order = i;
    });
    addSubgraphConstraints(lg, cg, sorted.vs);
  });
}

function assignOrder(g, layering) {
  _.forEach(layering, function(layer) {
    _.forEach(layer, function(v, i) {
      g.node(v).order = i;
    });
  });
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/init-order.js":
/*!****************************************************!*\
  !*** ./node_modules/dagre/lib/order/init-order.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = initOrder;

/*
 * Assigns an initial order value for each node by performing a DFS search
 * starting from nodes in the first rank. Nodes are assigned an order in their
 * rank as they are first visited.
 *
 * This approach comes from Gansner, et al., "A Technique for Drawing Directed
 * Graphs."
 *
 * Returns a layering matrix with an array per layer and each layer sorted by
 * the order of its nodes.
 */
function initOrder(g) {
  var visited = {};
  var simpleNodes = _.filter(g.nodes(), function(v) {
    return !g.children(v).length;
  });
  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));
  var layers = _.map(_.range(maxRank + 1), function() { return []; });

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    var node = g.node(v);
    layers[node.rank].push(v);
    _.forEach(g.successors(v), dfs);
  }

  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
  _.forEach(orderedVs, dfs);

  return layers;
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/resolve-conflicts.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre/lib/order/resolve-conflicts.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = resolveConflicts;

/*
 * Given a list of entries of the form {v, barycenter, weight} and a
 * constraint graph this function will resolve any conflicts between the
 * constraint graph and the barycenters for the entries. If the barycenters for
 * an entry would violate a constraint in the constraint graph then we coalesce
 * the nodes in the conflict into a new node that respects the contraint and
 * aggregates barycenter and weight information.
 *
 * This implementation is based on the description in Forster, "A Fast and
 * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
 * differs in some specific details.
 *
 * Pre-conditions:
 *
 *    1. Each entry has the form {v, barycenter, weight}, or if the node has
 *       no barycenter, then {v}.
 *
 * Returns:
 *
 *    A new list of entries of the form {vs, i, barycenter, weight}. The list
 *    `vs` may either be a singleton or it may be an aggregation of nodes
 *    ordered such that they do not violate constraints from the constraint
 *    graph. The property `i` is the lowest original index of any of the
 *    elements in `vs`.
 */
function resolveConflicts(entries, cg) {
  var mappedEntries = {};
  _.forEach(entries, function(entry, i) {
    var tmp = mappedEntries[entry.v] = {
      indegree: 0,
      "in": [],
      out: [],
      vs: [entry.v],
      i: i
    };
    if (!_.isUndefined(entry.barycenter)) {
      tmp.barycenter = entry.barycenter;
      tmp.weight = entry.weight;
    }
  });

  _.forEach(cg.edges(), function(e) {
    var entryV = mappedEntries[e.v];
    var entryW = mappedEntries[e.w];
    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
      entryW.indegree++;
      entryV.out.push(mappedEntries[e.w]);
    }
  });

  var sourceSet = _.filter(mappedEntries, function(entry) {
    return !entry.indegree;
  });

  return doResolveConflicts(sourceSet);
}

function doResolveConflicts(sourceSet) {
  var entries = [];

  function handleIn(vEntry) {
    return function(uEntry) {
      if (uEntry.merged) {
        return;
      }
      if (_.isUndefined(uEntry.barycenter) ||
          _.isUndefined(vEntry.barycenter) ||
          uEntry.barycenter >= vEntry.barycenter) {
        mergeEntries(vEntry, uEntry);
      }
    };
  }

  function handleOut(vEntry) {
    return function(wEntry) {
      wEntry["in"].push(vEntry);
      if (--wEntry.indegree === 0) {
        sourceSet.push(wEntry);
      }
    };
  }

  while (sourceSet.length) {
    var entry = sourceSet.pop();
    entries.push(entry);
    _.forEach(entry["in"].reverse(), handleIn(entry));
    _.forEach(entry.out, handleOut(entry));
  }

  return _.map(_.filter(entries, function(entry) { return !entry.merged; }),
    function(entry) {
      return _.pick(entry, ["vs", "i", "barycenter", "weight"]);
    });

}

function mergeEntries(target, source) {
  var sum = 0;
  var weight = 0;

  if (target.weight) {
    sum += target.barycenter * target.weight;
    weight += target.weight;
  }

  if (source.weight) {
    sum += source.barycenter * source.weight;
    weight += source.weight;
  }

  target.vs = source.vs.concat(target.vs);
  target.barycenter = sum / weight;
  target.weight = weight;
  target.i = Math.min(source.i, target.i);
  source.merged = true;
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/sort-subgraph.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/order/sort-subgraph.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var barycenter = __webpack_require__(/*! ./barycenter */ "./node_modules/dagre/lib/order/barycenter.js");
var resolveConflicts = __webpack_require__(/*! ./resolve-conflicts */ "./node_modules/dagre/lib/order/resolve-conflicts.js");
var sort = __webpack_require__(/*! ./sort */ "./node_modules/dagre/lib/order/sort.js");

module.exports = sortSubgraph;

function sortSubgraph(g, v, cg, biasRight) {
  var movable = g.children(v);
  var node = g.node(v);
  var bl = node ? node.borderLeft : undefined;
  var br = node ? node.borderRight: undefined;
  var subgraphs = {};

  if (bl) {
    movable = _.filter(movable, function(w) {
      return w !== bl && w !== br;
    });
  }

  var barycenters = barycenter(g, movable);
  _.forEach(barycenters, function(entry) {
    if (g.children(entry.v).length) {
      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
      subgraphs[entry.v] = subgraphResult;
      if (_.has(subgraphResult, "barycenter")) {
        mergeBarycenters(entry, subgraphResult);
      }
    }
  });

  var entries = resolveConflicts(barycenters, cg);
  expandSubgraphs(entries, subgraphs);

  var result = sort(entries, biasRight);

  if (bl) {
    result.vs = _.flatten([bl, result.vs, br], true);
    if (g.predecessors(bl).length) {
      var blPred = g.node(g.predecessors(bl)[0]),
        brPred = g.node(g.predecessors(br)[0]);
      if (!_.has(result, "barycenter")) {
        result.barycenter = 0;
        result.weight = 0;
      }
      result.barycenter = (result.barycenter * result.weight +
                           blPred.order + brPred.order) / (result.weight + 2);
      result.weight += 2;
    }
  }

  return result;
}

function expandSubgraphs(entries, subgraphs) {
  _.forEach(entries, function(entry) {
    entry.vs = _.flatten(entry.vs.map(function(v) {
      if (subgraphs[v]) {
        return subgraphs[v].vs;
      }
      return v;
    }), true);
  });
}

function mergeBarycenters(target, other) {
  if (!_.isUndefined(target.barycenter)) {
    target.barycenter = (target.barycenter * target.weight +
                         other.barycenter * other.weight) /
                        (target.weight + other.weight);
    target.weight += other.weight;
  } else {
    target.barycenter = other.barycenter;
    target.weight = other.weight;
  }
}


/***/ }),

/***/ "./node_modules/dagre/lib/order/sort.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/order/sort.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ../util */ "./node_modules/dagre/lib/util.js");

module.exports = sort;

function sort(entries, biasRight) {
  var parts = util.partition(entries, function(entry) {
    return _.has(entry, "barycenter");
  });
  var sortable = parts.lhs,
    unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),
    vs = [],
    sum = 0,
    weight = 0,
    vsIndex = 0;

  sortable.sort(compareWithBias(!!biasRight));

  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

  _.forEach(sortable, function (entry) {
    vsIndex += entry.vs.length;
    vs.push(entry.vs);
    sum += entry.barycenter * entry.weight;
    weight += entry.weight;
    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
  });

  var result = { vs: _.flatten(vs, true) };
  if (weight) {
    result.barycenter = sum / weight;
    result.weight = weight;
  }
  return result;
}

function consumeUnsortable(vs, unsortable, index) {
  var last;
  while (unsortable.length && (last = _.last(unsortable)).i <= index) {
    unsortable.pop();
    vs.push(last.vs);
    index++;
  }
  return index;
}

function compareWithBias(bias) {
  return function(entryV, entryW) {
    if (entryV.barycenter < entryW.barycenter) {
      return -1;
    } else if (entryV.barycenter > entryW.barycenter) {
      return 1;
    }

    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
  };
}


/***/ }),

/***/ "./node_modules/dagre/lib/parent-dummy-chains.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/parent-dummy-chains.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = parentDummyChains;

function parentDummyChains(g) {
  var postorderNums = postorder(g);

  _.forEach(g.graph().dummyChains, function(v) {
    var node = g.node(v);
    var edgeObj = node.edgeObj;
    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
    var path = pathData.path;
    var lca = pathData.lca;
    var pathIdx = 0;
    var pathV = path[pathIdx];
    var ascending = true;

    while (v !== edgeObj.w) {
      node = g.node(v);

      if (ascending) {
        while ((pathV = path[pathIdx]) !== lca &&
               g.node(pathV).maxRank < node.rank) {
          pathIdx++;
        }

        if (pathV === lca) {
          ascending = false;
        }
      }

      if (!ascending) {
        while (pathIdx < path.length - 1 &&
               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
          pathIdx++;
        }
        pathV = path[pathIdx];
      }

      g.setParent(v, pathV);
      v = g.successors(v)[0];
    }
  });
}

// Find a path from v to w through the lowest common ancestor (LCA). Return the
// full path and the LCA.
function findPath(g, postorderNums, v, w) {
  var vPath = [];
  var wPath = [];
  var low = Math.min(postorderNums[v].low, postorderNums[w].low);
  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
  var parent;
  var lca;

  // Traverse up from v to find the LCA
  parent = v;
  do {
    parent = g.parent(parent);
    vPath.push(parent);
  } while (parent &&
           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
  lca = parent;

  // Traverse from w to LCA
  parent = w;
  while ((parent = g.parent(parent)) !== lca) {
    wPath.push(parent);
  }

  return { path: vPath.concat(wPath.reverse()), lca: lca };
}

function postorder(g) {
  var result = {};
  var lim = 0;

  function dfs(v) {
    var low = lim;
    _.forEach(g.children(v), dfs);
    result[v] = { low: low, lim: lim++ };
  }
  _.forEach(g.children(), dfs);

  return result;
}


/***/ }),

/***/ "./node_modules/dagre/lib/position/bk.js":
/*!***********************************************!*\
  !*** ./node_modules/dagre/lib/position/bk.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var Graph = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;
var util = __webpack_require__(/*! ../util */ "./node_modules/dagre/lib/util.js");

/*
 * This module provides coordinate assignment based on Brandes and Köpf, "Fast
 * and Simple Horizontal Coordinate Assignment."
 */

module.exports = {
  positionX: positionX,
  findType1Conflicts: findType1Conflicts,
  findType2Conflicts: findType2Conflicts,
  addConflict: addConflict,
  hasConflict: hasConflict,
  verticalAlignment: verticalAlignment,
  horizontalCompaction: horizontalCompaction,
  alignCoordinates: alignCoordinates,
  findSmallestWidthAlignment: findSmallestWidthAlignment,
  balance: balance
};

/*
 * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
 * property. A type-1 conflict is one where a non-inner segment crosses an
 * inner segment. An inner segment is an edge with both incident nodes marked
 * with the "dummy" property.
 *
 * This algorithm scans layer by layer, starting with the second, for type-1
 * conflicts between the current layer and the previous layer. For each layer
 * it scans the nodes from left to right until it reaches one that is incident
 * on an inner segment. It then scans predecessors to determine if they have
 * edges that cross that inner segment. At the end a final scan is done for all
 * nodes on the current rank to see if they cross the last visited inner
 * segment.
 *
 * This algorithm (safely) assumes that a dummy node will only be incident on a
 * single node in the layers being scanned.
 */
function findType1Conflicts(g, layering) {
  var conflicts = {};

  function visitLayer(prevLayer, layer) {
    var
      // last visited node in the previous layer that is incident on an inner
      // segment.
      k0 = 0,
      // Tracks the last node in this layer scanned for crossings with a type-1
      // segment.
      scanPos = 0,
      prevLayerLength = prevLayer.length,
      lastNode = _.last(layer);

    _.forEach(layer, function(v, i) {
      var w = findOtherInnerSegmentNode(g, v),
        k1 = w ? g.node(w).order : prevLayerLength;

      if (w || v === lastNode) {
        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {
          _.forEach(g.predecessors(scanNode), function(u) {
            var uLabel = g.node(u),
              uPos = uLabel.order;
            if ((uPos < k0 || k1 < uPos) &&
                !(uLabel.dummy && g.node(scanNode).dummy)) {
              addConflict(conflicts, u, scanNode);
            }
          });
        });
        scanPos = i + 1;
        k0 = k1;
      }
    });

    return layer;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findType2Conflicts(g, layering) {
  var conflicts = {};

  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
    var v;
    _.forEach(_.range(southPos, southEnd), function(i) {
      v = south[i];
      if (g.node(v).dummy) {
        _.forEach(g.predecessors(v), function(u) {
          var uNode = g.node(u);
          if (uNode.dummy &&
              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
            addConflict(conflicts, u, v);
          }
        });
      }
    });
  }


  function visitLayer(north, south) {
    var prevNorthPos = -1,
      nextNorthPos,
      southPos = 0;

    _.forEach(south, function(v, southLookahead) {
      if (g.node(v).dummy === "border") {
        var predecessors = g.predecessors(v);
        if (predecessors.length) {
          nextNorthPos = g.node(predecessors[0]).order;
          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
          southPos = southLookahead;
          prevNorthPos = nextNorthPos;
        }
      }
      scan(south, southPos, south.length, nextNorthPos, north.length);
    });

    return south;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findOtherInnerSegmentNode(g, v) {
  if (g.node(v).dummy) {
    return _.find(g.predecessors(v), function(u) {
      return g.node(u).dummy;
    });
  }
}

function addConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }

  var conflictsV = conflicts[v];
  if (!conflictsV) {
    conflicts[v] = conflictsV = {};
  }
  conflictsV[w] = true;
}

function hasConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return _.has(conflicts[v], w);
}

/*
 * Try to align nodes into vertical "blocks" where possible. This algorithm
 * attempts to align a node with one of its median neighbors. If the edge
 * connecting a neighbor is a type-1 conflict then we ignore that possibility.
 * If a previous node has already formed a block with a node after the node
 * we're trying to form a block with, we also ignore that possibility - our
 * blocks would be split in that scenario.
 */
function verticalAlignment(g, layering, conflicts, neighborFn) {
  var root = {},
    align = {},
    pos = {};

  // We cache the position here based on the layering because the graph and
  // layering may be out of sync. The layering matrix is manipulated to
  // generate different extreme alignments.
  _.forEach(layering, function(layer) {
    _.forEach(layer, function(v, order) {
      root[v] = v;
      align[v] = v;
      pos[v] = order;
    });
  });

  _.forEach(layering, function(layer) {
    var prevIdx = -1;
    _.forEach(layer, function(v) {
      var ws = neighborFn(v);
      if (ws.length) {
        ws = _.sortBy(ws, function(w) { return pos[w]; });
        var mp = (ws.length - 1) / 2;
        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
          var w = ws[i];
          if (align[v] === v &&
              prevIdx < pos[w] &&
              !hasConflict(conflicts, v, w)) {
            align[w] = v;
            align[v] = root[v] = root[w];
            prevIdx = pos[w];
          }
        }
      }
    });
  });

  return { root: root, align: align };
}

function horizontalCompaction(g, layering, root, align, reverseSep) {
  // This portion of the algorithm differs from BK due to a number of problems.
  // Instead of their algorithm we construct a new block graph and do two
  // sweeps. The first sweep places blocks with the smallest possible
  // coordinates. The second sweep removes unused space by moving blocks to the
  // greatest coordinates without violating separation.
  var xs = {},
    blockG = buildBlockGraph(g, layering, root, reverseSep),
    borderType = reverseSep ? "borderLeft" : "borderRight";

  function iterate(setXsFunc, nextNodesFunc) {
    var stack = blockG.nodes();
    var elem = stack.pop();
    var visited = {};
    while (elem) {
      if (visited[elem]) {
        setXsFunc(elem);
      } else {
        visited[elem] = true;
        stack.push(elem);
        stack = stack.concat(nextNodesFunc(elem));
      }

      elem = stack.pop();
    }
  }

  // First pass, assign smallest coordinates
  function pass1(elem) {
    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
      return Math.max(acc, xs[e.v] + blockG.edge(e));
    }, 0);
  }

  // Second pass, assign greatest coordinates
  function pass2(elem) {
    var min = blockG.outEdges(elem).reduce(function(acc, e) {
      return Math.min(acc, xs[e.w] - blockG.edge(e));
    }, Number.POSITIVE_INFINITY);

    var node = g.node(elem);
    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
      xs[elem] = Math.max(xs[elem], min);
    }
  }

  iterate(pass1, blockG.predecessors.bind(blockG));
  iterate(pass2, blockG.successors.bind(blockG));

  // Assign x coordinates to all nodes
  _.forEach(align, function(v) {
    xs[v] = xs[root[v]];
  });

  return xs;
}


function buildBlockGraph(g, layering, root, reverseSep) {
  var blockGraph = new Graph(),
    graphLabel = g.graph(),
    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

  _.forEach(layering, function(layer) {
    var u;
    _.forEach(layer, function(v) {
      var vRoot = root[v];
      blockGraph.setNode(vRoot);
      if (u) {
        var uRoot = root[u],
          prevMax = blockGraph.edge(uRoot, vRoot);
        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
      }
      u = v;
    });
  });

  return blockGraph;
}

/*
 * Returns the alignment that has the smallest width of the given alignments.
 */
function findSmallestWidthAlignment(g, xss) {
  return _.minBy(_.values(xss), function (xs) {
    var max = Number.NEGATIVE_INFINITY;
    var min = Number.POSITIVE_INFINITY;

    _.forIn(xs, function (x, v) {
      var halfWidth = width(g, v) / 2;

      max = Math.max(x + halfWidth, max);
      min = Math.min(x - halfWidth, min);
    });

    return max - min;
  });
}

/*
 * Align the coordinates of each of the layout alignments such that
 * left-biased alignments have their minimum coordinate at the same point as
 * the minimum coordinate of the smallest width alignment and right-biased
 * alignments have their maximum coordinate at the same point as the maximum
 * coordinate of the smallest width alignment.
 */
function alignCoordinates(xss, alignTo) {
  var alignToVals = _.values(alignTo),
    alignToMin = _.min(alignToVals),
    alignToMax = _.max(alignToVals);

  _.forEach(["u", "d"], function(vert) {
    _.forEach(["l", "r"], function(horiz) {
      var alignment = vert + horiz,
        xs = xss[alignment],
        delta;
      if (xs === alignTo) return;

      var xsVals = _.values(xs);
      delta = horiz === "l" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);

      if (delta) {
        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });
      }
    });
  });
}

function balance(xss, align) {
  return _.mapValues(xss.ul, function(ignore, v) {
    if (align) {
      return xss[align.toLowerCase()][v];
    } else {
      var xs = _.sortBy(_.map(xss, v));
      return (xs[1] + xs[2]) / 2;
    }
  });
}

function positionX(g) {
  var layering = util.buildLayerMatrix(g);
  var conflicts = _.merge(
    findType1Conflicts(g, layering),
    findType2Conflicts(g, layering));

  var xss = {};
  var adjustedLayering;
  _.forEach(["u", "d"], function(vert) {
    adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
    _.forEach(["l", "r"], function(horiz) {
      if (horiz === "r") {
        adjustedLayering = _.map(adjustedLayering, function(inner) {
          return _.values(inner).reverse();
        });
      }

      var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
      var xs = horizontalCompaction(g, adjustedLayering,
        align.root, align.align, horiz === "r");
      if (horiz === "r") {
        xs = _.mapValues(xs, function(x) { return -x; });
      }
      xss[vert + horiz] = xs;
    });
  });

  var smallestWidth = findSmallestWidthAlignment(g, xss);
  alignCoordinates(xss, smallestWidth);
  return balance(xss, g.graph().align);
}

function sep(nodeSep, edgeSep, reverseSep) {
  return function(g, v, w) {
    var vLabel = g.node(v);
    var wLabel = g.node(w);
    var sum = 0;
    var delta;

    sum += vLabel.width / 2;
    if (_.has(vLabel, "labelpos")) {
      switch (vLabel.labelpos.toLowerCase()) {
      case "l": delta = -vLabel.width / 2; break;
      case "r": delta = vLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

    sum += wLabel.width / 2;
    if (_.has(wLabel, "labelpos")) {
      switch (wLabel.labelpos.toLowerCase()) {
      case "l": delta = wLabel.width / 2; break;
      case "r": delta = -wLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    return sum;
  };
}

function width(g, v) {
  return g.node(v).width;
}


/***/ }),

/***/ "./node_modules/dagre/lib/position/index.js":
/*!**************************************************!*\
  !*** ./node_modules/dagre/lib/position/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var util = __webpack_require__(/*! ../util */ "./node_modules/dagre/lib/util.js");
var positionX = __webpack_require__(/*! ./bk */ "./node_modules/dagre/lib/position/bk.js").positionX;

module.exports = position;

function position(g) {
  g = util.asNonCompoundGraph(g);

  positionY(g);
  _.forEach(positionX(g), function(x, v) {
    g.node(v).x = x;
  });
}

function positionY(g) {
  var layering = util.buildLayerMatrix(g);
  var rankSep = g.graph().ranksep;
  var prevY = 0;
  _.forEach(layering, function(layer) {
    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));
    _.forEach(layer, function(v) {
      g.node(v).y = prevY + maxHeight / 2;
    });
    prevY += maxHeight + rankSep;
  });
}



/***/ }),

/***/ "./node_modules/dagre/lib/rank/feasible-tree.js":
/*!******************************************************!*\
  !*** ./node_modules/dagre/lib/rank/feasible-tree.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var Graph = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;
var slack = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/rank/util.js").slack;

module.exports = feasibleTree;

/*
 * Constructs a spanning tree with tight edges and adjusted the input node's
 * ranks to achieve this. A tight edge is one that is has a length that matches
 * its "minlen" attribute.
 *
 * The basic structure for this function is derived from Gansner, et al., "A
 * Technique for Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a DAG.
 *    2. Graph must be connected.
 *    3. Graph must have at least one node.
 *    5. Graph nodes must have been previously assigned a "rank" property that
 *       respects the "minlen" property of incident edges.
 *    6. Graph edges must have a "minlen" property.
 *
 * Post-conditions:
 *
 *    - Graph nodes will have their rank adjusted to ensure that all edges are
 *      tight.
 *
 * Returns a tree (undirected graph) that is constructed using only "tight"
 * edges.
 */
function feasibleTree(g) {
  var t = new Graph({ directed: false });

  // Choose arbitrary node from which to start our tree
  var start = g.nodes()[0];
  var size = g.nodeCount();
  t.setNode(start, {});

  var edge, delta;
  while (tightTree(t, g) < size) {
    edge = findMinSlackEdge(t, g);
    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
    shiftRanks(t, g, delta);
  }

  return t;
}

/*
 * Finds a maximal tree of tight edges and returns the number of nodes in the
 * tree.
 */
function tightTree(t, g) {
  function dfs(v) {
    _.forEach(g.nodeEdges(v), function(e) {
      var edgeV = e.v,
        w = (v === edgeV) ? e.w : edgeV;
      if (!t.hasNode(w) && !slack(g, e)) {
        t.setNode(w, {});
        t.setEdge(v, w, {});
        dfs(w);
      }
    });
  }

  _.forEach(t.nodes(), dfs);
  return t.nodeCount();
}

/*
 * Finds the edge with the smallest slack that is incident on tree and returns
 * it.
 */
function findMinSlackEdge(t, g) {
  return _.minBy(g.edges(), function(e) {
    if (t.hasNode(e.v) !== t.hasNode(e.w)) {
      return slack(g, e);
    }
  });
}

function shiftRanks(t, g, delta) {
  _.forEach(t.nodes(), function(v) {
    g.node(v).rank += delta;
  });
}


/***/ }),

/***/ "./node_modules/dagre/lib/rank/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/rank/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var rankUtil = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/rank/util.js");
var longestPath = rankUtil.longestPath;
var feasibleTree = __webpack_require__(/*! ./feasible-tree */ "./node_modules/dagre/lib/rank/feasible-tree.js");
var networkSimplex = __webpack_require__(/*! ./network-simplex */ "./node_modules/dagre/lib/rank/network-simplex.js");

module.exports = rank;

/*
 * Assigns a rank to each node in the input graph that respects the "minlen"
 * constraint specified on edges between nodes.
 *
 * This basic structure is derived from Gansner, et al., "A Technique for
 * Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a connected DAG
 *    2. Graph nodes must be objects
 *    3. Graph edges must have "weight" and "minlen" attributes
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have a "rank" attribute based on the results of the
 *       algorithm. Ranks can start at any index (including negative), we'll
 *       fix them up later.
 */
function rank(g) {
  switch(g.graph().ranker) {
  case "network-simplex": networkSimplexRanker(g); break;
  case "tight-tree": tightTreeRanker(g); break;
  case "longest-path": longestPathRanker(g); break;
  default: networkSimplexRanker(g);
  }
}

// A fast and simple ranker, but results are far from optimal.
var longestPathRanker = longestPath;

function tightTreeRanker(g) {
  longestPath(g);
  feasibleTree(g);
}

function networkSimplexRanker(g) {
  networkSimplex(g);
}


/***/ }),

/***/ "./node_modules/dagre/lib/rank/network-simplex.js":
/*!********************************************************!*\
  !*** ./node_modules/dagre/lib/rank/network-simplex.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");
var feasibleTree = __webpack_require__(/*! ./feasible-tree */ "./node_modules/dagre/lib/rank/feasible-tree.js");
var slack = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/rank/util.js").slack;
var initRank = __webpack_require__(/*! ./util */ "./node_modules/dagre/lib/rank/util.js").longestPath;
var preorder = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").alg.preorder;
var postorder = __webpack_require__(/*! ../graphlib */ "./node_modules/dagre/lib/graphlib.js").alg.postorder;
var simplify = __webpack_require__(/*! ../util */ "./node_modules/dagre/lib/util.js").simplify;

module.exports = networkSimplex;

// Expose some internals for testing purposes
networkSimplex.initLowLimValues = initLowLimValues;
networkSimplex.initCutValues = initCutValues;
networkSimplex.calcCutValue = calcCutValue;
networkSimplex.leaveEdge = leaveEdge;
networkSimplex.enterEdge = enterEdge;
networkSimplex.exchangeEdges = exchangeEdges;

/*
 * The network simplex algorithm assigns ranks to each node in the input graph
 * and iteratively improves the ranking to reduce the length of edges.
 *
 * Preconditions:
 *
 *    1. The input graph must be a DAG.
 *    2. All nodes in the graph must have an object value.
 *    3. All edges in the graph must have "minlen" and "weight" attributes.
 *
 * Postconditions:
 *
 *    1. All nodes in the graph will have an assigned "rank" attribute that has
 *       been optimized by the network simplex algorithm. Ranks start at 0.
 *
 *
 * A rough sketch of the algorithm is as follows:
 *
 *    1. Assign initial ranks to each node. We use the longest path algorithm,
 *       which assigns ranks to the lowest position possible. In general this
 *       leads to very wide bottom ranks and unnecessarily long edges.
 *    2. Construct a feasible tight tree. A tight tree is one such that all
 *       edges in the tree have no slack (difference between length of edge
 *       and minlen for the edge). This by itself greatly improves the assigned
 *       rankings by shorting edges.
 *    3. Iteratively find edges that have negative cut values. Generally a
 *       negative cut value indicates that the edge could be removed and a new
 *       tree edge could be added to produce a more compact graph.
 *
 * Much of the algorithms here are derived from Gansner, et al., "A Technique
 * for Drawing Directed Graphs." The structure of the file roughly follows the
 * structure of the overall algorithm.
 */
function networkSimplex(g) {
  g = simplify(g);
  initRank(g);
  var t = feasibleTree(g);
  initLowLimValues(t);
  initCutValues(t, g);

  var e, f;
  while ((e = leaveEdge(t))) {
    f = enterEdge(t, g, e);
    exchangeEdges(t, g, e, f);
  }
}

/*
 * Initializes cut values for all edges in the tree.
 */
function initCutValues(t, g) {
  var vs = postorder(t, t.nodes());
  vs = vs.slice(0, vs.length - 1);
  _.forEach(vs, function(v) {
    assignCutValue(t, g, v);
  });
}

function assignCutValue(t, g, child) {
  var childLab = t.node(child);
  var parent = childLab.parent;
  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
}

/*
 * Given the tight tree, its graph, and a child in the graph calculate and
 * return the cut value for the edge between the child and its parent.
 */
function calcCutValue(t, g, child) {
  var childLab = t.node(child);
  var parent = childLab.parent;
  // True if the child is on the tail end of the edge in the directed graph
  var childIsTail = true;
  // The graph's view of the tree edge we're inspecting
  var graphEdge = g.edge(child, parent);
  // The accumulated cut value for the edge between this node and its parent
  var cutValue = 0;

  if (!graphEdge) {
    childIsTail = false;
    graphEdge = g.edge(parent, child);
  }

  cutValue = graphEdge.weight;

  _.forEach(g.nodeEdges(child), function(e) {
    var isOutEdge = e.v === child,
      other = isOutEdge ? e.w : e.v;

    if (other !== parent) {
      var pointsToHead = isOutEdge === childIsTail,
        otherWeight = g.edge(e).weight;

      cutValue += pointsToHead ? otherWeight : -otherWeight;
      if (isTreeEdge(t, child, other)) {
        var otherCutValue = t.edge(child, other).cutvalue;
        cutValue += pointsToHead ? -otherCutValue : otherCutValue;
      }
    }
  });

  return cutValue;
}

function initLowLimValues(tree, root) {
  if (arguments.length < 2) {
    root = tree.nodes()[0];
  }
  dfsAssignLowLim(tree, {}, 1, root);
}

function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
  var low = nextLim;
  var label = tree.node(v);

  visited[v] = true;
  _.forEach(tree.neighbors(v), function(w) {
    if (!_.has(visited, w)) {
      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
    }
  });

  label.low = low;
  label.lim = nextLim++;
  if (parent) {
    label.parent = parent;
  } else {
    // TODO should be able to remove this when we incrementally update low lim
    delete label.parent;
  }

  return nextLim;
}

function leaveEdge(tree) {
  return _.find(tree.edges(), function(e) {
    return tree.edge(e).cutvalue < 0;
  });
}

function enterEdge(t, g, edge) {
  var v = edge.v;
  var w = edge.w;

  // For the rest of this function we assume that v is the tail and w is the
  // head, so if we don't have this edge in the graph we should flip it to
  // match the correct orientation.
  if (!g.hasEdge(v, w)) {
    v = edge.w;
    w = edge.v;
  }

  var vLabel = t.node(v);
  var wLabel = t.node(w);
  var tailLabel = vLabel;
  var flip = false;

  // If the root is in the tail of the edge then we need to flip the logic that
  // checks for the head and tail nodes in the candidates function below.
  if (vLabel.lim > wLabel.lim) {
    tailLabel = wLabel;
    flip = true;
  }

  var candidates = _.filter(g.edges(), function(edge) {
    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
           flip !== isDescendant(t, t.node(edge.w), tailLabel);
  });

  return _.minBy(candidates, function(edge) { return slack(g, edge); });
}

function exchangeEdges(t, g, e, f) {
  var v = e.v;
  var w = e.w;
  t.removeEdge(v, w);
  t.setEdge(f.v, f.w, {});
  initLowLimValues(t);
  initCutValues(t, g);
  updateRanks(t, g);
}

function updateRanks(t, g) {
  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });
  var vs = preorder(t, root);
  vs = vs.slice(1);
  _.forEach(vs, function(v) {
    var parent = t.node(v).parent,
      edge = g.edge(v, parent),
      flipped = false;

    if (!edge) {
      edge = g.edge(parent, v);
      flipped = true;
    }

    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
  });
}

/*
 * Returns true if the edge is in the tree.
 */
function isTreeEdge(tree, u, v) {
  return tree.hasEdge(u, v);
}

/*
 * Returns true if the specified node is descendant of the root node per the
 * assigned low and lim attributes in the tree.
 */
function isDescendant(tree, vLabel, rootLabel) {
  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
}


/***/ }),

/***/ "./node_modules/dagre/lib/rank/util.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/rank/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ../lodash */ "./node_modules/dagre/lib/lodash.js");

module.exports = {
  longestPath: longestPath,
  slack: slack
};

/*
 * Initializes ranks for the input graph using the longest path algorithm. This
 * algorithm scales well and is fast in practice, it yields rather poor
 * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
 * ranks wide and leaving edges longer than necessary. However, due to its
 * speed, this algorithm is good for getting an initial ranking that can be fed
 * into other algorithms.
 *
 * This algorithm does not normalize layers because it will be used by other
 * algorithms in most cases. If using this algorithm directly, be sure to
 * run normalize at the end.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG.
 *    2. Input graph node labels can be assigned properties.
 *
 * Post-conditions:
 *
 *    1. Each node will be assign an (unnormalized) "rank" property.
 */
function longestPath(g) {
  var visited = {};

  function dfs(v) {
    var label = g.node(v);
    if (_.has(visited, v)) {
      return label.rank;
    }
    visited[v] = true;

    var rank = _.min(_.map(g.outEdges(v), function(e) {
      return dfs(e.w) - g.edge(e).minlen;
    }));

    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
        rank === undefined || // return value of _.map([]) for Lodash 4
        rank === null) { // return value of _.map([null])
      rank = 0;
    }

    return (label.rank = rank);
  }

  _.forEach(g.sources(), dfs);
}

/*
 * Returns the amount of slack for the given edge. The slack is defined as the
 * difference between the length of the edge and its minimum length.
 */
function slack(g, e) {
  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
}


/***/ }),

/***/ "./node_modules/dagre/lib/util.js":
/*!****************************************!*\
  !*** ./node_modules/dagre/lib/util.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* eslint "no-console": off */



var _ = __webpack_require__(/*! ./lodash */ "./node_modules/dagre/lib/lodash.js");
var Graph = __webpack_require__(/*! ./graphlib */ "./node_modules/dagre/lib/graphlib.js").Graph;

module.exports = {
  addDummyNode: addDummyNode,
  simplify: simplify,
  asNonCompoundGraph: asNonCompoundGraph,
  successorWeights: successorWeights,
  predecessorWeights: predecessorWeights,
  intersectRect: intersectRect,
  buildLayerMatrix: buildLayerMatrix,
  normalizeRanks: normalizeRanks,
  removeEmptyRanks: removeEmptyRanks,
  addBorderNode: addBorderNode,
  maxRank: maxRank,
  partition: partition,
  time: time,
  notime: notime
};

/*
 * Adds a dummy node to the graph and return v.
 */
function addDummyNode(g, type, attrs, name) {
  var v;
  do {
    v = _.uniqueId(name);
  } while (g.hasNode(v));

  attrs.dummy = type;
  g.setNode(v, attrs);
  return v;
}

/*
 * Returns a new graph with only simple edges. Handles aggregation of data
 * associated with multi-edges.
 */
function simplify(g) {
  var simplified = new Graph().setGraph(g.graph());
  _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
  _.forEach(g.edges(), function(e) {
    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };
    var label = g.edge(e);
    simplified.setEdge(e.v, e.w, {
      weight: simpleLabel.weight + label.weight,
      minlen: Math.max(simpleLabel.minlen, label.minlen)
    });
  });
  return simplified;
}

function asNonCompoundGraph(g) {
  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());
  _.forEach(g.nodes(), function(v) {
    if (!g.children(v).length) {
      simplified.setNode(v, g.node(v));
    }
  });
  _.forEach(g.edges(), function(e) {
    simplified.setEdge(e, g.edge(e));
  });
  return simplified;
}

function successorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var sucs = {};
    _.forEach(g.outEdges(v), function(e) {
      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
    });
    return sucs;
  });
  return _.zipObject(g.nodes(), weightMap);
}

function predecessorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var preds = {};
    _.forEach(g.inEdges(v), function(e) {
      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
    });
    return preds;
  });
  return _.zipObject(g.nodes(), weightMap);
}

/*
 * Finds where a line starting at point ({x, y}) would intersect a rectangle
 * ({x, y, width, height}) if it were pointing at the rectangle's center.
 */
function intersectRect(rect, point) {
  var x = rect.x;
  var y = rect.y;

  // Rectangle intersection algorithm from:
  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
  var dx = point.x - x;
  var dy = point.y - y;
  var w = rect.width / 2;
  var h = rect.height / 2;

  if (!dx && !dy) {
    throw new Error("Not possible to find intersection inside of the rectangle");
  }

  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    // Intersection is top or bottom of rect.
    if (dy < 0) {
      h = -h;
    }
    sx = h * dx / dy;
    sy = h;
  } else {
    // Intersection is left or right of rect.
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = w * dy / dx;
  }

  return { x: x + sx, y: y + sy };
}

/*
 * Given a DAG with each node assigned "rank" and "order" properties, this
 * function will produce a matrix with the ids of each node.
 */
function buildLayerMatrix(g) {
  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    var rank = node.rank;
    if (!_.isUndefined(rank)) {
      layering[rank][node.order] = v;
    }
  });
  return layering;
}

/*
 * Adjusts the ranks for all nodes in the graph such that all nodes v have
 * rank(v) >= 0 and at least one node w has rank(w) = 0.
 */
function normalizeRanks(g) {
  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (_.has(node, "rank")) {
      node.rank -= min;
    }
  });
}

function removeEmptyRanks(g) {
  // Ranks may not start at 0, so we need to offset them
  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));

  var layers = [];
  _.forEach(g.nodes(), function(v) {
    var rank = g.node(v).rank - offset;
    if (!layers[rank]) {
      layers[rank] = [];
    }
    layers[rank].push(v);
  });

  var delta = 0;
  var nodeRankFactor = g.graph().nodeRankFactor;
  _.forEach(layers, function(vs, i) {
    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
      --delta;
    } else if (delta) {
      _.forEach(vs, function(v) { g.node(v).rank += delta; });
    }
  });
}

function addBorderNode(g, prefix, rank, order) {
  var node = {
    width: 0,
    height: 0
  };
  if (arguments.length >= 4) {
    node.rank = rank;
    node.order = order;
  }
  return addDummyNode(g, "border", node, prefix);
}

function maxRank(g) {
  return _.max(_.map(g.nodes(), function(v) {
    var rank = g.node(v).rank;
    if (!_.isUndefined(rank)) {
      return rank;
    }
  }));
}

/*
 * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
 * function returns true for an entry it goes into `lhs`. Otherwise it goes
 * into `rhs.
 */
function partition(collection, fn) {
  var result = { lhs: [], rhs: [] };
  _.forEach(collection, function(value) {
    if (fn(value)) {
      result.lhs.push(value);
    } else {
      result.rhs.push(value);
    }
  });
  return result;
}

/*
 * Returns a new function that wraps `fn` with a timer. The wrapper logs the
 * time it takes to execute the function.
 */
function time(name, fn) {
  var start = _.now();
  try {
    return fn();
  } finally {
    console.log(name + " time: " + (_.now() - start) + "ms");
  }
}

function notime(name, fn) {
  return fn();
}


/***/ }),

/***/ "./node_modules/dagre/lib/version.js":
/*!*******************************************!*\
  !*** ./node_modules/dagre/lib/version.js ***!
  \*******************************************/
/***/ ((module) => {

module.exports = "0.8.5";


/***/ }),

/***/ "./node_modules/decimal.js/decimal.js":
/*!********************************************!*\
  !*** ./node_modules/decimal.js/decimal.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v10.2.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { name: '[object Decimal]' };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * mathpow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = mathpow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };


  /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, y,
      len = x.d.length;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) return taylorSeries(Ctor, 2, x, x);

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Exponent e must be positive and non-zero.
  function tinyPow(b, e) {
    var n = b;
    while (--e) n *= b;
    return n;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (v instanceof Decimal) {
        x.s = v.s;

        if (external) {
          if (!v.d || v.e > Decimal.maxE) {

            // Infinity.
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }

        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;

          if (external) {
            if (e > Decimal.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e < Decimal.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e;
              x.d = [v];
            }
          } else {
            x.e = e;
            x.d = [v];
          }

          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if ((i = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        // Plus sign?
        if (i === 43) v = v.slice(1);
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);

  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Decimal;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node and other environments that support module.exports.
  } else {}
})(this);


/***/ }),

/***/ "./node_modules/escape-latex/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/escape-latex/dist/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


// Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var defaultEscapes = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
};
var formatEscapes = {
  "\u2013": "\\--",
  "\u2014": "\\---",
  " ": "~",
  "\t": "\\qquad{}",
  "\r\n": "\\newline{}",
  "\n": "\\newline{}"
};

var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
  return _extends({}, defaultEscapes, formatEscapes);
};

/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */
module.exports = function (str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$preserveFormatti = _ref.preserveFormatting,
      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
      _ref$escapeMapFn = _ref.escapeMapFn,
      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

  var runningStr = String(str);
  var result = "";

  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
  var escapeKeys = Object.keys(escapes); // as it is reused later on

  // Algorithm: Go through the string character by character, if it matches
  // with one of the special characters then we'll replace it with the escaped
  // version.

  var _loop = function _loop() {
    var specialCharFound = false;
    escapeKeys.forEach(function (key, index) {
      if (specialCharFound) {
        return;
      }
      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
        result += escapes[escapeKeys[index]];
        runningStr = runningStr.slice(key.length, runningStr.length);
        specialCharFound = true;
      }
    });
    if (!specialCharFound) {
      result += runningStr.slice(0, 1);
      runningStr = runningStr.slice(1, runningStr.length);
    }
  };

  while (runningStr) {
    _loop();
  }
  return result;
};

/***/ }),

/***/ "./node_modules/fraction.js/fraction.js":
/*!**********************************************!*\
  !*** ./node_modules/fraction.js/fraction.js ***!
  \**********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license Fraction.js v4.0.12 09/09/2015
 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

(function(root) {

  "use strict";

  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
  var MAX_CYCLE_LEN = 2000;

  // Parsed data to avoid calling "new" all the time
  var P = {
    "s": 1,
    "n": 0,
    "d": 1
  };

  function createError(name) {

    function errorConstructor() {
      var temp = Error.apply(this, arguments);
      temp['name'] = this['name'] = name;
      this['stack'] = temp['stack'];
      this['message'] = temp['message'];
    }

    /**
     * Error constructor
     *
     * @constructor
     */
    function IntermediateInheritor() { }
    IntermediateInheritor.prototype = Error.prototype;
    errorConstructor.prototype = new IntermediateInheritor();

    return errorConstructor;
  }

  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

  function assign(n, s) {

    if (isNaN(n = parseInt(n, 10))) {
      throwInvalidParam();
    }
    return n * s;
  }

  function throwInvalidParam() {
    throw new InvalidParameter();
  }

  var parse = function(p1, p2) {

    var n = 0, d = 1, s = 1;
    var v = 0, w = 0, x = 0, y = 1, z = 1;

    var A = 0, B = 1;
    var C = 1, D = 1;

    var N = 10000000;
    var M;

    if (p1 === undefined || p1 === null) {
      /* void */
    } else if (p2 !== undefined) {
      n = p1;
      d = p2;
      s = n * d;
    } else
      switch (typeof p1) {

        case "object":
          {
            if ("d" in p1 && "n" in p1) {
              n = p1["n"];
              d = p1["d"];
              if ("s" in p1)
                n *= p1["s"];
            } else if (0 in p1) {
              n = p1[0];
              if (1 in p1)
                d = p1[1];
            } else {
              throwInvalidParam();
            }
            s = n * d;
            break;
          }
        case "number":
          {
            if (p1 < 0) {
              s = p1;
              p1 = -p1;
            }

            if (p1 % 1 === 0) {
              n = p1;
            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

              if (p1 >= 1) {
                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                p1 /= z;
              }

              // Using Farey Sequences
              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

              while (B <= N && D <= N) {
                M = (A + C) / (B + D);

                if (p1 === M) {
                  if (B + D <= N) {
                    n = A + C;
                    d = B + D;
                  } else if (D > B) {
                    n = C;
                    d = D;
                  } else {
                    n = A;
                    d = B;
                  }
                  break;

                } else {

                  if (p1 > M) {
                    A += C;
                    B += D;
                  } else {
                    C += A;
                    D += B;
                  }

                  if (B > N) {
                    n = C;
                    d = D;
                  } else {
                    n = A;
                    d = B;
                  }
                }
              }
              n *= z;
            } else if (isNaN(p1) || isNaN(p2)) {
              d = n = NaN;
            }
            break;
          }
        case "string":
          {
            B = p1.match(/\d+|./g);

            if (B === null)
              throwInvalidParam();

            if (B[A] === '-') {// Check for minus sign at the beginning
              s = -1;
              A++;
            } else if (B[A] === '+') {// Check for plus sign at the beginning
              A++;
            }

            if (B.length === A + 1) { // Check if it's just a simple number "1234"
              w = assign(B[A++], s);
            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

              if (B[A] !== '.') { // Handle 0.5 and .5
                v = assign(B[A++], s);
              }
              A++;

              // Check for decimal places
              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                w = assign(B[A], s);
                y = Math.pow(10, B[A].length);
                A++;
              }

              // Check for repeating places
              if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                x = assign(B[A + 1], s);
                z = Math.pow(10, B[A + 1].length) - 1;
                A += 3;
              }

            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
              w = assign(B[A], s);
              y = assign(B[A + 2], 1);
              A += 3;
            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
              v = assign(B[A], s);
              w = assign(B[A + 2], s);
              y = assign(B[A + 4], 1);
              A += 5;
            }

            if (B.length <= A) { // Check for more tokens on the stack
              d = y * z;
              s = /* void */
              n = x + d * v + z * w;
              break;
            }

            /* Fall through on error */
          }
        default:
          throwInvalidParam();
      }

    if (d === 0) {
      throw new DivisionByZero();
    }

    P["s"] = s < 0 ? -1 : 1;
    P["n"] = Math.abs(n);
    P["d"] = Math.abs(d);
  };

  function modpow(b, e, m) {

    var r = 1;
    for (; e > 0; b = (b * b) % m, e >>= 1) {

      if (e & 1) {
        r = (r * b) % m;
      }
    }
    return r;
  }


  function cycleLen(n, d) {

    for (; d % 2 === 0;
      d /= 2) {
    }

    for (; d % 5 === 0;
      d /= 5) {
    }

    if (d === 1) // Catch non-cyclic numbers
      return 0;

    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
    // 10^(d-1) % d == 1
    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
    // as we want to translate the numbers to strings.

    var rem = 10 % d;
    var t = 1;

    for (; rem !== 1; t++) {
      rem = rem * 10 % d;

      if (t > MAX_CYCLE_LEN)
        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
    }
    return t;
  }


  function cycleStart(n, d, len) {

    var rem1 = 1;
    var rem2 = modpow(10, len, d);

    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
      // Solve 10^s == 10^(s+t) (mod d)

      if (rem1 === rem2)
        return t;

      rem1 = rem1 * 10 % d;
      rem2 = rem2 * 10 % d;
    }
    return 0;
  }

  function gcd(a, b) {

    if (!a)
      return b;
    if (!b)
      return a;

    while (1) {
      a %= b;
      if (!a)
        return b;
      b %= a;
      if (!b)
        return a;
    }
  };

  /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction=} a
   * @param {number=} b
   */
  function Fraction(a, b) {

    if (!(this instanceof Fraction)) {
      return new Fraction(a, b);
    }

    parse(a, b);

    if (Fraction['REDUCE']) {
      a = gcd(P["d"], P["n"]); // Abuse a
    } else {
      a = 1;
    }

    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  }

  /**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
  Fraction['REDUCE'] = 1;

  Fraction.prototype = {

    "s": 1,
    "n": 0,
    "d": 1,

    /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
    "abs": function() {

      return new Fraction(this["n"], this["d"]);
    },

    /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
    "neg": function() {

      return new Fraction(-this["s"] * this["n"], this["d"]);
    },

    /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
    "add": function(a, b) {

      parse(a, b);
      return new Fraction(
        this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
        this["d"] * P["d"]
      );
    },

    /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
    "sub": function(a, b) {

      parse(a, b);
      return new Fraction(
        this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
        this["d"] * P["d"]
      );
    },

    /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
    "mul": function(a, b) {

      parse(a, b);
      return new Fraction(
        this["s"] * P["s"] * this["n"] * P["n"],
        this["d"] * P["d"]
      );
    },

    /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
    "div": function(a, b) {

      parse(a, b);
      return new Fraction(
        this["s"] * P["s"] * this["n"] * P["d"],
        this["d"] * P["n"]
      );
    },

    /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
    "clone": function() {
      return new Fraction(this);
    },

    /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
    "mod": function(a, b) {

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return new Fraction(NaN);
      }

      if (a === undefined) {
        return new Fraction(this["s"] * this["n"] % this["d"], 1);
      }

      parse(a, b);
      if (0 === P["n"] && 0 === this["d"]) {
        Fraction(0, 0); // Throw DivisionByZero
      }

      /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

      /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
      return new Fraction(
        this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
        P["d"] * this["d"]
      );
    },

    /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
    "gcd": function(a, b) {

      parse(a, b);

      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

      return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
    },

    /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
    "lcm": function(a, b) {

      parse(a, b);

      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

      if (P["n"] === 0 && this["n"] === 0) {
        return new Fraction;
      }
      return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
    "ceil": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
    "floor": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
    "round": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Gets the inverse of the fraction, means numerator and denominator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
    "inverse": function() {

      return new Fraction(this["s"] * this["d"], this["n"]);
    },

    /**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
    "pow": function(m) {

      if (m < 0) {
        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
      } else {
        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
      }
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "equals": function(a, b) {

      parse(a, b);
      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "compare": function(a, b) {

      parse(a, b);
      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
      return (0 < t) - (t < 0);
    },

    "simplify": function(eps) {

      // First naive implementation, needs improvement

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return this;
      }

      var cont = this['abs']()['toContinued']();

      eps = eps || 0.001;

      function rec(a) {
        if (a.length === 1)
          return new Fraction(a[0]);
        return rec(a.slice(1))['inverse']()['add'](a[0]);
      }

      for (var i = 0; i < cont.length; i++) {
        var tmp = rec(cont.slice(0, i + 1));
        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
          return tmp['mul'](this['s']);
        }
      }
      return this;
    },

    /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
    "divisible": function(a, b) {

      parse(a, b);
      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
    },

    /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
    'valueOf': function() {

      return this["s"] * this["n"] / this["d"];
    },

    /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
    'toFraction': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          str += " ";
          n %= d;
        }

        str += n;
        str += '/';
        str += d;
      }
      return str;
    },

    /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
    'toLatex': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          n %= d;
        }

        str += "\\frac{";
        str += n;
        str += '}{';
        str += d;
        str += '}';
      }
      return str;
    },

    /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
    'toContinued': function() {

      var t;
      var a = this['n'];
      var b = this['d'];
      var res = [];

      if (isNaN(a) || isNaN(b)) {
        return res;
      }

      do {
        res.push(Math.floor(a / b));
        t = a % b;
        a = b;
        b = t;
      } while (a !== 1);

      return res;
    },

    /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
    'toString': function(dec) {

      var g;
      var N = this["n"];
      var D = this["d"];

      if (isNaN(N) || isNaN(D)) {
        return "NaN";
      }

      if (!Fraction['REDUCE']) {
        g = gcd(N, D);
        N /= g;
        D /= g;
      }

      dec = dec || 15; // 15 = decimal places when no repitation

      var cycLen = cycleLen(N, D); // Cycle length
      var cycOff = cycleStart(N, D, cycLen); // Cycle start

      var str = this['s'] === -1 ? "-" : "";

      str += N / D | 0;

      N %= D;
      N *= 10;

      if (N)
        str += ".";

      if (cycLen) {

        for (var i = cycOff; i--;) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += "(";
        for (var i = cycLen; i--;) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += ")";
      } else {
        for (var i = dec; N && i--;) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
      }
      return str;
    }
  };

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return Fraction;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

})(this);


/***/ }),

/***/ "./node_modules/graphlib/index.js":
/*!****************************************!*\
  !*** ./node_modules/graphlib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2014, Chris Pettitt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var lib = __webpack_require__(/*! ./lib */ "./node_modules/graphlib/lib/index.js");

module.exports = {
  Graph: lib.Graph,
  json: __webpack_require__(/*! ./lib/json */ "./node_modules/graphlib/lib/json.js"),
  alg: __webpack_require__(/*! ./lib/alg */ "./node_modules/graphlib/lib/alg/index.js"),
  version: lib.version
};


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/components.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/components.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = components;

function components(g) {
  var visited = {};
  var cmpts = [];
  var cmpt;

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    cmpt.push(v);
    _.each(g.successors(v), dfs);
    _.each(g.predecessors(v), dfs);
  }

  _.each(g.nodes(), function(v) {
    cmpt = [];
    dfs(v);
    if (cmpt.length) {
      cmpts.push(cmpt);
    }
  });

  return cmpts;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/dfs.js":
/*!**********************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dfs.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = dfs;

/*
 * A helper that preforms a pre- or post-order traversal on the input graph
 * and returns the nodes in the order they were visited. If the graph is
 * undirected then this algorithm will navigate using neighbors. If the graph
 * is directed then this algorithm will navigate using successors.
 *
 * Order must be one of "pre" or "post".
 */
function dfs(g, vs, order) {
  if (!_.isArray(vs)) {
    vs = [vs];
  }

  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

  var acc = [];
  var visited = {};
  _.each(vs, function(v) {
    if (!g.hasNode(v)) {
      throw new Error("Graph does not have node: " + v);
    }

    doDfs(g, v, order === "post", visited, navigation, acc);
  });
  return acc;
}

function doDfs(g, v, postorder, visited, navigation, acc) {
  if (!_.has(visited, v)) {
    visited[v] = true;

    if (!postorder) { acc.push(v); }
    _.each(navigation(v), function(w) {
      doDfs(g, w, postorder, visited, navigation, acc);
    });
    if (postorder) { acc.push(v); }
  }
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/dijkstra-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dijkstra-all.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dijkstra = __webpack_require__(/*! ./dijkstra */ "./node_modules/graphlib/lib/alg/dijkstra.js");
var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = dijkstraAll;

function dijkstraAll(g, weightFunc, edgeFunc) {
  return _.transform(g.nodes(), function(acc, v) {
    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
  }, {});
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/dijkstra.js":
/*!***************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dijkstra.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");
var PriorityQueue = __webpack_require__(/*! ../data/priority-queue */ "./node_modules/graphlib/lib/data/priority-queue.js");

module.exports = dijkstra;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function dijkstra(g, source, weightFn, edgeFn) {
  return runDijkstra(g, String(source),
    weightFn || DEFAULT_WEIGHT_FUNC,
    edgeFn || function(v) { return g.outEdges(v); });
}

function runDijkstra(g, source, weightFn, edgeFn) {
  var results = {};
  var pq = new PriorityQueue();
  var v, vEntry;

  var updateNeighbors = function(edge) {
    var w = edge.v !== v ? edge.v : edge.w;
    var wEntry = results[w];
    var weight = weightFn(edge);
    var distance = vEntry.distance + weight;

    if (weight < 0) {
      throw new Error("dijkstra does not allow negative edge weights. " +
                      "Bad edge: " + edge + " Weight: " + weight);
    }

    if (distance < wEntry.distance) {
      wEntry.distance = distance;
      wEntry.predecessor = v;
      pq.decrease(w, distance);
    }
  };

  g.nodes().forEach(function(v) {
    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
    results[v] = { distance: distance };
    pq.add(v, distance);
  });

  while (pq.size() > 0) {
    v = pq.removeMin();
    vEntry = results[v];
    if (vEntry.distance === Number.POSITIVE_INFINITY) {
      break;
    }

    edgeFn(v).forEach(updateNeighbors);
  }

  return results;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/find-cycles.js":
/*!******************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/find-cycles.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");
var tarjan = __webpack_require__(/*! ./tarjan */ "./node_modules/graphlib/lib/alg/tarjan.js");

module.exports = findCycles;

function findCycles(g) {
  return _.filter(tarjan(g), function(cmpt) {
    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
  });
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/floyd-warshall.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/floyd-warshall.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = floydWarshall;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function floydWarshall(g, weightFn, edgeFn) {
  return runFloydWarshall(g,
    weightFn || DEFAULT_WEIGHT_FUNC,
    edgeFn || function(v) { return g.outEdges(v); });
}

function runFloydWarshall(g, weightFn, edgeFn) {
  var results = {};
  var nodes = g.nodes();

  nodes.forEach(function(v) {
    results[v] = {};
    results[v][v] = { distance: 0 };
    nodes.forEach(function(w) {
      if (v !== w) {
        results[v][w] = { distance: Number.POSITIVE_INFINITY };
      }
    });
    edgeFn(v).forEach(function(edge) {
      var w = edge.v === v ? edge.w : edge.v;
      var d = weightFn(edge);
      results[v][w] = { distance: d, predecessor: v };
    });
  });

  nodes.forEach(function(k) {
    var rowK = results[k];
    nodes.forEach(function(i) {
      var rowI = results[i];
      nodes.forEach(function(j) {
        var ik = rowI[k];
        var kj = rowK[j];
        var ij = rowI[j];
        var altDistance = ik.distance + kj.distance;
        if (altDistance < ij.distance) {
          ij.distance = altDistance;
          ij.predecessor = kj.predecessor;
        }
      });
    });
  });

  return results;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/index.js":
/*!************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  components: __webpack_require__(/*! ./components */ "./node_modules/graphlib/lib/alg/components.js"),
  dijkstra: __webpack_require__(/*! ./dijkstra */ "./node_modules/graphlib/lib/alg/dijkstra.js"),
  dijkstraAll: __webpack_require__(/*! ./dijkstra-all */ "./node_modules/graphlib/lib/alg/dijkstra-all.js"),
  findCycles: __webpack_require__(/*! ./find-cycles */ "./node_modules/graphlib/lib/alg/find-cycles.js"),
  floydWarshall: __webpack_require__(/*! ./floyd-warshall */ "./node_modules/graphlib/lib/alg/floyd-warshall.js"),
  isAcyclic: __webpack_require__(/*! ./is-acyclic */ "./node_modules/graphlib/lib/alg/is-acyclic.js"),
  postorder: __webpack_require__(/*! ./postorder */ "./node_modules/graphlib/lib/alg/postorder.js"),
  preorder: __webpack_require__(/*! ./preorder */ "./node_modules/graphlib/lib/alg/preorder.js"),
  prim: __webpack_require__(/*! ./prim */ "./node_modules/graphlib/lib/alg/prim.js"),
  tarjan: __webpack_require__(/*! ./tarjan */ "./node_modules/graphlib/lib/alg/tarjan.js"),
  topsort: __webpack_require__(/*! ./topsort */ "./node_modules/graphlib/lib/alg/topsort.js")
};


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/is-acyclic.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/is-acyclic.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var topsort = __webpack_require__(/*! ./topsort */ "./node_modules/graphlib/lib/alg/topsort.js");

module.exports = isAcyclic;

function isAcyclic(g) {
  try {
    topsort(g);
  } catch (e) {
    if (e instanceof topsort.CycleException) {
      return false;
    }
    throw e;
  }
  return true;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/postorder.js":
/*!****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/postorder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dfs = __webpack_require__(/*! ./dfs */ "./node_modules/graphlib/lib/alg/dfs.js");

module.exports = postorder;

function postorder(g, vs) {
  return dfs(g, vs, "post");
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/preorder.js":
/*!***************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/preorder.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dfs = __webpack_require__(/*! ./dfs */ "./node_modules/graphlib/lib/alg/dfs.js");

module.exports = preorder;

function preorder(g, vs) {
  return dfs(g, vs, "pre");
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/prim.js":
/*!***********************************************!*\
  !*** ./node_modules/graphlib/lib/alg/prim.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");
var Graph = __webpack_require__(/*! ../graph */ "./node_modules/graphlib/lib/graph.js");
var PriorityQueue = __webpack_require__(/*! ../data/priority-queue */ "./node_modules/graphlib/lib/data/priority-queue.js");

module.exports = prim;

function prim(g, weightFunc) {
  var result = new Graph();
  var parents = {};
  var pq = new PriorityQueue();
  var v;

  function updateNeighbors(edge) {
    var w = edge.v === v ? edge.w : edge.v;
    var pri = pq.priority(w);
    if (pri !== undefined) {
      var edgeWeight = weightFunc(edge);
      if (edgeWeight < pri) {
        parents[w] = v;
        pq.decrease(w, edgeWeight);
      }
    }
  }

  if (g.nodeCount() === 0) {
    return result;
  }

  _.each(g.nodes(), function(v) {
    pq.add(v, Number.POSITIVE_INFINITY);
    result.setNode(v);
  });

  // Start from an arbitrary node
  pq.decrease(g.nodes()[0], 0);

  var init = false;
  while (pq.size() > 0) {
    v = pq.removeMin();
    if (_.has(parents, v)) {
      result.setEdge(v, parents[v]);
    } else if (init) {
      throw new Error("Input graph is not connected: " + g);
    } else {
      init = true;
    }

    g.nodeEdges(v).forEach(updateNeighbors);
  }

  return result;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/tarjan.js":
/*!*************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/tarjan.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = tarjan;

function tarjan(g) {
  var index = 0;
  var stack = [];
  var visited = {}; // node id -> { onStack, lowlink, index }
  var results = [];

  function dfs(v) {
    var entry = visited[v] = {
      onStack: true,
      lowlink: index,
      index: index++
    };
    stack.push(v);

    g.successors(v).forEach(function(w) {
      if (!_.has(visited, w)) {
        dfs(w);
        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
      } else if (visited[w].onStack) {
        entry.lowlink = Math.min(entry.lowlink, visited[w].index);
      }
    });

    if (entry.lowlink === entry.index) {
      var cmpt = [];
      var w;
      do {
        w = stack.pop();
        visited[w].onStack = false;
        cmpt.push(w);
      } while (v !== w);
      results.push(cmpt);
    }
  }

  g.nodes().forEach(function(v) {
    if (!_.has(visited, v)) {
      dfs(v);
    }
  });

  return results;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/alg/topsort.js":
/*!**************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/topsort.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = topsort;
topsort.CycleException = CycleException;

function topsort(g) {
  var visited = {};
  var stack = {};
  var results = [];

  function visit(node) {
    if (_.has(stack, node)) {
      throw new CycleException();
    }

    if (!_.has(visited, node)) {
      stack[node] = true;
      visited[node] = true;
      _.each(g.predecessors(node), visit);
      delete stack[node];
      results.push(node);
    }
  }

  _.each(g.sinks(), visit);

  if (_.size(visited) !== g.nodeCount()) {
    throw new CycleException();
  }

  return results;
}

function CycleException() {}
CycleException.prototype = new Error(); // must be an instance of Error to pass testing

/***/ }),

/***/ "./node_modules/graphlib/lib/data/priority-queue.js":
/*!**********************************************************!*\
  !*** ./node_modules/graphlib/lib/data/priority-queue.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ../lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = PriorityQueue;

/**
 * A min-priority queue data structure. This algorithm is derived from Cormen,
 * et al., "Introduction to Algorithms". The basic idea of a min-priority
 * queue is that you can efficiently (in O(1) time) get the smallest key in
 * the queue. Adding and removing elements takes O(log n) time. A key can
 * have its priority decreased in O(log n) time.
 */
function PriorityQueue() {
  this._arr = [];
  this._keyIndices = {};
}

/**
 * Returns the number of elements in the queue. Takes `O(1)` time.
 */
PriorityQueue.prototype.size = function() {
  return this._arr.length;
};

/**
 * Returns the keys that are in the queue. Takes `O(n)` time.
 */
PriorityQueue.prototype.keys = function() {
  return this._arr.map(function(x) { return x.key; });
};

/**
 * Returns `true` if **key** is in the queue and `false` if not.
 */
PriorityQueue.prototype.has = function(key) {
  return _.has(this._keyIndices, key);
};

/**
 * Returns the priority for **key**. If **key** is not present in the queue
 * then this function returns `undefined`. Takes `O(1)` time.
 *
 * @param {Object} key
 */
PriorityQueue.prototype.priority = function(key) {
  var index = this._keyIndices[key];
  if (index !== undefined) {
    return this._arr[index].priority;
  }
};

/**
 * Returns the key for the minimum element in this queue. If the queue is
 * empty this function throws an Error. Takes `O(1)` time.
 */
PriorityQueue.prototype.min = function() {
  if (this.size() === 0) {
    throw new Error("Queue underflow");
  }
  return this._arr[0].key;
};

/**
 * Inserts a new key into the priority queue. If the key already exists in
 * the queue this function returns `false`; otherwise it will return `true`.
 * Takes `O(n)` time.
 *
 * @param {Object} key the key to add
 * @param {Number} priority the initial priority for the key
 */
PriorityQueue.prototype.add = function(key, priority) {
  var keyIndices = this._keyIndices;
  key = String(key);
  if (!_.has(keyIndices, key)) {
    var arr = this._arr;
    var index = arr.length;
    keyIndices[key] = index;
    arr.push({key: key, priority: priority});
    this._decrease(index);
    return true;
  }
  return false;
};

/**
 * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
 */
PriorityQueue.prototype.removeMin = function() {
  this._swap(0, this._arr.length - 1);
  var min = this._arr.pop();
  delete this._keyIndices[min.key];
  this._heapify(0);
  return min.key;
};

/**
 * Decreases the priority for **key** to **priority**. If the new priority is
 * greater than the previous priority, this function will throw an Error.
 *
 * @param {Object} key the key for which to raise priority
 * @param {Number} priority the new priority for the key
 */
PriorityQueue.prototype.decrease = function(key, priority) {
  var index = this._keyIndices[key];
  if (priority > this._arr[index].priority) {
    throw new Error("New priority is greater than current priority. " +
        "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
  }
  this._arr[index].priority = priority;
  this._decrease(index);
};

PriorityQueue.prototype._heapify = function(i) {
  var arr = this._arr;
  var l = 2 * i;
  var r = l + 1;
  var largest = i;
  if (l < arr.length) {
    largest = arr[l].priority < arr[largest].priority ? l : largest;
    if (r < arr.length) {
      largest = arr[r].priority < arr[largest].priority ? r : largest;
    }
    if (largest !== i) {
      this._swap(i, largest);
      this._heapify(largest);
    }
  }
};

PriorityQueue.prototype._decrease = function(index) {
  var arr = this._arr;
  var priority = arr[index].priority;
  var parent;
  while (index !== 0) {
    parent = index >> 1;
    if (arr[parent].priority < priority) {
      break;
    }
    this._swap(index, parent);
    index = parent;
  }
};

PriorityQueue.prototype._swap = function(i, j) {
  var arr = this._arr;
  var keyIndices = this._keyIndices;
  var origArrI = arr[i];
  var origArrJ = arr[j];
  arr[i] = origArrJ;
  arr[j] = origArrI;
  keyIndices[origArrJ.key] = i;
  keyIndices[origArrI.key] = j;
};


/***/ }),

/***/ "./node_modules/graphlib/lib/graph.js":
/*!********************************************!*\
  !*** ./node_modules/graphlib/lib/graph.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _ = __webpack_require__(/*! ./lodash */ "./node_modules/graphlib/lib/lodash.js");

module.exports = Graph;

var DEFAULT_EDGE_NAME = "\x00";
var GRAPH_NODE = "\x00";
var EDGE_KEY_DELIM = "\x01";

// Implementation notes:
//
//  * Node id query functions should return string ids for the nodes
//  * Edge id query functions should return an "edgeObj", edge object, that is
//    composed of enough information to uniquely identify an edge: {v, w, name}.
//  * Internally we use an "edgeId", a stringified form of the edgeObj, to
//    reference edges. This is because we need a performant way to look these
//    edges up and, object properties, which have string keys, are the closest
//    we're going to get to a performant hashtable in JavaScript.

function Graph(opts) {
  this._isDirected = _.has(opts, "directed") ? opts.directed : true;
  this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
  this._isCompound = _.has(opts, "compound") ? opts.compound : false;

  // Label for the graph itself
  this._label = undefined;

  // Defaults to be set when creating a new node
  this._defaultNodeLabelFn = _.constant(undefined);

  // Defaults to be set when creating a new edge
  this._defaultEdgeLabelFn = _.constant(undefined);

  // v -> label
  this._nodes = {};

  if (this._isCompound) {
    // v -> parent
    this._parent = {};

    // v -> children
    this._children = {};
    this._children[GRAPH_NODE] = {};
  }

  // v -> edgeObj
  this._in = {};

  // u -> v -> Number
  this._preds = {};

  // v -> edgeObj
  this._out = {};

  // v -> w -> Number
  this._sucs = {};

  // e -> edgeObj
  this._edgeObjs = {};

  // e -> label
  this._edgeLabels = {};
}

/* Number of nodes in the graph. Should only be changed by the implementation. */
Graph.prototype._nodeCount = 0;

/* Number of edges in the graph. Should only be changed by the implementation. */
Graph.prototype._edgeCount = 0;


/* === Graph functions ========= */

Graph.prototype.isDirected = function() {
  return this._isDirected;
};

Graph.prototype.isMultigraph = function() {
  return this._isMultigraph;
};

Graph.prototype.isCompound = function() {
  return this._isCompound;
};

Graph.prototype.setGraph = function(label) {
  this._label = label;
  return this;
};

Graph.prototype.graph = function() {
  return this._label;
};


/* === Node functions ========== */

Graph.prototype.setDefaultNodeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultNodeLabelFn = newDefault;
  return this;
};

Graph.prototype.nodeCount = function() {
  return this._nodeCount;
};

Graph.prototype.nodes = function() {
  return _.keys(this._nodes);
};

Graph.prototype.sources = function() {
  var self = this;
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(self._in[v]);
  });
};

Graph.prototype.sinks = function() {
  var self = this;
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(self._out[v]);
  });
};

Graph.prototype.setNodes = function(vs, value) {
  var args = arguments;
  var self = this;
  _.each(vs, function(v) {
    if (args.length > 1) {
      self.setNode(v, value);
    } else {
      self.setNode(v);
    }
  });
  return this;
};

Graph.prototype.setNode = function(v, value) {
  if (_.has(this._nodes, v)) {
    if (arguments.length > 1) {
      this._nodes[v] = value;
    }
    return this;
  }

  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
  if (this._isCompound) {
    this._parent[v] = GRAPH_NODE;
    this._children[v] = {};
    this._children[GRAPH_NODE][v] = true;
  }
  this._in[v] = {};
  this._preds[v] = {};
  this._out[v] = {};
  this._sucs[v] = {};
  ++this._nodeCount;
  return this;
};

Graph.prototype.node = function(v) {
  return this._nodes[v];
};

Graph.prototype.hasNode = function(v) {
  return _.has(this._nodes, v);
};

Graph.prototype.removeNode =  function(v) {
  var self = this;
  if (_.has(this._nodes, v)) {
    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
    delete this._nodes[v];
    if (this._isCompound) {
      this._removeFromParentsChildList(v);
      delete this._parent[v];
      _.each(this.children(v), function(child) {
        self.setParent(child);
      });
      delete this._children[v];
    }
    _.each(_.keys(this._in[v]), removeEdge);
    delete this._in[v];
    delete this._preds[v];
    _.each(_.keys(this._out[v]), removeEdge);
    delete this._out[v];
    delete this._sucs[v];
    --this._nodeCount;
  }
  return this;
};

Graph.prototype.setParent = function(v, parent) {
  if (!this._isCompound) {
    throw new Error("Cannot set parent in a non-compound graph");
  }

  if (_.isUndefined(parent)) {
    parent = GRAPH_NODE;
  } else {
    // Coerce parent to string
    parent += "";
    for (var ancestor = parent;
      !_.isUndefined(ancestor);
      ancestor = this.parent(ancestor)) {
      if (ancestor === v) {
        throw new Error("Setting " + parent+ " as parent of " + v +
                        " would create a cycle");
      }
    }

    this.setNode(parent);
  }

  this.setNode(v);
  this._removeFromParentsChildList(v);
  this._parent[v] = parent;
  this._children[parent][v] = true;
  return this;
};

Graph.prototype._removeFromParentsChildList = function(v) {
  delete this._children[this._parent[v]][v];
};

Graph.prototype.parent = function(v) {
  if (this._isCompound) {
    var parent = this._parent[v];
    if (parent !== GRAPH_NODE) {
      return parent;
    }
  }
};

Graph.prototype.children = function(v) {
  if (_.isUndefined(v)) {
    v = GRAPH_NODE;
  }

  if (this._isCompound) {
    var children = this._children[v];
    if (children) {
      return _.keys(children);
    }
  } else if (v === GRAPH_NODE) {
    return this.nodes();
  } else if (this.hasNode(v)) {
    return [];
  }
};

Graph.prototype.predecessors = function(v) {
  var predsV = this._preds[v];
  if (predsV) {
    return _.keys(predsV);
  }
};

Graph.prototype.successors = function(v) {
  var sucsV = this._sucs[v];
  if (sucsV) {
    return _.keys(sucsV);
  }
};

Graph.prototype.neighbors = function(v) {
  var preds = this.predecessors(v);
  if (preds) {
    return _.union(preds, this.successors(v));
  }
};

Graph.prototype.isLeaf = function (v) {
  var neighbors;
  if (this.isDirected()) {
    neighbors = this.successors(v);
  } else {
    neighbors = this.neighbors(v);
  }
  return neighbors.length === 0;
};

Graph.prototype.filterNodes = function(filter) {
  var copy = new this.constructor({
    directed: this._isDirected,
    multigraph: this._isMultigraph,
    compound: this._isCompound
  });

  copy.setGraph(this.graph());

  var self = this;
  _.each(this._nodes, function(value, v) {
    if (filter(v)) {
      copy.setNode(v, value);
    }
  });

  _.each(this._edgeObjs, function(e) {
    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
      copy.setEdge(e, self.edge(e));
    }
  });

  var parents = {};
  function findParent(v) {
    var parent = self.parent(v);
    if (parent === undefined || copy.hasNode(parent)) {
      parents[v] = parent;
      return parent;
    } else if (parent in parents) {
      return parents[parent];
    } else {
      return findParent(parent);
    }
  }

  if (this._isCompound) {
    _.each(copy.nodes(), function(v) {
      copy.setParent(v, findParent(v));
    });
  }

  return copy;
};

/* === Edge functions ========== */

Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultEdgeLabelFn = newDefault;
  return this;
};

Graph.prototype.edgeCount = function() {
  return this._edgeCount;
};

Graph.prototype.edges = function() {
  return _.values(this._edgeObjs);
};

Graph.prototype.setPath = function(vs, value) {
  var self = this;
  var args = arguments;
  _.reduce(vs, function(v, w) {
    if (args.length > 1) {
      self.setEdge(v, w, value);
    } else {
      self.setEdge(v, w);
    }
    return w;
  });
  return this;
};

/*
 * setEdge(v, w, [value, [name]])
 * setEdge({ v, w, [name] }, [value])
 */
Graph.prototype.setEdge = function() {
  var v, w, name, value;
  var valueSpecified = false;
  var arg0 = arguments[0];

  if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
    v = arg0.v;
    w = arg0.w;
    name = arg0.name;
    if (arguments.length === 2) {
      value = arguments[1];
      valueSpecified = true;
    }
  } else {
    v = arg0;
    w = arguments[1];
    name = arguments[3];
    if (arguments.length > 2) {
      value = arguments[2];
      valueSpecified = true;
    }
  }

  v = "" + v;
  w = "" + w;
  if (!_.isUndefined(name)) {
    name = "" + name;
  }

  var e = edgeArgsToId(this._isDirected, v, w, name);
  if (_.has(this._edgeLabels, e)) {
    if (valueSpecified) {
      this._edgeLabels[e] = value;
    }
    return this;
  }

  if (!_.isUndefined(name) && !this._isMultigraph) {
    throw new Error("Cannot set a named edge when isMultigraph = false");
  }

  // It didn't exist, so we need to create it.
  // First ensure the nodes exist.
  this.setNode(v);
  this.setNode(w);

  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
  // Ensure we add undirected edges in a consistent way.
  v = edgeObj.v;
  w = edgeObj.w;

  Object.freeze(edgeObj);
  this._edgeObjs[e] = edgeObj;
  incrementOrInitEntry(this._preds[w], v);
  incrementOrInitEntry(this._sucs[v], w);
  this._in[w][e] = edgeObj;
  this._out[v][e] = edgeObj;
  this._edgeCount++;
  return this;
};

Graph.prototype.edge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  return this._edgeLabels[e];
};

Graph.prototype.hasEdge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  return _.has(this._edgeLabels, e);
};

Graph.prototype.removeEdge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  var edge = this._edgeObjs[e];
  if (edge) {
    v = edge.v;
    w = edge.w;
    delete this._edgeLabels[e];
    delete this._edgeObjs[e];
    decrementOrRemoveEntry(this._preds[w], v);
    decrementOrRemoveEntry(this._sucs[v], w);
    delete this._in[w][e];
    delete this._out[v][e];
    this._edgeCount--;
  }
  return this;
};

Graph.prototype.inEdges = function(v, u) {
  var inV = this._in[v];
  if (inV) {
    var edges = _.values(inV);
    if (!u) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.v === u; });
  }
};

Graph.prototype.outEdges = function(v, w) {
  var outV = this._out[v];
  if (outV) {
    var edges = _.values(outV);
    if (!w) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.w === w; });
  }
};

Graph.prototype.nodeEdges = function(v, w) {
  var inEdges = this.inEdges(v, w);
  if (inEdges) {
    return inEdges.concat(this.outEdges(v, w));
  }
};

function incrementOrInitEntry(map, k) {
  if (map[k]) {
    map[k]++;
  } else {
    map[k] = 1;
  }
}

function decrementOrRemoveEntry(map, k) {
  if (!--map[k]) { delete map[k]; }
}

function edgeArgsToId(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
}

function edgeArgsToObj(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  var edgeObj =  { v: v, w: w };
  if (name) {
    edgeObj.name = name;
  }
  return edgeObj;
}

function edgeObjToId(isDirected, edgeObj) {
  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
}


/***/ }),

/***/ "./node_modules/graphlib/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/graphlib/lib/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Includes only the "core" of graphlib
module.exports = {
  Graph: __webpack_require__(/*! ./graph */ "./node_modules/graphlib/lib/graph.js"),
  version: __webpack_require__(/*! ./version */ "./node_modules/graphlib/lib/version.js")
};


/***/ }),

/***/ "./node_modules/graphlib/lib/json.js":
/*!*******************************************!*\
  !*** ./node_modules/graphlib/lib/json.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _ = __webpack_require__(/*! ./lodash */ "./node_modules/graphlib/lib/lodash.js");
var Graph = __webpack_require__(/*! ./graph */ "./node_modules/graphlib/lib/graph.js");

module.exports = {
  write: write,
  read: read
};

function write(g) {
  var json = {
    options: {
      directed: g.isDirected(),
      multigraph: g.isMultigraph(),
      compound: g.isCompound()
    },
    nodes: writeNodes(g),
    edges: writeEdges(g)
  };
  if (!_.isUndefined(g.graph())) {
    json.value = _.clone(g.graph());
  }
  return json;
}

function writeNodes(g) {
  return _.map(g.nodes(), function(v) {
    var nodeValue = g.node(v);
    var parent = g.parent(v);
    var node = { v: v };
    if (!_.isUndefined(nodeValue)) {
      node.value = nodeValue;
    }
    if (!_.isUndefined(parent)) {
      node.parent = parent;
    }
    return node;
  });
}

function writeEdges(g) {
  return _.map(g.edges(), function(e) {
    var edgeValue = g.edge(e);
    var edge = { v: e.v, w: e.w };
    if (!_.isUndefined(e.name)) {
      edge.name = e.name;
    }
    if (!_.isUndefined(edgeValue)) {
      edge.value = edgeValue;
    }
    return edge;
  });
}

function read(json) {
  var g = new Graph(json.options).setGraph(json.value);
  _.each(json.nodes, function(entry) {
    g.setNode(entry.v, entry.value);
    if (entry.parent) {
      g.setParent(entry.v, entry.parent);
    }
  });
  _.each(json.edges, function(entry) {
    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
  });
  return g;
}


/***/ }),

/***/ "./node_modules/graphlib/lib/lodash.js":
/*!*********************************************!*\
  !*** ./node_modules/graphlib/lib/lodash.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global window */

var lodash;

if (true) {
  try {
    lodash = {
      clone: __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js"),
      constant: __webpack_require__(/*! lodash/constant */ "./node_modules/lodash/constant.js"),
      each: __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js"),
      filter: __webpack_require__(/*! lodash/filter */ "./node_modules/lodash/filter.js"),
      has:  __webpack_require__(/*! lodash/has */ "./node_modules/lodash/has.js"),
      isArray: __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js"),
      isEmpty: __webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js"),
      isFunction: __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"),
      isUndefined: __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js"),
      keys: __webpack_require__(/*! lodash/keys */ "./node_modules/lodash/keys.js"),
      map: __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js"),
      reduce: __webpack_require__(/*! lodash/reduce */ "./node_modules/lodash/reduce.js"),
      size: __webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js"),
      transform: __webpack_require__(/*! lodash/transform */ "./node_modules/lodash/transform.js"),
      union: __webpack_require__(/*! lodash/union */ "./node_modules/lodash/union.js"),
      values: __webpack_require__(/*! lodash/values */ "./node_modules/lodash/values.js")
    };
  } catch (e) {
    // continue regardless of error
  }
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;


/***/ }),

/***/ "./node_modules/graphlib/lib/version.js":
/*!**********************************************!*\
  !*** ./node_modules/graphlib/lib/version.js ***!
  \**********************************************/
/***/ ((module) => {

module.exports = '2.1.8';


/***/ }),

/***/ "./node_modules/javascript-natural-sort/naturalSort.js":
/*!*************************************************************!*\
  !*** ./node_modules/javascript-natural-sort/naturalSort.js ***!
  \*************************************************************/
/***/ ((module) => {

/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */
/*jshint unused:false */
module.exports = function naturalSort (a, b) {
	"use strict";
	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
		sre = /(^[ ]*|[ ]*$)/g,
		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
		hre = /^0x[0-9a-f]+$/i,
		ore = /^0/,
		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
		// convert all to strings strip whitespace
		x = i(a).replace(sre, '') || '',
		y = i(b).replace(sre, '') || '',
		// chunk/tokenize
		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		// numeric, hex or date detection
		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
		oFxNcL, oFyNcL;
	// first try and sort Hex codes or Dates
	if (yD) {
		if ( xD < yD ) { return -1; }
		else if ( xD > yD ) { return 1; }
	}
	// natural sorting through split numeric strings and default strings
	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
		// handle numeric vs string comparison - number < string - (Kyle Adams)
		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
		else if (typeof oFxNcL !== typeof oFyNcL) {
			oFxNcL += '';
			oFyNcL += '';
		}
		if (oFxNcL < oFyNcL) { return -1; }
		if (oFxNcL > oFyNcL) { return 1; }
	}
	return 0;
};


/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/***/ ((module) => {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "./node_modules/lodash/_arrayIncludes.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayIncludes.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),

/***/ "./node_modules/lodash/_arrayIncludesWith.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_arrayIncludesWith.js ***!
  \***************************************************/
/***/ ((module) => {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;


/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "./node_modules/lodash/_arrayReduce.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayReduce.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "./node_modules/lodash/_asciiSize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_asciiSize.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js");

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;


/***/ }),

/***/ "./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ "./node_modules/lodash/_createBaseEach.js");

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),

/***/ "./node_modules/lodash/_baseExtremum.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseExtremum.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined
          ? (current === current && !isSymbol(current))
          : comparator(current, computed)
        )) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

module.exports = baseExtremum;


/***/ }),

/***/ "./node_modules/lodash/_baseFilter.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseFilter.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js");

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;


/***/ }),

/***/ "./node_modules/lodash/_baseFindIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseFindIndex.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),

/***/ "./node_modules/lodash/_baseFlatten.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseFlatten.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isFlattenable = __webpack_require__(/*! ./_isFlattenable */ "./node_modules/lodash/_isFlattenable.js");

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_baseGt.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_baseGt.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */
function baseGt(value, other) {
  return value > other;
}

module.exports = baseGt;


/***/ }),

/***/ "./node_modules/lodash/_baseHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseHas.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;


/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ "./node_modules/lodash/_baseFindIndex.js"),
    baseIsNaN = __webpack_require__(/*! ./_baseIsNaN */ "./node_modules/lodash/_baseIsNaN.js"),
    strictIndexOf = __webpack_require__(/*! ./_strictIndexOf */ "./node_modules/lodash/_strictIndexOf.js");

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNaN.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsNaN.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "./node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "./node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    property = __webpack_require__(/*! ./property */ "./node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_baseLt.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_baseLt.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */
function baseLt(value, other) {
  return value < other;
}

module.exports = baseLt;


/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "./node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ "./node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__(/*! ./get */ "./node_modules/lodash/get.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ "./node_modules/lodash/_baseMergeDeep.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js");

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;


/***/ }),

/***/ "./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/lodash/isPlainObject.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js"),
    toPlainObject = __webpack_require__(/*! ./toPlainObject */ "./node_modules/lodash/toPlainObject.js");

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseOrderBy.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseOrderBy.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseMap = __webpack_require__(/*! ./_baseMap */ "./node_modules/lodash/_baseMap.js"),
    baseSortBy = __webpack_require__(/*! ./_baseSortBy */ "./node_modules/lodash/_baseSortBy.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    compareMultiple = __webpack_require__(/*! ./_compareMultiple */ "./node_modules/lodash/_compareMultiple.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;


/***/ }),

/***/ "./node_modules/lodash/_basePick.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_basePick.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePickBy = __webpack_require__(/*! ./_basePickBy */ "./node_modules/lodash/_basePickBy.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js");

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;


/***/ }),

/***/ "./node_modules/lodash/_basePickBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePickBy.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js"),
    baseSet = __webpack_require__(/*! ./_baseSet */ "./node_modules/lodash/_baseSet.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js");

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;


/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseRange.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseRange.js ***!
  \*******************************************/
/***/ ((module) => {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

module.exports = baseRange;


/***/ }),

/***/ "./node_modules/lodash/_baseReduce.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseReduce.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

module.exports = baseReduce;


/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ "./node_modules/lodash/_baseSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constant = __webpack_require__(/*! ./constant */ "./node_modules/lodash/constant.js"),
    defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),

/***/ "./node_modules/lodash/_baseSortBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseSortBy.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

module.exports = baseSortBy;


/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "./node_modules/lodash/_baseTrim.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseTrim.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "./node_modules/lodash/_baseUniq.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseUniq.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ "./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__(/*! ./_arrayIncludesWith */ "./node_modules/lodash/_arrayIncludesWith.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js"),
    createSet = __webpack_require__(/*! ./_createSet */ "./node_modules/lodash/_createSet.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;


/***/ }),

/***/ "./node_modules/lodash/_baseValues.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseValues.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js");

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;


/***/ }),

/***/ "./node_modules/lodash/_baseZipObject.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseZipObject.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */
function baseZipObject(props, values, assignFunc) {
  var index = -1,
      length = props.length,
      valsLength = values.length,
      result = {};

  while (++index < length) {
    var value = index < valsLength ? values[index] : undefined;
    assignFunc(result, props[index], value);
  }
  return result;
}

module.exports = baseZipObject;


/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "./node_modules/lodash/_castFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_castFunction.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;


/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_compareAscending.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_compareAscending.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

module.exports = compareAscending;


/***/ }),

/***/ "./node_modules/lodash/_compareMultiple.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_compareMultiple.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var compareAscending = __webpack_require__(/*! ./_compareAscending */ "./node_modules/lodash/_compareAscending.js");

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

module.exports = compareMultiple;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "./node_modules/lodash/_createFind.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_createFind.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;


/***/ }),

/***/ "./node_modules/lodash/_createRange.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_createRange.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRange = __webpack_require__(/*! ./_baseRange */ "./node_modules/lodash/_baseRange.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js"),
    toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    // Ensure the sign of `-0` is preserved.
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

module.exports = createRange;


/***/ }),

/***/ "./node_modules/lodash/_createSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_createSet.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    noop = __webpack_require__(/*! ./noop */ "./node_modules/lodash/noop.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "./node_modules/lodash/_flatRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_flatRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var flatten = __webpack_require__(/*! ./flatten */ "./node_modules/lodash/flatten.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "./node_modules/lodash/_hasUnicode.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hasUnicode.js ***!
  \********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isFlattenable.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_isFlattenable.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;


/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ "./node_modules/lodash/_baseSetToString.js"),
    shortOut = __webpack_require__(/*! ./_shortOut */ "./node_modules/lodash/_shortOut.js");

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/***/ ((module) => {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "./node_modules/lodash/_strictIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_strictIndexOf.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_stringSize.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stringSize.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiSize = __webpack_require__(/*! ./_asciiSize */ "./node_modules/lodash/_asciiSize.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeSize = __webpack_require__(/*! ./_unicodeSize */ "./node_modules/lodash/_unicodeSize.js");

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;


/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "./node_modules/lodash/_trimmedEndIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
  \*************************************************/
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "./node_modules/lodash/_unicodeSize.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_unicodeSize.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    ++result;
  }
  return result;
}

module.exports = unicodeSize;


/***/ }),

/***/ "./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ "./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),

/***/ "./node_modules/lodash/defaults.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/defaults.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/lodash/each.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/each.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./forEach */ "./node_modules/lodash/forEach.js");


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/filter.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/filter.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    baseFilter = __webpack_require__(/*! ./_baseFilter */ "./node_modules/lodash/_baseFilter.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;


/***/ }),

/***/ "./node_modules/lodash/find.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/find.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createFind = __webpack_require__(/*! ./_createFind */ "./node_modules/lodash/_createFind.js"),
    findIndex = __webpack_require__(/*! ./findIndex */ "./node_modules/lodash/findIndex.js");

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;


/***/ }),

/***/ "./node_modules/lodash/findIndex.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/findIndex.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ "./node_modules/lodash/_baseFindIndex.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    toInteger = __webpack_require__(/*! ./toInteger */ "./node_modules/lodash/toInteger.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;


/***/ }),

/***/ "./node_modules/lodash/flatten.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/flatten.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js");

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),

/***/ "./node_modules/lodash/forEach.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/forEach.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    castFunction = __webpack_require__(/*! ./_castFunction */ "./node_modules/lodash/_castFunction.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;


/***/ }),

/***/ "./node_modules/lodash/forIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/forIn.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    castFunction = __webpack_require__(/*! ./_castFunction */ "./node_modules/lodash/_castFunction.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */
function forIn(object, iteratee) {
  return object == null
    ? object
    : baseFor(object, castFunction(iteratee), keysIn);
}

module.exports = forIn;


/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "./node_modules/lodash/has.js":
/*!************************************!*\
  !*** ./node_modules/lodash/has.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHas = __webpack_require__(/*! ./_baseHas */ "./node_modules/lodash/_baseHas.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;


/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "./node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ "./node_modules/lodash/isEmpty.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEmpty.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "./node_modules/lodash/isString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "./node_modules/lodash/isUndefined.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isUndefined.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "./node_modules/lodash/last.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/last.js ***!
  \*************************************/
/***/ ((module) => {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),

/***/ "./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseMap = __webpack_require__(/*! ./_baseMap */ "./node_modules/lodash/_baseMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;


/***/ }),

/***/ "./node_modules/lodash/mapValues.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/mapValues.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js");

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;


/***/ }),

/***/ "./node_modules/lodash/max.js":
/*!************************************!*\
  !*** ./node_modules/lodash/max.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseExtremum = __webpack_require__(/*! ./_baseExtremum */ "./node_modules/lodash/_baseExtremum.js"),
    baseGt = __webpack_require__(/*! ./_baseGt */ "./node_modules/lodash/_baseGt.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */
function max(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseGt)
    : undefined;
}

module.exports = max;


/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__(/*! ./_baseMerge */ "./node_modules/lodash/_baseMerge.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js");

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;


/***/ }),

/***/ "./node_modules/lodash/min.js":
/*!************************************!*\
  !*** ./node_modules/lodash/min.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseExtremum = __webpack_require__(/*! ./_baseExtremum */ "./node_modules/lodash/_baseExtremum.js"),
    baseLt = __webpack_require__(/*! ./_baseLt */ "./node_modules/lodash/_baseLt.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */
function min(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseLt)
    : undefined;
}

module.exports = min;


/***/ }),

/***/ "./node_modules/lodash/minBy.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/minBy.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseExtremum = __webpack_require__(/*! ./_baseExtremum */ "./node_modules/lodash/_baseExtremum.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseLt = __webpack_require__(/*! ./_baseLt */ "./node_modules/lodash/_baseLt.js");

/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */
function minBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
    : undefined;
}

module.exports = minBy;


/***/ }),

/***/ "./node_modules/lodash/noop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/noop.js ***!
  \*************************************/
/***/ ((module) => {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;


/***/ }),

/***/ "./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "./node_modules/lodash/pick.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/pick.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePick = __webpack_require__(/*! ./_basePick */ "./node_modules/lodash/_basePick.js"),
    flatRest = __webpack_require__(/*! ./_flatRest */ "./node_modules/lodash/_flatRest.js");

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;


/***/ }),

/***/ "./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "./node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "./node_modules/lodash/range.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/range.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createRange = __webpack_require__(/*! ./_createRange */ "./node_modules/lodash/_createRange.js");

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

module.exports = range;


/***/ }),

/***/ "./node_modules/lodash/reduce.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/reduce.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayReduce = __webpack_require__(/*! ./_arrayReduce */ "./node_modules/lodash/_arrayReduce.js"),
    baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseReduce = __webpack_require__(/*! ./_baseReduce */ "./node_modules/lodash/_baseReduce.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
}

module.exports = reduce;


/***/ }),

/***/ "./node_modules/lodash/size.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/size.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isString = __webpack_require__(/*! ./isString */ "./node_modules/lodash/isString.js"),
    stringSize = __webpack_require__(/*! ./_stringSize */ "./node_modules/lodash/_stringSize.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

module.exports = size;


/***/ }),

/***/ "./node_modules/lodash/sortBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/sortBy.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js"),
    baseOrderBy = __webpack_require__(/*! ./_baseOrderBy */ "./node_modules/lodash/_baseOrderBy.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

module.exports = sortBy;


/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ "./node_modules/lodash/toInteger.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "./node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;


/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/lodash/transform.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/transform.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/**
 * An alternative to `_.reduce`; this method transforms `object` to a new
 * `accumulator` object which is the result of running each of its own
 * enumerable string keyed properties thru `iteratee`, with each invocation
 * potentially mutating the `accumulator` object. If `accumulator` is not
 * provided, a new object with the same `[[Prototype]]` will be used. The
 * iteratee is invoked with four arguments: (accumulator, value, key, object).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The custom accumulator value.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.transform([2, 3, 4], function(result, n) {
 *   result.push(n *= n);
 *   return n % 2 == 0;
 * }, []);
 * // => [4, 9]
 *
 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] }
 */
function transform(object, iteratee, accumulator) {
  var isArr = isArray(object),
      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

  iteratee = baseIteratee(iteratee, 4);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor : [];
    }
    else if (isObject(object)) {
      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    }
    else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    return iteratee(accumulator, value, index, object);
  });
  return accumulator;
}

module.exports = transform;


/***/ }),

/***/ "./node_modules/lodash/union.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/union.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    baseUniq = __webpack_require__(/*! ./_baseUniq */ "./node_modules/lodash/_baseUniq.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js");

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

module.exports = union;


/***/ }),

/***/ "./node_modules/lodash/uniqueId.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/uniqueId.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

module.exports = uniqueId;


/***/ }),

/***/ "./node_modules/lodash/values.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/values.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseValues = __webpack_require__(/*! ./_baseValues */ "./node_modules/lodash/_baseValues.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;


/***/ }),

/***/ "./node_modules/lodash/zipObject.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/zipObject.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseZipObject = __webpack_require__(/*! ./_baseZipObject */ "./node_modules/lodash/_baseZipObject.js");

/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return baseZipObject(props || [], values || [], assignValue);
}

module.exports = zipObject;


/***/ }),

/***/ "./node_modules/mathjs/lib/esm/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTrue": () => (/* binding */ createTrue),
/* harmony export */   "createFalse": () => (/* binding */ createFalse),
/* harmony export */   "createNull": () => (/* binding */ createNull),
/* harmony export */   "createInfinity": () => (/* binding */ createInfinity),
/* harmony export */   "createNaN": () => (/* binding */ createNaN),
/* harmony export */   "createPi": () => (/* binding */ createPi),
/* harmony export */   "createTau": () => (/* binding */ createTau),
/* harmony export */   "createE": () => (/* binding */ createE),
/* harmony export */   "createPhi": () => (/* binding */ createPhi),
/* harmony export */   "createLN2": () => (/* binding */ createLN2),
/* harmony export */   "createLN10": () => (/* binding */ createLN10),
/* harmony export */   "createLOG2E": () => (/* binding */ createLOG2E),
/* harmony export */   "createLOG10E": () => (/* binding */ createLOG10E),
/* harmony export */   "createSQRT1_2": () => (/* binding */ createSQRT1_2),
/* harmony export */   "createSQRT2": () => (/* binding */ createSQRT2),
/* harmony export */   "createI": () => (/* binding */ createI),
/* harmony export */   "createUppercasePi": () => (/* binding */ createUppercasePi),
/* harmony export */   "createUppercaseE": () => (/* binding */ createUppercaseE),
/* harmony export */   "createVersion": () => (/* binding */ createVersion)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./version.js */ "./node_modules/mathjs/lib/esm/version.js");
/* harmony import */ var _utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/bignumber/constants.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/constants.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/constants.js");




var createTrue = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('true', [], () => true);
var createFalse = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('false', [], () => false);
var createNull = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('null', [], () => null);
var createInfinity = /* #__PURE__ */recreateFactory('Infinity', ['config', '?BigNumber'], (_ref) => {
  var {
    config,
    BigNumber
  } = _ref;
  return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
var createNaN = /* #__PURE__ */recreateFactory('NaN', ['config', '?BigNumber'], (_ref2) => {
  var {
    config,
    BigNumber
  } = _ref2;
  return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
var createPi = /* #__PURE__ */recreateFactory('pi', ['config', '?BigNumber'], (_ref3) => {
  var {
    config,
    BigNumber
  } = _ref3;
  return config.number === 'BigNumber' ? (0,_utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_1__.createBigNumberPi)(BigNumber) : _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__.pi;
});
var createTau = /* #__PURE__ */recreateFactory('tau', ['config', '?BigNumber'], (_ref4) => {
  var {
    config,
    BigNumber
  } = _ref4;
  return config.number === 'BigNumber' ? (0,_utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_1__.createBigNumberTau)(BigNumber) : _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__.tau;
});
var createE = /* #__PURE__ */recreateFactory('e', ['config', '?BigNumber'], (_ref5) => {
  var {
    config,
    BigNumber
  } = _ref5;
  return config.number === 'BigNumber' ? (0,_utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_1__.createBigNumberE)(BigNumber) : _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__.e;
}); // golden ratio, (1+sqrt(5))/2

var createPhi = /* #__PURE__ */recreateFactory('phi', ['config', '?BigNumber'], (_ref6) => {
  var {
    config,
    BigNumber
  } = _ref6;
  return config.number === 'BigNumber' ? (0,_utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_1__.createBigNumberPhi)(BigNumber) : _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__.phi;
});
var createLN2 = /* #__PURE__ */recreateFactory('LN2', ['config', '?BigNumber'], (_ref7) => {
  var {
    config,
    BigNumber
  } = _ref7;
  return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
var createLN10 = /* #__PURE__ */recreateFactory('LN10', ['config', '?BigNumber'], (_ref8) => {
  var {
    config,
    BigNumber
  } = _ref8;
  return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
var createLOG2E = /* #__PURE__ */recreateFactory('LOG2E', ['config', '?BigNumber'], (_ref9) => {
  var {
    config,
    BigNumber
  } = _ref9;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
var createLOG10E = /* #__PURE__ */recreateFactory('LOG10E', ['config', '?BigNumber'], (_ref10) => {
  var {
    config,
    BigNumber
  } = _ref10;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
var createSQRT1_2 = /* #__PURE__ */recreateFactory( // eslint-disable-line camelcase
'SQRT1_2', ['config', '?BigNumber'], (_ref11) => {
  var {
    config,
    BigNumber
  } = _ref11;
  return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
var createSQRT2 = /* #__PURE__ */recreateFactory('SQRT2', ['config', '?BigNumber'], (_ref12) => {
  var {
    config,
    BigNumber
  } = _ref12;
  return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
var createI = /* #__PURE__ */recreateFactory('i', ['Complex'], (_ref13) => {
  var {
    Complex
  } = _ref13;
  return Complex.I;
}); // for backward compatibility with v5

var createUppercasePi = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('PI', ['pi'], (_ref14) => {
  var {
    pi
  } = _ref14;
  return pi;
});
var createUppercaseE = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('E', ['e'], (_ref15) => {
  var {
    e
  } = _ref15;
  return e;
});
var createVersion = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)('version', [], () => _version_js__WEBPACK_IMPORTED_MODULE_3__.version); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?

function recreateFactory(name, dependencies, create) {
  return (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, create, {
    recreateOnConfigChange: true
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/core/config.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/core/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_CONFIG": () => (/* binding */ DEFAULT_CONFIG)
/* harmony export */ });
var DEFAULT_CONFIG = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: 'Matrix',
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: 'number',
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: false,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/core/function/config.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/core/function/config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MATRIX_OPTIONS": () => (/* binding */ MATRIX_OPTIONS),
/* harmony export */   "NUMBER_OPTIONS": () => (/* binding */ NUMBER_OPTIONS),
/* harmony export */   "configFactory": () => (/* binding */ configFactory)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ "./node_modules/mathjs/lib/esm/core/config.js");


var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

function configFactory(config, emit) {
  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      var prev = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.mapObject)(config, _utils_object_js__WEBPACK_IMPORTED_MODULE_0__.clone); // validate some of the options

      validateOption(options, 'matrix', MATRIX_OPTIONS);
      validateOption(options, 'number', NUMBER_OPTIONS); // merge options

      (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.deepExtend)(config, options);
      var curr = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.mapObject)(config, _utils_object_js__WEBPACK_IMPORTED_MODULE_0__.clone);
      var changes = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.mapObject)(options, _utils_object_js__WEBPACK_IMPORTED_MODULE_0__.clone); // emit 'config' event

      emit('config', curr, prev, changes);
      return curr;
    } else {
      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.mapObject)(config, _utils_object_js__WEBPACK_IMPORTED_MODULE_0__.clone);
    }
  } // attach the valid options to the function so they can be extended


  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function

  Object.keys(_config_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CONFIG).forEach(key => {
    Object.defineProperty(_config, key, {
      get: () => config[key],
      enumerable: true,
      configurable: true
    });
  });
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */

function contains(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */


function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    // unknown value
    console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/core/function/typed.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/core/function/typed.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTyped": () => (/* binding */ createTyped)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var typed_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! typed-function */ "./node_modules/typed-function/typed-function.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */



 // returns a new instance of typed-function

var _createTyped2 = function _createTyped() {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped2 = typed_function__WEBPACK_IMPORTED_MODULE_0__.create;
  return typed_function__WEBPACK_IMPORTED_MODULE_0__;
};

var dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
/**
 * Factory function for creating a new typed instance
 * @param {Object} dependencies   Object with data types like Complex and BigNumber
 * @returns {Function}
 */

var createTyped = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)('typed', dependencies, function createTyped(_ref) {
  var {
    BigNumber,
    Complex,
    DenseMatrix,
    Fraction
  } = _ref;

  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // get a new instance of typed-function
  var typed = _createTyped2(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).


  typed.types = [{
    name: 'number',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber
  }, {
    name: 'Complex',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isComplex
  }, {
    name: 'BigNumber',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber
  }, {
    name: 'Fraction',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFraction
  }, {
    name: 'Unit',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isUnit
  }, {
    name: 'string',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isString
  }, {
    name: 'Chain',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isChain
  }, {
    name: 'Array',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isArray
  }, {
    name: 'Matrix',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix
  }, {
    name: 'DenseMatrix',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isDenseMatrix
  }, {
    name: 'SparseMatrix',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix
  }, {
    name: 'Range',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isRange
  }, {
    name: 'Index',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isIndex
  }, {
    name: 'boolean',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean
  }, {
    name: 'ResultSet',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isResultSet
  }, {
    name: 'Help',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isHelp
  }, {
    name: 'function',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFunction
  }, {
    name: 'Date',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isDate
  }, {
    name: 'RegExp',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isRegExp
  }, {
    name: 'null',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNull
  }, {
    name: 'undefined',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined
  }, {
    name: 'AccessorNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isAccessorNode
  }, {
    name: 'ArrayNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isArrayNode
  }, {
    name: 'AssignmentNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isAssignmentNode
  }, {
    name: 'BlockNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBlockNode
  }, {
    name: 'ConditionalNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isConditionalNode
  }, {
    name: 'ConstantNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isConstantNode
  }, {
    name: 'FunctionNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFunctionNode
  }, {
    name: 'FunctionAssignmentNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFunctionAssignmentNode
  }, {
    name: 'IndexNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isIndexNode
  }, {
    name: 'Node',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode
  }, {
    name: 'ObjectNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isObjectNode
  }, {
    name: 'OperatorNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isOperatorNode
  }, {
    name: 'ParenthesisNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isParenthesisNode
  }, {
    name: 'RangeNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isRangeNode
  }, {
    name: 'SymbolNode',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSymbolNode
  }, {
    name: 'Object',
    test: _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isObject
  } // order 'Object' last, it matches on other classes too
  ];
  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      } // note: conversion from number to BigNumber can fail if x has >15 digits


      if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.digits)(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }

      return new BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function convert(x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function convert(x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      var f = new Fraction(x);

      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }

      return f;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: 'string',
    to: 'number',
    convert: function convert(x) {
      var n = Number(x);

      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }

      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      try {
        return new BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      try {
        return new Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      try {
        return new Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      return new BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      return new Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function convert(x) {
      return String(x);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function convert(array) {
      if (!DenseMatrix) {
        throwNoMatrix();
      }

      return new DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function convert(matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
});

function throwNoBignumber(x) {
  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}

function throwNoComplex(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}

function throwNoMatrix() {
  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}

function throwNoFraction(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/entry/configReadonly.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/entry/configReadonly.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": () => (/* binding */ config)
/* harmony export */ });
/* harmony import */ var _core_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/config.js */ "./node_modules/mathjs/lib/esm/core/config.js");
/* harmony import */ var _core_function_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/function/config.js */ "./node_modules/mathjs/lib/esm/core/function/config.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }


 // create a read-only version of config

var config = /* #__PURE__ */function config(options) {
  if (options) {
    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
  }

  return Object.freeze(_core_config_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CONFIG);
};

_extends(config, _core_config_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CONFIG, {
  MATRIX_OPTIONS: _core_function_config_js__WEBPACK_IMPORTED_MODULE_1__.MATRIX_OPTIONS,
  NUMBER_OPTIONS: _core_function_config_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER_OPTIONS
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Node": () => (/* binding */ Node),
/* harmony export */   "ArrayNode": () => (/* binding */ ArrayNode),
/* harmony export */   "BlockNode": () => (/* binding */ BlockNode),
/* harmony export */   "ConstantNode": () => (/* binding */ ConstantNode),
/* harmony export */   "ObjectNode": () => (/* binding */ ObjectNode),
/* harmony export */   "ParenthesisNode": () => (/* binding */ ParenthesisNode),
/* harmony export */   "RelationalNode": () => (/* binding */ RelationalNode),
/* harmony export */   "Chain": () => (/* binding */ Chain),
/* harmony export */   "reviver": () => (/* binding */ reviver),
/* harmony export */   "ConditionalNode": () => (/* binding */ ConditionalNode),
/* harmony export */   "OperatorNode": () => (/* binding */ OperatorNode),
/* harmony export */   "RangeNode": () => (/* binding */ RangeNode),
/* harmony export */   "FunctionAssignmentNode": () => (/* binding */ FunctionAssignmentNode),
/* harmony export */   "chain": () => (/* binding */ chain),
/* harmony export */   "AccessorNode": () => (/* binding */ AccessorNode),
/* harmony export */   "IndexNode": () => (/* binding */ IndexNode),
/* harmony export */   "AssignmentNode": () => (/* binding */ AssignmentNode),
/* harmony export */   "SymbolNode": () => (/* binding */ SymbolNode),
/* harmony export */   "FunctionNode": () => (/* binding */ FunctionNode),
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "evaluate": () => (/* binding */ evaluate),
/* harmony export */   "Help": () => (/* binding */ Help),
/* harmony export */   "Parser": () => (/* binding */ Parser),
/* harmony export */   "help": () => (/* binding */ help),
/* harmony export */   "compile": () => (/* binding */ compile),
/* harmony export */   "simplify": () => (/* binding */ simplify),
/* harmony export */   "rationalize": () => (/* binding */ rationalize),
/* harmony export */   "parser": () => (/* binding */ parser),
/* harmony export */   "derivative": () => (/* binding */ derivative),
/* harmony export */   "docs": () => (/* reexport safe */ _expression_embeddedDocs_embeddedDocs_js__WEBPACK_IMPORTED_MODULE_48__.embeddedDocs)
/* harmony export */ });
/* harmony import */ var _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./configReadonly.js */ "./node_modules/mathjs/lib/esm/entry/configReadonly.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/Node.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/ArrayNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/BlockNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/ConstantNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/ObjectNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/RelationalNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/chain/Chain.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/json/reviver.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/ConditionalNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/OperatorNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/RangeNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/chain/function/chain.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/AccessorNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/IndexNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/SymbolNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/node/FunctionNode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/parse.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/function/evaluate.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/Help.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/Parser.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/function/help.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/function/compile.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/rationalize.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/function/parser.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/derivative.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/apply.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/filter.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/map.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/subset.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/index.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/concat.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/max.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/min.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/sum.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/column.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/range.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/diff.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/row.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/mean.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/variance.transform.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/expression/transform/std.transform.js");
/* harmony import */ var _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pureFunctionsAny.generated.js */ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js");
/* harmony import */ var _expression_embeddedDocs_embeddedDocs_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../expression/embeddedDocs/embeddedDocs.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */



var math = {}; // NOT pure!

var mathWithTransform = {}; // NOT pure!

var classes = {}; // NOT pure!

var Node = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_0__.createNode)({
  mathWithTransform
});
var ArrayNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_1__.createArrayNode)({
  Node
});
var BlockNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_2__.createBlockNode)({
  Node,
  ResultSet: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ResultSet
});
var ConstantNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_4__.createConstantNode)({
  Node
});
var ObjectNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_5__.createObjectNode)({
  Node
});
var ParenthesisNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_6__.createParenthesisNode)({
  Node
});
var RelationalNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_7__.createRelationalNode)({
  Node
});
var Chain = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createChainClass)({
  math
});
var reviver = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_9__.createReviver)({
  classes
});
var ConditionalNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_10__.createConditionalNode)({
  Node
});
var OperatorNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_11__.createOperatorNode)({
  Node
});
var RangeNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_12__.createRangeNode)({
  Node
});
var FunctionAssignmentNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_13__.createFunctionAssignmentNode)({
  Node,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var chain = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_14__.createChain)({
  Chain,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var AccessorNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_15__.createAccessorNode)({
  Node,
  subset: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subset
});
var IndexNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_16__.createIndexNode)({
  Node,
  Range: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Range,
  size: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.size
});
var AssignmentNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_17__.createAssignmentNode)({
  matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
  Node,
  subset: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subset
});
var SymbolNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_18__.createSymbolNode)({
  Unit: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Unit,
  Node,
  math
});
var FunctionNode = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_19__.createFunctionNode)({
  Node,
  SymbolNode,
  math
});
var parse = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_20__.createParse)({
  AccessorNode,
  ArrayNode,
  AssignmentNode,
  BlockNode,
  ConditionalNode,
  ConstantNode,
  FunctionAssignmentNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  RangeNode,
  RelationalNode,
  SymbolNode,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
  numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var evaluate = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_22__.createEvaluate)({
  parse,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var Help = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_23__.createHelpClass)({
  parse
});
var Parser = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_24__.createParserClass)({
  parse
});
var help = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_25__.createHelp)({
  Help,
  mathWithTransform,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var compile = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_26__.createCompile)({
  parse,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var simplify = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_27__.createSimplify)({
  bignumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bignumber,
  fraction: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fraction,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
  divide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divide,
  equal: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equal,
  isZero: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isZero,
  mathWithTransform,
  multiply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multiply,
  parse,
  pow: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pow,
  subtract: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subtract,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var rationalize = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_28__.createRationalize)({
  bignumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bignumber,
  fraction: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fraction,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
  divide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divide,
  equal: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equal,
  isZero: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isZero,
  mathWithTransform,
  multiply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multiply,
  parse,
  pow: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pow,
  simplify,
  subtract: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subtract,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var parser = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_29__.createParser)({
  Parser,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});
var derivative = (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_30__.createDerivative)({
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
  equal: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equal,
  isZero: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isZero,
  numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
  parse,
  simplify,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
});

_extends(math, {
  reviver,
  false: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__._false,
  null: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__._null,
  true: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__._true,
  replacer: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.replacer,
  i: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.i,
  LN10: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.LN10,
  LOG10E: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.LOG10E,
  NaN: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__._NaN,
  pi: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pi,
  SQRT1_2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.SQRT1_2,
  tau: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.tau,
  efimovFactor: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.efimovFactor,
  fineStructure: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fineStructure,
  sackurTetrode: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sackurTetrode,
  weakMixingAngle: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.weakMixingAngle,
  e: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.e,
  Infinity: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__._Infinity,
  LOG2E: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.LOG2E,
  'PI': _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pi,
  version: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.version,
  'E': _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.e,
  phi: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.phi,
  typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed,
  isInteger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isInteger,
  isNumeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isNumeric,
  isPositive: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isPositive,
  isNaN: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isNaN,
  equalScalar: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equalScalar,
  number: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.number,
  boolean: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.boolean,
  complex: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.complex,
  splitUnit: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.splitUnit,
  unaryPlus: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.unaryPlus,
  apply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.apply,
  cube: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cube,
  expm1: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.expm1,
  log10: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.log10,
  multiplyScalar: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multiplyScalar,
  sign: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sign,
  square: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.square,
  bitNot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bitNot,
  arg: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.arg,
  im: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.im,
  not: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.not,
  filter: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.filter,
  forEach: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.forEach,
  map: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.map,
  erf: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.erf,
  format: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.format,
  oct: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.oct,
  print: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.print,
  isPrime: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isPrime,
  acos: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acos,
  acot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acot,
  acsc: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acsc,
  asec: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.asec,
  asin: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.asin,
  atan: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.atan,
  atanh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.atanh,
  cosh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cosh,
  coth: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.coth,
  csch: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.csch,
  sech: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sech,
  sinh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sinh,
  tanh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.tanh,
  chain,
  combinations: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.combinations,
  pickRandom: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pickRandom,
  randomInt: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.randomInt,
  LN2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.LN2,
  clone: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.clone,
  hasNumericValue: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.hasNumericValue,
  typeOf: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typeOf,
  string: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.string,
  fraction: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fraction,
  unaryMinus: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.unaryMinus,
  addScalar: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.addScalar,
  exp: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.exp,
  log2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.log2,
  sqrt: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sqrt,
  conj: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.conj,
  getMatrixDataType: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.getMatrixDataType,
  mode: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.mode,
  bin: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bin,
  acosh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acosh,
  acsch: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acsch,
  asinh: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.asinh,
  cos: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cos,
  csc: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.csc,
  sin: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sin,
  combinationsWithRep: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.combinationsWithRep,
  random: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.random,
  SQRT2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.SQRT2,
  isNegative: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isNegative,
  matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
  cbrt: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cbrt,
  gcd: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.gcd,
  mod: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.mod,
  nthRoot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.nthRoot,
  xgcd: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.xgcd,
  bitAnd: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bitAnd,
  bitXor: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bitXor,
  or: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.or,
  concat: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.concat,
  diag: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.diag,
  identity: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.identity,
  ones: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ones,
  reshape: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.reshape,
  size: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.size,
  subset: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subset,
  zeros: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.zeros,
  hex: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.hex,
  round: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.round,
  leftShift: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.leftShift,
  rightLogShift: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.rightLogShift,
  compare: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.compare,
  compareText: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.compareText,
  smaller: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.smaller,
  larger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.larger,
  unequal: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.unequal,
  sparse: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sparse,
  acoth: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.acoth,
  atan2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.atan2,
  sec: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sec,
  add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
  dot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.dot,
  composition: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.composition,
  isZero: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isZero,
  abs: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.abs,
  floor: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.floor,
  multiply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multiply,
  dotMultiply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.dotMultiply,
  re: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.re,
  flatten: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.flatten,
  resize: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.resize,
  squeeze: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.squeeze,
  to: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.to,
  pow: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.pow,
  dotPow: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.dotPow,
  rightArithShift: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.rightArithShift,
  compareNatural: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.compareNatural,
  equalText: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equalText,
  largerEq: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.largerEq,
  partitionSelect: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.partitionSelect,
  asech: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.asech,
  tan: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.tan,
  setDifference: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setDifference,
  setIntersect: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setIntersect,
  setMultiplicity: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setMultiplicity,
  setSize: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setSize,
  trace: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.trace,
  quantileSeq: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.quantileSeq,
  gamma: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.gamma,
  bignumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bignumber,
  lcm: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.lcm,
  bitOr: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bitOr,
  kron: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.kron,
  transpose: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.transpose,
  numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
  and: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.and,
  smallerEq: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.smallerEq,
  sort: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sort,
  min: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.min,
  cot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cot,
  setDistinct: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setDistinct,
  setPowerset: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setPowerset,
  index: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.index,
  sum: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sum,
  factorial: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.factorial,
  permutations: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.permutations,
  ceil: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ceil,
  subtract: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subtract,
  cross: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.cross,
  range: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.range,
  row: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.row,
  prod: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.prod,
  equal: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.equal,
  max: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.max,
  setCartesian: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setCartesian,
  setSymDifference: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setSymDifference,
  fix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fix,
  column: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.column,
  diff: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.diff,
  ctranspose: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ctranspose,
  deepEqual: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.deepEqual,
  setIsSubset: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setIsSubset,
  xor: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.xor,
  divideScalar: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divideScalar,
  nthRoots: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.nthRoots,
  lsolve: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.lsolve,
  lsolveAll: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.lsolveAll,
  setUnion: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.setUnion,
  lup: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.lup,
  slu: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.slu,
  det: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.det,
  distance: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.distance,
  stirlingS2: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.stirlingS2,
  catalan: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.catalan,
  count: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.count,
  log: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.log,
  dotDivide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.dotDivide,
  usolveAll: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.usolveAll,
  hypot: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.hypot,
  qr: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.qr,
  inv: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.inv,
  expm: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.expm,
  divide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divide,
  mean: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.mean,
  variance: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.variance,
  kldivergence: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.kldivergence,
  bellNumbers: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bellNumbers,
  log1p: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.log1p,
  createUnit: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.createUnit,
  eigs: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.eigs,
  intersect: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersect,
  std: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.std,
  atomicMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.atomicMass,
  bohrMagneton: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bohrMagneton,
  boltzmann: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.boltzmann,
  conductanceQuantum: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.conductanceQuantum,
  deuteronMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.deuteronMass,
  electronMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.electronMass,
  faraday: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.faraday,
  firstRadiation: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.firstRadiation,
  gravitationConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.gravitationConstant,
  hartreeEnergy: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.hartreeEnergy,
  klitzing: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.klitzing,
  magneticConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.magneticConstant,
  molarMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.molarMass,
  molarPlanckConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.molarPlanckConstant,
  neutronMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.neutronMass,
  planckCharge: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckCharge,
  planckLength: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckLength,
  planckTemperature: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckTemperature,
  protonMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.protonMass,
  reducedPlanckConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.reducedPlanckConstant,
  secondRadiation: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.secondRadiation,
  stefanBoltzmann: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.stefanBoltzmann,
  vacuumImpedance: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.vacuumImpedance,
  usolve: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.usolve,
  norm: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.norm,
  lusolve: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.lusolve,
  sqrtm: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sqrtm,
  multinomial: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multinomial,
  avogadro: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.avogadro,
  classicalElectronRadius: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.classicalElectronRadius,
  electricConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.electricConstant,
  fermiCoupling: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.fermiCoupling,
  gravity: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.gravity,
  loschmidt: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.loschmidt,
  molarMassC12: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.molarMassC12,
  nuclearMagneton: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.nuclearMagneton,
  planckMass: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckMass,
  quantumOfCirculation: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.quantumOfCirculation,
  speedOfLight: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.speedOfLight,
  wienDisplacement: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.wienDisplacement,
  rotationMatrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.rotationMatrix,
  median: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.median,
  bohrRadius: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bohrRadius,
  elementaryCharge: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.elementaryCharge,
  inverseConductanceQuantum: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.inverseConductanceQuantum,
  molarVolume: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.molarVolume,
  planckTime: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckTime,
  thomsonCrossSection: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.thomsonCrossSection,
  rotate: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.rotate,
  parse,
  evaluate,
  mad: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.mad,
  coulomb: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.coulomb,
  magneticFluxQuantum: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.magneticFluxQuantum,
  rydberg: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.rydberg,
  unit: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.unit,
  help,
  gasConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.gasConstant,
  compile,
  simplify,
  rationalize,
  parser,
  planckConstant: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.planckConstant,
  derivative,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config
});

_extends(mathWithTransform, math, {
  apply: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_31__.createApplyTransform)({
    isInteger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isInteger,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  filter: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_32__.createFilterTransform)({
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  map: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_33__.createMapTransform)({
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  forEach: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_34__.createForEachTransform)({
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  subset: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_35__.createSubsetTransform)({
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  index: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_36__.createIndexTransform)({
    Index: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Index
  }),
  concat: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_37__.createConcatTransform)({
    isInteger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isInteger,
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  max: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_38__.createMaxTransform)({
    config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
    larger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.larger,
    numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  min: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_39__.createMinTransform)({
    config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
    numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
    smaller: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.smaller,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  sum: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_40__.createSumTransform)({
    add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
    config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
    numeric: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.numeric,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  column: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_41__.createColumnTransform)({
    Index: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Index,
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    range: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.range,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  range: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_42__.createRangeTransform)({
    bignumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bignumber,
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_21__.config,
    larger: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.larger,
    largerEq: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.largerEq,
    smaller: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.smaller,
    smallerEq: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.smallerEq,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  diff: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_43__.createDiffTransform)({
    bignumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.bignumber,
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    number: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.number,
    subtract: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subtract,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  row: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_44__.createRowTransform)({
    Index: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Index,
    matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.matrix,
    range: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.range,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  mean: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_45__.createMeanTransform)({
    add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
    divide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divide,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  variance: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_46__.createVarianceTransform)({
    add: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.add,
    apply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.apply,
    divide: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.divide,
    isNaN: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.isNaN,
    multiply: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.multiply,
    subtract: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.subtract,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed
  }),
  std: (0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_47__.createStdTransform)({
    sqrt: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.sqrt,
    typed: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.typed,
    variance: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.variance
  })
});

_extends(classes, {
  ResultSet: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ResultSet,
  Complex: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Complex,
  Range: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Range,
  Node,
  ArrayNode,
  BlockNode,
  ConstantNode,
  ObjectNode,
  ParenthesisNode,
  RelationalNode,
  Chain,
  BigNumber: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.BigNumber,
  Matrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Matrix,
  ConditionalNode,
  OperatorNode,
  Fraction: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Fraction,
  RangeNode,
  DenseMatrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.DenseMatrix,
  FunctionAssignmentNode,
  SparseMatrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.SparseMatrix,
  ImmutableDenseMatrix: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.ImmutableDenseMatrix,
  FibonacciHeap: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.FibonacciHeap,
  AccessorNode,
  IndexNode,
  Index: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Index,
  AssignmentNode,
  Spa: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Spa,
  Unit: _pureFunctionsAny_generated_js__WEBPACK_IMPORTED_MODULE_3__.Unit,
  SymbolNode,
  FunctionNode,
  Help,
  Parser
});

Chain.createProxy(math);


/***/ }),

/***/ "./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResultSet": () => (/* binding */ ResultSet),
/* harmony export */   "Complex": () => (/* binding */ Complex),
/* harmony export */   "Range": () => (/* binding */ Range),
/* harmony export */   "_false": () => (/* binding */ _false),
/* harmony export */   "_null": () => (/* binding */ _null),
/* harmony export */   "_true": () => (/* binding */ _true),
/* harmony export */   "BigNumber": () => (/* binding */ BigNumber),
/* harmony export */   "Matrix": () => (/* binding */ Matrix),
/* harmony export */   "replacer": () => (/* binding */ replacer),
/* harmony export */   "i": () => (/* binding */ i),
/* harmony export */   "LN10": () => (/* binding */ LN10),
/* harmony export */   "LOG10E": () => (/* binding */ LOG10E),
/* harmony export */   "_NaN": () => (/* binding */ _NaN),
/* harmony export */   "pi": () => (/* binding */ pi),
/* harmony export */   "SQRT1_2": () => (/* binding */ SQRT1_2),
/* harmony export */   "tau": () => (/* binding */ tau),
/* harmony export */   "efimovFactor": () => (/* binding */ efimovFactor),
/* harmony export */   "fineStructure": () => (/* binding */ fineStructure),
/* harmony export */   "sackurTetrode": () => (/* binding */ sackurTetrode),
/* harmony export */   "weakMixingAngle": () => (/* binding */ weakMixingAngle),
/* harmony export */   "Fraction": () => (/* binding */ Fraction),
/* harmony export */   "e": () => (/* binding */ e),
/* harmony export */   "_Infinity": () => (/* binding */ _Infinity),
/* harmony export */   "LOG2E": () => (/* binding */ LOG2E),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "DenseMatrix": () => (/* binding */ DenseMatrix),
/* harmony export */   "phi": () => (/* binding */ phi),
/* harmony export */   "typed": () => (/* binding */ typed),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "isNumeric": () => (/* binding */ isNumeric),
/* harmony export */   "isPositive": () => (/* binding */ isPositive),
/* harmony export */   "isNaN": () => (/* binding */ isNaN),
/* harmony export */   "equalScalar": () => (/* binding */ equalScalar),
/* harmony export */   "number": () => (/* binding */ number),
/* harmony export */   "boolean": () => (/* binding */ boolean),
/* harmony export */   "complex": () => (/* binding */ complex),
/* harmony export */   "splitUnit": () => (/* binding */ splitUnit),
/* harmony export */   "unaryPlus": () => (/* binding */ unaryPlus),
/* harmony export */   "apply": () => (/* binding */ apply),
/* harmony export */   "cube": () => (/* binding */ cube),
/* harmony export */   "expm1": () => (/* binding */ expm1),
/* harmony export */   "log10": () => (/* binding */ log10),
/* harmony export */   "multiplyScalar": () => (/* binding */ multiplyScalar),
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "square": () => (/* binding */ square),
/* harmony export */   "bitNot": () => (/* binding */ bitNot),
/* harmony export */   "arg": () => (/* binding */ arg),
/* harmony export */   "im": () => (/* binding */ im),
/* harmony export */   "not": () => (/* binding */ not),
/* harmony export */   "filter": () => (/* binding */ filter),
/* harmony export */   "forEach": () => (/* binding */ forEach),
/* harmony export */   "map": () => (/* binding */ map),
/* harmony export */   "erf": () => (/* binding */ erf),
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "oct": () => (/* binding */ oct),
/* harmony export */   "print": () => (/* binding */ print),
/* harmony export */   "isPrime": () => (/* binding */ isPrime),
/* harmony export */   "acos": () => (/* binding */ acos),
/* harmony export */   "acot": () => (/* binding */ acot),
/* harmony export */   "acsc": () => (/* binding */ acsc),
/* harmony export */   "asec": () => (/* binding */ asec),
/* harmony export */   "asin": () => (/* binding */ asin),
/* harmony export */   "atan": () => (/* binding */ atan),
/* harmony export */   "atanh": () => (/* binding */ atanh),
/* harmony export */   "cosh": () => (/* binding */ cosh),
/* harmony export */   "coth": () => (/* binding */ coth),
/* harmony export */   "csch": () => (/* binding */ csch),
/* harmony export */   "sech": () => (/* binding */ sech),
/* harmony export */   "sinh": () => (/* binding */ sinh),
/* harmony export */   "tanh": () => (/* binding */ tanh),
/* harmony export */   "combinations": () => (/* binding */ combinations),
/* harmony export */   "pickRandom": () => (/* binding */ pickRandom),
/* harmony export */   "randomInt": () => (/* binding */ randomInt),
/* harmony export */   "LN2": () => (/* binding */ LN2),
/* harmony export */   "clone": () => (/* binding */ clone),
/* harmony export */   "hasNumericValue": () => (/* binding */ hasNumericValue),
/* harmony export */   "typeOf": () => (/* binding */ typeOf),
/* harmony export */   "string": () => (/* binding */ string),
/* harmony export */   "fraction": () => (/* binding */ fraction),
/* harmony export */   "unaryMinus": () => (/* binding */ unaryMinus),
/* harmony export */   "addScalar": () => (/* binding */ addScalar),
/* harmony export */   "exp": () => (/* binding */ exp),
/* harmony export */   "log2": () => (/* binding */ log2),
/* harmony export */   "sqrt": () => (/* binding */ sqrt),
/* harmony export */   "conj": () => (/* binding */ conj),
/* harmony export */   "getMatrixDataType": () => (/* binding */ getMatrixDataType),
/* harmony export */   "mode": () => (/* binding */ mode),
/* harmony export */   "bin": () => (/* binding */ bin),
/* harmony export */   "acosh": () => (/* binding */ acosh),
/* harmony export */   "acsch": () => (/* binding */ acsch),
/* harmony export */   "asinh": () => (/* binding */ asinh),
/* harmony export */   "cos": () => (/* binding */ cos),
/* harmony export */   "csc": () => (/* binding */ csc),
/* harmony export */   "sin": () => (/* binding */ sin),
/* harmony export */   "combinationsWithRep": () => (/* binding */ combinationsWithRep),
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "SQRT2": () => (/* binding */ SQRT2),
/* harmony export */   "isNegative": () => (/* binding */ isNegative),
/* harmony export */   "SparseMatrix": () => (/* binding */ SparseMatrix),
/* harmony export */   "matrix": () => (/* binding */ matrix),
/* harmony export */   "cbrt": () => (/* binding */ cbrt),
/* harmony export */   "gcd": () => (/* binding */ gcd),
/* harmony export */   "mod": () => (/* binding */ mod),
/* harmony export */   "nthRoot": () => (/* binding */ nthRoot),
/* harmony export */   "xgcd": () => (/* binding */ xgcd),
/* harmony export */   "bitAnd": () => (/* binding */ bitAnd),
/* harmony export */   "bitXor": () => (/* binding */ bitXor),
/* harmony export */   "or": () => (/* binding */ or),
/* harmony export */   "concat": () => (/* binding */ concat),
/* harmony export */   "diag": () => (/* binding */ diag),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "ones": () => (/* binding */ ones),
/* harmony export */   "reshape": () => (/* binding */ reshape),
/* harmony export */   "size": () => (/* binding */ size),
/* harmony export */   "subset": () => (/* binding */ subset),
/* harmony export */   "zeros": () => (/* binding */ zeros),
/* harmony export */   "hex": () => (/* binding */ hex),
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "leftShift": () => (/* binding */ leftShift),
/* harmony export */   "rightLogShift": () => (/* binding */ rightLogShift),
/* harmony export */   "compare": () => (/* binding */ compare),
/* harmony export */   "compareText": () => (/* binding */ compareText),
/* harmony export */   "smaller": () => (/* binding */ smaller),
/* harmony export */   "larger": () => (/* binding */ larger),
/* harmony export */   "unequal": () => (/* binding */ unequal),
/* harmony export */   "ImmutableDenseMatrix": () => (/* binding */ ImmutableDenseMatrix),
/* harmony export */   "FibonacciHeap": () => (/* binding */ FibonacciHeap),
/* harmony export */   "sparse": () => (/* binding */ sparse),
/* harmony export */   "acoth": () => (/* binding */ acoth),
/* harmony export */   "atan2": () => (/* binding */ atan2),
/* harmony export */   "sec": () => (/* binding */ sec),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "dot": () => (/* binding */ dot),
/* harmony export */   "composition": () => (/* binding */ composition),
/* harmony export */   "isZero": () => (/* binding */ isZero),
/* harmony export */   "abs": () => (/* binding */ abs),
/* harmony export */   "floor": () => (/* binding */ floor),
/* harmony export */   "multiply": () => (/* binding */ multiply),
/* harmony export */   "dotMultiply": () => (/* binding */ dotMultiply),
/* harmony export */   "re": () => (/* binding */ re),
/* harmony export */   "flatten": () => (/* binding */ flatten),
/* harmony export */   "resize": () => (/* binding */ resize),
/* harmony export */   "squeeze": () => (/* binding */ squeeze),
/* harmony export */   "to": () => (/* binding */ to),
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "dotPow": () => (/* binding */ dotPow),
/* harmony export */   "rightArithShift": () => (/* binding */ rightArithShift),
/* harmony export */   "compareNatural": () => (/* binding */ compareNatural),
/* harmony export */   "equalText": () => (/* binding */ equalText),
/* harmony export */   "largerEq": () => (/* binding */ largerEq),
/* harmony export */   "partitionSelect": () => (/* binding */ partitionSelect),
/* harmony export */   "Index": () => (/* binding */ Index),
/* harmony export */   "asech": () => (/* binding */ asech),
/* harmony export */   "tan": () => (/* binding */ tan),
/* harmony export */   "setDifference": () => (/* binding */ setDifference),
/* harmony export */   "setIntersect": () => (/* binding */ setIntersect),
/* harmony export */   "setMultiplicity": () => (/* binding */ setMultiplicity),
/* harmony export */   "setSize": () => (/* binding */ setSize),
/* harmony export */   "trace": () => (/* binding */ trace),
/* harmony export */   "quantileSeq": () => (/* binding */ quantileSeq),
/* harmony export */   "gamma": () => (/* binding */ gamma),
/* harmony export */   "bignumber": () => (/* binding */ bignumber),
/* harmony export */   "lcm": () => (/* binding */ lcm),
/* harmony export */   "bitOr": () => (/* binding */ bitOr),
/* harmony export */   "kron": () => (/* binding */ kron),
/* harmony export */   "transpose": () => (/* binding */ transpose),
/* harmony export */   "numeric": () => (/* binding */ numeric),
/* harmony export */   "and": () => (/* binding */ and),
/* harmony export */   "smallerEq": () => (/* binding */ smallerEq),
/* harmony export */   "sort": () => (/* binding */ sort),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "cot": () => (/* binding */ cot),
/* harmony export */   "setDistinct": () => (/* binding */ setDistinct),
/* harmony export */   "setPowerset": () => (/* binding */ setPowerset),
/* harmony export */   "index": () => (/* binding */ index),
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "factorial": () => (/* binding */ factorial),
/* harmony export */   "permutations": () => (/* binding */ permutations),
/* harmony export */   "ceil": () => (/* binding */ ceil),
/* harmony export */   "subtract": () => (/* binding */ subtract),
/* harmony export */   "cross": () => (/* binding */ cross),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "row": () => (/* binding */ row),
/* harmony export */   "prod": () => (/* binding */ prod),
/* harmony export */   "equal": () => (/* binding */ equal),
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "setCartesian": () => (/* binding */ setCartesian),
/* harmony export */   "setSymDifference": () => (/* binding */ setSymDifference),
/* harmony export */   "fix": () => (/* binding */ fix),
/* harmony export */   "column": () => (/* binding */ column),
/* harmony export */   "diff": () => (/* binding */ diff),
/* harmony export */   "ctranspose": () => (/* binding */ ctranspose),
/* harmony export */   "deepEqual": () => (/* binding */ deepEqual),
/* harmony export */   "setIsSubset": () => (/* binding */ setIsSubset),
/* harmony export */   "xor": () => (/* binding */ xor),
/* harmony export */   "divideScalar": () => (/* binding */ divideScalar),
/* harmony export */   "nthRoots": () => (/* binding */ nthRoots),
/* harmony export */   "lsolve": () => (/* binding */ lsolve),
/* harmony export */   "lsolveAll": () => (/* binding */ lsolveAll),
/* harmony export */   "Spa": () => (/* binding */ Spa),
/* harmony export */   "setUnion": () => (/* binding */ setUnion),
/* harmony export */   "lup": () => (/* binding */ lup),
/* harmony export */   "slu": () => (/* binding */ slu),
/* harmony export */   "det": () => (/* binding */ det),
/* harmony export */   "distance": () => (/* binding */ distance),
/* harmony export */   "stirlingS2": () => (/* binding */ stirlingS2),
/* harmony export */   "catalan": () => (/* binding */ catalan),
/* harmony export */   "count": () => (/* binding */ count),
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "dotDivide": () => (/* binding */ dotDivide),
/* harmony export */   "usolveAll": () => (/* binding */ usolveAll),
/* harmony export */   "hypot": () => (/* binding */ hypot),
/* harmony export */   "qr": () => (/* binding */ qr),
/* harmony export */   "inv": () => (/* binding */ inv),
/* harmony export */   "expm": () => (/* binding */ expm),
/* harmony export */   "divide": () => (/* binding */ divide),
/* harmony export */   "mean": () => (/* binding */ mean),
/* harmony export */   "variance": () => (/* binding */ variance),
/* harmony export */   "kldivergence": () => (/* binding */ kldivergence),
/* harmony export */   "bellNumbers": () => (/* binding */ bellNumbers),
/* harmony export */   "log1p": () => (/* binding */ log1p),
/* harmony export */   "Unit": () => (/* binding */ Unit),
/* harmony export */   "createUnit": () => (/* binding */ createUnit),
/* harmony export */   "eigs": () => (/* binding */ eigs),
/* harmony export */   "intersect": () => (/* binding */ intersect),
/* harmony export */   "std": () => (/* binding */ std),
/* harmony export */   "atomicMass": () => (/* binding */ atomicMass),
/* harmony export */   "bohrMagneton": () => (/* binding */ bohrMagneton),
/* harmony export */   "boltzmann": () => (/* binding */ boltzmann),
/* harmony export */   "conductanceQuantum": () => (/* binding */ conductanceQuantum),
/* harmony export */   "deuteronMass": () => (/* binding */ deuteronMass),
/* harmony export */   "electronMass": () => (/* binding */ electronMass),
/* harmony export */   "faraday": () => (/* binding */ faraday),
/* harmony export */   "firstRadiation": () => (/* binding */ firstRadiation),
/* harmony export */   "gravitationConstant": () => (/* binding */ gravitationConstant),
/* harmony export */   "hartreeEnergy": () => (/* binding */ hartreeEnergy),
/* harmony export */   "klitzing": () => (/* binding */ klitzing),
/* harmony export */   "magneticConstant": () => (/* binding */ magneticConstant),
/* harmony export */   "molarMass": () => (/* binding */ molarMass),
/* harmony export */   "molarPlanckConstant": () => (/* binding */ molarPlanckConstant),
/* harmony export */   "neutronMass": () => (/* binding */ neutronMass),
/* harmony export */   "planckCharge": () => (/* binding */ planckCharge),
/* harmony export */   "planckLength": () => (/* binding */ planckLength),
/* harmony export */   "planckTemperature": () => (/* binding */ planckTemperature),
/* harmony export */   "protonMass": () => (/* binding */ protonMass),
/* harmony export */   "reducedPlanckConstant": () => (/* binding */ reducedPlanckConstant),
/* harmony export */   "secondRadiation": () => (/* binding */ secondRadiation),
/* harmony export */   "stefanBoltzmann": () => (/* binding */ stefanBoltzmann),
/* harmony export */   "vacuumImpedance": () => (/* binding */ vacuumImpedance),
/* harmony export */   "usolve": () => (/* binding */ usolve),
/* harmony export */   "norm": () => (/* binding */ norm),
/* harmony export */   "lusolve": () => (/* binding */ lusolve),
/* harmony export */   "sqrtm": () => (/* binding */ sqrtm),
/* harmony export */   "multinomial": () => (/* binding */ multinomial),
/* harmony export */   "avogadro": () => (/* binding */ avogadro),
/* harmony export */   "classicalElectronRadius": () => (/* binding */ classicalElectronRadius),
/* harmony export */   "electricConstant": () => (/* binding */ electricConstant),
/* harmony export */   "fermiCoupling": () => (/* binding */ fermiCoupling),
/* harmony export */   "gravity": () => (/* binding */ gravity),
/* harmony export */   "loschmidt": () => (/* binding */ loschmidt),
/* harmony export */   "molarMassC12": () => (/* binding */ molarMassC12),
/* harmony export */   "nuclearMagneton": () => (/* binding */ nuclearMagneton),
/* harmony export */   "planckMass": () => (/* binding */ planckMass),
/* harmony export */   "quantumOfCirculation": () => (/* binding */ quantumOfCirculation),
/* harmony export */   "speedOfLight": () => (/* binding */ speedOfLight),
/* harmony export */   "wienDisplacement": () => (/* binding */ wienDisplacement),
/* harmony export */   "rotationMatrix": () => (/* binding */ rotationMatrix),
/* harmony export */   "median": () => (/* binding */ median),
/* harmony export */   "bohrRadius": () => (/* binding */ bohrRadius),
/* harmony export */   "elementaryCharge": () => (/* binding */ elementaryCharge),
/* harmony export */   "inverseConductanceQuantum": () => (/* binding */ inverseConductanceQuantum),
/* harmony export */   "molarVolume": () => (/* binding */ molarVolume),
/* harmony export */   "planckTime": () => (/* binding */ planckTime),
/* harmony export */   "thomsonCrossSection": () => (/* binding */ thomsonCrossSection),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "mad": () => (/* binding */ mad),
/* harmony export */   "coulomb": () => (/* binding */ coulomb),
/* harmony export */   "magneticFluxQuantum": () => (/* binding */ magneticFluxQuantum),
/* harmony export */   "rydberg": () => (/* binding */ rydberg),
/* harmony export */   "unit": () => (/* binding */ unit),
/* harmony export */   "gasConstant": () => (/* binding */ gasConstant),
/* harmony export */   "planckConstant": () => (/* binding */ planckConstant)
/* harmony export */ });
/* harmony import */ var _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./configReadonly.js */ "./node_modules/mathjs/lib/esm/entry/configReadonly.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/resultset/ResultSet.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/complex/Complex.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/Range.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/constants.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/Matrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/json/replacer.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/unit/physicalConstants.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/fraction/Fraction.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/core/function/typed.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isInteger.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isNumeric.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isPositive.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isNaN.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/equalScalar.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/number.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/boolean.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/complex/function/complex.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/apply.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/cube.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/expm1.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/log10.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/sign.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/square.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/bitNot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/complex/arg.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/complex/im.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/logical/not.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/filter.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/forEach.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/map.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/special/erf.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/string/format.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/string/oct.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/string/print.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isPrime.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acos.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acsc.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/asec.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/asin.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/atan.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/atanh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/cosh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/coth.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/csch.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/sech.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/sinh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/tanh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/combinations.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/pickRandom.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/randomInt.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/clone.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/typeOf.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/string.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/fraction/function/fraction.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/exp.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/log2.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/complex/conj.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/mode.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/string/bin.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acosh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acsch.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/asinh.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/cos.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/csc.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/sin.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/random.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isNegative.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/function/matrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/gcd.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/mod.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/bitXor.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/logical/or.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/concat.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/diag.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/identity.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/ones.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/reshape.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/size.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/subset.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/zeros.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/string/hex.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/round.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/leftShift.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/compare.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/compareText.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/smaller.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/larger.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/unequal.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/function/sparse.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/acoth.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/atan2.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/sec.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/add.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/dot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/combinatorics/composition.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/isZero.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/abs.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/floor.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/multiply.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/complex/re.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/flatten.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/resize.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/squeeze.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/unit/to.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/pow.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/compareNatural.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/equalText.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/largerEq.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/asech.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/tan.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setDifference.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setIntersect.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setMultiplicity.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setSize.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/trace.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/gamma.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/lcm.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/bitwise/bitOr.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/kron.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/transpose.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/utils/numeric.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/logical/and.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/smallerEq.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/sort.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/min.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/trigonometry/cot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setDistinct.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setPowerset.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/function/index.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/sum.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/factorial.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/permutations.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/ceil.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/subtract.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/cross.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/range.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/row.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/prod.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/equal.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/max.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setCartesian.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setSymDifference.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/fix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/column.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/diff.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/ctranspose.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/relational/deepEqual.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setIsSubset.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/logical/xor.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/matrix/Spa.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/set/setUnion.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/det.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/geometry/distance.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/combinatorics/catalan.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/count.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/log.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/hypot.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/qr.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/inv.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/expm.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/divide.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/mean.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/variance.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/kldivergence.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/log1p.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/unit/Unit.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/unit/function/createUnit.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/eigs.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/geometry/intersect.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/std.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/arithmetic/norm.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/sqrtm.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/probability/multinomial.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/median.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/matrix/rotate.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/function/statistics/mad.js");
/* harmony import */ var _factoriesAny_js__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/esm/type/unit/function/unit.js");
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */


var ResultSet = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_0__.createResultSet)({});
var Complex = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_1__.createComplexClass)({});
var Range = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_2__.createRangeClass)({});
var _false = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createFalse)({});
var _null = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createNull)({});
var _true = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createTrue)({});
var BigNumber = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_4__.createBigNumberClass)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var Matrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_6__.createMatrixClass)({});
var replacer = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_7__.createReplacer)({});
var i = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createI)({
  Complex
});
var LN10 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createLN10)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var LOG10E = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createLOG10E)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var _NaN = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createNaN)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var pi = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createPi)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var SQRT1_2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createSQRT1_2)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var tau = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createTau)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var efimovFactor = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createEfimovFactor)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var fineStructure = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createFineStructure)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var sackurTetrode = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createSackurTetrode)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var weakMixingAngle = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createWeakMixingAngle)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var Fraction = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_9__.createFractionClass)({});
var e = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createE)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var _Infinity = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createInfinity)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var LOG2E = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createLOG2E)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var version = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createVersion)({});
var DenseMatrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_10__.createDenseMatrixClass)({
  Matrix
});
var phi = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createPhi)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var typed = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_11__.createTyped)({
  BigNumber,
  Complex,
  DenseMatrix,
  Fraction
});
var isInteger = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_12__.createIsInteger)({
  typed
});
var isNumeric = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_13__.createIsNumeric)({
  typed
});
var isPositive = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_14__.createIsPositive)({
  typed
});
var isNaN = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_15__.createIsNaN)({
  typed
});
var equalScalar = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_16__.createEqualScalar)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var number = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_17__.createNumber)({
  typed
});
var boolean = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_18__.createBoolean)({
  typed
});
var complex = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_19__.createComplex)({
  Complex,
  typed
});
var splitUnit = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_20__.createSplitUnit)({
  typed
});
var unaryPlus = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_21__.createUnaryPlus)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var apply = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_22__.createApply)({
  isInteger,
  typed
});
var cube = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_23__.createCube)({
  typed
});
var expm1 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_24__.createExpm1)({
  Complex,
  typed
});
var log10 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_25__.createLog10)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var multiplyScalar = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_26__.createMultiplyScalar)({
  typed
});
var sign = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_27__.createSign)({
  BigNumber,
  Fraction,
  complex,
  typed
});
var square = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_28__.createSquare)({
  typed
});
var bitNot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_29__.createBitNot)({
  typed
});
var arg = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_30__.createArg)({
  typed
});
var im = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_31__.createIm)({
  typed
});
var not = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_32__.createNot)({
  typed
});
var filter = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_33__.createFilter)({
  typed
});
var forEach = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_34__.createForEach)({
  typed
});
var map = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_35__.createMap)({
  typed
});
var erf = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_36__.createErf)({
  typed
});
var format = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_37__.createFormat)({
  typed
});
var oct = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_38__.createOct)({
  format,
  typed
});
var print = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_39__.createPrint)({
  typed
});
var isPrime = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_40__.createIsPrime)({
  typed
});
var acos = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_41__.createAcos)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var acot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_42__.createAcot)({
  BigNumber,
  typed
});
var acsc = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_43__.createAcsc)({
  BigNumber,
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var asec = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_44__.createAsec)({
  BigNumber,
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var asin = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_45__.createAsin)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var atan = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_46__.createAtan)({
  typed
});
var atanh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_47__.createAtanh)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var cosh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_48__.createCosh)({
  typed
});
var coth = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_49__.createCoth)({
  BigNumber,
  typed
});
var csch = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_50__.createCsch)({
  BigNumber,
  typed
});
var sech = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_51__.createSech)({
  BigNumber,
  typed
});
var sinh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_52__.createSinh)({
  typed
});
var tanh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_53__.createTanh)({
  typed
});
var combinations = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_54__.createCombinations)({
  typed
});
var pickRandom = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_55__.createPickRandom)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var randomInt = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_56__.createRandomInt)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var LN2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createLN2)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var clone = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_57__.createClone)({
  typed
});
var hasNumericValue = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_58__.createHasNumericValue)({
  isNumeric,
  typed
});
var typeOf = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_59__.createTypeOf)({
  typed
});
var string = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_60__.createString)({
  typed
});
var fraction = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_61__.createFraction)({
  Fraction,
  typed
});
var unaryMinus = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_62__.createUnaryMinus)({
  typed
});
var addScalar = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_63__.createAddScalar)({
  typed
});
var exp = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_64__.createExp)({
  typed
});
var log2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_65__.createLog2)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var sqrt = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_66__.createSqrt)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var conj = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_67__.createConj)({
  typed
});
var getMatrixDataType = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_68__.createGetMatrixDataType)({
  typed
});
var mode = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_69__.createMode)({
  isNaN,
  isNumeric,
  typed
});
var bin = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_70__.createBin)({
  format,
  typed
});
var acosh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_71__.createAcosh)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var acsch = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_72__.createAcsch)({
  BigNumber,
  typed
});
var asinh = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_73__.createAsinh)({
  typed
});
var cos = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_74__.createCos)({
  typed
});
var csc = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_75__.createCsc)({
  BigNumber,
  typed
});
var sin = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_76__.createSin)({
  typed
});
var combinationsWithRep = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_77__.createCombinationsWithRep)({
  typed
});
var random = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_78__.createRandom)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var SQRT2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_3__.createSQRT2)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var isNegative = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_79__.createIsNegative)({
  typed
});
var SparseMatrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_80__.createSparseMatrixClass)({
  Matrix,
  equalScalar,
  typed
});
var matrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_81__.createMatrix)({
  DenseMatrix,
  Matrix,
  SparseMatrix,
  typed
});
var cbrt = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_82__.createCbrt)({
  BigNumber,
  Complex,
  Fraction,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  isNegative,
  matrix,
  typed,
  unaryMinus
});
var gcd = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_83__.createGcd)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var mod = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_84__.createMod)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var nthRoot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_85__.createNthRoot)({
  BigNumber,
  equalScalar,
  matrix,
  typed
});
var xgcd = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_86__.createXgcd)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var bitAnd = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_87__.createBitAnd)({
  equalScalar,
  matrix,
  typed
});
var bitXor = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_88__.createBitXor)({
  DenseMatrix,
  matrix,
  typed
});
var or = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_89__.createOr)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var concat = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_90__.createConcat)({
  isInteger,
  matrix,
  typed
});
var diag = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_91__.createDiag)({
  DenseMatrix,
  SparseMatrix,
  matrix,
  typed
});
var identity = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_92__.createIdentity)({
  BigNumber,
  DenseMatrix,
  SparseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var ones = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_93__.createOnes)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var reshape = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_94__.createReshape)({
  isInteger,
  matrix,
  typed
});
var size = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_95__.createSize)({
  matrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var subset = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_96__.createSubset)({
  matrix,
  typed
});
var zeros = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_97__.createZeros)({
  BigNumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var hex = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_98__.createHex)({
  format,
  typed
});
var round = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_99__.createRound)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
var leftShift = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_100__.createLeftShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
var rightLogShift = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_101__.createRightLogShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
var compare = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_102__.createCompare)({
  BigNumber,
  DenseMatrix,
  Fraction,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  equalScalar,
  matrix,
  typed
});
var compareText = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_103__.createCompareText)({
  matrix,
  typed
});
var smaller = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_104__.createSmaller)({
  DenseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var larger = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_105__.createLarger)({
  DenseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var unequal = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_106__.createUnequal)({
  DenseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  equalScalar,
  matrix,
  typed
});
var ImmutableDenseMatrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_107__.createImmutableDenseMatrixClass)({
  DenseMatrix,
  smaller
});
var FibonacciHeap = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_108__.createFibonacciHeapClass)({
  larger,
  smaller
});
var sparse = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_109__.createSparse)({
  SparseMatrix,
  typed
});
var acoth = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_110__.createAcoth)({
  BigNumber,
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var atan2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_111__.createAtan2)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var sec = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_112__.createSec)({
  BigNumber,
  typed
});
var add = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_113__.createAdd)({
  DenseMatrix,
  SparseMatrix,
  addScalar,
  equalScalar,
  matrix,
  typed
});
var dot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_114__.createDot)({
  addScalar,
  conj,
  multiplyScalar,
  size,
  typed
});
var composition = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_115__.createComposition)({
  addScalar,
  combinations,
  isInteger,
  isNegative,
  isPositive,
  larger,
  typed
});
var isZero = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_116__.createIsZero)({
  typed
});
var abs = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_117__.createAbs)({
  typed
});
var floor = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_118__.createFloor)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  equalScalar,
  matrix,
  round,
  typed
});
var multiply = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_119__.createMultiply)({
  addScalar,
  dot,
  equalScalar,
  matrix,
  multiplyScalar,
  typed
});
var dotMultiply = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_120__.createDotMultiply)({
  equalScalar,
  matrix,
  multiplyScalar,
  typed
});
var re = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_121__.createRe)({
  typed
});
var flatten = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_122__.createFlatten)({
  matrix,
  typed
});
var resize = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_123__.createResize)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix
});
var squeeze = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_124__.createSqueeze)({
  matrix,
  typed
});
var to = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_125__.createTo)({
  matrix,
  typed
});
var pow = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_126__.createPow)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  fraction,
  identity,
  matrix,
  multiply,
  number,
  typed
});
var dotPow = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_127__.createDotPow)({
  DenseMatrix,
  equalScalar,
  matrix,
  pow,
  typed
});
var rightArithShift = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_128__.createRightArithShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
var compareNatural = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_129__.createCompareNatural)({
  compare,
  typed
});
var equalText = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_130__.createEqualText)({
  compareText,
  isZero,
  typed
});
var largerEq = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_131__.createLargerEq)({
  DenseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var partitionSelect = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_132__.createPartitionSelect)({
  compare,
  isNaN,
  isNumeric,
  typed
});
var Index = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_133__.createIndexClass)({
  ImmutableDenseMatrix
});
var asech = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_134__.createAsech)({
  BigNumber,
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  typed
});
var tan = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_135__.createTan)({
  typed
});
var setDifference = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_136__.createSetDifference)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var setIntersect = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_137__.createSetIntersect)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var setMultiplicity = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_138__.createSetMultiplicity)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var setSize = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_139__.createSetSize)({
  compareNatural,
  typed
});
var trace = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_140__.createTrace)({
  add,
  matrix,
  typed
});
var quantileSeq = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_141__.createQuantileSeq)({
  add,
  compare,
  multiply,
  partitionSelect,
  typed
});
var gamma = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_142__.createGamma)({
  BigNumber,
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  multiplyScalar,
  pow,
  typed
});
var bignumber = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_143__.createBignumber)({
  BigNumber,
  typed
});
var lcm = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_144__.createLcm)({
  equalScalar,
  matrix,
  typed
});
var bitOr = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_145__.createBitOr)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var kron = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_146__.createKron)({
  matrix,
  multiplyScalar,
  typed
});
var transpose = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_147__.createTranspose)({
  matrix,
  typed
});
var numeric = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_148__.createNumeric)({
  bignumber,
  fraction,
  number
});
var and = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_149__.createAnd)({
  equalScalar,
  matrix,
  not,
  typed,
  zeros
});
var smallerEq = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_150__.createSmallerEq)({
  DenseMatrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  matrix,
  typed
});
var sort = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_151__.createSort)({
  compare,
  compareNatural,
  matrix,
  typed
});
var min = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_152__.createMin)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  numeric,
  smaller,
  typed
});
var cot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_153__.createCot)({
  BigNumber,
  typed
});
var setDistinct = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_154__.createSetDistinct)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var setPowerset = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_155__.createSetPowerset)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var index = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_156__.createIndex)({
  Index,
  typed
});
var sum = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_157__.createSum)({
  add,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  numeric,
  typed
});
var factorial = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_158__.createFactorial)({
  gamma,
  typed
});
var permutations = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_159__.createPermutations)({
  factorial,
  typed
});
var ceil = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_160__.createCeil)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  equalScalar,
  matrix,
  round,
  typed
});
var subtract = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_161__.createSubtract)({
  DenseMatrix,
  addScalar,
  equalScalar,
  matrix,
  typed,
  unaryMinus
});
var cross = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_162__.createCross)({
  matrix,
  multiply,
  subtract,
  typed
});
var range = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_163__.createRange)({
  bignumber,
  matrix,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  larger,
  largerEq,
  smaller,
  smallerEq,
  typed
});
var row = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_164__.createRow)({
  Index,
  matrix,
  range,
  typed
});
var prod = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_165__.createProd)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  multiplyScalar,
  numeric,
  typed
});
var equal = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_166__.createEqual)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
var max = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_167__.createMax)({
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  larger,
  numeric,
  typed
});
var setCartesian = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_168__.createSetCartesian)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var setSymDifference = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_169__.createSetSymDifference)({
  Index,
  concat,
  setDifference,
  size,
  subset,
  typed
});
var fix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_170__.createFix)({
  Complex,
  ceil,
  floor,
  matrix,
  typed
});
var column = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_171__.createColumn)({
  Index,
  matrix,
  range,
  typed
});
var diff = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_172__.createDiff)({
  matrix,
  number,
  subtract,
  typed
});
var ctranspose = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_173__.createCtranspose)({
  conj,
  transpose,
  typed
});
var deepEqual = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_174__.createDeepEqual)({
  equal,
  typed
});
var setIsSubset = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_175__.createSetIsSubset)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
var xor = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_176__.createXor)({
  DenseMatrix,
  matrix,
  typed
});
var divideScalar = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_177__.createDivideScalar)({
  numeric,
  typed
});
var nthRoots = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_178__.createNthRoots)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  divideScalar,
  typed
});
var lsolve = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_179__.createLsolve)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
var lsolveAll = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_180__.createLsolveAll)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
var Spa = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_181__.createSpaClass)({
  FibonacciHeap,
  addScalar,
  equalScalar
});
var setUnion = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_182__.createSetUnion)({
  Index,
  concat,
  setIntersect,
  setSymDifference,
  size,
  subset,
  typed
});
var lup = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_183__.createLup)({
  DenseMatrix,
  Spa,
  SparseMatrix,
  abs,
  addScalar,
  divideScalar,
  equalScalar,
  larger,
  matrix,
  multiplyScalar,
  subtract,
  typed,
  unaryMinus
});
var slu = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_184__.createSlu)({
  SparseMatrix,
  abs,
  add,
  divideScalar,
  larger,
  largerEq,
  multiply,
  subtract,
  transpose,
  typed
});
var det = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_185__.createDet)({
  lup,
  matrix,
  multiply,
  subtract,
  typed,
  unaryMinus
});
var distance = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_186__.createDistance)({
  abs,
  addScalar,
  divideScalar,
  multiplyScalar,
  sqrt,
  subtract,
  typed,
  unaryMinus
});
var stirlingS2 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_187__.createStirlingS2)({
  addScalar,
  combinations,
  divideScalar,
  factorial,
  isInteger,
  isNegative,
  larger,
  multiplyScalar,
  pow,
  subtract,
  typed
});
var catalan = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_188__.createCatalan)({
  addScalar,
  combinations,
  divideScalar,
  isInteger,
  isNegative,
  multiplyScalar,
  typed
});
var count = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_189__.createCount)({
  prod,
  size,
  typed
});
var log = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_190__.createLog)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  divideScalar,
  typed
});
var dotDivide = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_191__.createDotDivide)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  typed
});
var usolveAll = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_192__.createUsolveAll)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
var hypot = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_193__.createHypot)({
  abs,
  addScalar,
  divideScalar,
  isPositive,
  multiplyScalar,
  smaller,
  sqrt,
  typed
});
var qr = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_194__.createQr)({
  addScalar,
  complex,
  conj,
  divideScalar,
  equal,
  identity,
  isZero,
  matrix,
  multiplyScalar,
  sign,
  sqrt,
  subtract,
  typed,
  unaryMinus,
  zeros
});
var inv = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_195__.createInv)({
  abs,
  addScalar,
  det,
  divideScalar,
  identity,
  matrix,
  multiply,
  typed,
  unaryMinus
});
var expm = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_196__.createExpm)({
  abs,
  add,
  identity,
  inv,
  multiply,
  typed
});
var divide = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_197__.createDivide)({
  divideScalar,
  equalScalar,
  inv,
  matrix,
  multiply,
  typed
});
var mean = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_198__.createMean)({
  add,
  divide,
  typed
});
var variance = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_199__.createVariance)({
  add,
  apply,
  divide,
  isNaN,
  multiply,
  subtract,
  typed
});
var kldivergence = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_200__.createKldivergence)({
  divide,
  dotDivide,
  isNumeric,
  log,
  matrix,
  multiply,
  sum,
  typed
});
var bellNumbers = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_201__.createBellNumbers)({
  addScalar,
  isInteger,
  isNegative,
  stirlingS2,
  typed
});
var log1p = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_202__.createLog1p)({
  Complex,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  divideScalar,
  log,
  typed
});
var Unit = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_203__.createUnitClass)({
  BigNumber,
  Complex,
  Fraction,
  abs,
  addScalar,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  divideScalar,
  equal,
  fix,
  format,
  isNumeric,
  multiplyScalar,
  number,
  pow,
  round,
  subtract
});
var createUnit = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_204__.createCreateUnit)({
  Unit,
  typed
});
var eigs = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_205__.createEigs)({
  abs,
  add,
  addScalar,
  atan,
  bignumber,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  cos,
  equal,
  inv,
  matrix,
  multiply,
  multiplyScalar,
  sin,
  subtract,
  typed
});
var intersect = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_206__.createIntersect)({
  abs,
  add,
  addScalar,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  divideScalar,
  equalScalar,
  matrix,
  multiply,
  multiplyScalar,
  smaller,
  subtract,
  typed
});
var std = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_207__.createStd)({
  sqrt,
  typed,
  variance
});
var atomicMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createAtomicMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var bohrMagneton = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createBohrMagneton)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var boltzmann = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createBoltzmann)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var conductanceQuantum = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createConductanceQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var deuteronMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createDeuteronMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var electronMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createElectronMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var faraday = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createFaraday)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var firstRadiation = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createFirstRadiation)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var gravitationConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createGravitationConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var hartreeEnergy = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createHartreeEnergy)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var klitzing = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createKlitzing)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var magneticConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMagneticConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var molarMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMolarMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var molarPlanckConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMolarPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var neutronMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createNeutronMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckCharge = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckCharge)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckLength = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckLength)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckTemperature = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckTemperature)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var protonMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createProtonMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var reducedPlanckConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createReducedPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var secondRadiation = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createSecondRadiation)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var stefanBoltzmann = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createStefanBoltzmann)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var vacuumImpedance = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createVacuumImpedance)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var usolve = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_208__.createUsolve)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
var norm = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_209__.createNorm)({
  abs,
  add,
  conj,
  ctranspose,
  eigs,
  equalScalar,
  larger,
  matrix,
  multiply,
  pow,
  smaller,
  sqrt,
  typed
});
var lusolve = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_210__.createLusolve)({
  DenseMatrix,
  lsolve,
  lup,
  matrix,
  slu,
  typed,
  usolve
});
var sqrtm = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_211__.createSqrtm)({
  abs,
  add,
  identity,
  inv,
  max,
  multiply,
  size,
  sqrt,
  subtract,
  typed
});
var multinomial = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_212__.createMultinomial)({
  add,
  divide,
  factorial,
  isInteger,
  isPositive,
  multiply,
  typed
});
var avogadro = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createAvogadro)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var classicalElectronRadius = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createClassicalElectronRadius)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var electricConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createElectricConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var fermiCoupling = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createFermiCoupling)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var gravity = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createGravity)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var loschmidt = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createLoschmidt)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var molarMassC12 = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMolarMassC12)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var nuclearMagneton = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createNuclearMagneton)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckMass = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckMass)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var quantumOfCirculation = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createQuantumOfCirculation)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var speedOfLight = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createSpeedOfLight)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var wienDisplacement = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createWienDisplacement)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var rotationMatrix = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_213__.createRotationMatrix)({
  BigNumber,
  DenseMatrix,
  SparseMatrix,
  addScalar,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config,
  cos,
  matrix,
  multiplyScalar,
  norm,
  sin,
  typed,
  unaryMinus
});
var median = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_214__.createMedian)({
  add,
  compare,
  divide,
  partitionSelect,
  typed
});
var bohrRadius = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createBohrRadius)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var elementaryCharge = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createElementaryCharge)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var inverseConductanceQuantum = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createInverseConductanceQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var molarVolume = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMolarVolume)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckTime = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckTime)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var thomsonCrossSection = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createThomsonCrossSection)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var rotate = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_215__.createRotate)({
  multiply,
  rotationMatrix,
  typed
});
var mad = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_216__.createMad)({
  abs,
  map,
  median,
  subtract,
  typed
});
var coulomb = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createCoulomb)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var magneticFluxQuantum = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createMagneticFluxQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var rydberg = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createRydberg)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var unit = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_217__.createUnitFunction)({
  Unit,
  typed
});
var gasConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createGasConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});
var planckConstant = /* #__PURE__ */(0,_factoriesAny_js__WEBPACK_IMPORTED_MODULE_8__.createPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly_js__WEBPACK_IMPORTED_MODULE_5__.config
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/error/ArgumentsError.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/error/ArgumentsError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgumentsError": () => (/* binding */ ArgumentsError)
/* harmony export */ });
/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/error/DimensionError.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/error/DimensionError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DimensionError": () => (/* binding */ DimensionError)
/* harmony export */ });
/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}
DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/error/IndexError.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/error/IndexError.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IndexError": () => (/* binding */ IndexError)
/* harmony export */ });
/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;

  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = new Error().stack;
}
IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/Help.js":
/*!********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/Help.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createHelpClass": () => (/* binding */ createHelpClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'Help';
var dependencies = ['parse'];
var createHelpClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    parse
  } = _ref;

  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!doc) throw new Error('Argument "doc" missing');
    this.doc = doc;
  }
  /**
   * Attach type information
   */


  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;
  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */

  Help.prototype.toString = function () {
    var doc = this.doc || {};
    var desc = '\n';

    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }

    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }

    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }

    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }

    if (doc.examples) {
      desc += 'Examples:\n';
      var scope = {};

      for (var i = 0; i < doc.examples.length; i++) {
        var expr = doc.examples[i];
        desc += '    ' + expr + '\n';
        var res = void 0;

        try {
          // note: res can be undefined when `expr` is an empty string
          res = parse(expr).compile().evaluate(scope);
        } catch (e) {
          res = e;
        }

        if (res !== undefined && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isHelp)(res)) {
          desc += '        ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(res, {
            precision: 14
          }) + '\n';
        }
      }

      desc += '\n';
    }

    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }

    return desc;
  };
  /**
   * Export the help object to JSON
   */


  Help.prototype.toJSON = function () {
    var obj = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.clone)(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };
  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */


  Help.fromJSON = function (json) {
    var doc = {};
    Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {
      doc[prop] = json[prop];
    });
    return new Help(doc);
  };
  /**
   * Returns a string representation of the Help object
   */


  Help.prototype.valueOf = Help.prototype.toString;
  return Help;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/Parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/Parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createParserClass": () => (/* binding */ createParserClass)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");



var name = 'Parser';
var dependencies = ['parse'];
var createParserClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    parse
  } = _ref;

  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.scope = {};
  }
  /**
   * Attach type information
   */


  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */

  Parser.prototype.evaluate = function (expr) {
    // TODO: validate arguments
    return parse(expr).compile().evaluate(this.scope);
  };
  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */


  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    return name in this.scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.getSafeProperty)(this.scope, name) : undefined;
  };
  /**
   * Get a map with all defined variables
   * @return {Object} values
   */


  Parser.prototype.getAll = function () {
    return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, this.scope);
  };
  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */


  Parser.prototype.set = function (name, value) {
    // TODO: validate arguments
    return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.setSafeProperty)(this.scope, name, value);
  };
  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */


  Parser.prototype.remove = function (name) {
    // TODO: validate arguments
    delete this.scope[name];
  };
  /**
   * Clear the scope with variables and functions
   */


  Parser.prototype.clear = function () {
    for (var _name in this.scope) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.scope, _name)) {
        delete this.scope[_name];
      }
    }
  };

  return Parser;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InfinityDocs": () => (/* binding */ InfinityDocs)
/* harmony export */ });
var InfinityDocs = {
  name: 'Infinity',
  category: 'Constants',
  syntax: ['Infinity'],
  description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  examples: ['Infinity', '1 / 0'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LN10Docs": () => (/* binding */ LN10Docs)
/* harmony export */ });
var LN10Docs = {
  name: 'LN10',
  category: 'Constants',
  syntax: ['LN10'],
  description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
  examples: ['LN10', 'log(10)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LN2Docs": () => (/* binding */ LN2Docs)
/* harmony export */ });
var LN2Docs = {
  name: 'LN2',
  category: 'Constants',
  syntax: ['LN2'],
  description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
  examples: ['LN2', 'log(2)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LOG10EDocs": () => (/* binding */ LOG10EDocs)
/* harmony export */ });
var LOG10EDocs = {
  name: 'LOG10E',
  category: 'Constants',
  syntax: ['LOG10E'],
  description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  examples: ['LOG10E', 'log(e, 10)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LOG2EDocs": () => (/* binding */ LOG2EDocs)
/* harmony export */ });
var LOG2EDocs = {
  name: 'LOG2E',
  category: 'Constants',
  syntax: ['LOG2E'],
  description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  examples: ['LOG2E', 'log(e, 2)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NaNDocs": () => (/* binding */ NaNDocs)
/* harmony export */ });
var NaNDocs = {
  name: 'NaN',
  category: 'Constants',
  syntax: ['NaN'],
  description: 'Not a number',
  examples: ['NaN', '0 / 0'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SQRT12Docs": () => (/* binding */ SQRT12Docs)
/* harmony export */ });
var SQRT12Docs = {
  name: 'SQRT1_2',
  category: 'Constants',
  syntax: ['SQRT1_2'],
  description: 'Returns the square root of 1/2, approximately equal to 0.707',
  examples: ['SQRT1_2', 'sqrt(1/2)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SQRT2Docs": () => (/* binding */ SQRT2Docs)
/* harmony export */ });
var SQRT2Docs = {
  name: 'SQRT2',
  category: 'Constants',
  syntax: ['SQRT2'],
  description: 'Returns the square root of 2, approximately equal to 1.414',
  examples: ['SQRT2', 'sqrt(2)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eDocs": () => (/* binding */ eDocs)
/* harmony export */ });
var eDocs = {
  name: 'e',
  category: 'Constants',
  syntax: ['e'],
  description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
  seealso: ['exp']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "falseDocs": () => (/* binding */ falseDocs)
/* harmony export */ });
var falseDocs = {
  name: 'false',
  category: 'Constants',
  syntax: ['false'],
  description: 'Boolean value false',
  examples: ['false'],
  seealso: ['true']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iDocs": () => (/* binding */ iDocs)
/* harmony export */ });
var iDocs = {
  name: 'i',
  category: 'Constants',
  syntax: ['i'],
  description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  examples: ['i', 'i * i', 'sqrt(-1)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nullDocs": () => (/* binding */ nullDocs)
/* harmony export */ });
var nullDocs = {
  name: 'null',
  category: 'Constants',
  syntax: ['null'],
  description: 'Value null',
  examples: ['null'],
  seealso: ['true', 'false']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "phiDocs": () => (/* binding */ phiDocs)
/* harmony export */ });
var phiDocs = {
  name: 'phi',
  category: 'Constants',
  syntax: ['phi'],
  description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  examples: ['phi'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "piDocs": () => (/* binding */ piDocs)
/* harmony export */ });
var piDocs = {
  name: 'pi',
  category: 'Constants',
  syntax: ['pi'],
  description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  examples: ['pi', 'sin(pi/2)'],
  seealso: ['tau']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tauDocs": () => (/* binding */ tauDocs)
/* harmony export */ });
var tauDocs = {
  name: 'tau',
  category: 'Constants',
  syntax: ['tau'],
  description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  examples: ['tau', '2 * pi'],
  seealso: ['pi']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trueDocs": () => (/* binding */ trueDocs)
/* harmony export */ });
var trueDocs = {
  name: 'true',
  category: 'Constants',
  syntax: ['true'],
  description: 'Boolean value true',
  examples: ['true'],
  seealso: ['false']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "versionDocs": () => (/* binding */ versionDocs)
/* harmony export */ });
var versionDocs = {
  name: 'version',
  category: 'Constants',
  syntax: ['version'],
  description: 'A string with the version number of math.js',
  examples: ['version'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bignumberDocs": () => (/* binding */ bignumberDocs)
/* harmony export */ });
var bignumberDocs = {
  name: 'bignumber',
  category: 'Construction',
  syntax: ['bignumber(x)'],
  description: 'Create a big number from a number or string.',
  examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
  seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanDocs": () => (/* binding */ booleanDocs)
/* harmony export */ });
var booleanDocs = {
  name: 'boolean',
  category: 'Construction',
  syntax: ['x', 'boolean(x)'],
  description: 'Convert a string or number into a boolean.',
  examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
  seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexDocs": () => (/* binding */ complexDocs)
/* harmony export */ });
var complexDocs = {
  name: 'complex',
  category: 'Construction',
  syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
  description: 'Create a complex number.',
  examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
  seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnitDocs": () => (/* binding */ createUnitDocs)
/* harmony export */ });
var createUnitDocs = {
  name: 'createUnit',
  category: 'Construction',
  syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
  description: 'Create a user-defined unit and register it with the Unit type.',
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ['unit', 'splitUnit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fractionDocs": () => (/* binding */ fractionDocs)
/* harmony export */ });
var fractionDocs = {
  name: 'fraction',
  category: 'Construction',
  syntax: ['fraction(num)', 'fraction(num,den)'],
  description: 'Create a fraction from a number or from a numerator and denominator.',
  examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "indexDocs": () => (/* binding */ indexDocs)
/* harmony export */ });
var indexDocs = {
  name: 'index',
  category: 'Construction',
  syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
  description: 'Create an index to get or replace a subset of a matrix',
  examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
  seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matrixDocs": () => (/* binding */ matrixDocs)
/* harmony export */ });
var matrixDocs = {
  name: 'matrix',
  category: 'Construction',
  syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
  description: 'Create a matrix.',
  examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "numberDocs": () => (/* binding */ numberDocs)
/* harmony export */ });
var numberDocs = {
  name: 'number',
  category: 'Construction',
  syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
  description: 'Create a number or convert a string or boolean into a number.',
  examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
  seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseDocs": () => (/* binding */ sparseDocs)
/* harmony export */ });
var sparseDocs = {
  name: 'sparse',
  category: 'Construction',
  syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: 'Create a sparse matrix.',
  examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitUnitDocs": () => (/* binding */ splitUnitDocs)
/* harmony export */ });
var splitUnitDocs = {
  name: 'splitUnit',
  category: 'Construction',
  syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
  description: 'Split a unit in an array of units whose sum is equal to the original unit.',
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ['unit', 'createUnit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringDocs": () => (/* binding */ stringDocs)
/* harmony export */ });
var stringDocs = {
  name: 'string',
  category: 'Construction',
  syntax: ['"text"', 'string(x)'],
  description: 'Create a string or convert a value to a string',
  examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unitDocs": () => (/* binding */ unitDocs)
/* harmony export */ });
var unitDocs = {
  name: 'unit',
  category: 'Construction',
  syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
  description: 'Create a unit.',
  examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "configDocs": () => (/* binding */ configDocs)
/* harmony export */ });
var configDocs = {
  name: 'config',
  category: 'Core',
  syntax: ['config()', 'config(options)'],
  description: 'Get configuration or change configuration.',
  examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "importDocs": () => (/* binding */ importDocs)
/* harmony export */ });
var importDocs = {
  name: 'import',
  category: 'Core',
  syntax: ['import(functions)', 'import(functions, options)'],
  description: 'Import functions or constants from an object.',
  examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "typedDocs": () => (/* binding */ typedDocs)
/* harmony export */ });
var typedDocs = {
  name: 'typed',
  category: 'Core',
  syntax: ['typed(signatures)', 'typed(name, signatures)'],
  description: 'Create a typed function.',
  examples: ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "embeddedDocs": () => (/* binding */ embeddedDocs)
/* harmony export */ });
/* harmony import */ var _construction_bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./construction/bignumber.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js");
/* harmony import */ var _function_utils_typeOf_js__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ./function/utils/typeOf.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js");
/* harmony import */ var _function_utils_isZero_js__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ./function/utils/isZero.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js");
/* harmony import */ var _function_utils_isPrime_js__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ./function/utils/isPrime.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js");
/* harmony import */ var _function_utils_isPositive_js__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ./function/utils/isPositive.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js");
/* harmony import */ var _function_utils_isNumeric_js__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ./function/utils/isNumeric.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js");
/* harmony import */ var _function_utils_hasNumericValue_js__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ./function/utils/hasNumericValue.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js");
/* harmony import */ var _function_utils_isNegative_js__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ./function/utils/isNegative.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js");
/* harmony import */ var _function_utils_isInteger_js__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ./function/utils/isInteger.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js");
/* harmony import */ var _function_utils_isNaN_js__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ./function/utils/isNaN.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js");
/* harmony import */ var _function_utils_format_js__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ./function/utils/format.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js");
/* harmony import */ var _function_utils_bin_js__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ./function/utils/bin.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js");
/* harmony import */ var _function_utils_oct_js__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ./function/utils/oct.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js");
/* harmony import */ var _function_utils_hex_js__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ./function/utils/hex.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js");
/* harmony import */ var _function_utils_clone_js__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ./function/utils/clone.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js");
/* harmony import */ var _function_units_to_js__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ./function/units/to.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js");
/* harmony import */ var _function_trigonometry_tanh_js__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ./function/trigonometry/tanh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js");
/* harmony import */ var _function_trigonometry_tan_js__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./function/trigonometry/tan.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js");
/* harmony import */ var _function_trigonometry_sinh_js__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./function/trigonometry/sinh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js");
/* harmony import */ var _function_trigonometry_sech_js__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./function/trigonometry/sech.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js");
/* harmony import */ var _function_trigonometry_sec_js__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./function/trigonometry/sec.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js");
/* harmony import */ var _function_trigonometry_csch_js__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./function/trigonometry/csch.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js");
/* harmony import */ var _function_trigonometry_csc_js__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./function/trigonometry/csc.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js");
/* harmony import */ var _function_trigonometry_coth_js__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./function/trigonometry/coth.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js");
/* harmony import */ var _function_trigonometry_cot_js__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./function/trigonometry/cot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js");
/* harmony import */ var _function_trigonometry_cosh_js__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./function/trigonometry/cosh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js");
/* harmony import */ var _function_trigonometry_cos_js__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./function/trigonometry/cos.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js");
/* harmony import */ var _function_trigonometry_atan2_js__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./function/trigonometry/atan2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js");
/* harmony import */ var _function_trigonometry_atanh_js__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./function/trigonometry/atanh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js");
/* harmony import */ var _function_trigonometry_atan_js__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./function/trigonometry/atan.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js");
/* harmony import */ var _function_trigonometry_asinh_js__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./function/trigonometry/asinh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js");
/* harmony import */ var _function_trigonometry_asin_js__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./function/trigonometry/asin.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js");
/* harmony import */ var _function_trigonometry_asech_js__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./function/trigonometry/asech.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js");
/* harmony import */ var _function_trigonometry_asec_js__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./function/trigonometry/asec.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js");
/* harmony import */ var _function_trigonometry_acsch_js__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./function/trigonometry/acsch.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js");
/* harmony import */ var _function_trigonometry_acsc_js__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./function/trigonometry/acsc.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js");
/* harmony import */ var _function_trigonometry_acoth_js__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./function/trigonometry/acoth.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js");
/* harmony import */ var _function_trigonometry_acot_js__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./function/trigonometry/acot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js");
/* harmony import */ var _function_trigonometry_acosh_js__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./function/trigonometry/acosh.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js");
/* harmony import */ var _function_trigonometry_acos_js__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./function/trigonometry/acos.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js");
/* harmony import */ var _function_statistics_sum_js__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./function/statistics/sum.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js");
/* harmony import */ var _function_statistics_std_js__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./function/statistics/std.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js");
/* harmony import */ var _function_statistics_quantileSeq_js__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./function/statistics/quantileSeq.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js");
/* harmony import */ var _function_statistics_prod_js__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./function/statistics/prod.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js");
/* harmony import */ var _function_statistics_mode_js__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./function/statistics/mode.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js");
/* harmony import */ var _function_statistics_min_js__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./function/statistics/min.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js");
/* harmony import */ var _function_statistics_median_js__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./function/statistics/median.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js");
/* harmony import */ var _function_statistics_mean_js__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./function/statistics/mean.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js");
/* harmony import */ var _function_statistics_max_js__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./function/statistics/max.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js");
/* harmony import */ var _function_statistics_mad_js__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./function/statistics/mad.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js");
/* harmony import */ var _function_special_erf_js__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./function/special/erf.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js");
/* harmony import */ var _function_set_setUnion_js__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./function/set/setUnion.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js");
/* harmony import */ var _function_set_setSymDifference_js__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./function/set/setSymDifference.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js");
/* harmony import */ var _function_set_setSize_js__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./function/set/setSize.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js");
/* harmony import */ var _function_set_setPowerset_js__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./function/set/setPowerset.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js");
/* harmony import */ var _function_set_setMultiplicity_js__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./function/set/setMultiplicity.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js");
/* harmony import */ var _function_set_setIsSubset_js__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./function/set/setIsSubset.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js");
/* harmony import */ var _function_set_setIntersect_js__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./function/set/setIntersect.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js");
/* harmony import */ var _function_set_setDistinct_js__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./function/set/setDistinct.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js");
/* harmony import */ var _function_set_setDifference_js__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./function/set/setDifference.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js");
/* harmony import */ var _function_set_setCartesian_js__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./function/set/setCartesian.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js");
/* harmony import */ var _function_relational_unequal_js__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./function/relational/unequal.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js");
/* harmony import */ var _function_relational_smallerEq_js__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./function/relational/smallerEq.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js");
/* harmony import */ var _function_relational_smaller_js__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./function/relational/smaller.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js");
/* harmony import */ var _function_relational_largerEq_js__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./function/relational/largerEq.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js");
/* harmony import */ var _function_relational_larger_js__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./function/relational/larger.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js");
/* harmony import */ var _function_relational_equalText_js__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./function/relational/equalText.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js");
/* harmony import */ var _function_relational_equal_js__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./function/relational/equal.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js");
/* harmony import */ var _function_relational_deepEqual_js__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./function/relational/deepEqual.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js");
/* harmony import */ var _function_relational_compareText_js__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./function/relational/compareText.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js");
/* harmony import */ var _function_relational_compareNatural_js__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./function/relational/compareNatural.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js");
/* harmony import */ var _function_relational_compare_js__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./function/relational/compare.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js");
/* harmony import */ var _function_probability_randomInt_js__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./function/probability/randomInt.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js");
/* harmony import */ var _function_probability_random_js__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./function/probability/random.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js");
/* harmony import */ var _function_probability_pickRandom_js__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./function/probability/pickRandom.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js");
/* harmony import */ var _function_probability_permutations_js__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./function/probability/permutations.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js");
/* harmony import */ var _function_probability_multinomial_js__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./function/probability/multinomial.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js");
/* harmony import */ var _function_probability_kldivergence_js__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./function/probability/kldivergence.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js");
/* harmony import */ var _function_probability_gamma_js__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./function/probability/gamma.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js");
/* harmony import */ var _function_probability_factorial_js__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./function/probability/factorial.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js");
/* harmony import */ var _function_probability_combinations_js__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./function/probability/combinations.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js");
/* harmony import */ var _function_probability_combinationsWithRep_js__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./function/probability/combinationsWithRep.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js");
/* harmony import */ var _function_matrix_zeros_js__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./function/matrix/zeros.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js");
/* harmony import */ var _function_matrix_transpose_js__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./function/matrix/transpose.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js");
/* harmony import */ var _function_matrix_trace_js__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./function/matrix/trace.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js");
/* harmony import */ var _function_matrix_subset_js__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./function/matrix/subset.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js");
/* harmony import */ var _function_matrix_squeeze_js__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./function/matrix/squeeze.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js");
/* harmony import */ var _function_matrix_sort_js__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./function/matrix/sort.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js");
/* harmony import */ var _function_matrix_size_js__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./function/matrix/size.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js");
/* harmony import */ var _function_matrix_diff_js__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./function/matrix/diff.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js");
/* harmony import */ var _function_matrix_reshape_js__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./function/matrix/reshape.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js");
/* harmony import */ var _function_matrix_resize_js__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./function/matrix/resize.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js");
/* harmony import */ var _function_matrix_range_js__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./function/matrix/range.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js");
/* harmony import */ var _function_matrix_partitionSelect_js__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./function/matrix/partitionSelect.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js");
/* harmony import */ var _function_matrix_ones_js__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./function/matrix/ones.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js");
/* harmony import */ var _function_matrix_map_js__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./function/matrix/map.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js");
/* harmony import */ var _function_matrix_kron_js__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./function/matrix/kron.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js");
/* harmony import */ var _function_matrix_inv_js__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./function/matrix/inv.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js");
/* harmony import */ var _function_matrix_forEach_js__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./function/matrix/forEach.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js");
/* harmony import */ var _function_matrix_flatten_js__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./function/matrix/flatten.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js");
/* harmony import */ var _function_matrix_filter_js__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./function/matrix/filter.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js");
/* harmony import */ var _function_matrix_identity_js__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./function/matrix/identity.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js");
/* harmony import */ var _function_matrix_getMatrixDataType_js__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./function/matrix/getMatrixDataType.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js");
/* harmony import */ var _function_matrix_dot_js__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./function/matrix/dot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js");
/* harmony import */ var _function_matrix_diag_js__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./function/matrix/diag.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js");
/* harmony import */ var _function_matrix_det_js__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./function/matrix/det.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js");
/* harmony import */ var _function_matrix_ctranspose_js__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./function/matrix/ctranspose.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js");
/* harmony import */ var _function_matrix_cross_js__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./function/matrix/cross.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js");
/* harmony import */ var _function_matrix_concat_js__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./function/matrix/concat.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js");
/* harmony import */ var _function_matrix_count_js__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./function/matrix/count.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js");
/* harmony import */ var _function_logical_xor_js__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./function/logical/xor.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js");
/* harmony import */ var _function_logical_or_js__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./function/logical/or.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js");
/* harmony import */ var _function_logical_not_js__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./function/logical/not.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js");
/* harmony import */ var _function_logical_and_js__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./function/logical/and.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js");
/* harmony import */ var _function_geometry_intersect_js__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./function/geometry/intersect.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js");
/* harmony import */ var _function_geometry_distance_js__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./function/geometry/distance.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js");
/* harmony import */ var _function_expression_help_js__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./function/expression/help.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js");
/* harmony import */ var _function_expression_evaluate_js__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./function/expression/evaluate.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js");
/* harmony import */ var _function_complex_im_js__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./function/complex/im.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js");
/* harmony import */ var _function_complex_re_js__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./function/complex/re.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js");
/* harmony import */ var _function_complex_conj_js__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./function/complex/conj.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js");
/* harmony import */ var _function_complex_arg_js__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./function/complex/arg.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js");
/* harmony import */ var _core_typed_js__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./core/typed.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js");
/* harmony import */ var _core_import_js__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./core/import.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js");
/* harmony import */ var _core_config_js__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./core/config.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js");
/* harmony import */ var _function_combinatorics_stirlingS2_js__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./function/combinatorics/stirlingS2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js");
/* harmony import */ var _function_combinatorics_composition_js__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./function/combinatorics/composition.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js");
/* harmony import */ var _function_combinatorics_catalan_js__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./function/combinatorics/catalan.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js");
/* harmony import */ var _function_combinatorics_bellNumbers_js__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./function/combinatorics/bellNumbers.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js");
/* harmony import */ var _function_bitwise_rightLogShift_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./function/bitwise/rightLogShift.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js");
/* harmony import */ var _function_bitwise_rightArithShift_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./function/bitwise/rightArithShift.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js");
/* harmony import */ var _function_bitwise_leftShift_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./function/bitwise/leftShift.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js");
/* harmony import */ var _function_bitwise_bitXor_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./function/bitwise/bitXor.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js");
/* harmony import */ var _function_bitwise_bitOr_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./function/bitwise/bitOr.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js");
/* harmony import */ var _function_bitwise_bitNot_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./function/bitwise/bitNot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js");
/* harmony import */ var _function_bitwise_bitAnd_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./function/bitwise/bitAnd.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js");
/* harmony import */ var _function_arithmetic_xgcd_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./function/arithmetic/xgcd.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js");
/* harmony import */ var _function_arithmetic_unaryPlus_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./function/arithmetic/unaryPlus.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js");
/* harmony import */ var _function_arithmetic_unaryMinus_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./function/arithmetic/unaryMinus.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js");
/* harmony import */ var _function_arithmetic_square_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./function/arithmetic/square.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js");
/* harmony import */ var _function_arithmetic_sqrtm_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./function/arithmetic/sqrtm.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js");
/* harmony import */ var _function_arithmetic_sqrt_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./function/arithmetic/sqrt.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js");
/* harmony import */ var _function_arithmetic_sign_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./function/arithmetic/sign.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js");
/* harmony import */ var _function_arithmetic_round_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./function/arithmetic/round.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js");
/* harmony import */ var _function_arithmetic_pow_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./function/arithmetic/pow.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js");
/* harmony import */ var _function_arithmetic_nthRoots_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./function/arithmetic/nthRoots.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js");
/* harmony import */ var _function_arithmetic_nthRoot_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./function/arithmetic/nthRoot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js");
/* harmony import */ var _function_arithmetic_norm_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./function/arithmetic/norm.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js");
/* harmony import */ var _function_arithmetic_multiply_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./function/arithmetic/multiply.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js");
/* harmony import */ var _function_arithmetic_mod_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./function/arithmetic/mod.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js");
/* harmony import */ var _function_arithmetic_log10_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./function/arithmetic/log10.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js");
/* harmony import */ var _function_arithmetic_log1p_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./function/arithmetic/log1p.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js");
/* harmony import */ var _function_arithmetic_log2_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./function/arithmetic/log2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js");
/* harmony import */ var _function_arithmetic_log_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./function/arithmetic/log.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js");
/* harmony import */ var _function_arithmetic_lcm_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./function/arithmetic/lcm.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js");
/* harmony import */ var _function_arithmetic_hypot_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./function/arithmetic/hypot.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js");
/* harmony import */ var _function_arithmetic_gcd_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./function/arithmetic/gcd.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js");
/* harmony import */ var _function_arithmetic_floor_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./function/arithmetic/floor.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js");
/* harmony import */ var _function_arithmetic_fix_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./function/arithmetic/fix.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js");
/* harmony import */ var _function_arithmetic_expm1_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./function/arithmetic/expm1.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js");
/* harmony import */ var _function_arithmetic_expm_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./function/arithmetic/expm.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js");
/* harmony import */ var _function_matrix_eigs_js__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./function/matrix/eigs.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js");
/* harmony import */ var _function_arithmetic_exp_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./function/arithmetic/exp.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js");
/* harmony import */ var _function_arithmetic_dotMultiply_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./function/arithmetic/dotMultiply.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js");
/* harmony import */ var _function_arithmetic_dotDivide_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./function/arithmetic/dotDivide.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js");
/* harmony import */ var _function_arithmetic_divide_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./function/arithmetic/divide.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js");
/* harmony import */ var _function_arithmetic_cube_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./function/arithmetic/cube.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js");
/* harmony import */ var _function_arithmetic_ceil_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./function/arithmetic/ceil.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js");
/* harmony import */ var _function_arithmetic_cbrt_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./function/arithmetic/cbrt.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js");
/* harmony import */ var _function_arithmetic_add_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./function/arithmetic/add.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js");
/* harmony import */ var _function_arithmetic_abs_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./function/arithmetic/abs.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js");
/* harmony import */ var _function_algebra_qr_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./function/algebra/qr.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js");
/* harmony import */ var _function_algebra_usolve_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./function/algebra/usolve.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js");
/* harmony import */ var _function_algebra_usolveAll_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./function/algebra/usolveAll.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js");
/* harmony import */ var _function_algebra_slu_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./function/algebra/slu.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js");
/* harmony import */ var _function_algebra_rationalize_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./function/algebra/rationalize.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js");
/* harmony import */ var _function_algebra_simplify_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./function/algebra/simplify.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js");
/* harmony import */ var _function_algebra_lup_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./function/algebra/lup.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js");
/* harmony import */ var _function_algebra_lsolve_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./function/algebra/lsolve.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js");
/* harmony import */ var _function_algebra_lsolveAll_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./function/algebra/lsolveAll.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js");
/* harmony import */ var _function_algebra_derivative_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./function/algebra/derivative.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js");
/* harmony import */ var _constants_version_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./constants/version.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js");
/* harmony import */ var _constants_true_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./constants/true.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js");
/* harmony import */ var _constants_tau_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./constants/tau.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js");
/* harmony import */ var _constants_SQRT2_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./constants/SQRT2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js");
/* harmony import */ var _constants_SQRT1_2_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./constants/SQRT1_2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js");
/* harmony import */ var _constants_phi_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./constants/phi.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js");
/* harmony import */ var _constants_pi_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./constants/pi.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js");
/* harmony import */ var _constants_null_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./constants/null.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js");
/* harmony import */ var _constants_NaN_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./constants/NaN.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js");
/* harmony import */ var _constants_LOG10E_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./constants/LOG10E.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js");
/* harmony import */ var _constants_LOG2E_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./constants/LOG2E.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js");
/* harmony import */ var _constants_LN10_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./constants/LN10.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js");
/* harmony import */ var _constants_LN2_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./constants/LN2.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js");
/* harmony import */ var _constants_Infinity_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./constants/Infinity.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js");
/* harmony import */ var _constants_i_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./constants/i.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js");
/* harmony import */ var _constants_false_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./constants/false.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js");
/* harmony import */ var _constants_e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./constants/e.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js");
/* harmony import */ var _construction_unit_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./construction/unit.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js");
/* harmony import */ var _construction_string_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./construction/string.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js");
/* harmony import */ var _construction_splitUnit_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./construction/splitUnit.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js");
/* harmony import */ var _construction_sparse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./construction/sparse.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js");
/* harmony import */ var _construction_number_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./construction/number.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js");
/* harmony import */ var _construction_matrix_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./construction/matrix.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js");
/* harmony import */ var _construction_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./construction/index.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js");
/* harmony import */ var _construction_fraction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./construction/fraction.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js");
/* harmony import */ var _construction_createUnit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./construction/createUnit.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js");
/* harmony import */ var _construction_complex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./construction/complex.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js");
/* harmony import */ var _construction_boolean_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./construction/boolean.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js");
/* harmony import */ var _function_arithmetic_dotPow_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./function/arithmetic/dotPow.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js");
/* harmony import */ var _function_algebra_lusolve_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./function/algebra/lusolve.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js");
/* harmony import */ var _function_arithmetic_subtract_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./function/arithmetic/subtract.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js");
/* harmony import */ var _function_statistics_variance_js__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./function/statistics/variance.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js");
/* harmony import */ var _function_trigonometry_sin_js__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./function/trigonometry/sin.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js");
/* harmony import */ var _function_utils_numeric_js__WEBPACK_IMPORTED_MODULE_218__ = __webpack_require__(/*! ./function/utils/numeric.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js");
/* harmony import */ var _function_matrix_column_js__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./function/matrix/column.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js");
/* harmony import */ var _function_matrix_row_js__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./function/matrix/row.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js");
/* harmony import */ var _function_matrix_rotationMatrix_js__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./function/matrix/rotationMatrix.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js");
/* harmony import */ var _function_matrix_rotate_js__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./function/matrix/rotate.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js");



























































































































































































































var embeddedDocs = {
  // construction functions
  bignumber: _construction_bignumber_js__WEBPACK_IMPORTED_MODULE_0__.bignumberDocs,
  boolean: _construction_boolean_js__WEBPACK_IMPORTED_MODULE_1__.booleanDocs,
  complex: _construction_complex_js__WEBPACK_IMPORTED_MODULE_2__.complexDocs,
  createUnit: _construction_createUnit_js__WEBPACK_IMPORTED_MODULE_3__.createUnitDocs,
  fraction: _construction_fraction_js__WEBPACK_IMPORTED_MODULE_4__.fractionDocs,
  index: _construction_index_js__WEBPACK_IMPORTED_MODULE_5__.indexDocs,
  matrix: _construction_matrix_js__WEBPACK_IMPORTED_MODULE_6__.matrixDocs,
  number: _construction_number_js__WEBPACK_IMPORTED_MODULE_7__.numberDocs,
  sparse: _construction_sparse_js__WEBPACK_IMPORTED_MODULE_8__.sparseDocs,
  splitUnit: _construction_splitUnit_js__WEBPACK_IMPORTED_MODULE_9__.splitUnitDocs,
  string: _construction_string_js__WEBPACK_IMPORTED_MODULE_10__.stringDocs,
  unit: _construction_unit_js__WEBPACK_IMPORTED_MODULE_11__.unitDocs,
  // constants
  e: _constants_e_js__WEBPACK_IMPORTED_MODULE_12__.eDocs,
  E: _constants_e_js__WEBPACK_IMPORTED_MODULE_12__.eDocs,
  false: _constants_false_js__WEBPACK_IMPORTED_MODULE_13__.falseDocs,
  i: _constants_i_js__WEBPACK_IMPORTED_MODULE_14__.iDocs,
  Infinity: _constants_Infinity_js__WEBPACK_IMPORTED_MODULE_15__.InfinityDocs,
  LN2: _constants_LN2_js__WEBPACK_IMPORTED_MODULE_16__.LN2Docs,
  LN10: _constants_LN10_js__WEBPACK_IMPORTED_MODULE_17__.LN10Docs,
  LOG2E: _constants_LOG2E_js__WEBPACK_IMPORTED_MODULE_18__.LOG2EDocs,
  LOG10E: _constants_LOG10E_js__WEBPACK_IMPORTED_MODULE_19__.LOG10EDocs,
  NaN: _constants_NaN_js__WEBPACK_IMPORTED_MODULE_20__.NaNDocs,
  null: _constants_null_js__WEBPACK_IMPORTED_MODULE_21__.nullDocs,
  pi: _constants_pi_js__WEBPACK_IMPORTED_MODULE_22__.piDocs,
  PI: _constants_pi_js__WEBPACK_IMPORTED_MODULE_22__.piDocs,
  phi: _constants_phi_js__WEBPACK_IMPORTED_MODULE_23__.phiDocs,
  SQRT1_2: _constants_SQRT1_2_js__WEBPACK_IMPORTED_MODULE_24__.SQRT12Docs,
  SQRT2: _constants_SQRT2_js__WEBPACK_IMPORTED_MODULE_25__.SQRT2Docs,
  tau: _constants_tau_js__WEBPACK_IMPORTED_MODULE_26__.tauDocs,
  true: _constants_true_js__WEBPACK_IMPORTED_MODULE_27__.trueDocs,
  version: _constants_version_js__WEBPACK_IMPORTED_MODULE_28__.versionDocs,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: 'Speed of light in vacuum',
    examples: ['speedOfLight']
  },
  gravitationConstant: {
    description: 'Newtonian constant of gravitation',
    examples: ['gravitationConstant']
  },
  planckConstant: {
    description: 'Planck constant',
    examples: ['planckConstant']
  },
  reducedPlanckConstant: {
    description: 'Reduced Planck constant',
    examples: ['reducedPlanckConstant']
  },
  magneticConstant: {
    description: 'Magnetic constant (vacuum permeability)',
    examples: ['magneticConstant']
  },
  electricConstant: {
    description: 'Electric constant (vacuum permeability)',
    examples: ['electricConstant']
  },
  vacuumImpedance: {
    description: 'Characteristic impedance of vacuum',
    examples: ['vacuumImpedance']
  },
  coulomb: {
    description: 'Coulomb\'s constant',
    examples: ['coulomb']
  },
  elementaryCharge: {
    description: 'Elementary charge',
    examples: ['elementaryCharge']
  },
  bohrMagneton: {
    description: 'Borh magneton',
    examples: ['bohrMagneton']
  },
  conductanceQuantum: {
    description: 'Conductance quantum',
    examples: ['conductanceQuantum']
  },
  inverseConductanceQuantum: {
    description: 'Inverse conductance quantum',
    examples: ['inverseConductanceQuantum']
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: 'Magnetic flux quantum',
    examples: ['magneticFluxQuantum']
  },
  nuclearMagneton: {
    description: 'Nuclear magneton',
    examples: ['nuclearMagneton']
  },
  klitzing: {
    description: 'Von Klitzing constant',
    examples: ['klitzing']
  },
  bohrRadius: {
    description: 'Borh radius',
    examples: ['bohrRadius']
  },
  classicalElectronRadius: {
    description: 'Classical electron radius',
    examples: ['classicalElectronRadius']
  },
  electronMass: {
    description: 'Electron mass',
    examples: ['electronMass']
  },
  fermiCoupling: {
    description: 'Fermi coupling constant',
    examples: ['fermiCoupling']
  },
  fineStructure: {
    description: 'Fine-structure constant',
    examples: ['fineStructure']
  },
  hartreeEnergy: {
    description: 'Hartree energy',
    examples: ['hartreeEnergy']
  },
  protonMass: {
    description: 'Proton mass',
    examples: ['protonMass']
  },
  deuteronMass: {
    description: 'Deuteron Mass',
    examples: ['deuteronMass']
  },
  neutronMass: {
    description: 'Neutron mass',
    examples: ['neutronMass']
  },
  quantumOfCirculation: {
    description: 'Quantum of circulation',
    examples: ['quantumOfCirculation']
  },
  rydberg: {
    description: 'Rydberg constant',
    examples: ['rydberg']
  },
  thomsonCrossSection: {
    description: 'Thomson cross section',
    examples: ['thomsonCrossSection']
  },
  weakMixingAngle: {
    description: 'Weak mixing angle',
    examples: ['weakMixingAngle']
  },
  efimovFactor: {
    description: 'Efimov factor',
    examples: ['efimovFactor']
  },
  atomicMass: {
    description: 'Atomic mass constant',
    examples: ['atomicMass']
  },
  avogadro: {
    description: 'Avogadro\'s number',
    examples: ['avogadro']
  },
  boltzmann: {
    description: 'Boltzmann constant',
    examples: ['boltzmann']
  },
  faraday: {
    description: 'Faraday constant',
    examples: ['faraday']
  },
  firstRadiation: {
    description: 'First radiation constant',
    examples: ['firstRadiation']
  },
  loschmidt: {
    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
    examples: ['loschmidt']
  },
  gasConstant: {
    description: 'Gas constant',
    examples: ['gasConstant']
  },
  molarPlanckConstant: {
    description: 'Molar Planck constant',
    examples: ['molarPlanckConstant']
  },
  molarVolume: {
    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
    examples: ['molarVolume']
  },
  sackurTetrode: {
    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
    examples: ['sackurTetrode']
  },
  secondRadiation: {
    description: 'Second radiation constant',
    examples: ['secondRadiation']
  },
  stefanBoltzmann: {
    description: 'Stefan-Boltzmann constant',
    examples: ['stefanBoltzmann']
  },
  wienDisplacement: {
    description: 'Wien displacement law constant',
    examples: ['wienDisplacement']
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: 'Molar mass constant',
    examples: ['molarMass']
  },
  molarMassC12: {
    description: 'Molar mass constant of carbon-12',
    examples: ['molarMassC12']
  },
  gravity: {
    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
    examples: ['gravity']
  },
  planckLength: {
    description: 'Planck length',
    examples: ['planckLength']
  },
  planckMass: {
    description: 'Planck mass',
    examples: ['planckMass']
  },
  planckTime: {
    description: 'Planck time',
    examples: ['planckTime']
  },
  planckCharge: {
    description: 'Planck charge',
    examples: ['planckCharge']
  },
  planckTemperature: {
    description: 'Planck temperature',
    examples: ['planckTemperature']
  },
  // functions - algebra
  derivative: _function_algebra_derivative_js__WEBPACK_IMPORTED_MODULE_29__.derivativeDocs,
  lsolve: _function_algebra_lsolve_js__WEBPACK_IMPORTED_MODULE_30__.lsolveDocs,
  lsolveAll: _function_algebra_lsolveAll_js__WEBPACK_IMPORTED_MODULE_31__.lsolveAllDocs,
  lup: _function_algebra_lup_js__WEBPACK_IMPORTED_MODULE_32__.lupDocs,
  lusolve: _function_algebra_lusolve_js__WEBPACK_IMPORTED_MODULE_33__.lusolveDocs,
  simplify: _function_algebra_simplify_js__WEBPACK_IMPORTED_MODULE_34__.simplifyDocs,
  rationalize: _function_algebra_rationalize_js__WEBPACK_IMPORTED_MODULE_35__.rationalizeDocs,
  slu: _function_algebra_slu_js__WEBPACK_IMPORTED_MODULE_36__.sluDocs,
  usolve: _function_algebra_usolve_js__WEBPACK_IMPORTED_MODULE_37__.usolveDocs,
  usolveAll: _function_algebra_usolveAll_js__WEBPACK_IMPORTED_MODULE_38__.usolveAllDocs,
  qr: _function_algebra_qr_js__WEBPACK_IMPORTED_MODULE_39__.qrDocs,
  // functions - arithmetic
  abs: _function_arithmetic_abs_js__WEBPACK_IMPORTED_MODULE_40__.absDocs,
  add: _function_arithmetic_add_js__WEBPACK_IMPORTED_MODULE_41__.addDocs,
  cbrt: _function_arithmetic_cbrt_js__WEBPACK_IMPORTED_MODULE_42__.cbrtDocs,
  ceil: _function_arithmetic_ceil_js__WEBPACK_IMPORTED_MODULE_43__.ceilDocs,
  cube: _function_arithmetic_cube_js__WEBPACK_IMPORTED_MODULE_44__.cubeDocs,
  divide: _function_arithmetic_divide_js__WEBPACK_IMPORTED_MODULE_45__.divideDocs,
  dotDivide: _function_arithmetic_dotDivide_js__WEBPACK_IMPORTED_MODULE_46__.dotDivideDocs,
  dotMultiply: _function_arithmetic_dotMultiply_js__WEBPACK_IMPORTED_MODULE_47__.dotMultiplyDocs,
  dotPow: _function_arithmetic_dotPow_js__WEBPACK_IMPORTED_MODULE_48__.dotPowDocs,
  exp: _function_arithmetic_exp_js__WEBPACK_IMPORTED_MODULE_49__.expDocs,
  expm: _function_arithmetic_expm_js__WEBPACK_IMPORTED_MODULE_50__.expmDocs,
  expm1: _function_arithmetic_expm1_js__WEBPACK_IMPORTED_MODULE_51__.expm1Docs,
  fix: _function_arithmetic_fix_js__WEBPACK_IMPORTED_MODULE_52__.fixDocs,
  floor: _function_arithmetic_floor_js__WEBPACK_IMPORTED_MODULE_53__.floorDocs,
  gcd: _function_arithmetic_gcd_js__WEBPACK_IMPORTED_MODULE_54__.gcdDocs,
  hypot: _function_arithmetic_hypot_js__WEBPACK_IMPORTED_MODULE_55__.hypotDocs,
  lcm: _function_arithmetic_lcm_js__WEBPACK_IMPORTED_MODULE_56__.lcmDocs,
  log: _function_arithmetic_log_js__WEBPACK_IMPORTED_MODULE_57__.logDocs,
  log2: _function_arithmetic_log2_js__WEBPACK_IMPORTED_MODULE_58__.log2Docs,
  log1p: _function_arithmetic_log1p_js__WEBPACK_IMPORTED_MODULE_59__.log1pDocs,
  log10: _function_arithmetic_log10_js__WEBPACK_IMPORTED_MODULE_60__.log10Docs,
  mod: _function_arithmetic_mod_js__WEBPACK_IMPORTED_MODULE_61__.modDocs,
  multiply: _function_arithmetic_multiply_js__WEBPACK_IMPORTED_MODULE_62__.multiplyDocs,
  norm: _function_arithmetic_norm_js__WEBPACK_IMPORTED_MODULE_63__.normDocs,
  nthRoot: _function_arithmetic_nthRoot_js__WEBPACK_IMPORTED_MODULE_64__.nthRootDocs,
  nthRoots: _function_arithmetic_nthRoots_js__WEBPACK_IMPORTED_MODULE_65__.nthRootsDocs,
  pow: _function_arithmetic_pow_js__WEBPACK_IMPORTED_MODULE_66__.powDocs,
  round: _function_arithmetic_round_js__WEBPACK_IMPORTED_MODULE_67__.roundDocs,
  sign: _function_arithmetic_sign_js__WEBPACK_IMPORTED_MODULE_68__.signDocs,
  sqrt: _function_arithmetic_sqrt_js__WEBPACK_IMPORTED_MODULE_69__.sqrtDocs,
  sqrtm: _function_arithmetic_sqrtm_js__WEBPACK_IMPORTED_MODULE_70__.sqrtmDocs,
  square: _function_arithmetic_square_js__WEBPACK_IMPORTED_MODULE_71__.squareDocs,
  subtract: _function_arithmetic_subtract_js__WEBPACK_IMPORTED_MODULE_72__.subtractDocs,
  unaryMinus: _function_arithmetic_unaryMinus_js__WEBPACK_IMPORTED_MODULE_73__.unaryMinusDocs,
  unaryPlus: _function_arithmetic_unaryPlus_js__WEBPACK_IMPORTED_MODULE_74__.unaryPlusDocs,
  xgcd: _function_arithmetic_xgcd_js__WEBPACK_IMPORTED_MODULE_75__.xgcdDocs,
  // functions - bitwise
  bitAnd: _function_bitwise_bitAnd_js__WEBPACK_IMPORTED_MODULE_76__.bitAndDocs,
  bitNot: _function_bitwise_bitNot_js__WEBPACK_IMPORTED_MODULE_77__.bitNotDocs,
  bitOr: _function_bitwise_bitOr_js__WEBPACK_IMPORTED_MODULE_78__.bitOrDocs,
  bitXor: _function_bitwise_bitXor_js__WEBPACK_IMPORTED_MODULE_79__.bitXorDocs,
  leftShift: _function_bitwise_leftShift_js__WEBPACK_IMPORTED_MODULE_80__.leftShiftDocs,
  rightArithShift: _function_bitwise_rightArithShift_js__WEBPACK_IMPORTED_MODULE_81__.rightArithShiftDocs,
  rightLogShift: _function_bitwise_rightLogShift_js__WEBPACK_IMPORTED_MODULE_82__.rightLogShiftDocs,
  // functions - combinatorics
  bellNumbers: _function_combinatorics_bellNumbers_js__WEBPACK_IMPORTED_MODULE_83__.bellNumbersDocs,
  catalan: _function_combinatorics_catalan_js__WEBPACK_IMPORTED_MODULE_84__.catalanDocs,
  composition: _function_combinatorics_composition_js__WEBPACK_IMPORTED_MODULE_85__.compositionDocs,
  stirlingS2: _function_combinatorics_stirlingS2_js__WEBPACK_IMPORTED_MODULE_86__.stirlingS2Docs,
  // functions - core
  config: _core_config_js__WEBPACK_IMPORTED_MODULE_87__.configDocs,
  import: _core_import_js__WEBPACK_IMPORTED_MODULE_88__.importDocs,
  typed: _core_typed_js__WEBPACK_IMPORTED_MODULE_89__.typedDocs,
  // functions - complex
  arg: _function_complex_arg_js__WEBPACK_IMPORTED_MODULE_90__.argDocs,
  conj: _function_complex_conj_js__WEBPACK_IMPORTED_MODULE_91__.conjDocs,
  re: _function_complex_re_js__WEBPACK_IMPORTED_MODULE_92__.reDocs,
  im: _function_complex_im_js__WEBPACK_IMPORTED_MODULE_93__.imDocs,
  // functions - expression
  evaluate: _function_expression_evaluate_js__WEBPACK_IMPORTED_MODULE_94__.evaluateDocs,
  help: _function_expression_help_js__WEBPACK_IMPORTED_MODULE_95__.helpDocs,
  // functions - geometry
  distance: _function_geometry_distance_js__WEBPACK_IMPORTED_MODULE_96__.distanceDocs,
  intersect: _function_geometry_intersect_js__WEBPACK_IMPORTED_MODULE_97__.intersectDocs,
  // functions - logical
  and: _function_logical_and_js__WEBPACK_IMPORTED_MODULE_98__.andDocs,
  not: _function_logical_not_js__WEBPACK_IMPORTED_MODULE_99__.notDocs,
  or: _function_logical_or_js__WEBPACK_IMPORTED_MODULE_100__.orDocs,
  xor: _function_logical_xor_js__WEBPACK_IMPORTED_MODULE_101__.xorDocs,
  // functions - matrix
  concat: _function_matrix_concat_js__WEBPACK_IMPORTED_MODULE_102__.concatDocs,
  count: _function_matrix_count_js__WEBPACK_IMPORTED_MODULE_103__.countDocs,
  cross: _function_matrix_cross_js__WEBPACK_IMPORTED_MODULE_104__.crossDocs,
  column: _function_matrix_column_js__WEBPACK_IMPORTED_MODULE_105__.columnDocs,
  ctranspose: _function_matrix_ctranspose_js__WEBPACK_IMPORTED_MODULE_106__.ctransposeDocs,
  det: _function_matrix_det_js__WEBPACK_IMPORTED_MODULE_107__.detDocs,
  diag: _function_matrix_diag_js__WEBPACK_IMPORTED_MODULE_108__.diagDocs,
  diff: _function_matrix_diff_js__WEBPACK_IMPORTED_MODULE_109__.diffDocs,
  dot: _function_matrix_dot_js__WEBPACK_IMPORTED_MODULE_110__.dotDocs,
  getMatrixDataType: _function_matrix_getMatrixDataType_js__WEBPACK_IMPORTED_MODULE_111__.getMatrixDataTypeDocs,
  identity: _function_matrix_identity_js__WEBPACK_IMPORTED_MODULE_112__.identityDocs,
  filter: _function_matrix_filter_js__WEBPACK_IMPORTED_MODULE_113__.filterDocs,
  flatten: _function_matrix_flatten_js__WEBPACK_IMPORTED_MODULE_114__.flattenDocs,
  forEach: _function_matrix_forEach_js__WEBPACK_IMPORTED_MODULE_115__.forEachDocs,
  inv: _function_matrix_inv_js__WEBPACK_IMPORTED_MODULE_116__.invDocs,
  eigs: _function_matrix_eigs_js__WEBPACK_IMPORTED_MODULE_117__.eigsDocs,
  kron: _function_matrix_kron_js__WEBPACK_IMPORTED_MODULE_118__.kronDocs,
  map: _function_matrix_map_js__WEBPACK_IMPORTED_MODULE_119__.mapDocs,
  ones: _function_matrix_ones_js__WEBPACK_IMPORTED_MODULE_120__.onesDocs,
  partitionSelect: _function_matrix_partitionSelect_js__WEBPACK_IMPORTED_MODULE_121__.partitionSelectDocs,
  range: _function_matrix_range_js__WEBPACK_IMPORTED_MODULE_122__.rangeDocs,
  resize: _function_matrix_resize_js__WEBPACK_IMPORTED_MODULE_123__.resizeDocs,
  reshape: _function_matrix_reshape_js__WEBPACK_IMPORTED_MODULE_124__.reshapeDocs,
  rotate: _function_matrix_rotate_js__WEBPACK_IMPORTED_MODULE_125__.rotateDocs,
  rotationMatrix: _function_matrix_rotationMatrix_js__WEBPACK_IMPORTED_MODULE_126__.rotationMatrixDocs,
  row: _function_matrix_row_js__WEBPACK_IMPORTED_MODULE_127__.rowDocs,
  size: _function_matrix_size_js__WEBPACK_IMPORTED_MODULE_128__.sizeDocs,
  sort: _function_matrix_sort_js__WEBPACK_IMPORTED_MODULE_129__.sortDocs,
  squeeze: _function_matrix_squeeze_js__WEBPACK_IMPORTED_MODULE_130__.squeezeDocs,
  subset: _function_matrix_subset_js__WEBPACK_IMPORTED_MODULE_131__.subsetDocs,
  trace: _function_matrix_trace_js__WEBPACK_IMPORTED_MODULE_132__.traceDocs,
  transpose: _function_matrix_transpose_js__WEBPACK_IMPORTED_MODULE_133__.transposeDocs,
  zeros: _function_matrix_zeros_js__WEBPACK_IMPORTED_MODULE_134__.zerosDocs,
  // functions - probability
  combinations: _function_probability_combinations_js__WEBPACK_IMPORTED_MODULE_135__.combinationsDocs,
  combinationsWithRep: _function_probability_combinationsWithRep_js__WEBPACK_IMPORTED_MODULE_136__.combinationsWithRepDocs,
  // distribution: distributionDocs,
  factorial: _function_probability_factorial_js__WEBPACK_IMPORTED_MODULE_137__.factorialDocs,
  gamma: _function_probability_gamma_js__WEBPACK_IMPORTED_MODULE_138__.gammaDocs,
  kldivergence: _function_probability_kldivergence_js__WEBPACK_IMPORTED_MODULE_139__.kldivergenceDocs,
  multinomial: _function_probability_multinomial_js__WEBPACK_IMPORTED_MODULE_140__.multinomialDocs,
  permutations: _function_probability_permutations_js__WEBPACK_IMPORTED_MODULE_141__.permutationsDocs,
  pickRandom: _function_probability_pickRandom_js__WEBPACK_IMPORTED_MODULE_142__.pickRandomDocs,
  random: _function_probability_random_js__WEBPACK_IMPORTED_MODULE_143__.randomDocs,
  randomInt: _function_probability_randomInt_js__WEBPACK_IMPORTED_MODULE_144__.randomIntDocs,
  // functions - relational
  compare: _function_relational_compare_js__WEBPACK_IMPORTED_MODULE_145__.compareDocs,
  compareNatural: _function_relational_compareNatural_js__WEBPACK_IMPORTED_MODULE_146__.compareNaturalDocs,
  compareText: _function_relational_compareText_js__WEBPACK_IMPORTED_MODULE_147__.compareTextDocs,
  deepEqual: _function_relational_deepEqual_js__WEBPACK_IMPORTED_MODULE_148__.deepEqualDocs,
  equal: _function_relational_equal_js__WEBPACK_IMPORTED_MODULE_149__.equalDocs,
  equalText: _function_relational_equalText_js__WEBPACK_IMPORTED_MODULE_150__.equalTextDocs,
  larger: _function_relational_larger_js__WEBPACK_IMPORTED_MODULE_151__.largerDocs,
  largerEq: _function_relational_largerEq_js__WEBPACK_IMPORTED_MODULE_152__.largerEqDocs,
  smaller: _function_relational_smaller_js__WEBPACK_IMPORTED_MODULE_153__.smallerDocs,
  smallerEq: _function_relational_smallerEq_js__WEBPACK_IMPORTED_MODULE_154__.smallerEqDocs,
  unequal: _function_relational_unequal_js__WEBPACK_IMPORTED_MODULE_155__.unequalDocs,
  // functions - set
  setCartesian: _function_set_setCartesian_js__WEBPACK_IMPORTED_MODULE_156__.setCartesianDocs,
  setDifference: _function_set_setDifference_js__WEBPACK_IMPORTED_MODULE_157__.setDifferenceDocs,
  setDistinct: _function_set_setDistinct_js__WEBPACK_IMPORTED_MODULE_158__.setDistinctDocs,
  setIntersect: _function_set_setIntersect_js__WEBPACK_IMPORTED_MODULE_159__.setIntersectDocs,
  setIsSubset: _function_set_setIsSubset_js__WEBPACK_IMPORTED_MODULE_160__.setIsSubsetDocs,
  setMultiplicity: _function_set_setMultiplicity_js__WEBPACK_IMPORTED_MODULE_161__.setMultiplicityDocs,
  setPowerset: _function_set_setPowerset_js__WEBPACK_IMPORTED_MODULE_162__.setPowersetDocs,
  setSize: _function_set_setSize_js__WEBPACK_IMPORTED_MODULE_163__.setSizeDocs,
  setSymDifference: _function_set_setSymDifference_js__WEBPACK_IMPORTED_MODULE_164__.setSymDifferenceDocs,
  setUnion: _function_set_setUnion_js__WEBPACK_IMPORTED_MODULE_165__.setUnionDocs,
  // functions - special
  erf: _function_special_erf_js__WEBPACK_IMPORTED_MODULE_166__.erfDocs,
  // functions - statistics
  mad: _function_statistics_mad_js__WEBPACK_IMPORTED_MODULE_167__.madDocs,
  max: _function_statistics_max_js__WEBPACK_IMPORTED_MODULE_168__.maxDocs,
  mean: _function_statistics_mean_js__WEBPACK_IMPORTED_MODULE_169__.meanDocs,
  median: _function_statistics_median_js__WEBPACK_IMPORTED_MODULE_170__.medianDocs,
  min: _function_statistics_min_js__WEBPACK_IMPORTED_MODULE_171__.minDocs,
  mode: _function_statistics_mode_js__WEBPACK_IMPORTED_MODULE_172__.modeDocs,
  prod: _function_statistics_prod_js__WEBPACK_IMPORTED_MODULE_173__.prodDocs,
  quantileSeq: _function_statistics_quantileSeq_js__WEBPACK_IMPORTED_MODULE_174__.quantileSeqDocs,
  std: _function_statistics_std_js__WEBPACK_IMPORTED_MODULE_175__.stdDocs,
  sum: _function_statistics_sum_js__WEBPACK_IMPORTED_MODULE_176__.sumDocs,
  variance: _function_statistics_variance_js__WEBPACK_IMPORTED_MODULE_177__.varianceDocs,
  // functions - trigonometry
  acos: _function_trigonometry_acos_js__WEBPACK_IMPORTED_MODULE_178__.acosDocs,
  acosh: _function_trigonometry_acosh_js__WEBPACK_IMPORTED_MODULE_179__.acoshDocs,
  acot: _function_trigonometry_acot_js__WEBPACK_IMPORTED_MODULE_180__.acotDocs,
  acoth: _function_trigonometry_acoth_js__WEBPACK_IMPORTED_MODULE_181__.acothDocs,
  acsc: _function_trigonometry_acsc_js__WEBPACK_IMPORTED_MODULE_182__.acscDocs,
  acsch: _function_trigonometry_acsch_js__WEBPACK_IMPORTED_MODULE_183__.acschDocs,
  asec: _function_trigonometry_asec_js__WEBPACK_IMPORTED_MODULE_184__.asecDocs,
  asech: _function_trigonometry_asech_js__WEBPACK_IMPORTED_MODULE_185__.asechDocs,
  asin: _function_trigonometry_asin_js__WEBPACK_IMPORTED_MODULE_186__.asinDocs,
  asinh: _function_trigonometry_asinh_js__WEBPACK_IMPORTED_MODULE_187__.asinhDocs,
  atan: _function_trigonometry_atan_js__WEBPACK_IMPORTED_MODULE_188__.atanDocs,
  atanh: _function_trigonometry_atanh_js__WEBPACK_IMPORTED_MODULE_189__.atanhDocs,
  atan2: _function_trigonometry_atan2_js__WEBPACK_IMPORTED_MODULE_190__.atan2Docs,
  cos: _function_trigonometry_cos_js__WEBPACK_IMPORTED_MODULE_191__.cosDocs,
  cosh: _function_trigonometry_cosh_js__WEBPACK_IMPORTED_MODULE_192__.coshDocs,
  cot: _function_trigonometry_cot_js__WEBPACK_IMPORTED_MODULE_193__.cotDocs,
  coth: _function_trigonometry_coth_js__WEBPACK_IMPORTED_MODULE_194__.cothDocs,
  csc: _function_trigonometry_csc_js__WEBPACK_IMPORTED_MODULE_195__.cscDocs,
  csch: _function_trigonometry_csch_js__WEBPACK_IMPORTED_MODULE_196__.cschDocs,
  sec: _function_trigonometry_sec_js__WEBPACK_IMPORTED_MODULE_197__.secDocs,
  sech: _function_trigonometry_sech_js__WEBPACK_IMPORTED_MODULE_198__.sechDocs,
  sin: _function_trigonometry_sin_js__WEBPACK_IMPORTED_MODULE_199__.sinDocs,
  sinh: _function_trigonometry_sinh_js__WEBPACK_IMPORTED_MODULE_200__.sinhDocs,
  tan: _function_trigonometry_tan_js__WEBPACK_IMPORTED_MODULE_201__.tanDocs,
  tanh: _function_trigonometry_tanh_js__WEBPACK_IMPORTED_MODULE_202__.tanhDocs,
  // functions - units
  to: _function_units_to_js__WEBPACK_IMPORTED_MODULE_203__.toDocs,
  // functions - utils
  clone: _function_utils_clone_js__WEBPACK_IMPORTED_MODULE_204__.cloneDocs,
  format: _function_utils_format_js__WEBPACK_IMPORTED_MODULE_205__.formatDocs,
  bin: _function_utils_bin_js__WEBPACK_IMPORTED_MODULE_206__.binDocs,
  oct: _function_utils_oct_js__WEBPACK_IMPORTED_MODULE_207__.octDocs,
  hex: _function_utils_hex_js__WEBPACK_IMPORTED_MODULE_208__.hexDocs,
  isNaN: _function_utils_isNaN_js__WEBPACK_IMPORTED_MODULE_209__.isNaNDocs,
  isInteger: _function_utils_isInteger_js__WEBPACK_IMPORTED_MODULE_210__.isIntegerDocs,
  isNegative: _function_utils_isNegative_js__WEBPACK_IMPORTED_MODULE_211__.isNegativeDocs,
  isNumeric: _function_utils_isNumeric_js__WEBPACK_IMPORTED_MODULE_212__.isNumericDocs,
  hasNumericValue: _function_utils_hasNumericValue_js__WEBPACK_IMPORTED_MODULE_213__.hasNumericValueDocs,
  isPositive: _function_utils_isPositive_js__WEBPACK_IMPORTED_MODULE_214__.isPositiveDocs,
  isPrime: _function_utils_isPrime_js__WEBPACK_IMPORTED_MODULE_215__.isPrimeDocs,
  isZero: _function_utils_isZero_js__WEBPACK_IMPORTED_MODULE_216__.isZeroDocs,
  // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
  typeOf: _function_utils_typeOf_js__WEBPACK_IMPORTED_MODULE_217__.typeOfDocs,
  numeric: _function_utils_numeric_js__WEBPACK_IMPORTED_MODULE_218__.numericDocs
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "derivativeDocs": () => (/* binding */ derivativeDocs)
/* harmony export */ });
var derivativeDocs = {
  name: 'derivative',
  category: 'Algebra',
  syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
  description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
  seealso: ['simplify', 'parse', 'evaluate']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lsolveDocs": () => (/* binding */ lsolveDocs)
/* harmony export */ });
var lsolveDocs = {
  name: 'lsolve',
  category: 'Algebra',
  syntax: ['x=lsolve(L, b)'],
  description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolveAll', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lsolveAllDocs": () => (/* binding */ lsolveAllDocs)
/* harmony export */ });
var lsolveAllDocs = {
  name: 'lsolveAll',
  category: 'Algebra',
  syntax: ['x=lsolveAll(L, b)'],
  description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolve', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lupDocs": () => (/* binding */ lupDocs)
/* harmony export */ });
var lupDocs = {
  name: 'lup',
  category: 'Algebra',
  syntax: ['lup(m)'],
  description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lusolveDocs": () => (/* binding */ lusolveDocs)
/* harmony export */ });
var lusolveDocs = {
  name: 'lusolve',
  category: 'Algebra',
  syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
  description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
  seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "qrDocs": () => (/* binding */ qrDocs)
/* harmony export */ });
var qrDocs = {
  name: 'qr',
  category: 'Algebra',
  syntax: ['qr(A)'],
  description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
  seealso: ['lup', 'slu', 'matrix']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rationalizeDocs": () => (/* binding */ rationalizeDocs)
/* harmony export */ });
var rationalizeDocs = {
  name: 'rationalize',
  category: 'Algebra',
  syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
  description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ['simplify']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "simplifyDocs": () => (/* binding */ simplifyDocs)
/* harmony export */ });
var simplifyDocs = {
  name: 'simplify',
  category: 'Algebra',
  syntax: ['simplify(expr)', 'simplify(expr, rules)'],
  description: 'Simplify an expression tree.',
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
  seealso: ['derivative', 'parse', 'evaluate']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sluDocs": () => (/* binding */ sluDocs)
/* harmony export */ });
var sluDocs = {
  name: 'slu',
  category: 'Algebra',
  syntax: ['slu(A, order, threshold)'],
  description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usolveDocs": () => (/* binding */ usolveDocs)
/* harmony export */ });
var usolveDocs = {
  name: 'usolve',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolveAll', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usolveAllDocs": () => (/* binding */ usolveAllDocs)
/* harmony export */ });
var usolveAllDocs = {
  name: 'usolveAll',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolve', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absDocs": () => (/* binding */ absDocs)
/* harmony export */ });
var absDocs = {
  name: 'abs',
  category: 'Arithmetic',
  syntax: ['abs(x)'],
  description: 'Compute the absolute value.',
  examples: ['abs(3.5)', 'abs(-4.2)'],
  seealso: ['sign']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addDocs": () => (/* binding */ addDocs)
/* harmony export */ });
var addDocs = {
  name: 'add',
  category: 'Operators',
  syntax: ['x + y', 'add(x, y)'],
  description: 'Add two values.',
  examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
  seealso: ['subtract']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cbrtDocs": () => (/* binding */ cbrtDocs)
/* harmony export */ });
var cbrtDocs = {
  name: 'cbrt',
  category: 'Arithmetic',
  syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
  description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
  seealso: ['square', 'sqrt', 'cube', 'multiply']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceilDocs": () => (/* binding */ ceilDocs)
/* harmony export */ });
var ceilDocs = {
  name: 'ceil',
  category: 'Arithmetic',
  syntax: ['ceil(x)'],
  description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
  seealso: ['floor', 'fix', 'round']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cubeDocs": () => (/* binding */ cubeDocs)
/* harmony export */ });
var cubeDocs = {
  name: 'cube',
  category: 'Arithmetic',
  syntax: ['cube(x)'],
  description: 'Compute the cube of a value. The cube of x is x * x * x.',
  examples: ['cube(2)', '2^3', '2 * 2 * 2'],
  seealso: ['multiply', 'square', 'pow']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divideDocs": () => (/* binding */ divideDocs)
/* harmony export */ });
var divideDocs = {
  name: 'divide',
  category: 'Operators',
  syntax: ['x / y', 'divide(x, y)'],
  description: 'Divide two values.',
  examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
  seealso: ['multiply']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotDivideDocs": () => (/* binding */ dotDivideDocs)
/* harmony export */ });
var dotDivideDocs = {
  name: 'dotDivide',
  category: 'Operators',
  syntax: ['x ./ y', 'dotDivide(x, y)'],
  description: 'Divide two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
  seealso: ['multiply', 'dotMultiply', 'divide']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotMultiplyDocs": () => (/* binding */ dotMultiplyDocs)
/* harmony export */ });
var dotMultiplyDocs = {
  name: 'dotMultiply',
  category: 'Operators',
  syntax: ['x .* y', 'dotMultiply(x, y)'],
  description: 'Multiply two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
  seealso: ['multiply', 'divide', 'dotDivide']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotPowDocs": () => (/* binding */ dotPowDocs)
/* harmony export */ });
var dotPowDocs = {
  name: 'dotPow',
  category: 'Operators',
  syntax: ['x .^ y', 'dotPow(x, y)'],
  description: 'Calculates the power of x to y element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
  seealso: ['pow']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expDocs": () => (/* binding */ expDocs)
/* harmony export */ });
var expDocs = {
  name: 'exp',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Calculate the exponent of a value.',
  examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
  seealso: ['expm', 'expm1', 'pow', 'log']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expmDocs": () => (/* binding */ expmDocs)
/* harmony export */ });
var expmDocs = {
  name: 'expm',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
  examples: ['expm([[0,2],[0,0]])'],
  seealso: ['exp']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1Docs": () => (/* binding */ expm1Docs)
/* harmony export */ });
var expm1Docs = {
  name: 'expm1',
  category: 'Arithmetic',
  syntax: ['expm1(x)'],
  description: 'Calculate the value of subtracting 1 from the exponential value.',
  examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
  seealso: ['exp', 'pow', 'log']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fixDocs": () => (/* binding */ fixDocs)
/* harmony export */ });
var fixDocs = {
  name: 'fix',
  category: 'Arithmetic',
  syntax: ['fix(x)'],
  description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
  seealso: ['ceil', 'floor', 'round']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDocs": () => (/* binding */ floorDocs)
/* harmony export */ });
var floorDocs = {
  name: 'floor',
  category: 'Arithmetic',
  syntax: ['floor(x)'],
  description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
  seealso: ['ceil', 'fix', 'round']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gcdDocs": () => (/* binding */ gcdDocs)
/* harmony export */ });
var gcdDocs = {
  name: 'gcd',
  category: 'Arithmetic',
  syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
  description: 'Compute the greatest common divisor.',
  examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
  seealso: ['lcm', 'xgcd']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hypotDocs": () => (/* binding */ hypotDocs)
/* harmony export */ });
var hypotDocs = {
  name: 'hypot',
  category: 'Arithmetic',
  syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
  description: 'Calculate the hypotenusa of a list with values. ',
  examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
  seealso: ['abs', 'norm']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lcmDocs": () => (/* binding */ lcmDocs)
/* harmony export */ });
var lcmDocs = {
  name: 'lcm',
  category: 'Arithmetic',
  syntax: ['lcm(x, y)'],
  description: 'Compute the least common multiple.',
  examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
  seealso: ['gcd']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logDocs": () => (/* binding */ logDocs)
/* harmony export */ });
var logDocs = {
  name: 'log',
  category: 'Arithmetic',
  syntax: ['log(x)', 'log(x, base)'],
  description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
  seealso: ['exp', 'log1p', 'log2', 'log10']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log10Docs": () => (/* binding */ log10Docs)
/* harmony export */ });
var log10Docs = {
  name: 'log10',
  category: 'Arithmetic',
  syntax: ['log10(x)'],
  description: 'Compute the 10-base logarithm of a value.',
  examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
  seealso: ['exp', 'log']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1pDocs": () => (/* binding */ log1pDocs)
/* harmony export */ });
var log1pDocs = {
  name: 'log1p',
  category: 'Arithmetic',
  syntax: ['log1p(x)', 'log1p(x, base)'],
  description: 'Calculate the logarithm of a `value+1`',
  examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
  seealso: ['exp', 'log', 'log2', 'log10']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log2Docs": () => (/* binding */ log2Docs)
/* harmony export */ });
var log2Docs = {
  name: 'log2',
  category: 'Arithmetic',
  syntax: ['log2(x)'],
  description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
  examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
  seealso: ['exp', 'log1p', 'log', 'log10']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modDocs": () => (/* binding */ modDocs)
/* harmony export */ });
var modDocs = {
  name: 'mod',
  category: 'Operators',
  syntax: ['x % y', 'x mod y', 'mod(x, y)'],
  description: 'Calculates the modulus, the remainder of an integer division.',
  examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
  seealso: ['divide']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiplyDocs": () => (/* binding */ multiplyDocs)
/* harmony export */ });
var multiplyDocs = {
  name: 'multiply',
  category: 'Operators',
  syntax: ['x * y', 'multiply(x, y)'],
  description: 'multiply two values.',
  examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
  seealso: ['divide']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normDocs": () => (/* binding */ normDocs)
/* harmony export */ });
var normDocs = {
  name: 'norm',
  category: 'Arithmetic',
  syntax: ['norm(x)', 'norm(x, p)'],
  description: 'Calculate the norm of a number, vector or matrix.',
  examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nthRootDocs": () => (/* binding */ nthRootDocs)
/* harmony export */ });
var nthRootDocs = {
  name: 'nthRoot',
  category: 'Arithmetic',
  syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
  description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
  examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
  seealso: ['nthRoots', 'pow', 'sqrt']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nthRootsDocs": () => (/* binding */ nthRootsDocs)
/* harmony export */ });
var nthRootsDocs = {
  name: 'nthRoots',
  category: 'Arithmetic',
  syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
  description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
  examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
  seealso: ['sqrt', 'pow', 'nthRoot']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "powDocs": () => (/* binding */ powDocs)
/* harmony export */ });
var powDocs = {
  name: 'pow',
  category: 'Operators',
  syntax: ['x ^ y', 'pow(x, y)'],
  description: 'Calculates the power of x to y, x^y.',
  examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
  seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "roundDocs": () => (/* binding */ roundDocs)
/* harmony export */ });
var roundDocs = {
  name: 'round',
  category: 'Arithmetic',
  syntax: ['round(x)', 'round(x, n)'],
  description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
  seealso: ['ceil', 'floor', 'fix']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "signDocs": () => (/* binding */ signDocs)
/* harmony export */ });
var signDocs = {
  name: 'sign',
  category: 'Arithmetic',
  syntax: ['sign(x)'],
  description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
  seealso: ['abs']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrtDocs": () => (/* binding */ sqrtDocs)
/* harmony export */ });
var sqrtDocs = {
  name: 'sqrt',
  category: 'Arithmetic',
  syntax: ['sqrt(x)'],
  description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
  examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
  seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrtmDocs": () => (/* binding */ sqrtmDocs)
/* harmony export */ });
var sqrtmDocs = {
  name: 'sqrtm',
  category: 'Arithmetic',
  syntax: ['sqrtm(x)'],
  description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
  examples: ['sqrtm([[1, 2], [3, 4]])'],
  seealso: ['sqrt', 'abs', 'square', 'multiply']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squareDocs": () => (/* binding */ squareDocs)
/* harmony export */ });
var squareDocs = {
  name: 'square',
  category: 'Arithmetic',
  syntax: ['square(x)'],
  description: 'Compute the square of a value. The square of x is x * x.',
  examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
  seealso: ['multiply', 'pow', 'sqrt', 'cube']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subtractDocs": () => (/* binding */ subtractDocs)
/* harmony export */ });
var subtractDocs = {
  name: 'subtract',
  category: 'Operators',
  syntax: ['x - y', 'subtract(x, y)'],
  description: 'subtract two values.',
  examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
  seealso: ['add']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unaryMinusDocs": () => (/* binding */ unaryMinusDocs)
/* harmony export */ });
var unaryMinusDocs = {
  name: 'unaryMinus',
  category: 'Operators',
  syntax: ['-x', 'unaryMinus(x)'],
  description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
  examples: ['-4.5', '-(-5.6)', '-"22"'],
  seealso: ['add', 'subtract', 'unaryPlus']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unaryPlusDocs": () => (/* binding */ unaryPlusDocs)
/* harmony export */ });
var unaryPlusDocs = {
  name: 'unaryPlus',
  category: 'Operators',
  syntax: ['+x', 'unaryPlus(x)'],
  description: 'Converts booleans and strings to numbers.',
  examples: ['+true', '+"2"'],
  seealso: ['add', 'subtract', 'unaryMinus']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xgcdDocs": () => (/* binding */ xgcdDocs)
/* harmony export */ });
var xgcdDocs = {
  name: 'xgcd',
  category: 'Arithmetic',
  syntax: ['xgcd(a, b)'],
  description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
  seealso: ['gcd', 'lcm']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitAndDocs": () => (/* binding */ bitAndDocs)
/* harmony export */ });
var bitAndDocs = {
  name: 'bitAnd',
  category: 'Bitwise',
  syntax: ['x & y', 'bitAnd(x, y)'],
  description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
  seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitNotDocs": () => (/* binding */ bitNotDocs)
/* harmony export */ });
var bitNotDocs = {
  name: 'bitNot',
  category: 'Bitwise',
  syntax: ['~x', 'bitNot(x)'],
  description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
  seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitOrDocs": () => (/* binding */ bitOrDocs)
/* harmony export */ });
var bitOrDocs = {
  name: 'bitOr',
  category: 'Bitwise',
  syntax: ['x | y', 'bitOr(x, y)'],
  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitXorDocs": () => (/* binding */ bitXorDocs)
/* harmony export */ });
var bitXorDocs = {
  name: 'bitXor',
  category: 'Bitwise',
  syntax: ['bitXor(x, y)'],
  description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leftShiftDocs": () => (/* binding */ leftShiftDocs)
/* harmony export */ });
var leftShiftDocs = {
  name: 'leftShift',
  category: 'Bitwise',
  syntax: ['x << y', 'leftShift(x, y)'],
  description: 'Bitwise left logical shift of a value x by y number of bits.',
  examples: ['4 << 1', '8 >> 1'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rightArithShiftDocs": () => (/* binding */ rightArithShiftDocs)
/* harmony export */ });
var rightArithShiftDocs = {
  name: 'rightArithShift',
  category: 'Bitwise',
  syntax: ['x >> y', 'rightArithShift(x, y)'],
  description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
  examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rightLogShiftDocs": () => (/* binding */ rightLogShiftDocs)
/* harmony export */ });
var rightLogShiftDocs = {
  name: 'rightLogShift',
  category: 'Bitwise',
  syntax: ['x >>> y', 'rightLogShift(x, y)'],
  description: 'Bitwise right logical shift of a value x by y number of bits.',
  examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bellNumbersDocs": () => (/* binding */ bellNumbersDocs)
/* harmony export */ });
var bellNumbersDocs = {
  name: 'bellNumbers',
  category: 'Combinatorics',
  syntax: ['bellNumbers(n)'],
  description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['bellNumbers(3)', 'bellNumbers(8)'],
  seealso: ['stirlingS2']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "catalanDocs": () => (/* binding */ catalanDocs)
/* harmony export */ });
var catalanDocs = {
  name: 'catalan',
  category: 'Combinatorics',
  syntax: ['catalan(n)'],
  description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['catalan(3)', 'catalan(8)'],
  seealso: ['bellNumbers']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compositionDocs": () => (/* binding */ compositionDocs)
/* harmony export */ });
var compositionDocs = {
  name: 'composition',
  category: 'Combinatorics',
  syntax: ['composition(n, k)'],
  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  examples: ['composition(5, 3)'],
  seealso: ['combinations']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stirlingS2Docs": () => (/* binding */ stirlingS2Docs)
/* harmony export */ });
var stirlingS2Docs = {
  name: 'stirlingS2',
  category: 'Combinatorics',
  syntax: ['stirlingS2(n, k)'],
  description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  examples: ['stirlingS2(5, 3)'],
  seealso: ['bellNumbers']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argDocs": () => (/* binding */ argDocs)
/* harmony export */ });
var argDocs = {
  name: 'arg',
  category: 'Complex',
  syntax: ['arg(x)'],
  description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
  seealso: ['re', 'im', 'conj', 'abs']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conjDocs": () => (/* binding */ conjDocs)
/* harmony export */ });
var conjDocs = {
  name: 'conj',
  category: 'Complex',
  syntax: ['conj(x)'],
  description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
  seealso: ['re', 'im', 'abs', 'arg']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imDocs": () => (/* binding */ imDocs)
/* harmony export */ });
var imDocs = {
  name: 'im',
  category: 'Complex',
  syntax: ['im(x)'],
  description: 'Get the imaginary part of a complex number.',
  examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
  seealso: ['re', 'conj', 'abs', 'arg']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reDocs": () => (/* binding */ reDocs)
/* harmony export */ });
var reDocs = {
  name: 're',
  category: 'Complex',
  syntax: ['re(x)'],
  description: 'Get the real part of a complex number.',
  examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
  seealso: ['im', 'conj', 'abs', 'arg']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateDocs": () => (/* binding */ evaluateDocs)
/* harmony export */ });
var evaluateDocs = {
  name: 'evaluate',
  category: 'Expression',
  syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
  description: 'Evaluate an expression or an array with expressions.',
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "helpDocs": () => (/* binding */ helpDocs)
/* harmony export */ });
var helpDocs = {
  name: 'help',
  category: 'Expression',
  syntax: ['help(object)', 'help(string)'],
  description: 'Display documentation on a function or data type.',
  examples: ['help(sqrt)', 'help("complex")'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distanceDocs": () => (/* binding */ distanceDocs)
/* harmony export */ });
var distanceDocs = {
  name: 'distance',
  category: 'Geometry',
  syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],
  description: 'Calculates the Euclidean distance between two points.',
  examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectDocs": () => (/* binding */ intersectDocs)
/* harmony export */ });
var intersectDocs = {
  name: 'intersect',
  category: 'Geometry',
  syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
  description: 'Computes the intersection point of lines and/or planes.',
  examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "andDocs": () => (/* binding */ andDocs)
/* harmony export */ });
var andDocs = {
  name: 'and',
  category: 'Logical',
  syntax: ['x and y', 'and(x, y)'],
  description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  examples: ['true and false', 'true and true', '2 and 4'],
  seealso: ['not', 'or', 'xor']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notDocs": () => (/* binding */ notDocs)
/* harmony export */ });
var notDocs = {
  name: 'not',
  category: 'Logical',
  syntax: ['not x', 'not(x)'],
  description: 'Logical not. Flips the boolean value of given argument.',
  examples: ['not true', 'not false', 'not 2', 'not 0'],
  seealso: ['and', 'or', 'xor']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "orDocs": () => (/* binding */ orDocs)
/* harmony export */ });
var orDocs = {
  name: 'or',
  category: 'Logical',
  syntax: ['x or y', 'or(x, y)'],
  description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  examples: ['true or false', 'false or false', '0 or 4'],
  seealso: ['not', 'and', 'xor']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xorDocs": () => (/* binding */ xorDocs)
/* harmony export */ });
var xorDocs = {
  name: 'xor',
  category: 'Logical',
  syntax: ['x xor y', 'xor(x, y)'],
  description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
  seealso: ['not', 'and', 'or']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "columnDocs": () => (/* binding */ columnDocs)
/* harmony export */ });
var columnDocs = {
  name: 'column',
  category: 'Matrix',
  syntax: ['column(x, index)'],
  description: 'Return a column from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
  seealso: ['row']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatDocs": () => (/* binding */ concatDocs)
/* harmony export */ });
var concatDocs = {
  name: 'concat',
  category: 'Matrix',
  syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
  description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
  seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "countDocs": () => (/* binding */ countDocs)
/* harmony export */ });
var countDocs = {
  name: 'count',
  category: 'Matrix',
  syntax: ['count(x)'],
  description: 'Count the number of elements of a matrix, array or string.',
  examples: ['a = [1, 2; 3, 4; 5, 6]', 'count(a)', 'size(a)', 'count("hello world")'],
  seealso: ['size']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crossDocs": () => (/* binding */ crossDocs)
/* harmony export */ });
var crossDocs = {
  name: 'cross',
  category: 'Matrix',
  syntax: ['cross(A, B)'],
  description: 'Calculate the cross product for two vectors in three dimensional space.',
  examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
  seealso: ['multiply', 'dot']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ctransposeDocs": () => (/* binding */ ctransposeDocs)
/* harmony export */ });
var ctransposeDocs = {
  name: 'ctranspose',
  category: 'Matrix',
  syntax: ['x\'', 'ctranspose(x)'],
  description: 'Complex Conjugate and Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "detDocs": () => (/* binding */ detDocs)
/* harmony export */ });
var detDocs = {
  name: 'det',
  category: 'Matrix',
  syntax: ['det(x)'],
  description: 'Calculate the determinant of a matrix',
  examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
  seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diagDocs": () => (/* binding */ diagDocs)
/* harmony export */ });
var diagDocs = {
  name: 'diag',
  category: 'Matrix',
  syntax: ['diag(x)', 'diag(x, k)'],
  description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
  seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diffDocs": () => (/* binding */ diffDocs)
/* harmony export */ });
var diffDocs = {
  name: 'diff',
  category: 'Matrix',
  syntax: ['diff(arr)', 'diff(arr, dim)'],
  description: ['Create a new matrix or array with the difference of the passed matrix or array.', 'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference', 'If no dimension parameter is passed it is assumed as dimension 0', 'Dimension is zero-based in javascript and one-based in the parser', 'Arrays must be \'rectangular\' meaning arrays like [1, 2]', 'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'],
  examples: ['diff([1, 2, 4, 7, 0])', 'diff([1, 2, 4, 7, 0], 0)', 'diff(matrix([1, 2, 4, 7, 0]))', 'diff([[1, 2], [3, 4]])', 'diff([[1, 2], [3, 4]], 0)', 'diff([[1, 2], [3, 4]], 1)', 'diff([[1, 2], [3, 4]], bignumber(1))', 'diff(matrix([[1, 2], [3, 4]]), 1)', 'diff([[1, 2], matrix([3, 4])], 1)'],
  seealso: ['subtract', 'partitionSelect']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotDocs": () => (/* binding */ dotDocs)
/* harmony export */ });
var dotDocs = {
  name: 'dot',
  category: 'Matrix',
  syntax: ['dot(A, B)', 'A * B'],
  description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
  seealso: ['multiply', 'cross']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eigsDocs": () => (/* binding */ eigsDocs)
/* harmony export */ });
var eigsDocs = {
  name: 'eigs',
  category: 'Matrix',
  syntax: ['eigs(x)'],
  description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
  examples: ['eigs([[5, 2.3], [2.3, 1]])'],
  seealso: ['inv']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterDocs": () => (/* binding */ filterDocs)
/* harmony export */ });
var filterDocs = {
  name: 'filter',
  category: 'Matrix',
  syntax: ['filter(x, test)'],
  description: 'Filter items in a matrix.',
  examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
  seealso: ['sort', 'map', 'forEach']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flattenDocs": () => (/* binding */ flattenDocs)
/* harmony export */ });
var flattenDocs = {
  name: 'flatten',
  category: 'Matrix',
  syntax: ['flatten(x)'],
  description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
  seealso: ['concat', 'resize', 'size', 'squeeze']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forEachDocs": () => (/* binding */ forEachDocs)
/* harmony export */ });
var forEachDocs = {
  name: 'forEach',
  category: 'Matrix',
  syntax: ['forEach(x, callback)'],
  description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  examples: ['forEach([1, 2, 3], function(val) { console.log(val) })'],
  seealso: ['map', 'sort', 'filter']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMatrixDataTypeDocs": () => (/* binding */ getMatrixDataTypeDocs)
/* harmony export */ });
var getMatrixDataTypeDocs = {
  name: 'getMatrixDataType',
  category: 'Matrix',
  syntax: ['getMatrixDataType(x)'],
  description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
  examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
  seealso: ['matrix', 'sparse', 'typeOf']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identityDocs": () => (/* binding */ identityDocs)
/* harmony export */ });
var identityDocs = {
  name: 'identity',
  category: 'Matrix',
  syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
  description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
  seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invDocs": () => (/* binding */ invDocs)
/* harmony export */ });
var invDocs = {
  name: 'inv',
  category: 'Matrix',
  syntax: ['inv(x)'],
  description: 'Calculate the inverse of a matrix',
  examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
  seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "kronDocs": () => (/* binding */ kronDocs)
/* harmony export */ });
var kronDocs = {
  name: 'kron',
  category: 'Matrix',
  syntax: ['kron(x, y)'],
  description: 'Calculates the kronecker product of 2 matrices or vectors.',
  examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
  seealso: ['multiply', 'dot', 'cross']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapDocs": () => (/* binding */ mapDocs)
/* harmony export */ });
var mapDocs = {
  name: 'map',
  category: 'Matrix',
  syntax: ['map(x, callback)'],
  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  examples: ['map([1, 2, 3], square)'],
  seealso: ['filter', 'forEach']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesDocs": () => (/* binding */ onesDocs)
/* harmony export */ });
var onesDocs = {
  name: 'ones',
  category: 'Matrix',
  syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
  description: 'Create a matrix containing ones.',
  examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionSelectDocs": () => (/* binding */ partitionSelectDocs)
/* harmony export */ });
var partitionSelectDocs = {
  name: 'partitionSelect',
  category: 'Matrix',
  syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
  description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
  seealso: ['sort']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rangeDocs": () => (/* binding */ rangeDocs)
/* harmony export */ });
var rangeDocs = {
  name: 'range',
  category: 'Type',
  syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
  description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
  examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshapeDocs": () => (/* binding */ reshapeDocs)
/* harmony export */ });
var reshapeDocs = {
  name: 'reshape',
  category: 'Matrix',
  syntax: ['reshape(x, sizes)'],
  description: 'Reshape a multi dimensional array to fit the specified dimensions.',
  examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
  seealso: ['size', 'squeeze', 'resize']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeDocs": () => (/* binding */ resizeDocs)
/* harmony export */ });
var resizeDocs = {
  name: 'resize',
  category: 'Matrix',
  syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
  description: 'Resize a matrix.',
  examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
  seealso: ['size', 'subset', 'squeeze', 'reshape']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateDocs": () => (/* binding */ rotateDocs)
/* harmony export */ });
var rotateDocs = {
  name: 'rotate',
  category: 'Matrix',
  syntax: ['rotate(w, theta)', 'rotate(w, theta, v)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotate([1, 0], math.pi / 2)', 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
  seealso: ['matrix', 'rotationMatrix']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotationMatrixDocs": () => (/* binding */ rotationMatrixDocs)
/* harmony export */ });
var rotationMatrixDocs = {
  name: 'rotationMatrix',
  category: 'Matrix',
  syntax: ['rotationMatrix(theta)', 'rotationMatrix(theta, v)', 'rotationMatrix(theta, v, format)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotationMatrix(pi / 2)', 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
  seealso: ['cos', 'sin']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rowDocs": () => (/* binding */ rowDocs)
/* harmony export */ });
var rowDocs = {
  name: 'row',
  category: 'Matrix',
  syntax: ['row(x, index)'],
  description: 'Return a row from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
  seealso: ['column']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sizeDocs": () => (/* binding */ sizeDocs)
/* harmony export */ });
var sizeDocs = {
  name: 'size',
  category: 'Matrix',
  syntax: ['size(x)'],
  description: 'Calculate the size of a matrix.',
  examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
  seealso: ['concat', 'count', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sortDocs": () => (/* binding */ sortDocs)
/* harmony export */ });
var sortDocs = {
  name: 'sort',
  category: 'Matrix',
  syntax: ['sort(x)', 'sort(x, compare)'],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ['map', 'filter', 'forEach']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squeezeDocs": () => (/* binding */ squeezeDocs)
/* harmony export */ });
var squeezeDocs = {
  name: 'squeeze',
  category: 'Matrix',
  syntax: ['squeeze(x)'],
  description: 'Remove inner and outer singleton dimensions from a matrix.',
  examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subsetDocs": () => (/* binding */ subsetDocs)
/* harmony export */ });
var subsetDocs = {
  name: 'subset',
  category: 'Matrix',
  syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
  description: 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
  examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "traceDocs": () => (/* binding */ traceDocs)
/* harmony export */ });
var traceDocs = {
  name: 'trace',
  category: 'Matrix',
  syntax: ['trace(A)'],
  description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transposeDocs": () => (/* binding */ transposeDocs)
/* harmony export */ });
var transposeDocs = {
  name: 'transpose',
  category: 'Matrix',
  syntax: ['x\'', 'transpose(x)'],
  description: 'Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosDocs": () => (/* binding */ zerosDocs)
/* harmony export */ });
var zerosDocs = {
  name: 'zeros',
  category: 'Matrix',
  syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
  description: 'Create a matrix containing zeros.',
  examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combinationsDocs": () => (/* binding */ combinationsDocs)
/* harmony export */ });
var combinationsDocs = {
  name: 'combinations',
  category: 'Probability',
  syntax: ['combinations(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time',
  examples: ['combinations(7, 5)'],
  seealso: ['combinationsWithRep', 'permutations', 'factorial']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combinationsWithRepDocs": () => (/* binding */ combinationsWithRepDocs)
/* harmony export */ });
var combinationsWithRepDocs = {
  name: 'combinationsWithRep',
  category: 'Probability',
  syntax: ['combinationsWithRep(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time with replacements.',
  examples: ['combinationsWithRep(7, 5)'],
  seealso: ['combinations', 'permutations', 'factorial']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factorialDocs": () => (/* binding */ factorialDocs)
/* harmony export */ });
var factorialDocs = {
  name: 'factorial',
  category: 'Probability',
  syntax: ['n!', 'factorial(n)'],
  description: 'Compute the factorial of a value',
  examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
  seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gammaDocs": () => (/* binding */ gammaDocs)
/* harmony export */ });
var gammaDocs = {
  name: 'gamma',
  category: 'Probability',
  syntax: ['gamma(n)'],
  description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
  seealso: ['factorial']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "kldivergenceDocs": () => (/* binding */ kldivergenceDocs)
/* harmony export */ });
var kldivergenceDocs = {
  name: 'kldivergence',
  category: 'Probability',
  syntax: ['kldivergence(x, y)'],
  description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multinomialDocs": () => (/* binding */ multinomialDocs)
/* harmony export */ });
var multinomialDocs = {
  name: 'multinomial',
  category: 'Probability',
  syntax: ['multinomial(A)'],
  description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  examples: ['multinomial([1, 2, 1])'],
  seealso: ['combinations', 'factorial']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "permutationsDocs": () => (/* binding */ permutationsDocs)
/* harmony export */ });
var permutationsDocs = {
  name: 'permutations',
  category: 'Probability',
  syntax: ['permutations(n)', 'permutations(n, k)'],
  description: 'Compute the number of permutations of n items taken k at a time',
  examples: ['permutations(5)', 'permutations(5, 3)'],
  seealso: ['combinations', 'combinationsWithRep', 'factorial']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pickRandomDocs": () => (/* binding */ pickRandomDocs)
/* harmony export */ });
var pickRandomDocs = {
  name: 'pickRandom',
  category: 'Probability',
  syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
  description: 'Pick a random entry from a given array.',
  examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
  seealso: ['random', 'randomInt']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomDocs": () => (/* binding */ randomDocs)
/* harmony export */ });
var randomDocs = {
  name: 'random',
  category: 'Probability',
  syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
  description: 'Return a random number.',
  examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
  seealso: ['pickRandom', 'randomInt']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomIntDocs": () => (/* binding */ randomIntDocs)
/* harmony export */ });
var randomIntDocs = {
  name: 'randomInt',
  category: 'Probability',
  syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
  description: 'Return a random integer number',
  examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
  seealso: ['pickRandom', 'random']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compareDocs": () => (/* binding */ compareDocs)
/* harmony export */ });
var compareDocs = {
  name: 'compare',
  category: 'Relational',
  syntax: ['compare(x, y)'],
  description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compareNaturalDocs": () => (/* binding */ compareNaturalDocs)
/* harmony export */ });
var compareNaturalDocs = {
  name: 'compareNatural',
  category: 'Relational',
  syntax: ['compareNatural(x, y)'],
  description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compareTextDocs": () => (/* binding */ compareTextDocs)
/* harmony export */ });
var compareTextDocs = {
  name: 'compareText',
  category: 'Relational',
  syntax: ['compareText(x, y)'],
  description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepEqualDocs": () => (/* binding */ deepEqualDocs)
/* harmony export */ });
var deepEqualDocs = {
  name: 'deepEqual',
  category: 'Relational',
  syntax: ['deepEqual(x, y)'],
  description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
  seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equalDocs": () => (/* binding */ equalDocs)
/* harmony export */ });
var equalDocs = {
  name: 'equal',
  category: 'Relational',
  syntax: ['x == y', 'equal(x, y)'],
  description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
  examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
  seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equalTextDocs": () => (/* binding */ equalTextDocs)
/* harmony export */ });
var equalTextDocs = {
  name: 'equalText',
  category: 'Relational',
  syntax: ['equalText(x, y)'],
  description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural', 'compareText', 'equal']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "largerDocs": () => (/* binding */ largerDocs)
/* harmony export */ });
var largerDocs = {
  name: 'larger',
  category: 'Relational',
  syntax: ['x > y', 'larger(x, y)'],
  description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "largerEqDocs": () => (/* binding */ largerEqDocs)
/* harmony export */ });
var largerEqDocs = {
  name: 'largerEq',
  category: 'Relational',
  syntax: ['x >= y', 'largerEq(x, y)'],
  description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
  seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smallerDocs": () => (/* binding */ smallerDocs)
/* harmony export */ });
var smallerDocs = {
  name: 'smaller',
  category: 'Relational',
  syntax: ['x < y', 'smaller(x, y)'],
  description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
  seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smallerEqDocs": () => (/* binding */ smallerEqDocs)
/* harmony export */ });
var smallerEqDocs = {
  name: 'smallerEq',
  category: 'Relational',
  syntax: ['x <= y', 'smallerEq(x, y)'],
  description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
  seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unequalDocs": () => (/* binding */ unequalDocs)
/* harmony export */ });
var unequalDocs = {
  name: 'unequal',
  category: 'Relational',
  syntax: ['x != y', 'unequal(x, y)'],
  description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
  seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setCartesianDocs": () => (/* binding */ setCartesianDocs)
/* harmony export */ });
var setCartesianDocs = {
  name: 'setCartesian',
  category: 'Set',
  syntax: ['setCartesian(set1, set2)'],
  description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setCartesian([1, 2], [3, 4])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setDifferenceDocs": () => (/* binding */ setDifferenceDocs)
/* harmony export */ });
var setDifferenceDocs = {
  name: 'setDifference',
  category: 'Set',
  syntax: ['setDifference(set1, set2)'],
  description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setSymDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setDistinctDocs": () => (/* binding */ setDistinctDocs)
/* harmony export */ });
var setDistinctDocs = {
  name: 'setDistinct',
  category: 'Set',
  syntax: ['setDistinct(set)'],
  description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
  seealso: ['setMultiplicity']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setIntersectDocs": () => (/* binding */ setIntersectDocs)
/* harmony export */ });
var setIntersectDocs = {
  name: 'setIntersect',
  category: 'Set',
  syntax: ['setIntersect(set1, set2)'],
  description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setIsSubsetDocs": () => (/* binding */ setIsSubsetDocs)
/* harmony export */ });
var setIsSubsetDocs = {
  name: 'setIsSubset',
  category: 'Set',
  syntax: ['setIsSubset(set1, set2)'],
  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setMultiplicityDocs": () => (/* binding */ setMultiplicityDocs)
/* harmony export */ });
var setMultiplicityDocs = {
  name: 'setMultiplicity',
  category: 'Set',
  syntax: ['setMultiplicity(element, set)'],
  description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
  seealso: ['setDistinct', 'setSize']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setPowersetDocs": () => (/* binding */ setPowersetDocs)
/* harmony export */ });
var setPowersetDocs = {
  name: 'setPowerset',
  category: 'Set',
  syntax: ['setPowerset(set)'],
  description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setPowerset([1, 2, 3])'],
  seealso: ['setCartesian']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setSizeDocs": () => (/* binding */ setSizeDocs)
/* harmony export */ });
var setSizeDocs = {
  name: 'setSize',
  category: 'Set',
  syntax: ['setSize(set)', 'setSize(set, unique)'],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setSymDifferenceDocs": () => (/* binding */ setSymDifferenceDocs)
/* harmony export */ });
var setSymDifferenceDocs = {
  name: 'setSymDifference',
  category: 'Set',
  syntax: ['setSymDifference(set1, set2)'],
  description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setUnionDocs": () => (/* binding */ setUnionDocs)
/* harmony export */ });
var setUnionDocs = {
  name: 'setUnion',
  category: 'Set',
  syntax: ['setUnion(set1, set2)'],
  description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setIntersect', 'setDifference']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erfDocs": () => (/* binding */ erfDocs)
/* harmony export */ });
var erfDocs = {
  name: 'erf',
  category: 'Special',
  syntax: ['erf(x)'],
  description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "madDocs": () => (/* binding */ madDocs)
/* harmony export */ });
var madDocs = {
  name: 'mad',
  category: 'Statistics',
  syntax: ['mad(a, b, c, ...)', 'mad(A)'],
  description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
  seealso: ['mean', 'median', 'std', 'abs']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxDocs": () => (/* binding */ maxDocs)
/* harmony export */ });
var maxDocs = {
  name: 'max',
  category: 'Statistics',
  syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
  description: 'Compute the maximum value of a list of values.',
  examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanDocs": () => (/* binding */ meanDocs)
/* harmony export */ });
var meanDocs = {
  name: 'mean',
  category: 'Statistics',
  syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
  description: 'Compute the arithmetic mean of a list of values.',
  examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
  seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "medianDocs": () => (/* binding */ medianDocs)
/* harmony export */ });
var medianDocs = {
  name: 'median',
  category: 'Statistics',
  syntax: ['median(a, b, c, ...)', 'median(A)'],
  description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
  seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minDocs": () => (/* binding */ minDocs)
/* harmony export */ });
var minDocs = {
  name: 'min',
  category: 'Statistics',
  syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
  description: 'Compute the minimum value of a list of values.',
  examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modeDocs": () => (/* binding */ modeDocs)
/* harmony export */ });
var modeDocs = {
  name: 'mode',
  category: 'Statistics',
  syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
  description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prodDocs": () => (/* binding */ prodDocs)
/* harmony export */ });
var prodDocs = {
  name: 'prod',
  category: 'Statistics',
  syntax: ['prod(a, b, c, ...)', 'prod(A)'],
  description: 'Compute the product of all values.',
  examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quantileSeqDocs": () => (/* binding */ quantileSeqDocs)
/* harmony export */ });
var quantileSeqDocs = {
  name: 'quantileSeq',
  category: 'Statistics',
  syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
  description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
  seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stdDocs": () => (/* binding */ stdDocs)
/* harmony export */ });
var stdDocs = {
  name: 'std',
  category: 'Statistics',
  syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sumDocs": () => (/* binding */ sumDocs)
/* harmony export */ });
var sumDocs = {
  name: 'sum',
  category: 'Statistics',
  syntax: ['sum(a, b, c, ...)', 'sum(A)'],
  description: 'Compute the sum of all values.',
  examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "varianceDocs": () => (/* binding */ varianceDocs)
/* harmony export */ });
var varianceDocs = {
  name: 'variance',
  category: 'Statistics',
  syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosDocs": () => (/* binding */ acosDocs)
/* harmony export */ });
var acosDocs = {
  name: 'acos',
  category: 'Trigonometry',
  syntax: ['acos(x)'],
  description: 'Compute the inverse cosine of a value in radians.',
  examples: ['acos(0.5)', 'acos(cos(2.3))'],
  seealso: ['cos', 'atan', 'asin']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acoshDocs": () => (/* binding */ acoshDocs)
/* harmony export */ });
var acoshDocs = {
  name: 'acosh',
  category: 'Trigonometry',
  syntax: ['acosh(x)'],
  description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  examples: ['acosh(1.5)'],
  seealso: ['cosh', 'asinh', 'atanh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acotDocs": () => (/* binding */ acotDocs)
/* harmony export */ });
var acotDocs = {
  name: 'acot',
  category: 'Trigonometry',
  syntax: ['acot(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
  seealso: ['cot', 'atan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acothDocs": () => (/* binding */ acothDocs)
/* harmony export */ });
var acothDocs = {
  name: 'acoth',
  category: 'Trigonometry',
  syntax: ['acoth(x)'],
  description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  examples: ['acoth(2)', 'acoth(0.5)'],
  seealso: ['acsch', 'asech']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acscDocs": () => (/* binding */ acscDocs)
/* harmony export */ });
var acscDocs = {
  name: 'acsc',
  category: 'Trigonometry',
  syntax: ['acsc(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
  seealso: ['csc', 'asin', 'asec']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acschDocs": () => (/* binding */ acschDocs)
/* harmony export */ });
var acschDocs = {
  name: 'acsch',
  category: 'Trigonometry',
  syntax: ['acsch(x)'],
  description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  examples: ['acsch(0.5)'],
  seealso: ['asech', 'acoth']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asecDocs": () => (/* binding */ asecDocs)
/* harmony export */ });
var asecDocs = {
  name: 'asec',
  category: 'Trigonometry',
  syntax: ['asec(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
  seealso: ['acos', 'acot', 'acsc']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asechDocs": () => (/* binding */ asechDocs)
/* harmony export */ });
var asechDocs = {
  name: 'asech',
  category: 'Trigonometry',
  syntax: ['asech(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asech(0.5)'],
  seealso: ['acsch', 'acoth']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinDocs": () => (/* binding */ asinDocs)
/* harmony export */ });
var asinDocs = {
  name: 'asin',
  category: 'Trigonometry',
  syntax: ['asin(x)'],
  description: 'Compute the inverse sine of a value in radians.',
  examples: ['asin(0.5)', 'asin(sin(0.5))'],
  seealso: ['sin', 'acos', 'atan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinhDocs": () => (/* binding */ asinhDocs)
/* harmony export */ });
var asinhDocs = {
  name: 'asinh',
  category: 'Trigonometry',
  syntax: ['asinh(x)'],
  description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  examples: ['asinh(0.5)'],
  seealso: ['acosh', 'atanh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanDocs": () => (/* binding */ atanDocs)
/* harmony export */ });
var atanDocs = {
  name: 'atan',
  category: 'Trigonometry',
  syntax: ['atan(x)'],
  description: 'Compute the inverse tangent of a value in radians.',
  examples: ['atan(0.5)', 'atan(tan(0.5))'],
  seealso: ['tan', 'acos', 'asin']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2Docs": () => (/* binding */ atan2Docs)
/* harmony export */ });
var atan2Docs = {
  name: 'atan2',
  category: 'Trigonometry',
  syntax: ['atan2(y, x)'],
  description: 'Computes the principal value of the arc tangent of y/x in radians.',
  examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
  seealso: ['sin', 'cos', 'tan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanhDocs": () => (/* binding */ atanhDocs)
/* harmony export */ });
var atanhDocs = {
  name: 'atanh',
  category: 'Trigonometry',
  syntax: ['atanh(x)'],
  description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  examples: ['atanh(0.5)'],
  seealso: ['acosh', 'asinh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosDocs": () => (/* binding */ cosDocs)
/* harmony export */ });
var cosDocs = {
  name: 'cos',
  category: 'Trigonometry',
  syntax: ['cos(x)'],
  description: 'Compute the cosine of x in radians.',
  examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['acos', 'sin', 'tan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "coshDocs": () => (/* binding */ coshDocs)
/* harmony export */ });
var coshDocs = {
  name: 'cosh',
  category: 'Trigonometry',
  syntax: ['cosh(x)'],
  description: 'Compute the hyperbolic cosine of x in radians.',
  examples: ['cosh(0.5)'],
  seealso: ['sinh', 'tanh', 'coth']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cotDocs": () => (/* binding */ cotDocs)
/* harmony export */ });
var cotDocs = {
  name: 'cot',
  category: 'Trigonometry',
  syntax: ['cot(x)'],
  description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  examples: ['cot(2)', '1 / tan(2)'],
  seealso: ['sec', 'csc', 'tan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cothDocs": () => (/* binding */ cothDocs)
/* harmony export */ });
var cothDocs = {
  name: 'coth',
  category: 'Trigonometry',
  syntax: ['coth(x)'],
  description: 'Compute the hyperbolic cotangent of x in radians.',
  examples: ['coth(2)', '1 / tanh(2)'],
  seealso: ['sech', 'csch', 'tanh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cscDocs": () => (/* binding */ cscDocs)
/* harmony export */ });
var cscDocs = {
  name: 'csc',
  category: 'Trigonometry',
  syntax: ['csc(x)'],
  description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  examples: ['csc(2)', '1 / sin(2)'],
  seealso: ['sec', 'cot', 'sin']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cschDocs": () => (/* binding */ cschDocs)
/* harmony export */ });
var cschDocs = {
  name: 'csch',
  category: 'Trigonometry',
  syntax: ['csch(x)'],
  description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  examples: ['csch(2)', '1 / sinh(2)'],
  seealso: ['sech', 'coth', 'sinh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "secDocs": () => (/* binding */ secDocs)
/* harmony export */ });
var secDocs = {
  name: 'sec',
  category: 'Trigonometry',
  syntax: ['sec(x)'],
  description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
  examples: ['sec(2)', '1 / cos(2)'],
  seealso: ['cot', 'csc', 'cos']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sechDocs": () => (/* binding */ sechDocs)
/* harmony export */ });
var sechDocs = {
  name: 'sech',
  category: 'Trigonometry',
  syntax: ['sech(x)'],
  description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  examples: ['sech(2)', '1 / cosh(2)'],
  seealso: ['coth', 'csch', 'cosh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinDocs": () => (/* binding */ sinDocs)
/* harmony export */ });
var sinDocs = {
  name: 'sin',
  category: 'Trigonometry',
  syntax: ['sin(x)'],
  description: 'Compute the sine of x in radians.',
  examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['asin', 'cos', 'tan']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinhDocs": () => (/* binding */ sinhDocs)
/* harmony export */ });
var sinhDocs = {
  name: 'sinh',
  category: 'Trigonometry',
  syntax: ['sinh(x)'],
  description: 'Compute the hyperbolic sine of x in radians.',
  examples: ['sinh(0.5)'],
  seealso: ['cosh', 'tanh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanDocs": () => (/* binding */ tanDocs)
/* harmony export */ });
var tanDocs = {
  name: 'tan',
  category: 'Trigonometry',
  syntax: ['tan(x)'],
  description: 'Compute the tangent of x in radians.',
  examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
  seealso: ['atan', 'sin', 'cos']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanhDocs": () => (/* binding */ tanhDocs)
/* harmony export */ });
var tanhDocs = {
  name: 'tanh',
  category: 'Trigonometry',
  syntax: ['tanh(x)'],
  description: 'Compute the hyperbolic tangent of x in radians.',
  examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
  seealso: ['sinh', 'cosh']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toDocs": () => (/* binding */ toDocs)
/* harmony export */ });
var toDocs = {
  name: 'to',
  category: 'Units',
  syntax: ['x to unit', 'to(x, unit)'],
  description: 'Change the unit of a value.',
  examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "binDocs": () => (/* binding */ binDocs)
/* harmony export */ });
var binDocs = {
  name: 'bin',
  category: 'Utils',
  syntax: ['bin(value)'],
  description: 'Format a number as binary',
  examples: ['bin(2)'],
  seealso: ['oct', 'hex']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cloneDocs": () => (/* binding */ cloneDocs)
/* harmony export */ });
var cloneDocs = {
  name: 'clone',
  category: 'Utils',
  syntax: ['clone(x)'],
  description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
  seealso: []
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatDocs": () => (/* binding */ formatDocs)
/* harmony export */ });
var formatDocs = {
  name: 'format',
  category: 'Utils',
  syntax: ['format(value)', 'format(value, precision)'],
  description: 'Format a value of any type as string.',
  examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
  seealso: ['print']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasNumericValueDocs": () => (/* binding */ hasNumericValueDocs)
/* harmony export */ });
var hasNumericValueDocs = {
  name: 'hasNumericValue',
  category: 'Utils',
  syntax: ['hasNumericValue(x)'],
  description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
  examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hexDocs": () => (/* binding */ hexDocs)
/* harmony export */ });
var hexDocs = {
  name: 'hex',
  category: 'Utils',
  syntax: ['hex(value)'],
  description: 'Format a number as hexadecimal',
  examples: ['hex(240)'],
  seealso: ['bin', 'oct']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIntegerDocs": () => (/* binding */ isIntegerDocs)
/* harmony export */ });
var isIntegerDocs = {
  name: 'isInteger',
  category: 'Utils',
  syntax: ['isInteger(x)'],
  description: 'Test whether a value is an integer number.',
  examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaNDocs": () => (/* binding */ isNaNDocs)
/* harmony export */ });
var isNaNDocs = {
  name: 'isNaN',
  category: 'Utils',
  syntax: ['isNaN(x)'],
  description: 'Test whether a value is NaN (not a number)',
  examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNegativeDocs": () => (/* binding */ isNegativeDocs)
/* harmony export */ });
var isNegativeDocs = {
  name: 'isNegative',
  category: 'Utils',
  syntax: ['isNegative(x)'],
  description: 'Test whether a value is negative: smaller than zero.',
  examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumericDocs": () => (/* binding */ isNumericDocs)
/* harmony export */ });
var isNumericDocs = {
  name: 'isNumeric',
  category: 'Utils',
  syntax: ['isNumeric(x)'],
  description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPositiveDocs": () => (/* binding */ isPositiveDocs)
/* harmony export */ });
var isPositiveDocs = {
  name: 'isPositive',
  category: 'Utils',
  syntax: ['isPositive(x)'],
  description: 'Test whether a value is positive: larger than zero.',
  examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPrimeDocs": () => (/* binding */ isPrimeDocs)
/* harmony export */ });
var isPrimeDocs = {
  name: 'isPrime',
  category: 'Utils',
  syntax: ['isPrime(x)'],
  description: 'Test whether a value is prime: has no divisors other than itself and one.',
  examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isZeroDocs": () => (/* binding */ isZeroDocs)
/* harmony export */ });
var isZeroDocs = {
  name: 'isZero',
  category: 'Utils',
  syntax: ['isZero(x)'],
  description: 'Test whether a value is zero.',
  examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "numericDocs": () => (/* binding */ numericDocs)
/* harmony export */ });
var numericDocs = {
  name: 'numeric',
  category: 'Utils',
  syntax: ['numeric(x)'],
  description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
  seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "octDocs": () => (/* binding */ octDocs)
/* harmony export */ });
var octDocs = {
  name: 'oct',
  category: 'Utils',
  syntax: ['oct(value)'],
  description: 'Format a number as octal',
  examples: ['oct(56)'],
  seealso: ['bin', 'hex']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "typeOfDocs": () => (/* binding */ typeOfDocs)
/* harmony export */ });
var typeOfDocs = {
  name: 'typeOf',
  category: 'Utils',
  syntax: ['typeOf(x)'],
  description: 'Get the type of a variable.',
  examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
  seealso: ['getMatrixDataType']
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/function/compile.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/function/compile.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCompile": () => (/* binding */ createCompile)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'compile';
var dependencies = ['typed', 'parse'];
var createCompile = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    parse
  } = _ref;

  /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed(name, {
    string: function string(expr) {
      return parse(expr).compile();
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/function/evaluate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/function/evaluate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEvaluate": () => (/* binding */ createEvaluate)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'evaluate';
var dependencies = ['typed', 'parse'];
var createEvaluate = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    parse
  } = _ref;

  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed(name, {
    string: function string(expr) {
      var scope = {};
      return parse(expr).compile().evaluate(scope);
    },
    'string, Object': function stringObject(expr, scope) {
      return parse(expr).compile().evaluate(scope);
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      var scope = {};
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    },
    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/function/help.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/function/help.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createHelp": () => (/* binding */ createHelp)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _embeddedDocs_embeddedDocs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../embeddedDocs/embeddedDocs.js */ "./node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");




var name = 'help';
var dependencies = ['typed', 'mathWithTransform', 'Help'];
var createHelp = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    mathWithTransform,
    Help
  } = _ref;

  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed(name, {
    any: function any(search) {
      var prop;
      var searchName = search;

      if (typeof search !== 'string') {
        for (prop in mathWithTransform) {
          // search in functions and constants
          if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty)(mathWithTransform, prop) && search === mathWithTransform[prop]) {
            searchName = prop;
            break;
          }
        }
        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */

      }

      var doc = (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_2__.getSafeProperty)(_embeddedDocs_embeddedDocs_js__WEBPACK_IMPORTED_MODULE_3__.embeddedDocs, searchName);

      if (!doc) {
        var searchText = typeof searchName === 'function' ? searchName.name : searchName;
        throw new Error('No documentation found on "' + searchText + '"');
      }

      return new Help(doc);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/function/parser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/function/parser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createParser": () => (/* binding */ createParser)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'parser';
var dependencies = ['typed', 'Parser'];
var createParser = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Parser
  } = _ref;

  /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')                 // 3.5
   *     parser.evaluate('x + 3')                     // 6.5
   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)
   *     parser.evaluate('f(2, 3)')                   // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed(name, {
    '': function _() {
      return new Parser();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/keywords.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/keywords.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keywords": () => (/* binding */ keywords)
/* harmony export */ });
// Reserved keywords not allowed to use in the parser
var keywords = {
  end: true
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/AccessorNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/AccessorNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAccessorNode": () => (/* binding */ createAccessorNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_access_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/access.js */ "./node_modules/mathjs/lib/esm/expression/node/utils/access.js");




var name = 'AccessorNode';
var dependencies = ['subset', 'Node'];
var createAccessorNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    subset,
    Node
  } = _ref;
  var access = (0,_utils_access_js__WEBPACK_IMPORTED_MODULE_1__.accessFactory)({
    subset
  });
  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */

  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }

    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isIndexNode)(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }

    this.object = object || null;
    this.index = index; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AccessorNode.prototype = new Node();
  AccessorNode.prototype.type = 'AccessorNode';
  AccessorNode.prototype.isAccessorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AccessorNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index._compile(math, argNames);

    if (this.index.isObjectProperty()) {
      var prop = this.index.getObjectProperty();
      return function evalAccessorNode(scope, args, context) {
        return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(evalObject(scope, args, context), prop);
      };
    } else {
      return function evalAccessorNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var index = evalIndex(scope, args, object); // we pass object here instead of context

        return access(object, index);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };
  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */


  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */


  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toString = function (options) {
    var object = this.object.toString(options);

    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }

    return object + this.index.toString(options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);

    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return object + this.index.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);

    if (needParenthesis(this.object)) {
      object = '\\left(\' + object + \'\\right)';
    }

    return object + this.index.toTex(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AccessorNode.prototype.toJSON = function () {
    return {
      mathjs: 'AccessorNode',
      object: this.object,
      index: this.index
    };
  };
  /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */


  AccessorNode.fromJSON = function (json) {
    return new AccessorNode(json.object, json.index);
  };
  /**
   * Are parenthesis needed?
   * @private
   */


  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isAccessorNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isArrayNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isConstantNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFunctionNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isObjectNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isParenthesisNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSymbolNode)(node));
  }

  return AccessorNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/ArrayNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/ArrayNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createArrayNode": () => (/* binding */ createArrayNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'ArrayNode';
var dependencies = ['Node'];
var createArrayNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.items = items || []; // validate input

    if (!Array.isArray(this.items) || !this.items.every(_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)) {
      throw new TypeError('Array containing Nodes expected');
    }
  }

  ArrayNode.prototype = new Node();
  ArrayNode.prototype.type = 'ArrayNode';
  ArrayNode.prototype.isArrayNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ArrayNode.prototype._compile = function (math, argNames) {
    var evalItems = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(this.items, function (item) {
      return item._compile(math, argNames);
    });
    var asMatrix = math.config.matrix !== 'Array';

    if (asMatrix) {
      var matrix = math.matrix;
      return function evalArrayNode(scope, args, context) {
        return matrix((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        }));
      };
    } else {
      return function evalArrayNode(scope, args, context) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        });
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ArrayNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.items.length; i++) {
      var node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };
  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */


  ArrayNode.prototype.map = function (callback) {
    var items = [];

    for (var i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }

    return new ArrayNode(items);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */


  ArrayNode.prototype.clone = function () {
    return new ArrayNode(this.items.slice(0));
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype._toString = function (options) {
    var items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ArrayNode.prototype.toJSON = function () {
    return {
      mathjs: 'ArrayNode',
      items: this.items
    };
  };
  /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */


  ArrayNode.fromJSON = function (json) {
    return new ArrayNode(json.items);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype.toHTML = function (options) {
    var items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ArrayNode.prototype._toTex = function (options) {
    var s = '\\begin{bmatrix}';
    this.items.forEach(function (node) {
      if (node.items) {
        s += node.items.map(function (childNode) {
          return childNode.toTex(options);
        }).join('&');
      } else {
        s += node.toTex(options);
      } // new line


      s += '\\\\';
    });
    s += '\\end{bmatrix}';
    return s;
  };

  return ArrayNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAssignmentNode": () => (/* binding */ createAssignmentNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_access_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/access.js */ "./node_modules/mathjs/lib/esm/expression/node/utils/access.js");
/* harmony import */ var _utils_assign_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/assign.js */ "./node_modules/mathjs/lib/esm/expression/node/utils/assign.js");
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");






var name = 'AssignmentNode';
var dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
'Node'];
var createAssignmentNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    subset,
    matrix,
    Node
  } = _ref;
  var access = (0,_utils_access_js__WEBPACK_IMPORTED_MODULE_1__.accessFactory)({
    subset
  });
  var assign = (0,_utils_assign_js__WEBPACK_IMPORTED_MODULE_2__.assignFactory)({
    subset,
    matrix
  });
  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */

  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.object = object;
    this.index = value ? index : null;
    this.value = value || index; // validate input

    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(object) && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isAccessorNode)(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }

    if (this.index && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isIndexNode)(this.index)) {
      // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }

    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isNode)(this.value)) {
      throw new TypeError('Node expected as "value"');
    } // readonly property name


    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AssignmentNode.prototype = new Node();
  AssignmentNode.prototype.type = 'AssignmentNode';
  AssignmentNode.prototype.isAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AssignmentNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index ? this.index._compile(math, argNames) : null;

    var evalValue = this.value._compile(math, argNames);

    var name = this.object.name;

    if (!this.index) {
      // apply a variable to the scope, for example `a=2`
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(this.object)) {
        throw new TypeError('SymbolNode expected as object');
      }

      return function evalAssignmentNode(scope, args, context) {
        return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.setSafeProperty)(scope, name, evalValue(scope, args, context));
      };
    } else if (this.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      var prop = this.index.getObjectProperty();
      return function evalAssignmentNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.setSafeProperty)(object, prop, value);
      };
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(this.object)) {
      // update a matrix subset, for example `a[2]=3`
      return function evalAssignmentNode(scope, args, context) {
        var childObject = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

        (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.setSafeProperty)(scope, name, assign(childObject, index, value));
        return value;
      };
    } else {
      // isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      var evalParentObject = this.object.object._compile(math, argNames);

      if (this.object.index.isObjectProperty()) {
        var parentProp = this.object.index.getObjectProperty();
        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var childObject = (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.getSafeProperty)(parent, parentProp);
          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

          var value = evalValue(scope, args, context);
          (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.setSafeProperty)(parent, parentProp, assign(childObject, index, value));
          return value;
        };
      } else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        var evalParentIndex = this.object.index._compile(math, argNames);

        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

          var childObject = access(parent, parentIndex);
          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

          var value = evalValue(scope, args, context);
          assign(parent, parentIndex, assign(childObject, index, value));
          return value;
        };
      }
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);

    if (this.index) {
      callback(this.index, 'index', this);
    }

    callback(this.value, 'value', this);
  };
  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */


  AssignmentNode.prototype.map = function (callback) {
    var object = this._ifNode(callback(this.object, 'object', this));

    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

    var value = this._ifNode(callback(this.value, 'value', this));

    return new AssignmentNode(object, index, value);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */


  AssignmentNode.prototype.clone = function () {
    return new AssignmentNode(this.object, this.index, this.value);
  };
  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */


  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }

    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_5__.getPrecedence)(node, parenthesis);
    var exprPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_5__.getPrecedence)(node.value, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    var index = this.index ? this.index.toString(options) : '';
    var value = this.value.toString(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }

    return object + index + ' = ' + value;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AssignmentNode.prototype.toJSON = function () {
    return {
      mathjs: 'AssignmentNode',
      object: this.object,
      index: this.index,
      value: this.value
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */


  AssignmentNode.fromJSON = function (json) {
    return new AssignmentNode(json.object, json.index, json.value);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    var index = this.index ? this.index.toHTML(options) : '';
    var value = this.value.toHTML(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }

    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    var index = this.index ? this.index.toTex(options) : '';
    var value = this.value.toTex(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = "\\left(".concat(value, "\\right)");
    }

    return object + index + ':=' + value;
  };

  return AssignmentNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/BlockNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/BlockNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBlockNode": () => (/* binding */ createBlockNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'BlockNode';
var dependencies = ['ResultSet', 'Node'];
var createBlockNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    ResultSet,
    Node
  } = _ref;

  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input, copy blocks


    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      var node = block && block.node;
      var visible = block && block.visible !== undefined ? block.visible : true;
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
      return {
        node: node,
        visible: visible
      };
    });
  }

  BlockNode.prototype = new Node();
  BlockNode.prototype.type = 'BlockNode';
  BlockNode.prototype.isBlockNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  BlockNode.prototype._compile = function (math, argNames) {
    var evalBlocks = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(this.blocks, function (block) {
      return {
        evaluate: block.node._compile(math, argNames),
        visible: block.visible
      };
    });
    return function evalBlockNodes(scope, args, context) {
      var results = [];
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.forEach)(evalBlocks, function evalBlockNode(block) {
        var result = block.evaluate(scope, args, context);

        if (block.visible) {
          results.push(result);
        }
      });
      return new ResultSet(results);
    };
  };
  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  BlockNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };
  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */


  BlockNode.prototype.map = function (callback) {
    var blocks = [];

    for (var i = 0; i < this.blocks.length; i++) {
      var block = this.blocks[i];

      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }

    return new BlockNode(blocks);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */


  BlockNode.prototype.clone = function () {
    var blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });
    return new BlockNode(blocks);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  BlockNode.prototype.toJSON = function () {
    return {
      mathjs: 'BlockNode',
      blocks: this.blocks
    };
  };
  /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */


  BlockNode.fromJSON = function (json) {
    return new BlockNode(json.blocks);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };

  return BlockNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/ConditionalNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/ConditionalNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConditionalNode": () => (/* binding */ createConditionalNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");



var name = 'ConditionalNode';
var dependencies = ['Node'];
var createConditionalNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }

  ConditionalNode.prototype = new Node();
  ConditionalNode.prototype.type = 'ConditionalNode';
  ConditionalNode.prototype.isConditionalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConditionalNode.prototype._compile = function (math, argNames) {
    var evalCondition = this.condition._compile(math, argNames);

    var evalTrueExpr = this.trueExpr._compile(math, argNames);

    var evalFalseExpr = this.falseExpr._compile(math, argNames);

    return function evalConditionalNode(scope, args, context) {
      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };
  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */


  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */


  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toString(options);
    var conditionPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '(' + condition + ')';
    }

    var trueExpr = this.trueExpr.toString(options);
    var truePrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '(' + trueExpr + ')';
    }

    var falseExpr = this.falseExpr.toString(options);
    var falsePrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '(' + falseExpr + ')';
    }

    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConditionalNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConditionalNode',
      condition: this.condition,
      trueExpr: this.trueExpr,
      falseExpr: this.falseExpr
    };
  };
  /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */


  ConditionalNode.fromJSON = function (json) {
    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toHTML(options);
    var conditionPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var trueExpr = this.trueExpr.toHTML(options);
    var truePrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var falseExpr = this.falseExpr.toHTML(options);
    var falsePrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };
  /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */


  function testCondition(condition) {
    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
      return !!condition;
    }

    if (condition) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(condition)) {
        return !condition.isZero();
      }

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isComplex)(condition)) {
        return !!(condition.re || condition.im);
      }

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isUnit)(condition)) {
        return !!condition.value;
      }
    }

    if (condition === null || condition === undefined) {
      return false;
    }

    throw new TypeError('Unsupported type of condition "' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(condition) + '"');
  }

  return ConditionalNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/ConstantNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/ConstantNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConstantNode": () => (/* binding */ createConstantNode)
/* harmony export */ });
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'ConstantNode';
var dependencies = ['Node'];
var createConstantNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.value = value;
  }

  ConstantNode.prototype = new Node();
  ConstantNode.prototype.type = 'ConstantNode';
  ConstantNode.prototype.isConstantNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConstantNode.prototype._compile = function (math, argNames) {
    var value = this.value;
    return function evalConstantNode() {
      return value;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */


  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */


  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toString = function (options) {
    return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.value, options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype.toHTML = function (options) {
    var value = this._toString(options);

    switch ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf)(this.value)) {
      case 'number':
      case 'BigNumber':
      case 'Fraction':
        return '<span class="math-number">' + value + '</span>';

      case 'string':
        return '<span class="math-string">' + value + '</span>';

      case 'boolean':
        return '<span class="math-boolean">' + value + '</span>';

      case 'null':
        return '<span class="math-null-symbol">' + value + '</span>';

      case 'undefined':
        return '<span class="math-undefined">' + value + '</span>';

      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConstantNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConstantNode',
      value: this.value
    };
  };
  /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */


  ConstantNode.fromJSON = function (json) {
    return new ConstantNode(json.value);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toTex = function (options) {
    var value = this._toString(options);

    switch ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf)(this.value)) {
      case 'string':
        return '\\mathtt{' + (0,_utils_latex_js__WEBPACK_IMPORTED_MODULE_3__.escapeLatex)(value) + '}';

      case 'number':
      case 'BigNumber':
        {
          if (!isFinite(this.value)) {
            return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
          }

          var index = value.toLowerCase().indexOf('e');

          if (index !== -1) {
            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
          }
        }
        return value;

      case 'Fraction':
        return this.value.toLatex();

      default:
        return value;
    }
  };

  return ConstantNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFunctionAssignmentNode": () => (/* binding */ createFunctionAssignmentNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _keywords_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../keywords.js */ "./node_modules/mathjs/lib/esm/expression/keywords.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");








var name = 'FunctionAssignmentNode';
var dependencies = ['typed', 'Node'];
var createFunctionAssignmentNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Node
  } = _ref;

  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (name in _keywords_js__WEBPACK_IMPORTED_MODULE_2__.keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any';
    });
    this.expr = expr;
  }

  FunctionAssignmentNode.prototype = new Node();
  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
    var childArgNames = Object.create(argNames);
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.forEach)(this.params, function (param) {
      childArgNames[param] = true;
    }); // compile the function expression with the child args

    var evalExpr = this.expr._compile(math, childArgNames);

    var name = this.name;
    var params = this.params;
    var signature = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.join)(this.types, ',');
    var syntax = name + '(' + (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.join)(this.params, ', ') + ')';
    return function evalFunctionAssignmentNode(scope, args, context) {
      var signatures = {};

      signatures[signature] = function () {
        var childArgs = Object.create(args);

        for (var i = 0; i < params.length; i++) {
          childArgs[params[i]] = arguments[i];
        }

        return evalExpr(scope, childArgs, context);
      };

      var fn = typed(name, signatures);
      fn.syntax = syntax;
      (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.setSafeProperty)(scope, name, fn);
      return fn;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };
  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */


  FunctionAssignmentNode.prototype.map = function (callback) {
    var expr = this._ifNode(callback(this.expr, 'expr', this));

    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };
  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */


  function needParenthesis(node, parenthesis) {
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_5__.getPrecedence)(node, parenthesis);
    var exprPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_5__.getPrecedence)(node.expr, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toString(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }

    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionAssignmentNode.prototype.toJSON = function () {
    var types = this.types;
    return {
      mathjs: 'FunctionAssignmentNode',
      name: this.name,
      params: this.params.map(function (param, index) {
        return {
          name: param,
          type: types[index]
        };
      }),
      expr: this.expr
    };
  };
  /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.fromJSON = function (json) {
    return new FunctionAssignmentNode(json.name, json.params, json.expr);
  };
  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var params = [];

    for (var i = 0; i < this.params.length; i++) {
      params.push('<span class="math-symbol math-parameter">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.escape)(this.params[i]) + '</span>');
    }

    var expr = this.expr.toHTML(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return '<span class="math-function">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.escape)(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };
  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toTex(options);

    if (needParenthesis(this, parenthesis)) {
      expr = "\\left(".concat(expr, "\\right)");
    }

    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(_utils_latex_js__WEBPACK_IMPORTED_MODULE_7__.toSymbol).join(',') + '\\right):=' + expr;
  };

  return FunctionAssignmentNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/FunctionNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/FunctionNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFunctionNode": () => (/* binding */ createFunctionNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }








var name = 'FunctionNode';
var dependencies = ['math', 'Node', 'SymbolNode'];
var createFunctionNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    math,
    Node,
    SymbolNode
  } = _ref;

  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    } // validate input


    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(fn)) throw new TypeError('Node expected as parameter "fn"');

    if (!Array.isArray(args) || !args.every(_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.fn = fn;
    this.args = args || []; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  FunctionNode.prototype = new Node();
  FunctionNode.prototype.type = 'FunctionNode';
  FunctionNode.prototype.isFunctionNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode');
    } // compile arguments


    var evalArgs = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      var _name = this.fn.name;
      var fn = _name in math ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(math, _name) : undefined;
      var isRaw = typeof fn === 'function' && fn.rawArgs === true;

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        var rawArgs = this.args;
        return function evalFunctionNode(scope, args, context) {
          return (_name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(scope, _name) : fn)(rawArgs, math, _extends({}, scope, args));
        };
      } else {
        // "regular" evaluation
        if (evalArgs.length === 1) {
          var evalArg0 = evalArgs[0];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(scope, _name) : fn)(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          var _evalArg = evalArgs[0];
          var evalArg1 = evalArgs[1];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(scope, _name) : fn).apply(null, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      }
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isAccessorNode)(this.fn) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isIndexNode)(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      var evalObject = this.fn.object._compile(math, argNames);

      var prop = this.fn.index.getObjectProperty();
      var _rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.validateSafeMethod)(object, prop);
        var isRaw = object[prop] && object[prop].rawArgs;
        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // "raw" evaluation
        : object[prop].apply(object, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    } else {
      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      var evalFn = this.fn._compile(math, argNames);

      var _rawArgs2 = this.args;
      return function evalFunctionNode(scope, args, context) {
        var fn = evalFn(scope, args, context);
        var isRaw = fn && fn.rawArgs;
        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // "raw" evaluation
        : fn.apply(fn, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionNode.prototype.forEach = function (callback) {
    callback(this.fn, 'fn', this);

    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */


  FunctionNode.prototype.map = function (callback) {
    var fn = this._ifNode(callback(this.fn, 'fn', this));

    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new FunctionNode(fn, args);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */


  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  }; // backup Node's toString function
  // @private


  var nodeToString = FunctionNode.prototype.toString;
  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */

  FunctionNode.prototype.toString = function (options) {
    var customString;
    var name = this.fn.toString(options);

    if (options && typeof options.handler === 'object' && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_4__.hasOwnProperty)(options.handler, name)) {
      // callback is a map of callback functions
      customString = options.handler[name](this, options);
    }

    if (typeof customString !== 'undefined') {
      return customString;
    } // fall back to Node's toString


    return nodeToString.call(this, options);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toString = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toString(options);
    });
    var fn = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionAssignmentNode)(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

    return fn + '(' + args.join(', ') + ')';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionNode.prototype.toJSON = function () {
    return {
      mathjs: 'FunctionNode',
      fn: this.fn,
      args: this.args
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */


  FunctionNode.fromJSON = function (json) {
    return new FunctionNode(json.fn, json.args);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype.toHTML = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toHTML(options);
    }); // format the arguments like "add(2, 4.2)"

    return '<span class="math-function">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/


  function expandTemplate(template, node, options) {
    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)

    var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
    var inputPos = 0; // position in the input string

    var match;

    while ((match = regex.exec(template)) !== null) {
      // go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;

      if (match[0] === '$$') {
        // escaped dollar sign
        latex += '$';
        inputPos++;
      } else {
        // template parameter
        inputPos += match[0].length;
        var property = node[match[1]];

        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }

        if (match[2] === undefined) {
          // no square brackets
          switch (typeof property) {
            case 'string':
              latex += property;
              break;

            case 'object':
              if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(property)) {
                latex += property.toTex(options);
              } else if (Array.isArray(property)) {
                // make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(arg)) {
                    return arg.toTex(options);
                  }

                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              } else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }

              break;

            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        } else {
          // with square brackets
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          } else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }

    latex += template.slice(inputPos); // append rest of the template

    return latex;
  } // backup Node's toTex function
  // @private


  var nodeToTex = FunctionNode.prototype.toTex;
  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */

  FunctionNode.prototype.toTex = function (options) {
    var customTex;

    if (options && typeof options.handler === 'object' && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_4__.hasOwnProperty)(options.handler, this.name)) {
      // callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    } // fall back to Node's toTex


    return nodeToTex.call(this, options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toTex = function (options) {
    var args = this.args.map(function (arg) {
      // get LaTeX of the arguments
      return arg.toTex(options);
    });
    var latexConverter;

    if (_utils_latex_js__WEBPACK_IMPORTED_MODULE_6__.latexFunctions[this.name]) {
      latexConverter = _utils_latex_js__WEBPACK_IMPORTED_MODULE_6__.latexFunctions[this.name];
    } // toTex property on the function itself


    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {
      // .toTex is a callback function
      latexConverter = math[this.name].toTex;
    }

    var customToTex;

    switch (typeof latexConverter) {
      case 'function':
        // a callback function
        customToTex = latexConverter(this, options);
        break;

      case 'string':
        // a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;

      case 'object':
        // an object with different "converters" for different numbers of arguments
        switch (typeof latexConverter[args.length]) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;

          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }

    }

    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }

    return expandTemplate(_utils_latex_js__WEBPACK_IMPORTED_MODULE_6__.defaultTemplate, this, options);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };

  return FunctionNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/IndexNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/IndexNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIndexNode": () => (/* binding */ createIndexNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");





var name = 'IndexNode';
var dependencies = ['Range', 'Node', 'size'];
var createIndexNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Range,
    Node,
    size
  } = _ref;

  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */
  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false; // validate input

    if (!Array.isArray(dimensions) || !dimensions.every(_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }

    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    }
  }

  IndexNode.prototype = new Node();
  IndexNode.prototype.type = 'IndexNode';
  IndexNode.prototype.isIndexNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  IndexNode.prototype._compile = function (math, argNames) {
    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)
    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value
    // optimization for a simple object property
    var evalDimensions = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(this.dimensions, function (range, i) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isRangeNode)(range)) {
        if (range.needsEnd()) {
          // create a range containing end (like '4:end')
          var childArgNames = Object.create(argNames);
          childArgNames.end = true;

          var evalStart = range.start._compile(math, childArgNames);

          var evalEnd = range.end._compile(math, childArgNames);

          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            var s = size(context).valueOf();
            var childArgs = Object.create(args);
            childArgs.end = s[i];
            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
          };
        } else {
          // create range
          var _evalStart = range.start._compile(math, argNames);

          var _evalEnd = range.end._compile(math, argNames);

          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
            return 1;
          };

          return function evalDimension(scope, args, context) {
            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
          };
        }
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(range) && range.name === 'end') {
        // SymbolNode 'end'
        var _childArgNames = Object.create(argNames);

        _childArgNames.end = true;

        var evalRange = range._compile(math, _childArgNames);

        return function evalDimension(scope, args, context) {
          var s = size(context).valueOf();
          var childArgs = Object.create(args);
          childArgs.end = s[i];
          return evalRange(scope, childArgs, context);
        };
      } else {
        // ConstantNode
        var _evalRange = range._compile(math, argNames);

        return function evalDimension(scope, args, context) {
          return _evalRange(scope, args, context);
        };
      }
    });
    var index = (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_3__.getSafeProperty)(math, 'index');
    return function evalIndexNode(scope, args, context) {
      var dimensions = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.map)(evalDimensions, function (evalDimension) {
        return evalDimension(scope, args, context);
      });
      return index(...dimensions);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  IndexNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };
  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */


  IndexNode.prototype.map = function (callback) {
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }

    return new IndexNode(dimensions, this.dotNotation);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */


  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0), this.dotNotation);
  };
  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */


  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
  };
  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */


  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  IndexNode.prototype.toJSON = function () {
    return {
      mathjs: 'IndexNode',
      dimensions: this.dimensions,
      dotNotation: this.dotNotation
    };
  };
  /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */


  IndexNode.fromJSON = function (json) {
    return new IndexNode(json.dimensions, json.dotNotation);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this.dimensions[i].toHTML();
    }

    if (this.dotNotation) {
      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_4__.escape)(this.getObjectProperty()) + '</span>';
    } else {
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toTex = function (options) {
    var dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });
    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
  }; // helper function to create a Range from start, step and end


  function createRange(start, end, step) {
    return new Range((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(start) ? start.toNumber() : start, (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(end) ? end.toNumber() : end, (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(step) ? step.toNumber() : step);
  }

  return IndexNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/Node.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/Node.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNode": () => (/* binding */ createNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _keywords_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../keywords.js */ "./node_modules/mathjs/lib/esm/expression/keywords.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'Node';
var dependencies = ['mathWithTransform'];
var createNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    mathWithTransform
  } = _ref;

  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */


  Node.prototype.evaluate = function (scope) {
    return this.compile().evaluate(scope);
  };

  Node.prototype.type = 'Node';
  Node.prototype.isNode = true;
  Node.prototype.comment = '';
  /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */

  Node.prototype.compile = function () {
    var expr = this._compile(mathWithTransform, {});

    var args = {};
    var context = null;

    function evaluate(scope) {
      var s = scope || {};

      _validateScope(s);

      return expr(s, args, context);
    }

    return {
      evaluate
    };
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  Node.prototype._compile = function (math, argNames) {
    throw new Error('Method _compile should be implemented by type ' + this.type);
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };
  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };
  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */


  Node.prototype._ifNode = function (node) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(node)) {
      throw new TypeError('Callback function must return a Node');
    }

    return node;
  };
  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */


  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    // eslint-disable-next-line
    callback(this, null, null); // recursively traverse over all childs of a node

    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);

        _traverse(child, callback);
      });
    }

    _traverse(this, callback);
  };
  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */


  Node.prototype.transform = function (callback) {
    function _transform(child, path, parent) {
      var replacement = callback(child, path, parent);

      if (replacement !== child) {
        // stop iterating when the node is replaced
        return replacement;
      }

      return child.map(_transform);
    }

    return _transform(this, null, null);
  };
  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */


  Node.prototype.filter = function (callback) {
    var nodes = [];
    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });
    return nodes;
  };
  /**
   * Create a shallow clone of this node
   * @return {Node}
   */


  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };
  /**
   * Create a deep clone of this node
   * @return {Node}
   */


  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };
  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */


  Node.prototype.equals = function (other) {
    return other ? (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.deepStrictEqual)(this, other) : false;
  };
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toString = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toString(options);
  };
  /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */


  Node.prototype.toJSON = function () {
    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
  };
  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toHTML = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this.toHTML(options);
  };
  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */


  Node.prototype._toString = function () {
    // must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };
  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toTex = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toTex(options);
  };
  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */


  Node.prototype._toTex = function (options) {
    // must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };
  /**
   * Helper used by `to...` functions.
   */


  Node.prototype._getCustomString = function (options) {
    if (options && typeof options === 'object') {
      switch (typeof options.handler) {
        case 'object':
        case 'undefined':
          return;

        case 'function':
          return options.handler(this, options);

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  Node.prototype.getIdentifier = function () {
    return this.type;
  };
  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/


  Node.prototype.getContent = function () {
    return this;
  };
  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */


  function _validateScope(scope) {
    for (var symbol in scope) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(scope, symbol)) {
        if (symbol in _keywords_js__WEBPACK_IMPORTED_MODULE_3__.keywords) {
          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
      }
    }
  }

  return Node;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/ObjectNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/ObjectNode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createObjectNode": () => (/* binding */ createObjectNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");





var name = 'ObjectNode';
var dependencies = ['Node'];
var createObjectNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.properties = properties || {}; // validate input

    if (properties) {
      if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {
        return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(properties[key]);
      })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }

  ObjectNode.prototype = new Node();
  ObjectNode.prototype.type = 'ObjectNode';
  ObjectNode.prototype.isObjectNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ObjectNode.prototype._compile = function (math, argNames) {
    var evalEntries = {};

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null}
        var stringifiedKey = (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.stringify)(key);
        var parsedKey = JSON.parse(stringifiedKey);

        if (!(0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_4__.isSafeProperty)(this.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }

        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
      }
    }

    return function evalObjectNode(scope, args, context) {
      var obj = {};

      for (var _key in evalEntries) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(evalEntries, _key)) {
          obj[_key] = evalEntries[_key](scope, args, context);
        }
      }

      return obj;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ObjectNode.prototype.forEach = function (callback) {
    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        callback(this.properties[key], 'properties[' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.stringify)(key) + ']', this);
      }
    }
  };
  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */


  ObjectNode.prototype.map = function (callback) {
    var properties = {};

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.stringify)(key) + ']', this));
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */


  ObjectNode.prototype.clone = function () {
    var properties = {};

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        properties[key] = this.properties[key];
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype._toString = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        entries.push((0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.stringify)(key) + ': ' + this.properties[key].toString(options));
      }
    }

    return '{' + entries.join(', ') + '}';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ObjectNode.prototype.toJSON = function () {
    return {
      mathjs: 'ObjectNode',
      properties: this.properties
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */


  ObjectNode.fromJSON = function (json) {
    return new ObjectNode(json.properties);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype.toHTML = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        entries.push('<span class="math-symbol math-property">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.escape)(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }

    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ObjectNode.prototype._toTex = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.properties, key)) {
        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
      }
    }

    return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
  };

  return ObjectNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/OperatorNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/OperatorNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createOperatorNode": () => (/* binding */ createOperatorNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");







var name = 'OperatorNode';
var dependencies = ['Node'];
var createOperatorNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
  function OperatorNode(op, fn, args, implicit) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }

    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }

    if (!Array.isArray(args) || !args.every(_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.implicit = implicit === true;
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }

  OperatorNode.prototype = new Node();
  OperatorNode.prototype.type = 'OperatorNode';
  OperatorNode.prototype.isOperatorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  OperatorNode.prototype._compile = function (math, argNames) {
    // validate fn
    if (typeof this.fn !== 'string' || !(0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_2__.isSafeMethod)(math, this.fn)) {
      if (!math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      } else {
        throw new Error('No access to function "' + this.fn + '"');
      }
    }

    var fn = (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_2__.getSafeProperty)(math, this.fn);
    var evalArgs = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.map)(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if (evalArgs.length === 1) {
      var evalArg0 = evalArgs[0];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context));
      };
    } else if (evalArgs.length === 2) {
      var _evalArg = evalArgs[0];
      var evalArg1 = evalArgs[1];
      return function evalOperatorNode(scope, args, context) {
        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
      };
    } else {
      return function evalOperatorNode(scope, args, context) {
        return fn.apply(null, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.map)(evalArgs, function (evalArg) {
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  OperatorNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  OperatorNode.prototype.map = function (callback) {
    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new OperatorNode(this.op, this.fn, args, this.implicit);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */


  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
  };
  /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */


  OperatorNode.prototype.isUnary = function () {
    return this.args.length === 1;
  };
  /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */


  OperatorNode.prototype.isBinary = function () {
    return this.args.length === 2;
  };
  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */


  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    // precedence of the root OperatorNode
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getPrecedence)(root, parenthesis);
    var associativity = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getAssociativity)(root, parenthesis);

    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
      return args.map(function (arg) {
        switch (arg.getContent().type) {
          // Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;

          default:
            return true;
        }
      });
    }

    var result;

    switch (args.length) {
      case 0:
        result = [];
        break;

      case 1:
        // unary operators
        {
          // precedence of the operand
          var operandPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getPrecedence)(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

          if (latex && operandPrecedence !== null) {
            var operandIdentifier;
            var rootIdentifier;

            if (parenthesis === 'keep') {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              // Ignore Parenthesis Nodes when not in 'keep' mode
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }

            if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[precedence][rootIdentifier].latexLeftParens === false) {
              result = [false];
              break;
            }

            if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[operandPrecedence][operandIdentifier].latexParens === false) {
              result = [false];
              break;
            }
          }

          if (operandPrecedence === null) {
            // if the operand has no defined precedence, no parens are needed
            result = [false];
            break;
          }

          if (operandPrecedence <= precedence) {
            // if the operands precedence is lower, parens are needed
            result = [true];
            break;
          } // otherwise, no parens needed


          result = [false];
        }
        break;

      case 2:
        // binary operators
        {
          var lhsParens; // left hand side needs parenthesis?
          // precedence of the left hand side

          var lhsPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getPrecedence)(args[0], parenthesis); // is the root node associative with the left hand side

          var assocWithLhs = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.isAssociativeWith)(root, args[0], parenthesis);

          if (lhsPrecedence === null) {
            // if the left hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            lhsParens = false;
          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
            // In case of equal precedence, if the root node is left associative
            // parens are **never** necessary for the left hand side.
            // If it is right associative however, parens are necessary
            // if the root node isn't associative with the left hand side
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }

          var rhsParens; // right hand side needs parenthesis?
          // precedence of the right hand side

          var rhsPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getPrecedence)(args[1], parenthesis); // is the root node associative with the right hand side?

          var assocWithRhs = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.isAssociativeWith)(root, args[1], parenthesis);

          if (rhsPrecedence === null) {
            // if the right hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            rhsParens = false;
          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
            // In case of equal precedence, if the root node is right associative
            // parens are **never** necessary for the right hand side.
            // If it is left associative however, parens are necessary
            // if the root node isn't associative with the right hand side
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          } // handle special cases for LaTeX, where some of the parentheses aren't needed


          if (latex) {
            var _rootIdentifier;

            var lhsIdentifier;
            var rhsIdentifier;

            if (parenthesis === 'keep') {
              _rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              // Ignore ParenthesisNodes when not in 'keep' mode
              _rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }

            if (lhsPrecedence !== null) {
              if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[precedence][_rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }

              if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }

            if (rhsPrecedence !== null) {
              if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[precedence][_rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }

              if (_operators_js__WEBPACK_IMPORTED_MODULE_4__.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }

          result = [lhsParens, rhsParens];
        }
        break;

      default:
        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
          result = args.map(function (arg) {
            var argPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getPrecedence)(arg, parenthesis);
            var assocWithArg = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.isAssociativeWith)(root, arg, parenthesis);
            var argAssociativity = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getAssociativity)(arg, parenthesis);

            if (argPrecedence === null) {
              // if the argument has no defined precedence, no parens are needed
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }

            return false;
          });
        }

        break;
    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    // printed.


    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
      result = args.map(function (arg, index) {
        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

        if (result[index] || isParenthesisNode) {
          // put in parenthesis?
          return true;
        }

        return false;
      });
    }

    return result;
  }
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getAssociativity)(this, parenthesis);
      var operand = args[0].toString(options);

      if (parens[0]) {
        operand = '(' + operand + ')';
      } // for example for "not", we want a space between operand and argument


      var opIsNamed = /[a-zA-Z]+/.test(this.op);

      if (assoc === 'right') {
        // prefix operator
        return this.op + (opIsNamed ? ' ' : '') + operand;
      } else if (assoc === 'left') {
        // postfix
        return operand + (opIsNamed ? ' ' : '') + this.op;
      } // fall back to postfix


      return operand + this.op;
    } else if (args.length === 2) {
      var lhs = args[0].toString(options); // left hand side

      var rhs = args[1].toString(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + ' ' + rhs;
      }

      return lhs + ' ' + this.op + ' ' + rhs;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '(' + arg + ')';
        }

        return arg;
      });

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return stringifiedArgs.join(' ');
      }

      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      // fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  OperatorNode.prototype.toJSON = function () {
    return {
      mathjs: 'OperatorNode',
      op: this.op,
      fn: this.fn,
      args: this.args,
      implicit: this.implicit
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */


  OperatorNode.fromJSON = function (json) {
    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
  };
  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getAssociativity)(this, parenthesis);
      var operand = args[0].toHTML(options);

      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (assoc === 'right') {
        // prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.op) + '</span>' + operand;
      } else {
        // postfix when assoc === 'left' or undefined
        return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.op) + '</span>';
      }
    } else if (args.length === 2) {
      // binary operatoes
      var lhs = args[0].toHTML(options); // left hand side

      var rhs = args[1].toHTML(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
      }

      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.op) + '</span>' + rhs;
    } else {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return arg;
      });

      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
        }

        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.op) + '</span>');
      } else {
        // fallback to formatting as a function call
        return '<span class="math-function">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    var op = _utils_latex_js__WEBPACK_IMPORTED_MODULE_6__.latexOperators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

    if (args.length === 1) {
      // unary operators
      var assoc = (0,_operators_js__WEBPACK_IMPORTED_MODULE_4__.getAssociativity)(this, parenthesis);
      var operand = args[0].toTex(options);

      if (parens[0]) {
        operand = "\\left(".concat(operand, "\\right)");
      }

      if (assoc === 'right') {
        // prefix operator
        return op + operand;
      } else if (assoc === 'left') {
        // postfix operator
        return operand + op;
      } // fall back to postfix


      return operand + op;
    } else if (args.length === 2) {
      // binary operators
      var lhs = args[0]; // left hand side

      var lhsTex = lhs.toTex(options);

      if (parens[0]) {
        lhsTex = "\\left(".concat(lhsTex, "\\right)");
      }

      var rhs = args[1]; // right hand side

      var rhsTex = rhs.toTex(options);

      if (parens[1]) {
        rhsTex = "\\left(".concat(rhsTex, "\\right)");
      } // handle some exceptions (due to the way LaTeX works)


      var lhsIdentifier;

      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      } else {
        // Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }

      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          // op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';

          switch (lhsIdentifier) {
            case 'ConditionalNode': //

            case 'OperatorNode:divide':
              lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }

          break;

        case 'OperatorNode:multiply':
          if (this.implicit && implicit === 'hide') {
            return lhsTex + '~' + rhsTex;
          }

      }

      return lhsTex + op + rhsTex;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);

        if (parens[index]) {
          arg = "\\left(".concat(arg, "\\right)");
        }

        return arg;
      });

      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
        return texifiedArgs.join('~');
      }

      return texifiedArgs.join(op);
    } else {
      // fall back to formatting as a function call
      // as this is a fallback, it doesn't use
      // fancy function names
      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
        return arg.toTex(options);
      }).join(',') + '\\right)';
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };

  return OperatorNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createParenthesisNode": () => (/* binding */ createParenthesisNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'ParenthesisNode';
var dependencies = ['Node'];
var createParenthesisNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }

    this.content = content;
  }

  ParenthesisNode.prototype = new Node();
  ParenthesisNode.prototype.type = 'ParenthesisNode';
  ParenthesisNode.prototype.isParenthesisNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ParenthesisNode.prototype._compile = function (math, argNames) {
    return this.content._compile(math, argNames);
  };
  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/


  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };
  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */


  ParenthesisNode.prototype.map = function (callback) {
    var content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */


  ParenthesisNode.prototype.clone = function () {
    return new ParenthesisNode(this.content);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toString = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '(' + this.content.toString(options) + ')';
    }

    return this.content.toString(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ParenthesisNode.prototype.toJSON = function () {
    return {
      mathjs: 'ParenthesisNode',
      content: this.content
    };
  };
  /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */


  ParenthesisNode.fromJSON = function (json) {
    return new ParenthesisNode(json.content);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype.toHTML = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return this.content.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toTex = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return "\\left(".concat(this.content.toTex(options), "\\right)");
    }

    return this.content.toTex(options);
  };

  return ParenthesisNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/RangeNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/RangeNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRangeNode": () => (/* binding */ createRangeNode)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");



var name = 'RangeNode';
var dependencies = ['Node'];
var createRangeNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate inputs


    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(start)) throw new TypeError('Node expected');
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(end)) throw new TypeError('Node expected');
    if (step && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');
    this.start = start; // included lower-bound

    this.end = end; // included upper-bound

    this.step = step || null; // optional step
  }

  RangeNode.prototype = new Node();
  RangeNode.prototype.type = 'RangeNode';
  RangeNode.prototype.isRangeNode = true;
  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */

  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    var endSymbols = this.filter(function (node) {
      return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(node) && node.name === 'end';
    });
    return endSymbols.length > 0;
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  RangeNode.prototype._compile = function (math, argNames) {
    var range = math.range;

    var evalStart = this.start._compile(math, argNames);

    var evalEnd = this.end._compile(math, argNames);

    if (this.step) {
      var evalStep = this.step._compile(math, argNames);

      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
      };
    } else {
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);

    if (this.step) {
      callback(this.step, 'step', this);
    }
  };
  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */


  RangeNode.prototype.map = function (callback) {
    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */


  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };
  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */


  function calculateNecessaryParentheses(node, parenthesis) {
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(node, parenthesis);
    var parens = {};
    var startPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(node.start, parenthesis);
    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

    if (node.step) {
      var stepPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(node.step, parenthesis);
      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
    }

    var endPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(node.end, parenthesis);
    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
    return parens;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toString(options);

    if (parens.start) {
      start = '(' + start + ')';
    }

    str = start;

    if (this.step) {
      var step = this.step.toString(options);

      if (parens.step) {
        step = '(' + step + ')';
      }

      str += ':' + step;
    }

    var end = this.end.toString(options);

    if (parens.end) {
      end = '(' + end + ')';
    }

    str += ':' + end;
    return str;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RangeNode.prototype.toJSON = function () {
    return {
      mathjs: 'RangeNode',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */


  RangeNode.fromJSON = function (json) {
    return new RangeNode(json.start, json.end, json.step);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toHTML(options);

    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str = start;

    if (this.step) {
      var step = this.step.toHTML(options);

      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }

    var end = this.end.toHTML(options);

    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str += '<span class="math-operator math-range-operator">:</span>' + end;
    return str;
  };
  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);
    var str = this.start.toTex(options);

    if (parens.start) {
      str = "\\left(".concat(str, "\\right)");
    }

    if (this.step) {
      var step = this.step.toTex(options);

      if (parens.step) {
        step = "\\left(".concat(step, "\\right)");
      }

      str += ':' + step;
    }

    var end = this.end.toTex(options);

    if (parens.end) {
      end = "\\left(".concat(end, "\\right)");
    }

    str += ':' + end;
    return str;
  };

  return RangeNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/RelationalNode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/RelationalNode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRelationalNode": () => (/* binding */ createRelationalNode)
/* harmony export */ });
/* harmony import */ var _operators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/esm/expression/operators.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");





var name = 'RelationalNode';
var dependencies = ['Node'];
var createRelationalNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Node
  } = _ref;

  /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */
  function RelationalNode(conditionals, params) {
    if (!(this instanceof RelationalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
    this.conditionals = conditionals;
    this.params = params;
  }

  RelationalNode.prototype = new Node();
  RelationalNode.prototype.type = 'RelationalNode';
  RelationalNode.prototype.isRelationalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RelationalNode.prototype._compile = function (math, argNames) {
    var self = this;
    var compiled = this.params.map(p => p._compile(math, argNames));
    return function evalRelationalNode(scope, args, context) {
      var evalLhs;
      var evalRhs = compiled[0](scope, args, context);

      for (var i = 0; i < self.conditionals.length; i++) {
        evalLhs = evalRhs;
        evalRhs = compiled[i + 1](scope, args, context);
        var condFn = (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.getSafeProperty)(math, self.conditionals[i]);

        if (!condFn(evalLhs, evalRhs)) {
          return false;
        }
      }

      return true;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RelationalNode.prototype.forEach = function (callback) {
    this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);
  };
  /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */


  RelationalNode.prototype.map = function (callback) {
    return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */


  RelationalNode.prototype.clone = function () {
    return new RelationalNode(this.conditionals, this.params);
  };
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RelationalNode.prototype.toJSON = function () {
    return {
      mathjs: 'RelationalNode',
      conditionals: this.conditionals,
      params: this.params
    };
  };
  /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */


  RelationalNode.fromJSON = function (json) {
    return new RelationalNode(json.conditionals, json.params);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.escape)(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0,_operators_js__WEBPACK_IMPORTED_MODULE_2__.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
    });
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += _utils_latex_js__WEBPACK_IMPORTED_MODULE_4__.latexOperators[this.conditionals[i]] + paramStrings[i + 1];
    }

    return ret;
  };

  return RelationalNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/SymbolNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/SymbolNode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSymbolNode": () => (/* binding */ createSymbolNode)
/* harmony export */ });
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_latex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/esm/utils/latex.js");




var name = 'SymbolNode';
var dependencies = ['math', '?Unit', 'Node'];
var createSymbolNode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    math,
    Unit,
    Node
  } = _ref;

  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit(name) {
    return Unit ? Unit.isValuelessUnit(name) : false;
  }
  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */


  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    this.name = name;
  }

  SymbolNode.prototype = new Node();
  SymbolNode.prototype.type = 'SymbolNode';
  SymbolNode.prototype.isSymbolNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  SymbolNode.prototype._compile = function (math, argNames) {
    var name = this.name;

    if (argNames[name] === true) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return function (scope, args, context) {
        return args[name];
      };
    } else if (name in math) {
      return function (scope, args, context) {
        return name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.getSafeProperty)(scope, name) : (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.getSafeProperty)(math, name);
      };
    } else {
      var isUnit = isValuelessUnit(name);
      return function (scope, args, context) {
        return name in scope ? (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_1__.getSafeProperty)(scope, name) : isUnit ? new Unit(null, name) : undef(name);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  SymbolNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */


  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */


  function undef(name) {
    throw new Error('Undefined symbol ' + name);
  }
  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */


  SymbolNode.prototype.clone = function () {
    return new SymbolNode(this.name);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toString = function (options) {
    return this.name;
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype.toHTML = function (options) {
    var name = (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.escape)(this.name);

    if (name === 'true' || name === 'false') {
      return '<span class="math-symbol math-boolean">' + name + '</span>';
    } else if (name === 'i') {
      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
    } else if (name === 'Infinity') {
      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
    } else if (name === 'NaN') {
      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
    } else if (name === 'null') {
      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
    } else if (name === 'undefined') {
      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
    }

    return '<span class="math-symbol">' + name + '</span>';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  SymbolNode.prototype.toJSON = function () {
    return {
      mathjs: 'SymbolNode',
      name: this.name
    };
  };
  /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */


  SymbolNode.fromJSON = function (json) {
    return new SymbolNode(json.name);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toTex = function (options) {
    var isUnit = false;

    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
      isUnit = true;
    }

    var symbol = (0,_utils_latex_js__WEBPACK_IMPORTED_MODULE_3__.toSymbol)(this.name, isUnit);

    if (symbol[0] === '\\') {
      // no space needed if the symbol starts with '\'
      return symbol;
    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


    return ' ' + symbol;
  };

  return SymbolNode;
}, {
  isClass: true,
  isNode: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/utils/access.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/utils/access.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "accessFactory": () => (/* binding */ accessFactory)
/* harmony export */ });
/* harmony import */ var _transform_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../transform/utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");


function accessFactory(_ref) {
  var {
    subset
  } = _ref;

  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index);
      } else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      } else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }

        return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_0__.getSafeProperty)(object, index.getObjectProperty());
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0,_transform_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_1__.errorTransform)(err);
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/node/utils/assign.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/node/utils/assign.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assignFactory": () => (/* binding */ assignFactory)
/* harmony export */ });
/* harmony import */ var _transform_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../transform/utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");


function assignFactory(_ref) {
  var {
    subset,
    matrix
  } = _ref;

  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        // we use matrix.subset here instead of the function subset because we must not clone the contents
        return matrix(object).subset(index, value).valueOf();
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index, value);
      } else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      } else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }

        (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_0__.setSafeProperty)(object, index.getObjectProperty(), value);
        return object;
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0,_transform_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_1__.errorTransform)(err);
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/operators.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/operators.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "properties": () => (/* binding */ properties),
/* harmony export */   "getPrecedence": () => (/* binding */ getPrecedence),
/* harmony export */   "getAssociativity": () => (/* binding */ getAssociativity),
/* harmony export */   "isAssociativeWith": () => (/* binding */ isAssociativeWith)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument

var properties = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional

  }
}, {
  // logical or
  'OperatorNode:or': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical xor
  'OperatorNode:xor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical and
  'OperatorNode:and': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise or
  'OperatorNode:bitOr': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise xor
  'OperatorNode:bitXor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise and
  'OperatorNode:bitAnd': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // relational operators
  'OperatorNode:equal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:unequal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smaller': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:larger': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smallerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:largerEq': {
    associativity: 'left',
    associativeWith: []
  },
  RelationalNode: {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitshift operators
  'OperatorNode:leftShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightArithShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightLogShift': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unit conversion
  'OperatorNode:to': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  'OperatorNode:add': {
    associativity: 'left',
    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
  },
  'OperatorNode:subtract': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  'OperatorNode:multiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
  },
  'OperatorNode:divide': {
    associativity: 'left',
    associativeWith: [],
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX

  },
  'OperatorNode:dotMultiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
  },
  'OperatorNode:dotDivide': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:mod': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unary prefix operators
  'OperatorNode:unaryPlus': {
    associativity: 'right'
  },
  'OperatorNode:unaryMinus': {
    associativity: 'right'
  },
  'OperatorNode:bitNot': {
    associativity: 'right'
  },
  'OperatorNode:not': {
    associativity: 'right'
  }
}, {
  // exponentiation
  'OperatorNode:pow': {
    associativity: 'right',
    associativeWith: [],
    latexRightParens: false // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)

  },
  'OperatorNode:dotPow': {
    associativity: 'right',
    associativeWith: []
  }
}, {
  // factorial
  'OperatorNode:factorial': {
    associativity: 'left'
  }
}, {
  // matrix transpose
  'OperatorNode:transpose': {
    associativity: 'left'
  }
}];
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {number | null}
 */

function getPrecedence(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();

  for (var i = 0; i < properties.length; i++) {
    if (identifier in properties[i]) {
      return i;
    }
  }

  return null;
}
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */

function getAssociativity(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();
  var index = getPrecedence(node, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = properties[index][identifier];

  if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(property, 'associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }

    if (property.associativity === 'right') {
      return 'right';
    } // associativity is invalid


    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
  } // associativity is undefined


  return null;
}
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {boolean | null}
 */

function isAssociativeWith(nodeA, nodeB, parenthesis) {
  // ParenthesisNodes are only ignored when not in 'keep' mode
  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
  var identifierA = a.getIdentifier();
  var identifierB = b.getIdentifier();
  var index = getPrecedence(a, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = properties[index][identifierA];

  if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(property, 'associativeWith') && property.associativeWith instanceof Array) {
    for (var i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }

    return false;
  } // associativeWith is not defined


  return null;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/parse.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/parse.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createParse": () => (/* binding */ createParse)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }





var name = 'parse';
var dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
var createParse = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    numeric,
    config,
    AccessorNode,
    ArrayNode,
    AssignmentNode,
    BlockNode,
    ConditionalNode,
    ConstantNode,
    FunctionAssignmentNode,
    FunctionNode,
    IndexNode,
    ObjectNode,
    OperatorNode,
    ParenthesisNode,
    RangeNode,
    RelationalNode,
    SymbolNode
  } = _ref;

  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  var parse = typed(name, {
    string: function string(expression) {
      return parseStart(expression, {});
    },
    'Array | Matrix': function ArrayMatrix(expressions) {
      return parseMultiple(expressions, {});
    },
    'string, Object': function stringObject(expression, options) {
      var extraNodes = options.nodes !== undefined ? options.nodes : {};
      return parseStart(expression, extraNodes);
    },
    'Array | Matrix, Object': parseMultiple
  });

  function parseMultiple(expressions) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

    return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(expressions, function (elem) {
      if (typeof elem !== 'string') throw new TypeError('String expected');
      return parseStart(elem, extraNodes);
    });
  } // token types enumeration


  var TOKENTYPE = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }; // map with all delimiters

  var DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '"': true,
    '\'': true,
    ';': true,
    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '=': true,
    ':': true,
    '?': true,
    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,
    '<<': true,
    '>>': true,
    '>>>': true
  }; // map with all named delimiters

  var NAMED_DELIMITERS = {
    mod: true,
    to: true,
    in: true,
    and: true,
    xor: true,
    or: true,
    not: true
  };
  var CONSTANTS = {
    true: true,
    false: false,
    null: null,
    undefined: undefined
  };
  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

  function initialState() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: '',
      // current expression
      comment: '',
      // last parsed comment
      index: 0,
      // current index in expr
      token: '',
      // current token
      tokenType: TOKENTYPE.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

    };
  }
  /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */


  function currentString(state, length) {
    return state.expression.substr(state.index, length);
  }
  /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */


  function currentCharacter(state) {
    return currentString(state, 1);
  }
  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */


  function next(state) {
    state.index++;
  }
  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */


  function prevCharacter(state) {
    return state.expression.charAt(state.index - 1);
  }
  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */


  function nextCharacter(state) {
    return state.expression.charAt(state.index + 1);
  }
  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */


  function getToken(state) {
    state.tokenType = TOKENTYPE.NULL;
    state.token = '';
    state.comment = ''; // skip over whitespaces
    // space, tab, and newline when inside parameters

    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
      next(state);
    } // skip comment


    if (currentCharacter(state) === '#') {
      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
        state.comment += currentCharacter(state);
        next(state);
      }
    } // check for end of expression


    if (currentCharacter(state) === '') {
      // token is still empty
      state.tokenType = TOKENTYPE.DELIMITER;
      return;
    } // check for new line character


    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = currentCharacter(state);
      next(state);
      return;
    }

    var c1 = currentCharacter(state);
    var c2 = currentString(state, 2);
    var c3 = currentString(state, 3);

    if (c3.length === 3 && DELIMITERS[c3]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c3;
      next(state);
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 2 characters


    if (c2.length === 2 && DELIMITERS[c2]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c2;
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 1 character


    if (DELIMITERS[c1]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c1;
      next(state);
      return;
    } // check for a number


    if (parse.isDigitDot(c1)) {
      state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex

      var _c = currentString(state, 2);

      if (_c === '0b' || _c === '0o' || _c === '0x') {
        state.token += currentCharacter(state);
        next(state);
        state.token += currentCharacter(state);
        next(state);

        while (parse.isHexDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (currentCharacter(state) === '.') {
          // this number has a radix point
          state.token += '.';
          next(state); // get the digits after the radix

          while (parse.isHexDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }
        } else if (currentCharacter(state) === 'i') {
          // this number has a word size suffix
          state.token += 'i';
          next(state); // get the word size

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }
        }

        return;
      } // get number, can have a single dot


      if (currentCharacter(state) === '.') {
        state.token += currentCharacter(state);
        next(state);

        if (!parse.isDigit(currentCharacter(state))) {
          // this is no number, it is just a dot (can be dot notation)
          state.tokenType = TOKENTYPE.DELIMITER;
        }
      } else {
        while (parse.isDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
      }

      while (parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
          state.token += currentCharacter(state);
          next(state);

          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
            state.token += currentCharacter(state);
            next(state);
          } // Scientific notation MUST be followed by an exponent


          if (!parse.isDigit(currentCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
        } else if (nextCharacter(state) === '.') {
          next(state);
          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
        }
      }

      return;
    } // check for variables, functions, named operators


    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      }

      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(NAMED_DELIMITERS, state.token)) {
        state.tokenType = TOKENTYPE.DELIMITER;
      } else {
        state.tokenType = TOKENTYPE.SYMBOL;
      }

      return;
    } // something unknown is found, wrong characters -> a syntax error


    state.tokenType = TOKENTYPE.UNKNOWN;

    while (currentCharacter(state) !== '') {
      state.token += currentCharacter(state);
      next(state);
    }

    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
  }
  /**
   * Get next token and skip newline tokens
   */


  function getTokenSkipNewline(state) {
    do {
      getToken(state);
    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

  }
  /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */


  function openParams(state) {
    state.nestingLevel++;
  }
  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */


  function closeParams(state) {
    state.nestingLevel--;
  }
  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */


  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
  };
  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */


  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };
  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */


  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };
  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */


  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
  };
  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */


  parse.isDecimalMark = function isDecimalMark(c, cNext) {
    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };
  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigitDot = function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  };
  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigit = function isDigit(c) {
    return c >= '0' && c <= '9';
  };
  /**
   * checks if the given char c is a hex digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isHexDigit = function isHexDigit(c) {
    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
  };
  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */


  function parseStart(expression, extraNodes) {
    var state = initialState();

    _extends(state, {
      expression,
      extraNodes
    });

    getToken(state);
    var node = parseBlock(state); // check for garbage at the end of the expression
    // an expression ends with a empty character '' and tokenType DELIMITER

    if (state.token !== '') {
      if (state.tokenType === TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"
        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
        throw createError(state, 'Unexpected operator ' + state.token);
      } else {
        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
      }
    }

    return node;
  }
  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */


  function parseBlock(state) {
    var node;
    var blocks = [];
    var visible;

    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
      node = parseAssignment(state);
      node.comment = state.comment;
    } // TODO: simplify this loop


    while (state.token === '\n' || state.token === ';') {
      // eslint-disable-line no-unmodified-loop-condition
      if (blocks.length === 0 && node) {
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }

      getToken(state);

      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
        node = parseAssignment(state);
        node.comment = state.comment;
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }

    if (blocks.length > 0) {
      return new BlockNode(blocks);
    } else {
      if (!node) {
        node = new ConstantNode(undefined);
        node.comment = state.comment;
      }

      return node;
    }
  }
  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */


  function parseAssignment(state) {
    var name, args, value, valid;
    var node = parseConditional(state);

    if (state.token === '=') {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(new SymbolNode(name), value);
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isAccessorNode)(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(node.object, node.index, value);
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isFunctionNode)(node) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];
        name = node.name;
        node.args.forEach(function (arg, index) {
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(arg)) {
            args[index] = arg.name;
          } else {
            valid = false;
          }
        });

        if (valid) {
          getTokenSkipNewline(state);
          value = parseAssignment(state);
          return new FunctionAssignmentNode(name, args, value);
        }
      }

      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
    }

    return node;
  }
  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */


  function parseConditional(state) {
    var node = parseLogicalOr(state);

    while (state.token === '?') {
      // eslint-disable-line no-unmodified-loop-condition
      // set a conditional level, the range operator will be ignored as long
      // as conditionalLevel === state.nestingLevel.
      var prev = state.conditionalLevel;
      state.conditionalLevel = state.nestingLevel;
      getTokenSkipNewline(state);
      var condition = node;
      var trueExpr = parseAssignment(state);
      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
      state.conditionalLevel = null;
      getTokenSkipNewline(state);
      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

      state.conditionalLevel = prev;
    }

    return node;
  }
  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */


  function parseLogicalOr(state) {
    var node = parseLogicalXor(state);

    while (state.token === 'or') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
    }

    return node;
  }
  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */


  function parseLogicalXor(state) {
    var node = parseLogicalAnd(state);

    while (state.token === 'xor') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
    }

    return node;
  }
  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */


  function parseLogicalAnd(state) {
    var node = parseBitwiseOr(state);

    while (state.token === 'and') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
    }

    return node;
  }
  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseOr(state) {
    var node = parseBitwiseXor(state);

    while (state.token === '|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
    }

    return node;
  }
  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseXor(state) {
    var node = parseBitwiseAnd(state);

    while (state.token === '^|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
    }

    return node;
  }
  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseAnd(state) {
    var node = parseRelational(state);

    while (state.token === '&') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
    }

    return node;
  }
  /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */


  function parseRelational(state) {
    var params = [parseShift(state)];
    var conditionals = [];
    var operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };

    while ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      // eslint-disable-line no-unmodified-loop-condition
      var cond = {
        name: state.token,
        fn: operators[state.token]
      };
      conditionals.push(cond);
      getTokenSkipNewline(state);
      params.push(parseShift(state));
    }

    if (params.length === 1) {
      return params[0];
    } else if (params.length === 2) {
      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
    } else {
      return new RelationalNode(conditionals.map(c => c.fn), params);
    }
  }
  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */


  function parseShift(state) {
    var node, name, fn, params;
    node = parseConversion(state);
    var operators = {
      '<<': 'leftShift',
      '>>': 'rightArithShift',
      '>>>': 'rightLogShift'
    };

    while ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseConversion(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */


  function parseConversion(state) {
    var node, name, fn, params;
    node = parseRange(state);
    var operators = {
      to: 'to',
      in: 'to' // alias of 'to'

    };

    while ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);

      if (name === 'in' && state.token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      } else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange(state)];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }
  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */


  function parseRange(state) {
    var node;
    var params = [];

    if (state.token === ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode(1);
    } else {
      // explicit start
      node = parseAddSubtract(state);
    }

    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node); // parse step and end

      while (state.token === ':' && params.length < 3) {
        // eslint-disable-line no-unmodified-loop-condition
        getTokenSkipNewline(state);

        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
          // implicit end
          params.push(new SymbolNode('end'));
        } else {
          // explicit end
          params.push(parseAddSubtract(state));
        }
      }

      if (params.length === 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      } else {
        // length === 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }
  /**
   * add or subtract
   * @return {Node} node
   * @private
   */


  function parseAddSubtract(state) {
    var node, name, fn, params;
    node = parseMultiplyDivide(state);
    var operators = {
      '+': 'add',
      '-': 'subtract'
    };

    while ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseMultiplyDivide(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */


  function parseMultiplyDivide(state) {
    var node, last, name, fn;
    node = parseImplicitMultiplication(state);
    last = node;
    var operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide',
      '%': 'mod',
      mod: 'mod'
    };

    while (true) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
        // explicit operators
        name = state.token;
        fn = operators[name];
        getTokenSkipNewline(state);
        last = parseImplicitMultiplication(state);
        node = new OperatorNode(name, fn, [node, last]);
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */


  function parseImplicitMultiplication(state) {
    var node, last;
    node = parseRule2(state);
    last = node;

    while (true) {
      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isConstantNode)(node) || state.tokenType === TOKENTYPE.NUMBER && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isConstantNode)(last) && (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isOperatorNode)(last) || last.op === '!') || state.token === '(') {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseRule2(state);
        node = new OperatorNode('*', 'multiply', [node, last], true
        /* implicit */
        );
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */


  function parseRule2(state) {
    var node = parseUnary(state);
    var last = node;
    var tokenStates = [];

    while (true) {
      // Match the "number /" part of the pattern "number / number symbol"
      if (state.token === '/' && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isConstantNode)(last)) {
        // Look ahead to see if the next token is a number
        tokenStates.push(_extends({}, state));
        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // Look ahead again
          tokenStates.push(_extends({}, state));
          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
            // We've matched the pattern "number / number symbol".
            // Rewind once and build the "number / number" node; the symbol will be consumed later
            _extends(state, tokenStates.pop());

            tokenStates.pop();
            last = parseUnary(state);
            node = new OperatorNode('/', 'divide', [node, last]);
          } else {
            // Not a match, so rewind
            tokenStates.pop();

            _extends(state, tokenStates.pop());

            break;
          }
        } else {
          // Not a match, so rewind
          _extends(state, tokenStates.pop());

          break;
        }
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */


  function parseUnary(state) {
    var name, params, fn;
    var operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      not: 'not'
    };

    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      fn = operators[state.token];
      name = state.token;
      getTokenSkipNewline(state);
      params = [parseUnary(state)];
      return new OperatorNode(name, fn, params);
    }

    return parsePow(state);
  }
  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */


  function parsePow(state) {
    var node, name, fn, params;
    node = parseLeftHandOperators(state);

    if (state.token === '^' || state.token === '.^') {
      name = state.token;
      fn = name === '^' ? 'pow' : 'dotPow';
      getTokenSkipNewline(state);
      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */


  function parseLeftHandOperators(state) {
    var node, name, fn, params;
    node = parseCustomNodes(state);
    var operators = {
      '!': 'factorial',
      '\'': 'ctranspose'
    };

    while ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getToken(state);
      params = [node];
      node = new OperatorNode(name, fn, params);
      node = parseAccessors(state, node);
    }

    return node;
  }
  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */


  function parseCustomNodes(state) {
    var params = [];

    if (state.tokenType === TOKENTYPE.SYMBOL && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(state.extraNodes, state.token)) {
      var CustomNode = state.extraNodes[state.token];
      getToken(state); // parse parameters

      if (state.token === '(') {
        params = [];
        openParams(state);
        getToken(state);

        if (state.token !== ')') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ')') {
          throw createSyntaxError(state, 'Parenthesis ) expected');
        }

        closeParams(state);
        getToken(state);
      } // create a new custom node
      // noinspection JSValidateTypes


      return new CustomNode(params);
    }

    return parseSymbol(state);
  }
  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */


  function parseSymbol(state) {
    var node, name;

    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
      name = state.token;
      getToken(state);

      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(CONSTANTS, name)) {
        // true, false, null, ...
        node = new ConstantNode(CONSTANTS[name]);
      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
        // NaN, Infinity
        node = new ConstantNode(numeric(name, 'number'));
      } else {
        node = new SymbolNode(name);
      } // parse function parameters and matrix index


      node = parseAccessors(state, node);
      return node;
    }

    return parseDoubleQuotesString(state);
  }
  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */


  function parseAccessors(state, node, types) {
    var params;

    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
      // eslint-disable-line no-unmodified-loop-condition
      params = [];

      if (state.token === '(') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isSymbolNode)(node) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isAccessorNode)(node)) {
          // function invocation like fn(2, 3) or obj.fn(2, 3)
          openParams(state);
          getToken(state);

          if (state.token !== ')') {
            params.push(parseAssignment(state)); // parse a list with parameters

            while (state.token === ',') {
              // eslint-disable-line no-unmodified-loop-condition
              getToken(state);
              params.push(parseAssignment(state));
            }
          }

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new FunctionNode(node, params);
        } else {
          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
          // don't parse it here but let it be handled by parseImplicitMultiplication
          // with correct precedence
          return node;
        }
      } else if (state.token === '[') {
        // index notation like variable[2, 3]
        openParams(state);
        getToken(state);

        if (state.token !== ']') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ']') {
          throw createSyntaxError(state, 'Parenthesis ] expected');
        }

        closeParams(state);
        getToken(state);
        node = new AccessorNode(node, new IndexNode(params));
      } else {
        // dot notation like variable.prop
        getToken(state);

        if (state.tokenType !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError(state, 'Property name expected after dot');
        }

        params.push(new ConstantNode(state.token));
        getToken(state);
        var dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }

    return node;
  }
  /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */


  function parseDoubleQuotesString(state) {
    var node, str;

    if (state.token === '"') {
      str = parseDoubleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseSingleQuotesString(state);
  }
  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */


  function parseDoubleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\"'
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '"') {
      throw createSyntaxError(state, 'End of string " expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */


  function parseSingleQuotesString(state) {
    var node, str;

    if (state.token === '\'') {
      str = parseSingleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseMatrix(state);
  }
  /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */


  function parseSingleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\''
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '\'') {
      throw createSyntaxError(state, 'End of string \' expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */


  function parseMatrix(state) {
    var array, params, rows, cols;

    if (state.token === '[') {
      // matrix [...]
      openParams(state);
      getToken(state);

      if (state.token !== ']') {
        // this is a non-empty matrix
        var row = parseRow(state);

        if (state.token === ';') {
          // 2 dimensional array
          rows = 1;
          params = [row]; // the rows of the matrix are separated by dot-comma's

          while (state.token === ';') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params[rows] = parseRow(state);
            rows++;
          }

          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state); // check if the number of columns matches in all rows

          cols = params[0].items.length;

          for (var r = 1; r < rows; r++) {
            if (params[r].items.length !== cols) {
              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
            }
          }

          array = new ArrayNode(params);
        } else {
          // 1 dimensional vector
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state);
          array = row;
        }
      } else {
        // this is an empty matrix "[ ]"
        closeParams(state);
        getToken(state);
        array = new ArrayNode([]);
      }

      return parseAccessors(state, array);
    }

    return parseObject(state);
  }
  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */


  function parseRow(state) {
    var params = [parseAssignment(state)];
    var len = 1;

    while (state.token === ',') {
      // eslint-disable-line no-unmodified-loop-condition
      getToken(state); // parse expression

      params[len] = parseAssignment(state);
      len++;
    }

    return new ArrayNode(params);
  }
  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */


  function parseObject(state) {
    if (state.token === '{') {
      openParams(state);
      var key;
      var properties = {};

      do {
        getToken(state);

        if (state.token !== '}') {
          // parse key
          if (state.token === '"') {
            key = parseDoubleQuotesStringToken(state);
          } else if (state.token === '\'') {
            key = parseSingleQuotesStringToken(state);
          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
            key = state.token;
            getToken(state);
          } else {
            throw createSyntaxError(state, 'Symbol or string expected as object key');
          } // parse key/value separator


          if (state.token !== ':') {
            throw createSyntaxError(state, 'Colon : expected after object key');
          }

          getToken(state); // parse key

          properties[key] = parseAssignment(state);
        }
      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


      if (state.token !== '}') {
        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
      }

      closeParams(state);
      getToken(state);
      var node = new ObjectNode(properties); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseNumber(state);
  }
  /**
   * parse a number
   * @return {Node} node
   * @private
   */


  function parseNumber(state) {
    var numberStr;

    if (state.tokenType === TOKENTYPE.NUMBER) {
      // this is a number
      numberStr = state.token;
      getToken(state);
      return new ConstantNode(numeric(numberStr, config.number));
    }

    return parseParentheses(state);
  }
  /**
   * parentheses
   * @return {Node} node
   * @private
   */


  function parseParentheses(state) {
    var node; // check if it is a parenthesized expression

    if (state.token === '(') {
      // parentheses (...)
      openParams(state);
      getToken(state);
      node = parseAssignment(state); // start again

      if (state.token !== ')') {
        throw createSyntaxError(state, 'Parenthesis ) expected');
      }

      closeParams(state);
      getToken(state);
      node = new ParenthesisNode(node);
      node = parseAccessors(state, node);
      return node;
    }

    return parseEnd(state);
  }
  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */


  function parseEnd(state) {
    if (state.token === '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError(state, 'Unexpected end of expression');
    } else {
      throw createSyntaxError(state, 'Value expected');
    }
  }
  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */

  /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */


  function col(state) {
    return state.index - state.token.length + 1;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */


  function createSyntaxError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error.char = c;
    return error;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */


  function createError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error.char = c;
    return error;
  }

  return parse;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/apply.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/apply.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createApplyTransform": () => (/* binding */ createApplyTransform)
/* harmony export */ });
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_matrix_apply_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/apply.js */ "./node_modules/mathjs/lib/esm/function/matrix/apply.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");




var name = 'apply';
var dependencies = ['typed', 'isInteger'];
/**
 * Attach a transform function to math.apply
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function apply
 * from one-based to zero based
 */

var createApplyTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isInteger
  } = _ref;
  var apply = (0,_function_matrix_apply_js__WEBPACK_IMPORTED_MODULE_1__.createApply)({
    typed,
    isInteger
  }); // @see: comment of concat itself

  return typed('apply', {
    '...any': function any(args) {
      // change dim from one-based to zero-based
      var dim = args[1];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(dim)) {
        args[1] = dim - 1;
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(dim)) {
        args[1] = dim.minus(1);
      }

      try {
        return apply.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/column.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/column.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createColumnTransform": () => (/* binding */ createColumnTransform)
/* harmony export */ });
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_matrix_column_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/column.js */ "./node_modules/mathjs/lib/esm/function/matrix/column.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");




var name = 'column';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createColumnTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Index,
    matrix,
    range
  } = _ref;
  var column = (0,_function_matrix_column_js__WEBPACK_IMPORTED_MODULE_1__.createColumn)({
    typed,
    Index,
    matrix,
    range
  }); // @see: comment of column itself

  return typed('column', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return column.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/concat.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/concat.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConcatTransform": () => (/* binding */ createConcatTransform)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_matrix_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/concat.js */ "./node_modules/mathjs/lib/esm/function/matrix/concat.js");




var name = 'concat';
var dependencies = ['typed', 'matrix', 'isInteger'];
var createConcatTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    isInteger
  } = _ref;
  var concat = (0,_function_matrix_concat_js__WEBPACK_IMPORTED_MODULE_1__.createConcat)({
    typed,
    matrix,
    isInteger
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */

  return typed('concat', {
    '...any': function any(args) {
      // change last argument from one-based to zero-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(last)) {
        args[lastIndex] = last - 1;
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(last)) {
        args[lastIndex] = last.minus(1);
      }

      try {
        return concat.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/diff.transform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/diff.transform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDiffTransform": () => (/* binding */ createDiffTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_matrix_diff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/diff.js */ "./node_modules/mathjs/lib/esm/function/matrix/diff.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'diff';
var dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];
var createDiffTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    subtract,
    number,
    bignumber
  } = _ref;
  var diff = (0,_function_matrix_diff_js__WEBPACK_IMPORTED_MODULE_1__.createDiff)({
    typed,
    matrix,
    subtract,
    number,
    bignumber
  });
  /**
   * Attach a transform function to math.diff
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed(name, {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return diff.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/filter.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/filter.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFilterTransform": () => (/* binding */ createFilterTransform)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");





var name = 'filter';
var dependencies = ['typed'];
var createFilterTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */
  function filterTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(args[1]) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0,_utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__.compileInlineExpression)(args[1], math, scope);
      }
    }

    return filter(x, callback);
  }

  filterTransform.rawArgs = true; // one based version of function filter

  var filter = typed('filter', {
    'Array, function': _filter,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filter(x.toArray(), test));
    },
    'Array, RegExp': _utils_array_js__WEBPACK_IMPORTED_MODULE_3__.filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.filterRegExp)(x.toArray(), test));
    }
  });
  return filterTransform;
}, {
  isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filter(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_4__.maxArgumentCount)(callback);
  return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index + 1]);
    } else {
      // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createForEachTransform": () => (/* binding */ createForEachTransform)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js");





var name = 'forEach';
var dependencies = ['typed'];
var createForEachTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function forEachTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(args[1]) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = (0,_utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__.compileInlineExpression)(args[1], math, scope);
      }
    }

    return _forEach(x, callback);
  }

  forEachTransform.rawArgs = true; // one-based version of forEach

  var _forEach = typed('forEach', {
    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_3__.maxArgumentCount)(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.forEach)(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/index.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/index.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIndexTransform": () => (/* binding */ createIndexTransform)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'index';
var dependencies = ['Index'];
var createIndexTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Index
  } = _ref;

  /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  return function indexTransform() {
    var args = [];

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isRange)(arg)) {
        arg.start--;
        arg.end -= arg.step > 0 ? 0 : 2;
      } else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(arg) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arg)) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(arg)) {
        arg--;
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(arg)) {
        arg = arg.toNumber() - 1;
      } else if (typeof arg === 'string') {// leave as is
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }

      args[i] = arg;
    }

    var res = new Index();
    Index.apply(res, args);
    return res;
  };
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/map.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/map.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMapTransform": () => (/* binding */ createMapTransform)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js");





var name = 'map';
var dependencies = ['typed'];
var createMapTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function mapTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(args[1]) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0,_utils_compileInlineExpression_js__WEBPACK_IMPORTED_MODULE_2__.compileInlineExpression)(args[1], math, scope);
      }
    }

    return map(x, callback);
  }

  mapTransform.rawArgs = true; // one-based version of map function

  var map = typed('map', {
    'Array, function': function ArrayFunction(x, callback) {
      return _map(x, callback, x);
    },
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.create(_map(x.valueOf(), callback, x));
    }
  });
  return mapTransform;
}, {
  isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */

function _map(array, callback, orig) {
  // figure out what number of arguments the callback function expects
  var argsCount = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_3__.maxArgumentCount)(callback);

  function recurse(value, index) {
    if (Array.isArray(value)) {
      return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.map)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    } else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      } else if (argsCount === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, orig);
      }
    }
  }

  return recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/max.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/max.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMaxTransform": () => (/* binding */ createMaxTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_statistics_max_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/max.js */ "./node_modules/mathjs/lib/esm/function/statistics/max.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'max';
var dependencies = ['typed', 'config', 'numeric', 'larger'];
var createMaxTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    numeric,
    larger
  } = _ref;
  var max = (0,_function_statistics_max_js__WEBPACK_IMPORTED_MODULE_1__.createMax)({
    typed,
    config,
    numeric,
    larger
  });
  /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */

  return typed('max', {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return max.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/mean.transform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/mean.transform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMeanTransform": () => (/* binding */ createMeanTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_statistics_mean_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/mean.js */ "./node_modules/mathjs/lib/esm/function/statistics/mean.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'mean';
var dependencies = ['typed', 'add', 'divide'];
var createMeanTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    divide
  } = _ref;
  var mean = (0,_function_statistics_mean_js__WEBPACK_IMPORTED_MODULE_1__.createMean)({
    typed,
    add,
    divide
  });
  /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */

  return typed('mean', {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return mean.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/min.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/min.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMinTransform": () => (/* binding */ createMinTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_statistics_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/min.js */ "./node_modules/mathjs/lib/esm/function/statistics/min.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'min';
var dependencies = ['typed', 'config', 'numeric', 'smaller'];
var createMinTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    numeric,
    smaller
  } = _ref;
  var min = (0,_function_statistics_min_js__WEBPACK_IMPORTED_MODULE_1__.createMin)({
    typed,
    config,
    numeric,
    smaller
  });
  /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */

  return typed('min', {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return min.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/range.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/range.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRangeTransform": () => (/* binding */ createRangeTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_matrix_range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/range.js */ "./node_modules/mathjs/lib/esm/function/matrix/range.js");


var name = 'range';
var dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRangeTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    bignumber,
    smaller,
    smallerEq,
    larger,
    largerEq
  } = _ref;
  var range = (0,_function_matrix_range_js__WEBPACK_IMPORTED_MODULE_1__.createRange)({
    typed,
    config,
    matrix,
    bignumber,
    smaller,
    smallerEq,
    larger,
    largerEq
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('range', {
    '...any': function any(args) {
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }

      return range.apply(null, args);
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/row.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/row.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRowTransform": () => (/* binding */ createRowTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_matrix_row_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/row.js */ "./node_modules/mathjs/lib/esm/function/matrix/row.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");




var name = 'row';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createRowTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Index,
    matrix,
    range
  } = _ref;
  var row = (0,_function_matrix_row_js__WEBPACK_IMPORTED_MODULE_1__.createRow)({
    typed,
    Index,
    matrix,
    range
  }); // @see: comment of row itself

  return typed('row', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return row.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/std.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/std.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createStdTransform": () => (/* binding */ createStdTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _function_statistics_std_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/std.js */ "./node_modules/mathjs/lib/esm/function/statistics/std.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'std';
var dependencies = ['typed', 'sqrt', 'variance'];
/**
 * Attach a transform function to math.std
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function std
 * from one-based to zero based
 */

var createStdTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    sqrt,
    variance
  } = _ref;
  var std = (0,_function_statistics_std_js__WEBPACK_IMPORTED_MODULE_1__.createStd)({
    typed,
    sqrt,
    variance
  });
  return typed('std', {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return std.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/subset.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/subset.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSubsetTransform": () => (/* binding */ createSubsetTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_matrix_subset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/matrix/subset.js */ "./node_modules/mathjs/lib/esm/function/matrix/subset.js");



var name = 'subset';
var dependencies = ['typed', 'matrix'];
var createSubsetTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;
  var subset = (0,_function_matrix_subset_js__WEBPACK_IMPORTED_MODULE_1__.createSubset)({
    typed,
    matrix
  });
  /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('subset', {
    '...any': function any(args) {
      try {
        return subset.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_2__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/sum.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/sum.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSumTransform": () => (/* binding */ createSumTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_statistics_sum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/sum.js */ "./node_modules/mathjs/lib/esm/function/statistics/sum.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */

var name = 'sum';
var dependencies = ['typed', 'config', 'add', 'numeric'];
var createSumTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    add,
    numeric
  } = _ref;
  var sum = (0,_function_statistics_sum_js__WEBPACK_IMPORTED_MODULE_1__.createSum)({
    typed,
    config,
    add,
    numeric
  });
  return typed(name, {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return sum.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compileInlineExpression": () => (/* binding */ compileInlineExpression)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");

/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */

function compileInlineExpression(expression, math, scope) {
  // find an undefined symbol
  var symbol = expression.filter(function (node) {
    return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.isSymbolNode)(node) && !(node.name in math) && !(node.name in scope);
  })[0];

  if (!symbol) {
    throw new Error('No undefined variable found in inline expression "' + expression + '"');
  } // create a test function for this equation


  var name = symbol.name; // variable name

  var subScope = Object.create(scope);
  var eq = expression.compile();
  return function inlineExpression(x) {
    subScope[name] = x;
    return eq.evaluate(subScope);
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "errorTransform": () => (/* binding */ errorTransform)
/* harmony export */ });
/* harmony import */ var _error_IndexError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../error/IndexError.js */ "./node_modules/mathjs/lib/esm/error/IndexError.js");

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */

function errorTransform(err) {
  if (err && err.isIndexError) {
    return new _error_IndexError_js__WEBPACK_IMPORTED_MODULE_0__.IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
  }

  return err;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lastDimToZeroBase": () => (/* binding */ lastDimToZeroBase)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");

/**
 * Change last argument dim from one-based to zero-based.
 */

function lastDimToZeroBase(args) {
  if (args.length === 2 && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.isCollection)(args[0])) {
    args = args.slice();
    var dim = args[1];

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(dim)) {
      args[1] = dim - 1;
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumber)(dim)) {
      args[1] = dim.minus(1);
    }
  }

  return args;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/expression/transform/variance.transform.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/expression/transform/variance.transform.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createVarianceTransform": () => (/* binding */ createVarianceTransform)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js");
/* harmony import */ var _function_statistics_variance_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../function/statistics/variance.js */ "./node_modules/mathjs/lib/esm/function/statistics/variance.js");
/* harmony import */ var _utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js");




var name = 'variance';
var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
/**
 * Attach a transform function to math.var
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function var
 * from one-based to zero based
 */

var createVarianceTransform = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    subtract,
    multiply,
    divide,
    apply,
    isNaN
  } = _ref;
  var variance = (0,_function_statistics_variance_js__WEBPACK_IMPORTED_MODULE_1__.createVariance)({
    typed,
    add,
    subtract,
    multiply,
    divide,
    apply,
    isNaN
  });
  return typed(name, {
    '...any': function any(args) {
      args = (0,_utils_lastDimToZeroBase_js__WEBPACK_IMPORTED_MODULE_2__.lastDimToZeroBase)(args);

      try {
        return variance.apply(null, args);
      } catch (err) {
        throw (0,_utils_errorTransform_js__WEBPACK_IMPORTED_MODULE_3__.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLup": () => (/* binding */ createLup)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'lup';
var dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
var createLup = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    abs,
    addScalar,
    divideScalar,
    multiplyScalar,
    subtract,
    larger,
    equalScalar,
    unaryMinus,
    DenseMatrix,
    SparseMatrix,
    Spa
  } = _ref;

  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  return typed(name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseLUP(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseLUP(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseLUP(m); // result


      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });

  function _denseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix array, clone original data

    var data = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(m._data); // l matrix arrays

    var ldata = [];
    var lsize = [rows, n]; // u matrix arrays

    var udata = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vector

    var p = [];

    for (i = 0; i < rows; i++) {
      p[i] = i;
    } // loop columns


    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          var min = Math.min(i, j); // v[i, j]

          var s = 0; // loop up to min

          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }

          data[i][j] = subtract(data[i][j], s);
        }
      } // row with larger value in cvector, row >= j


      var pi = j;
      var pabsv = 0;
      var vjj = 0; // loop rows

      for (i = j; i < rows; i++) {
        // data @ i, j
        var v = data[i][j]; // absolute value

        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = i; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      } // swap rows (j <-> pi)


      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

        DenseMatrix._swapRows(j, pi, data);
      } // check column is in lower triangular matrix


      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          var vij = data[i][j];

          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          } // L


          ldata[i] = [];
        } // check we are in the upper triangular matrix


        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }

          continue;
        } // diagonal value


        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }

          continue;
        } // check row exists in upper triangular matrix


        if (i < columns) {
          // U
          udata[i][j] = 0;
        } // check column exists in lower triangular matrix


        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    } // l matrix


    var l = new DenseMatrix({
      data: ldata,
      size: lsize
    }); // u matrix

    var u = new DenseMatrix({
      data: udata,
      size: usize
    }); // p vector

    var pv = [];

    for (i = 0, n = p.length; i < n; i++) {
      pv[p[i]] = i;
    } // return matrices


    return {
      L: l,
      U: u,
      p: pv,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }

  function _sparseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // l matrix arrays

    var lvalues = [];
    var lindex = [];
    var lptr = [];
    var lsize = [rows, n]; // u matrix arrays

    var uvalues = [];
    var uindex = [];
    var uptr = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

    var pvCo = [];
    var pvOc = [];

    for (i = 0; i < rows; i++) {
      pvCo[i] = i;
      pvOc[i] = i;
    } // swap indices in permutation vectors (condition x < y)!


    var swapIndeces = function swapIndeces(x, y) {
      // find pv indeces getting data from x and y
      var kx = pvOc[x];
      var ky = pvOc[y]; // update permutation vector current -> original

      pvCo[kx] = y;
      pvCo[ky] = x; // update permutation vector original -> current

      pvOc[x] = ky;
      pvOc[y] = kx;
    }; // loop columns


    var _loop = function _loop() {
      // sparse accumulator
      var spa = new Spa(); // check lower triangular matrix has a value @ column j

      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

        lvalues.push(1);
        lindex.push(j);
      } // update ptr


      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // copy column j into sparse accumulator

      for (k = k0; k < k1; k++) {
        // row
        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

        spa.set(pvCo[i], values[k]);
      } // skip first column in upper triangular matrix


      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });
      } // row with larger value in spa, row >= j


      var pi = j;
      var vjj = spa.get(j);
      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = x; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      }); // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

        swapIndeces(j, pi);
      } // loop values in spa (order by row)


      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        } else {
          // update value
          v = divideScalar(v, vjj); // check value is non zero

          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    };

    for (j = 0; j < columns; j++) {
      _loop();
    } // update ptrs


    uptr.push(uvalues.length);
    lptr.push(lvalues.length); // return matrices

    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }),
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pvCo,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/qr.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/decomposition/qr.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createQr": () => (/* binding */ createQr)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }


var name = 'qr';
var dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
var createQr = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    zeros,
    identity,
    isZero,
    equal,
    sign,
    sqrt,
    conj,
    unaryMinus,
    addScalar,
    divideScalar,
    multiplyScalar,
    subtract,
    complex
  } = _ref;

  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  return _extends(typed(name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseQR(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseQR(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseQR(m); // result


      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  }), {
    _denseQRimpl
  });

  function _denseQRimpl(m) {
    // rows & columns (m x n)
    var rows = m._size[0]; // m

    var cols = m._size[1]; // n

    var Q = identity([rows], 'dense');
    var Qdata = Q._data;
    var R = m.clone();
    var Rdata = R._data; // vars

    var i, j, k;
    var w = zeros([rows], '');

    for (k = 0; k < Math.min(cols, rows); ++k) {
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */
      var pivot = Rdata[k][k];
      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
      var conjSgn = conj(sgn);
      var alphaSquared = 0;

      for (i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
      }

      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));

      if (!isZero(alpha)) {
        // first element in vector u
        var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

        w[k] = 1;

        for (i = k + 1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        } // tau = - conj(u1 / alpha)


        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
        var s = void 0;
        /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */

        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (j = k; j < cols; j++) {
          s = 0.0; // calculate jth element of [tranpose(w) * R]

          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          } // calculate the jth element of [tau * transpose(w) * R]


          s = multiplyScalar(s, tau);

          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
          }
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */


        for (i = 0; i < rows; i++) {
          s = 0.0; // calculate ith element of [Q * w]

          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          } // calculate the ith element of [tau * Q * w]


          s = multiplyScalar(s, tau);

          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
          }
        }
      }
    } // return matrices


    return {
      Q: Q,
      R: R,
      toString: function toString() {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  }

  function _denseQR(m) {
    var ret = _denseQRimpl(m);

    var Rdata = ret.R._data;

    if (m._data.length > 0) {
      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;

      for (var i = 0; i < Rdata.length; ++i) {
        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
          Rdata[i][j] = zero;
        }
      }
    }

    return ret;
  }

  function _sparseQR(m) {
    throw new Error('qr not implemented for sparse matrices yet');
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSlu": () => (/* binding */ createSlu)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _sparse_csSqr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sparse/csSqr.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csSqr.js");
/* harmony import */ var _sparse_csLu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sparse/csLu.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js");




var name = 'slu';
var dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createSlu = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    add,
    multiply,
    transpose,
    divideScalar,
    subtract,
    larger,
    largerEq,
    SparseMatrix
  } = _ref;
  var csSqr = (0,_sparse_csSqr_js__WEBPACK_IMPORTED_MODULE_1__.createCsSqr)({
    add,
    multiply,
    transpose
  });
  var csLu = (0,_sparse_csLu_js__WEBPACK_IMPORTED_MODULE_2__.createCsLu)({
    abs,
    divideScalar,
    multiply,
    subtract,
    larger,
    largerEq,
    SparseMatrix
  });
  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */

  return typed(name, {
    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
      // verify order
      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(order) || order < 0 || order > 3) {
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      } // verify threshold


      if (threshold < 0 || threshold > 1) {
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      } // perform symbolic ordering and analysis


      var s = csSqr(order, a, false); // perform lu decomposition

      var f = csLu(a, s, threshold); // return decomposition

      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function toString() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/derivative.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/derivative.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDerivative": () => (/* binding */ createDerivative)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'derivative';
var dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createDerivative = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    parse,
    simplify,
    equal,
    isZero,
    numeric,
    ConstantNode,
    FunctionNode,
    OperatorNode,
    ParenthesisNode,
    SymbolNode
  } = _ref;

  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var derivative = typed('derivative', {
    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
      var constNodes = {};
      constTag(constNodes, expr, variable.name);

      var res = _derivative(expr, constNodes);

      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
      return this(expr, variable, {
        simplify: true
      });
    },
    'string, SymbolNode': function stringSymbolNode(expr, variable) {
      return this(parse(expr), variable);
    },
    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
      return this(parse(expr), variable, options);
    },
    'string, string': function stringString(expr, variable) {
      return this(parse(expr), parse(variable));
    },
    'string, string, Object': function stringStringObject(expr, variable, options) {
      return this(parse(expr), parse(variable), options);
    },
    'Node, string': function NodeString(expr, variable) {
      return this(expr, parse(variable));
    },
    'Node, string, Object': function NodeStringObject(expr, variable, options) {
      return this(expr, parse(variable), options);
    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */

  });
  derivative._simplify = true;

  derivative.toTex = function (deriv) {
    return _derivTex.apply(null, deriv.args);
  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
  // NOTE: the optional "order" parameter here is currently unused


  var _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(expr) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(expr.value) === 'string') {
        return _derivTex(parse(expr.value).toString(), x.toString(), 1);
      } else {
        return _derivTex(expr.toString(), x.toString(), 1);
      }
    },
    'Node, ConstantNode': function NodeConstantNode(expr, x) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(x.value) === 'string') {
        return _derivTex(expr, parse(x.value));
      } else {
        throw new Error("The second parameter to 'derivative' is a non-string constant");
      }
    },
    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function stringStringNumber(expr, x, order) {
      var d;

      if (order === 1) {
        d = '{d\\over d' + x + '}';
      } else {
        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
      }

      return d + "\\left[".concat(expr, "\\right]");
    }
  });
  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?


  var constTag = typed('constTag', {
    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
      constNodes[node] = true;
      return true;
    },
    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name !== varName) {
        constNodes[node] = true;
        return true;
      }

      return false;
    },
    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },
    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
      if (node.params.indexOf(varName) === -1) {
        constNodes[node] = true;
        return true;
      }

      return constTag(constNodes, node.expr, varName);
    },
    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
      if (node.args.length > 0) {
        var isConst = constTag(constNodes, node.args[0], varName);

        for (var i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }

        if (isConst) {
          constNodes[node] = true;
          return true;
        }
      }

      return false;
    }
  });
  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */

  var _derivative = typed('_derivative', {
    'ConstantNode, Object': function ConstantNodeObject(node) {
      return createConstantNode(0);
    },
    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return createConstantNode(1);
    },
    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },
    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return _derivative(node.expr, constNodes);
    },
    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
      if (node.args.length !== 1) {
        funcArgsCheck(node);
      }

      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      var arg0 = node.args[0];
      var arg1;
      var div = false; // is output a fraction?

      var negative = false; // is output negative?

      var funcDerivative;

      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
          break;

        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length === 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
          } else if (node.args.length === 2) {
            // Rearrange from nthRoot(x, a) -> x^(1/a)
            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

            constNodes[arg1] = constNodes[node.args[1]];
            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
          }

          break;

        case 'log10':
          arg1 = createConstantNode(10);

        /* fall through! */

        case 'log':
          if (!arg1 && node.args.length === 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg0.clone();
            div = true;
          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
            div = true;
          } else if (node.args.length === 2) {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
          }

          break;

        case 'pow':
          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg0.clone()]);
          break;

        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg0.clone()]);
          break;

        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
          break;

        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
          break;

        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
          break;

        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
          break;

        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
          break;

        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
          break;

        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
          break;

        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
          break;

        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
          break;

        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

        default:
          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }

      var op, func;

      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }
      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */


      var chainDerivative = _derivative(arg0, constNodes);

      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }

      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },
    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      if (node.op === '+') {
        // d/dx(sum(f(x)) = sum(f'(x))
        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
          return _derivative(arg, constNodes);
        }));
      }

      if (node.op === '-') {
        // d/dx(+/-f(x)) = +/-f'(x)
        if (node.isUnary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


        if (node.isBinary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
        }
      }

      if (node.op === '*') {
        // d/dx(c*f(x)) = c*f'(x)
        var constantTerms = node.args.filter(function (arg) {
          return constNodes[arg] !== undefined;
        });

        if (constantTerms.length > 0) {
          var nonConstantTerms = node.args.filter(function (arg) {
            return constNodes[arg] === undefined;
          });
          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
          return new OperatorNode('*', 'multiply', newArgs);
        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
          }));
        }));
      }

      if (node.op === '/' && node.isBinary()) {
        var arg0 = node.args[0];
        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

        if (constNodes[arg1] !== undefined) {
          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


        if (constNodes[arg0] !== undefined) {
          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
      }

      if (node.op === '^' && node.isBinary()) {
        var _arg = node.args[0];
        var _arg2 = node.args[1];

        if (constNodes[_arg] !== undefined) {
          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
            return createConstantNode(0);
          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
        }

        if (constNodes[_arg2] !== undefined) {
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_arg2)) {
            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
            if (isZero(_arg2.value)) {
              return createConstantNode(0);
            } // Ignore exponent; f(x)^1 = f(x)


            if (equal(_arg2.value, 1)) {
              return _derivative(_arg, constNodes);
            }
          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
      }

      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */


  function funcArgsCheck(node) {
    // TODO add min, max etc
    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
      return;
    } // There should be an incorrect number of arguments if we reach here
    // Change all args to constants to avoid unidentified
    // symbol error when compiling function


    for (var i = 0; i < node.args.length; ++i) {
      node.args[i] = createConstantNode(0);
    }

    node.compile().evaluate();
    throw new Error('Expected TypeError, but none found');
  }
  /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */


  function createConstantNode(value, valueType) {
    return new ConstantNode(numeric(value, valueType || config.number));
  }

  return derivative;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/rationalize.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/rationalize.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRationalize": () => (/* binding */ createRationalize)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _simplify_simplifyConstant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simplify/simplifyConstant.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js");
/* harmony import */ var _simplify_simplifyCore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./simplify/simplifyCore.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyCore.js");




var name = 'rationalize';
var dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
var createRationalize = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    typed,
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    parse,
    simplify,
    fraction,
    bignumber,
    mathWithTransform,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode,
    ParenthesisNode
  } = _ref;
  var simplifyConstant = (0,_simplify_simplifyConstant_js__WEBPACK_IMPORTED_MODULE_1__.createSimplifyConstant)({
    typed,
    config,
    mathWithTransform,
    fraction,
    bignumber,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode
  });
  var simplifyCore = (0,_simplify_simplifyCore_js__WEBPACK_IMPORTED_MODULE_2__.createSimplifyCore)({
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    ParenthesisNode
  });
  /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */

  return typed(name, {
    string: function string(expr) {
      return this(parse(expr), {}, false);
    },
    'string, boolean': function stringBoolean(expr, detailed) {
      return this(parse(expr), {}, detailed);
    },
    'string, Object': function stringObject(expr, scope) {
      return this(parse(expr), scope, false);
    },
    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
      return this(parse(expr), scope, detailed);
    },
    Node: function Node(expr) {
      return this(expr, {}, false);
    },
    'Node, boolean': function NodeBoolean(expr, detailed) {
      return this(expr, {}, detailed);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return this(expr, scope, false);
    },
    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

      var nVars = polyRet.variables.length;
      expr = polyRet.expression;

      if (nVars >= 1) {
        // If expression in not a constant
        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

        var sBefore; // Previous expression

        var rules;
        var eDistrDiv = true;
        var redoInic = false;
        expr = simplify(expr, setRules.firstRules, {}, {
          exactFractions: false
        }); // Apply the initial rules, including succ div rules

        var s;

        while (true) {
          // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
          expr = simplify(expr, rules); // until no more changes

          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

          s = expr.toString();

          if (s === sBefore) {
            break; // No changes : end of the loop
          }

          redoInic = true;
          sBefore = s;
        }

        if (redoInic) {
          // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr, setRules.firstRulesAgain, {}, {
            exactFractions: false
          });
        }

        expr = simplify(expr, setRules.finalRules, {}, {
          exactFractions: false
        }); // Apply final rules
      } // NVars >= 1


      var coefficients = [];
      var retRationalize = {};

      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
        // Separate numerator from denominator
        if (nVars === 1) {
          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
          expr.args[1] = polyToCanonical(expr.args[1]);
        }

        if (detailed) {
          retRationalize.numerator = expr.args[0];
          retRationalize.denominator = expr.args[1];
        }
      } else {
        if (nVars === 1) {
          expr = polyToCanonical(expr, coefficients);
        }

        if (detailed) {
          retRationalize.numerator = expr;
          retRationalize.denominator = null;
        }
      } // nVars


      if (!detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    } // ^^^^^^^ end of rationalize ^^^^^^^^

  }); // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */

  function polynomial(expr, scope, extended, rules) {
    var variables = [];
    var node = simplify(expr, rules, scope, {
      exactFractions: false
    }); // Resolves any variables and functions with all defined parameters

    extended = !!extended;
    var oper = '+-*' + (extended ? '/' : '');
    recPoly(node);
    var retFunc = {};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; // -------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */

    function recPoly(node) {
      var tp = node.type; // node type

      if (tp === 'FunctionNode') {
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        if (node.op === '^') {
          // TODO: handle negative exponents like in '1/x^(-2)'
          if (node.args[1].type !== 'ConstantNode' || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(parseFloat(node.args[1].value))) {
            throw new Error('There is a non-integer exponent');
          } else {
            recPoly(node.args[0]);
          }
        } else {
          if (oper.indexOf(node.op) === -1) {
            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
          }

          for (var i = 0; i < node.args.length; i++) {
            recPoly(node.args[i]);
          }
        } // type of operator

      } else if (tp === 'SymbolNode') {
        var _name = node.name; // variable name

        var pos = variables.indexOf(_name);

        if (pos === -1) {
          // new variable in expression
          variables.push(_name);
        }
      } else if (tp === 'ParenthesisNode') {
        recPoly(node.content);
      } else if (tp !== 'ConstantNode') {
        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
      }
    } // end of recPoly

  } // end of polynomial
  // ---------------------------------------------------------------------------------------

  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */


  function rulesRationalize() {
    var oldRules = [simplifyCore, // sCore
    {
      l: 'n+n',
      r: '2*n'
    }, {
      l: 'n+-n',
      r: '0'
    }, simplifyConstant, // sConstant
    {
      l: 'n*(n1^-1)',
      r: 'n/n1'
    }, {
      l: 'n*n1^-n2',
      r: 'n/n1^n2'
    }, {
      l: 'n1^-1',
      r: '1/n1'
    }, {
      l: 'n*(n1/n2)',
      r: '(n*n1)/n2'
    }, {
      l: '1*n',
      r: 'n'
    }];
    var rulesFirst = [{
      l: '(-n1)/(-n2)',
      r: 'n1/n2'
    }, // Unary division
    {
      l: '(-n1)*(-n2)',
      r: 'n1*n2'
    }, // Unary multiplication
    {
      l: 'n1--n2',
      r: 'n1+n2'
    }, // '--' elimination
    {
      l: 'n1-n2',
      r: 'n1+(-n2)'
    }, // Subtraction turn into add with un�ry minus
    {
      l: '(n1+n2)*n3',
      r: '(n1*n3 + n2*n3)'
    }, // Distributive 1
    {
      l: 'n1*(n2+n3)',
      r: '(n1*n2+n1*n3)'
    }, // Distributive 2
    {
      l: 'c1*n + c2*n',
      r: '(c1+c2)*n'
    }, // Joining constants
    {
      l: 'c1*n + n',
      r: '(c1+1)*n'
    }, // Joining constants
    {
      l: 'c1*n - c2*n',
      r: '(c1-c2)*n'
    }, // Joining constants
    {
      l: 'c1*n - n',
      r: '(c1-1)*n'
    }, // Joining constants
    {
      l: 'v/c',
      r: '(1/c)*v'
    }, // variable/constant (new!)
    {
      l: 'v/-c',
      r: '-(1/c)*v'
    }, // variable/constant (new!)
    {
      l: '-v*-c',
      r: 'c*v'
    }, // Inversion constant and variable 1
    {
      l: '-v*c',
      r: '-c*v'
    }, // Inversion constant and variable 2
    {
      l: 'v*-c',
      r: '-c*v'
    }, // Inversion constant and variable 3
    {
      l: 'v*c',
      r: 'c*v'
    }, // Inversion constant and variable 4
    {
      l: '-(-n1*n2)',
      r: '(n1*n2)'
    }, // Unary propagation
    {
      l: '-(n1*n2)',
      r: '(-n1*n2)'
    }, // Unary propagation
    {
      l: '-(-n1+n2)',
      r: '(n1-n2)'
    }, // Unary propagation
    {
      l: '-(n1+n2)',
      r: '(-n1-n2)'
    }, // Unary propagation
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    }, // Power to Power
    {
      l: '-(-n1/n2)',
      r: '(n1/n2)'
    }, // Division and Unary
    {
      l: '-(n1/n2)',
      r: '(-n1/n2)'
    }]; // Divisao and Unary

    var rulesDistrDiv = [{
      l: '(n1/n2 + n3/n4)',
      r: '((n1*n4 + n3*n2)/(n2*n4))'
    }, // Sum of fractions
    {
      l: '(n1/n2 + n3)',
      r: '((n1 + n3*n2)/n2)'
    }, // Sum fraction with number 1
    {
      l: '(n1 + n2/n3)',
      r: '((n1*n3 + n2)/n3)'
    }]; // Sum fraction with number 1

    var rulesSucDiv = [{
      l: '(n1/(n2/n3))',
      r: '((n1*n3)/n2)'
    }, // Division simplification
    {
      l: '(n1/n2/n3)',
      r: '(n1/(n2*n3))'
    }];
    var setRules = {}; // rules set in 4 steps.
    // All rules => infinite loop
    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
    // Division simplification
    // Second rule set.
    // There is no aggregate expression with parentesis, but the only variable can be scattered.

    setRules.finalRules = [simplifyCore, // simplify.rules[0]
    {
      l: 'n*-n',
      r: '-n^2'
    }, // Joining multiply with power 1
    {
      l: 'n*n',
      r: 'n^2'
    }, // Joining multiply with power 2
    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
    {
      l: 'n*-n^n1',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 3
    {
      l: 'n*n^n1',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 4
    {
      l: 'n^n1*-n^n2',
      r: '-n^(n1+n2)'
    }, // Joining multiply with power 5
    {
      l: 'n^n1*n^n2',
      r: 'n^(n1+n2)'
    }, // Joining multiply with power 6
    {
      l: 'n^n1*-n',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 7
    {
      l: 'n^n1*n',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/-n',
      r: '-n^(n1-1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/n',
      r: 'n^(n1-1)'
    }, // Joining division with power 1
    {
      l: 'n/-n^n1',
      r: '-n^(1-n1)'
    }, // Joining division with power 2
    {
      l: 'n/n^n1',
      r: 'n^(1-n1)'
    }, // Joining division with power 3
    {
      l: 'n^n1/-n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 4
    {
      l: 'n^n1/n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 5
    {
      l: 'n1+(-n2*n3)',
      r: 'n1-n2*n3'
    }, // Solving useless parenthesis 1
    {
      l: 'v*(-c)',
      r: '-c*v'
    }, // Solving useless unary 2
    {
      l: 'n1+-n2',
      r: 'n1-n2'
    }, // Solving +- together (new!)
    {
      l: 'v*c',
      r: 'c*v'
    }, // inversion constant with variable
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    } // Power to Power
    ];
    return setRules;
  } // End rulesRationalize
  // ---------------------------------------------------------------------------------------

  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */


  function expandPower(node, parent, indParent) {
    var tp = node.type;
    var internal = arguments.length > 1; // TRUE in internal calls

    if (tp === 'OperatorNode' && node.isBinary()) {
      var does = false;
      var val;

      if (node.op === '^') {
        // First operator: Parenthesis or UnaryMinus
        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
          // Second operator: Constant
          val = parseFloat(node.args[1].value);
          does = val >= 2 && (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(val);
        }
      }

      if (does) {
        // Exponent >= 2
        // Before:
        //            operator A --> Subtree
        // parent pow
        //            constant
        //
        if (val > 2) {
          // Exponent > 2,
          // AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  *
          //                 deep clone (operator A --> Subtree
          //             pow
          //                 constant - 1
          //
          var nEsqTopo = node.args[0];
          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else {
          // Expo = 2 - no power
          // AFTER:  (exponent =  2)
          //             operator A --> Subtree
          // parent   oper
          //            deep clone (operator A --> Subtree)
          //
          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        }

        if (internal) {
          // Change parent references in internal recursive calls
          if (indParent === 'content') {
            parent.content = node;
          } else {
            parent.args[indParent] = node;
          }
        }
      } // does

    } // binary OperatorNode


    if (tp === 'ParenthesisNode') {
      // Recursion
      expandPower(node.content, node, 'content');
    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
      for (var i = 0; i < node.args.length; i++) {
        expandPower(node.args[i], node, i);
      }
    }

    if (!internal) {
      // return the root node
      return node;
    }
  } // End expandPower
  // ---------------------------------------------------------------------------------------

  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */


  function polyToCanonical(node, coefficients) {
    if (coefficients === undefined) {
      coefficients = [];
    } // coefficients.


    coefficients[0] = 0; // index is the exponent

    var o = {};
    o.cte = 1;
    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
    //       It is used to deduce the exponent: 1 for *, 0 for "".

    o.fire = '';
    var maxExpo = 0; // maximum exponent

    var varname = ''; // variable name

    recurPol(node, null, o);
    maxExpo = coefficients.length - 1;
    var first = true;
    var no;

    for (var i = maxExpo; i >= 0; i--) {
      if (coefficients[i] === 0) continue;
      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
      var op = coefficients[i] < 0 ? '-' : '+';

      if (i > 0) {
        // Is not a constant without variable
        var n2 = new SymbolNode(varname);

        if (i > 1) {
          var n3 = new ConstantNode(i);
          n2 = new OperatorNode('^', 'pow', [n2, n3]);
        }

        if (coefficients[i] === -1 && first) {
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);
        } else if (Math.abs(coefficients[i]) === 1) {
          n1 = n2;
        } else {
          n1 = new OperatorNode('*', 'multiply', [n1, n2]);
        }
      }

      if (first) {
        no = n1;
      } else if (op === '+') {
        no = new OperatorNode('+', 'add', [no, n1]);
      } else {
        no = new OperatorNode('-', 'subtract', [no, n1]);
      }

      first = false;
    } // for


    if (first) {
      return new ConstantNode(0);
    } else {
      return no;
    }
    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */


    function recurPol(node, noPai, o) {
      var tp = node.type;

      if (tp === 'FunctionNode') {
        // ***** FunctionName *****
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

        if (noPai !== null) {
          // -(unary),^  : children of *,+,-
          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+,* : children of +,-


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+ : first child


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
            throw new Error('Invalid ' + node.op + ' placing');
          }
        } // Has parent
        // Firers: ^,*       Old:   ^,&,-(unary): firers


        if (node.op === '^' || node.op === '*') {
          o.fire = node.op;
        }

        for (var _i = 0; _i < node.args.length; _i++) {
          // +,-: reset fire
          if (node.fn === 'unaryMinus') o.oper = '-';

          if (node.op === '+' || node.fn === 'subtract') {
            o.fire = '';
            o.cte = 1; // default if there is no constant

            o.oper = _i === 0 ? '+' : node.op;
          }

          o.noFil = _i; // number of son

          recurPol(node.args[_i], node, o);
        } // for in children

      } else if (tp === 'SymbolNode') {
        // ***** SymbolName *****
        if (node.name !== varname && varname !== '') {
          throw new Error('There is more than one variable');
        }

        varname = node.name;

        if (noPai === null) {
          coefficients[1] = 1;
          return;
        } // ^: Symbol is First child


        if (noPai.op === '^' && o.noFil !== 0) {
          throw new Error('In power the variable should be the first parameter');
        } // *: Symbol is Second child


        if (noPai.op === '*' && o.noFil !== 1) {
          throw new Error('In multiply the variable should be the second parameter');
        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


        if (o.fire === '' || o.fire === '*') {
          if (maxExpo < 1) coefficients[1] = 0;
          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(1, maxExpo);
        }
      } else if (tp === 'ConstantNode') {
        var valor = parseFloat(node.value);

        if (noPai === null) {
          coefficients[0] = valor;
          return;
        }

        if (noPai.op === '^') {
          // cte: second  child of power
          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

          if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(valor) || valor <= 0) {
            throw new Error('Non-integer exponent is not allowed');
          }

          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
            coefficients[_i2] = 0;
          }

          if (valor > maxExpo) coefficients[valor] = 0;
          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(valor, maxExpo);
          return;
        }

        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

        if (o.fire === '') {
          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
        }
      } else {
        throw new Error('Type ' + tp + ' is not allowed');
      }
    } // End of recurPol

  } // End of polyToCanonical

});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/simplify.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/simplify.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSimplify": () => (/* binding */ createSimplify)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _simplify_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simplify/util.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/util.js");
/* harmony import */ var _simplify_simplifyCore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./simplify/simplifyCore.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyCore.js");
/* harmony import */ var _simplify_simplifyConstant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simplify/simplifyConstant.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js");
/* harmony import */ var _simplify_resolve_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simplify/resolve.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");







var name = 'simplify';
var dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createSimplify = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    typed,
    parse,
    add,
    subtract,
    multiply,
    divide,
    pow,
    isZero,
    equal,
    fraction,
    bignumber,
    mathWithTransform,
    ConstantNode,
    FunctionNode,
    OperatorNode,
    ParenthesisNode,
    SymbolNode
  } = _ref;
  var simplifyConstant = (0,_simplify_simplifyConstant_js__WEBPACK_IMPORTED_MODULE_1__.createSimplifyConstant)({
    typed,
    config,
    mathWithTransform,
    fraction,
    bignumber,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode
  });
  var simplifyCore = (0,_simplify_simplifyCore_js__WEBPACK_IMPORTED_MODULE_2__.createSimplifyCore)({
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    ParenthesisNode
  });
  var resolve = (0,_simplify_resolve_js__WEBPACK_IMPORTED_MODULE_3__.createResolve)({
    parse,
    FunctionNode,
    OperatorNode,
    ParenthesisNode
  });
  var {
    isCommutative,
    isAssociative,
    flatten,
    unflattenr,
    unflattenl,
    createMakeNodeFunction
  } = (0,_simplify_util_js__WEBPACK_IMPORTED_MODULE_4__.createUtil)({
    FunctionNode,
    OperatorNode,
    SymbolNode
  });
  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available:
   *  - `exactFractions`: a boolean which is `true` by default.
   *  - `fractionsLimit`: when `exactFractions` is true, a fraction will be returned
   *    only when both numerator and denominator are smaller than `fractionsLimit`.
   *    Default value is 10000.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */

  var simplify = typed('simplify', {
    string: function string(expr) {
      return this(parse(expr), this.rules, {}, {});
    },
    'string, Object': function stringObject(expr, scope) {
      return this(parse(expr), this.rules, scope, {});
    },
    'string, Object, Object': function stringObjectObject(expr, scope, options) {
      return this(parse(expr), this.rules, scope, options);
    },
    'string, Array': function stringArray(expr, rules) {
      return this(parse(expr), rules, {}, {});
    },
    'string, Array, Object': function stringArrayObject(expr, rules, scope) {
      return this(parse(expr), rules, scope, {});
    },
    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {
      return this(parse(expr), rules, scope, options);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return this(expr, this.rules, scope, {});
    },
    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {
      return this(expr, this.rules, scope, options);
    },
    Node: function Node(expr) {
      return this(expr, this.rules, {}, {});
    },
    'Node, Array': function NodeArray(expr, rules) {
      return this(expr, rules, {}, {});
    },
    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
      return this(expr, rules, scope, {});
    },
    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
      rules = _buildRules(rules);
      var res = resolve(expr, scope);
      res = removeParens(res);
      var visited = {};
      var str = res.toString({
        parenthesis: 'all'
      });

      while (!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols

        for (var i = 0; i < rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res, options);
          } else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }

          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }

        str = res.toString({
          parenthesis: 'all'
        });
      }

      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;

  function removeParens(node) {
    return node.transform(function (node, path, parent) {
      return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isParenthesisNode)(node) ? removeParens(node.content) : node;
    });
  } // All constants that are allowed in rules


  var SUPPORTED_CONSTANTS = {
    true: true,
    false: true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true // null: false,
    // undefined: false,
    // version: false,

  }; // Array of strings, used to build the ruleSet.
  // Each l (left side) and r (right side) are parsed by
  // the expression parser into a node tree.
  // Left hand sides are matched to subtrees within the
  // expression to be parsed and replaced with the right
  // hand side.
  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
  // It is possible to get into an infinite loop with conflicting rules

  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
  // { l: 'n^0', r: '1' },     // simplifyCore
  // { l: '0*n', r: '0' },     // simplifyCore
  // { l: 'n/n', r: '1'},      // simplifyCore
  // { l: 'n^1', r: 'n' },     // simplifyCore
  // { l: '+n1', r:'n1' },     // simplifyCore
  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
  {
    l: 'log(e)',
    r: '1'
  }, // temporary rules
  {
    l: 'n-n1',
    r: 'n+-n1'
  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
  {
    l: '-(c*v)',
    r: '(-c) * v'
  }, // make non-constant terms positive
  {
    l: '-v',
    r: '(-1) * v'
  }, {
    l: 'n/n1^n2',
    r: 'n*n1^-n2'
  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
  {
    l: 'n/n1',
    r: 'n*n1^-1'
  }, // expand nested exponentiation
  {
    l: '(n ^ n1) ^ n2',
    r: 'n ^ (n1 * n2)'
  }, // collect like factors
  {
    l: 'n*n',
    r: 'n^2'
  }, {
    l: 'n * n^n1',
    r: 'n^(n1+1)'
  }, {
    l: 'n^n1 * n^n2',
    r: 'n^(n1+n2)'
  }, // collect like terms
  {
    l: 'n+n',
    r: '2*n'
  }, {
    l: 'n+-n',
    r: '0'
  }, {
    l: 'n1*n2 + n2',
    r: '(n1+1)*n2'
  }, {
    l: 'n1*n3 + n2*n3',
    r: '(n1+n2)*n3'
  }, // remove parenthesis in the case of negating a quantitiy
  {
    l: 'n1 + -1 * (n2 + n3)',
    r: 'n1 + -1 * n2 + -1 * n3'
  }, simplifyConstant, {
    l: '(-n)*n1',
    r: '-(n*n1)'
  }, // make factors positive (and undo 'make non-constant terms positive')
  // ordering of constants
  {
    l: 'c+v',
    r: 'v+c',
    context: {
      add: {
        commutative: false
      }
    }
  }, {
    l: 'v*c',
    r: 'c*v',
    context: {
      multiply: {
        commutative: false
      }
    }
  }, // undo temporary rules
  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
  {
    l: 'n+-n1',
    r: 'n-n1'
  }, // undo replace 'subtract'
  {
    l: 'n*(n1^-1)',
    r: 'n/n1'
  }, // undo replace 'divide'
  {
    l: 'n*n1^-n2',
    r: 'n/n1^n2'
  }, {
    l: 'n1^-1',
    r: '1/n1'
  }, {
    l: 'n*(n1/n2)',
    r: '(n*n1)/n2'
  }, // '*' before '/'
  {
    l: 'n-(n1+n2)',
    r: 'n-n1-n2'
  }, // '-' before '+'
  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
  {
    l: '1*n',
    r: 'n'
  }, // this pattern can be produced by simplifyConstant
  {
    l: 'n1/(n2/n3)',
    r: '(n1*n3)/n2'
  }];
  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */

  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    var ruleSet = [];

    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var newRule = void 0;
      var ruleType = typeof rule;

      switch (ruleType) {
        case 'string':
          {
            var lr = rule.split('->');

            if (lr.length === 2) {
              rule = {
                l: lr[0],
                r: lr[1]
              };
            } else {
              throw SyntaxError('Could not parse rule: ' + rule);
            }
          }

        /* falls through */

        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r))
          };

          if (rule.context) {
            newRule.evaluate = rule.context;
          }

          if (rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }

          if (isAssociative(newRule.l)) {
            var makeNode = createMakeNodeFunction(newRule.l);

            var expandsym = _getExpandPlaceholderSymbol();

            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.

            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }

          break;

        case 'function':
          newRule = rule;
          break;

        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      } // console.log('Adding rule: ' + rules[i])
      // console.log(newRule)


      ruleSet.push(newRule);
    }

    return ruleSet;
  }

  var _lastsym = 0;

  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }
  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */


  var applyRule = typed('applyRule', {
    'Node, Object': function NodeObject(node, rule) {
      // console.log('Entering applyRule(' + node.toString() + ')')
      // Do not clone node unless we find a match
      var res = node; // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged

      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for (var i = 0; i < res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      } else if (res instanceof ParenthesisNode) {
        if (res.content) {
          res.content = applyRule(res.content, rule);
        }
      } // Try to match a rule against this node


      var repl = rule.r;

      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }

      if (matches) {
        // const before = res.toString({parenthesis: 'all'})
        // Create a new node by cloning the rhs of the matched rule
        // we keep any implicit multiplication state if relevant
        var implicit = res.implicit;
        res = repl.clone();

        if (implicit && 'implicit' in repl) {
          res.implicit = true;
        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


        res = res.transform(function (node) {
          if (node.isSymbolNode && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_6__.hasOwnProperty)(matches.placeholders, node.name)) {
            return matches.placeholders[node.name].clone();
          } else {
            return node;
          }
        }); // const after = res.toString({parenthesis: 'all'})
        // console.log('Simplified ' + before + ' to ' + after)
      }

      return res;
    }
  });
  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */

  function getSplits(node, context) {
    var res = [];
    var right, rightArgs;
    var makeNode = createMakeNodeFunction(node);

    if (isCommutative(node, context)) {
      for (var i = 0; i < node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    } else {
      rightArgs = node.args.slice(1);
      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }

    return res;
  }
  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */


  function mergeMatch(match1, match2) {
    var res = {
      placeholders: {}
    }; // Some matches may not have placeholders; this is OK

    if (!match1.placeholders && !match2.placeholders) {
      return res;
    } else if (!match1.placeholders) {
      return match2;
    } else if (!match2.placeholders) {
      return match1;
    } // Placeholders with the same key must match exactly


    for (var key in match1.placeholders) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_6__.hasOwnProperty)(match1.placeholders, key)) {
        res.placeholders[key] = match1.placeholders[key];

        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_6__.hasOwnProperty)(match2.placeholders, key)) {
          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
            return null;
          }
        }
      }
    }

    for (var _key in match2.placeholders) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_6__.hasOwnProperty)(match2.placeholders, _key)) {
        res.placeholders[_key] = match2.placeholders[_key];
      }
    }

    return res;
  }
  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */


  function combineChildMatches(list1, list2) {
    var res = [];

    if (list1.length === 0 || list2.length === 0) {
      return res;
    }

    var merged;

    for (var i1 = 0; i1 < list1.length; i1++) {
      for (var i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);

        if (merged) {
          res.push(merged);
        }
      }
    }

    return res;
  }
  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */


  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }

    var sets = childMatches.reduce(combineChildMatches);
    var uniqueSets = [];
    var unique = {};

    for (var i = 0; i < sets.length; i++) {
      var s = JSON.stringify(sets[i]);

      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }

    return uniqueSets;
  }
  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */


  function _ruleMatch(rule, node, isSplit) {
    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
    //    console.log('rule = ' + rule)
    //    console.log('node = ' + node)
    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
    var res = [{
      placeholders: {}
    }];

    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      } else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      } // rule and node match. Search the children of rule and node.


      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {
        // Expect non-associative operators to match exactly
        var childMatches = [];

        for (var i = 0; i < rule.args.length; i++) {
          var childMatch = _ruleMatch(rule.args[i], node.args[i]);

          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          } // The child matched, so add the information returned from the child to our result


          childMatches.push(childMatch);
        }

        res = mergeChildMatches(childMatches);
      } else if (node.args.length >= 2 && rule.args.length === 2) {
        // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        var splits = getSplits(node, rule.context);
        var splitMatches = [];

        for (var _i = 0; _i < splits.length; _i++) {
          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here


          splitMatches = splitMatches.concat(matchSet);
        }

        return splitMatches;
      } else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      } else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    } else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }

      if (SUPPORTED_CONSTANTS[rule.name]) {
        // built-in constant must match exactly
        if (rule.name !== node.name) {
          return [];
        }
      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      } else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isConstantNode)(node)) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      } else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if (node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      } else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    } else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if (!equal(rule.value, node.value)) {
        return [];
      }
    } else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    } // It's a match!
    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


    return res;
  }
  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */


  function _exactMatch(p, q) {
    if (p instanceof ConstantNode && q instanceof ConstantNode) {
      if (!equal(p.value, q.value)) {
        return false;
      }
    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
      if (p.name !== q.name) {
        return false;
      }
    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      } else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }

      if (p.args.length !== q.args.length) {
        return false;
      }

      for (var i = 0; i < p.args.length; i++) {
        if (!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    } else {
      return false;
    }

    return true;
  }

  return simplify;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createResolve": () => (/* binding */ createResolve)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'resolve';
var dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
var createResolve = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    parse,
    FunctionNode,
    OperatorNode,
    ParenthesisNode
  } = _ref;

  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
      return node;
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(node)) {
      var value = scope[node.name];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNode)(value)) {
        return resolve(value, scope);
      } else if (typeof value === 'number') {
        return parse(String(value));
      }
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node)) {
      var args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new OperatorNode(node.op, node.fn, args, node.implicit);
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isParenthesisNode)(node)) {
      return new ParenthesisNode(resolve(node.content, scope));
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionNode)(node)) {
      var _args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });

      return new FunctionNode(node.name, _args);
    }

    return node;
  }

  return resolve;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSimplifyConstant": () => (/* binding */ createSimplifyConstant)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/mathjs/lib/esm/function/algebra/simplify/util.js");
/* harmony import */ var _utils_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/noop.js */ "./node_modules/mathjs/lib/esm/utils/noop.js");
// TODO this could be improved by simplifying seperated constants under associative and commutative operators




var name = 'simplifyConstant';
var dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
var createSimplifyConstant = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    mathWithTransform,
    fraction,
    bignumber,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode
  } = _ref;
  var {
    isCommutative,
    isAssociative,
    allChildren,
    createMakeNodeFunction
  } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.createUtil)({
    FunctionNode,
    OperatorNode,
    SymbolNode
  });

  function simplifyConstant(expr, options) {
    var res = foldFraction(expr, options);
    return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(res) ? res : _toNode(res);
  }

  function _eval(fnname, args, options) {
    try {
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    } catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function (x) {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isFraction)(x)) {
          return x.valueOf();
        }

        return x;
      });
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    }
  }

  var _toNode = typed({
    Fraction: _fractionToNode,
    number: function number(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n);
    },
    BigNumber: function BigNumber(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
    },
    Complex: function Complex(s) {
      throw new Error('Cannot convert Complex number to Node');
    }
  }); // convert a number to a fraction only if it can be expressed exactly,
  // and when both numerator and denominator are small enough


  function _exactFraction(n, options) {
    var exactFractions = options && options.exactFractions !== false;

    if (exactFractions && isFinite(n) && fraction) {
      var f = fraction(n);
      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default

      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {
        return f;
      }
    }

    return n;
  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone


  var _toNumber = typed({
    'string, Object': function stringObject(s, options) {
      if (config.number === 'BigNumber') {
        if (bignumber === undefined) {
          (0,_utils_noop_js__WEBPACK_IMPORTED_MODULE_3__.noBignumber)();
        }

        return bignumber(s);
      } else if (config.number === 'Fraction') {
        if (fraction === undefined) {
          (0,_utils_noop_js__WEBPACK_IMPORTED_MODULE_3__.noFraction)();
        }

        return fraction(s);
      } else {
        var n = parseFloat(s);
        return _exactFraction(n, options);
      }
    },
    'Fraction, Object': function FractionObject(s, options) {
      return s;
    },
    // we don't need options here
    'BigNumber, Object': function BigNumberObject(s, options) {
      return s;
    },
    // we don't need options here
    'number, Object': function numberObject(s, options) {
      return _exactFraction(s, options);
    },
    'Complex, Object': function ComplexObject(s, options) {
      if (s.im !== 0) {
        return s;
      }

      return _exactFraction(s.re, options);
    }
  });

  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }

  function _fractionToNode(f) {
    var n;
    var vn = f.s * f.n;

    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
    } else {
      n = new ConstantNode(vn);
    }

    if (f.d === 1) {
      return n;
    }

    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }
  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */


  function foldOp(fn, args, makeNode, options) {
    return args.reduce(function (a, b) {
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(a) && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(b)) {
        try {
          return _eval(fn, [a, b], options);
        } catch (ignoreandcontinue) {}

        a = _toNode(a);
        b = _toNode(b);
      } else if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(a)) {
        a = _toNode(a);
      } else if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(b)) {
        b = _toNode(b);
      }

      return makeNode([a, b]);
    });
  } // destroys the original node and returns a folded one


  function foldFraction(node, options) {
    switch (node.type) {
      case 'SymbolNode':
        return node;

      case 'ConstantNode':
        if (typeof node.value === 'number' || !isNaN(node.value)) {
          return _toNumber(node.value, options);
        }

        return node;

      case 'FunctionNode':
        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
          return node;
        }

        {
          // Process operators as OperatorNode
          var operatorFunctions = ['add', 'multiply'];

          if (operatorFunctions.indexOf(node.name) === -1) {
            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers

            if (!args.some(_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)) {
              try {
                return _eval(node.name, args, options);
              } catch (ignoreandcontine) {}
            } // Convert all args to nodes and construct a symbolic function call


            args = args.map(function (arg) {
              return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(arg) ? arg : _toNode(arg);
            });
            return new FunctionNode(node.name, args);
          } else {// treat as operator
          }
        }

      /* falls through */

      case 'OperatorNode':
        {
          var fn = node.fn.toString();

          var _args;

          var res;
          var makeNode = createMakeNodeFunction(node);

          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isOperatorNode)(node) && node.isUnary()) {
            _args = [foldFraction(node.args[0], options)];

            if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(_args[0])) {
              res = _eval(fn, _args, options);
            } else {
              res = makeNode(_args);
            }
          } else if (isAssociative(node)) {
            _args = allChildren(node);
            _args = _args.map(arg => foldFraction(arg, options));

            if (isCommutative(fn)) {
              // commutative binary operator
              var consts = [];
              var vars = [];

              for (var i = 0; i < _args.length; i++) {
                if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNode)(_args[i])) {
                  consts.push(_args[i]);
                } else {
                  vars.push(_args[i]);
                }
              }

              if (consts.length > 1) {
                res = foldOp(fn, consts, makeNode, options);
                vars.unshift(res);
                res = foldOp(fn, vars, makeNode, options);
              } else {
                // we won't change the children order since it's not neccessary
                res = foldOp(fn, _args, makeNode, options);
              }
            } else {
              // non-commutative binary operator
              res = foldOp(fn, _args, makeNode, options);
            }
          } else {
            // non-associative binary operator
            _args = node.args.map(arg => foldFraction(arg, options));
            res = foldOp(fn, _args, makeNode, options);
          }

          return res;
        }

      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content, options);

      case 'AccessorNode':
      /* falls through */

      case 'ArrayNode':
      /* falls through */

      case 'AssignmentNode':
      /* falls through */

      case 'BlockNode':
      /* falls through */

      case 'FunctionAssignmentNode':
      /* falls through */

      case 'IndexNode':
      /* falls through */

      case 'ObjectNode':
      /* falls through */

      case 'RangeNode':
      /* falls through */

      case 'ConditionalNode':
      /* falls through */

      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
    }
  }

  return simplifyConstant;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyCore.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyCore.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSimplifyCore": () => (/* binding */ createSimplifyCore)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'simplifyCore';
var dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
var createSimplifyCore = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    ParenthesisNode
  } = _ref;
  var node0 = new ConstantNode(0);
  var node1 = new ConstantNode(1);
  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */

  function simplifyCore(node) {
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node) && node.isUnary()) {
      var a0 = simplifyCore(node.args[0]);

      if (node.op === '+') {
        // unary plus
        return a0;
      }

      if (node.op === '-') {
        // unary minus
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(a0)) {
          if (a0.isUnary() && a0.op === '-') {
            return a0.args[0];
          } else if (a0.isBinary() && a0.fn === 'subtract') {
            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
          }
        }

        return new OperatorNode(node.op, node.fn, [a0]);
      }
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node) && node.isBinary()) {
      var _a = simplifyCore(node.args[0]);

      var a1 = simplifyCore(node.args[1]);

      if (node.op === '+') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return a1;
          } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1)) {
            return new ConstantNode(add(_a.value, a1.value));
          }
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1) && isZero(a1.value)) {
          return _a;
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
        }

        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
      } else if (node.op === '-') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_a) && a1) {
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1)) {
            return new ConstantNode(subtract(_a.value, a1.value));
          } else if (isZero(_a.value)) {
            return new OperatorNode('-', 'unaryMinus', [a1]);
          }
        } // if (node.fn === "subtract" && node.args.length === 2) {


        if (node.fn === 'subtract') {
          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1) && isZero(a1.value)) {
            return _a;
          }

          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
          }

          return new OperatorNode(node.op, node.fn, [_a, a1]);
        }
      } else if (node.op === '*') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (equal(_a.value, 1)) {
            return a1;
          } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1)) {
            return new ConstantNode(multiply(_a.value, a1.value));
          }
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node0;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(_a) && _a.isBinary() && _a.op === node.op) {
            var a00 = _a.args[0];

            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a00)) {
              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
            }
          }

          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
        }

        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
      } else if (node.op === '/') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
            return new ConstantNode(divide(_a.value, a1.value));
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      } else if (node.op === '^') {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node1;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else {
            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(_a)) {
              // fold constant
              return new ConstantNode(pow(_a.value, a1.value));
            } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(_a) && _a.isBinary() && _a.op === '^') {
              var a01 = _a.args[1];

              if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(a01)) {
                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
              }
            }
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      }
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isParenthesisNode)(node)) {
      var c = simplifyCore(node.content);

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isParenthesisNode)(c) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSymbolNode)(c) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isConstantNode)(c)) {
        return c;
      }

      return new ParenthesisNode(c);
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isFunctionNode)(node)) {
      var args = node.args.map(simplifyCore).map(function (arg) {
        return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isParenthesisNode)(arg) ? arg.content : arg;
      });
      return new FunctionNode(simplifyCore(node.fn), args);
    } else {// cannot simplify
    }

    return node;
  }

  return simplifyCore;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/simplify/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/simplify/util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUtil": () => (/* binding */ createUtil)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");



var name = 'simplifyUtil';
var dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
var createUtil = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    FunctionNode,
    OperatorNode,
    SymbolNode
  } = _ref;
  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  var commutative = {
    add: true,
    multiply: true
  };
  var associative = {
    add: true,
    multiply: true
  };

  function isCommutative(node, context) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node)) {
      return true;
    }

    var name = node.fn.toString();

    if (context && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(context, name) && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(context[name], 'commutative')) {
      return context[name].commutative;
    }

    return commutative[name] || false;
  }

  function isAssociative(node, context) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node)) {
      return false;
    }

    var name = node.fn.toString();

    if (context && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(context, name) && (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(context[name], 'associative')) {
      return context[name].associative;
    }

    return associative[name] || false;
  }
  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */


  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }

    node.args = allChildren(node);

    for (var i = 0; i < node.args.length; i++) {
      flatten(node.args[i]);
    }
  }
  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */


  function allChildren(node) {
    var op;
    var children = [];

    var findChildren = function findChildren(node) {
      for (var i = 0; i < node.args.length; i++) {
        var child = node.args[i];

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(child) && op === child.op) {
          findChildren(child);
        } else {
          children.push(child);
        }
      }
    };

    if (isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    } else {
      return node.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */


  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenr(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.pop();

      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }

      node.args = curnode.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */


  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenl(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.shift();

      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }

      node.args = curnode.args;
    }
  }

  function createMakeNodeFunction(node) {
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isOperatorNode)(node)) {
      return function (args) {
        try {
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } catch (err) {
          console.error(err);
          return [];
        }
      };
    } else {
      return function (args) {
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }

  return {
    createMakeNodeFunction,
    isCommutative,
    isAssociative,
    flatten,
    allChildren,
    unflattenr,
    unflattenl
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLsolve": () => (/* binding */ createLsolve)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js");


var name = 'lsolve';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolve = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divideScalar,
    multiplyScalar,
    subtract,
    equalScalar,
    DenseMatrix
  } = _ref;
  var solveValidation = (0,_utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lsolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var r = _denseForwardSubstitution(m, b);

      return r.valueOf();
    }
  });

  function _denseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;
      var xj = void 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = mdata[j][j];

        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j + 1; i < rows; i++) {
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // degenerate row, we can choose any value
        xj = 0;
      }

      x[j] = [xj];
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // matrix values & indices (column j)

        var jValues = [];
        var jIndices = []; // first and last index in the column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]

        for (var k = firstIndex; k < lastIndex; k++) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i > j) {
            // store lower triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj


        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        var xj = divideScalar(bj, vjj);

        for (var _k = 0, l = jIndices.length; _k < l; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];
        }

        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLsolveAll": () => (/* binding */ createLsolveAll)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js");


var name = 'lsolveAll';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolveAll = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divideScalar,
    multiplyScalar,
    subtract,
    equalScalar,
    DenseMatrix
  } = _ref;
  var solveValidation = (0,_utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolveAll(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]
   *
   * See also:
   *
   *    lsolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var R = _denseForwardSubstitution(m, b);

      return R.map(r => r.valueOf());
    }
  });

  function _denseForwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/project/5e6c87c554a3190001a3fc93
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];

        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);

          for (var j = i + 1; j < columns; j++) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = [...b];
          bNew[i] = 1;

          for (var _j = i + 1; _j < columns; _j++) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(x => new DenseMatrix({
      data: x.map(e => [e]),
      size: [rows, 1]
    }));
  }

  function _sparseForwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;

        for (var j = firstIndex; j < lastIndex; j++) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J > i) {
            // store lower triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }

        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii);

          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = [...b];
          bNew[i] = 1;

          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(x => new DenseMatrix({
      data: x.map(e => [e]),
      size: [rows, 1]
    }));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLusolve": () => (/* binding */ createLusolve)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js");
/* harmony import */ var _sparse_csIpvec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sparse/csIpvec.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csIpvec.js");




var name = 'lusolve';
var dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
var createLusolve = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    lup,
    slu,
    usolve,
    lsolve,
    DenseMatrix
  } = _ref;
  var solveValidation = (0,_utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */

  return typed(name, {
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      a = matrix(a);
      var d = lup(a);

      var x = _lusolve(d.L, d.U, d.p, null, b);

      return x.valueOf();
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
      var d = slu(a, order, threshold);
      return _lusolve(d.L, d.U, d.p, d.q, b);
    },
    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });

  function _toMatrix(a) {
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(a)) {
      return a;
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(a)) {
      return matrix(a);
    }

    throw new TypeError('Invalid Matrix LU decomposition');
  }

  function _lusolve(l, u, p, q, b) {
    // verify decomposition
    l = _toMatrix(l);
    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)

    if (p) {
      b = solveValidation(l, b, true);
      b._data = (0,_sparse_csIpvec_js__WEBPACK_IMPORTED_MODULE_3__.csIpvec)(p, b._data);
    } // use forward substitution to resolve L * y = b


    var y = lsolve(l, b); // use backward substitution to resolve U * x = y

    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

    if (q) {
      x._data = (0,_sparse_csIpvec_js__WEBPACK_IMPORTED_MODULE_3__.csIpvec)(q, x._data);
    }

    return x;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUsolve": () => (/* binding */ createUsolve)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js");


var name = 'usolve';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolve = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divideScalar,
    multiplyScalar,
    subtract,
    equalScalar,
    DenseMatrix
  } = _ref;
  var solveValidation = (0,_utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    usolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var r = _denseBackwardSubstitution(m, b);

      return r.valueOf();
    }
  });

  function _denseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      // b[j]
      var bj = bdata[j][0] || 0; // x[j]

      var xj = void 0;

      if (!equalScalar(bj, 0)) {
        // value at [j, j]
        var vjj = mdata[j][j];

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // zero value at j
        xj = 0;
      } // update x


      x[j] = [xj];
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      var bj = bdata[j][0] || 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // upper triangular matrix values & index (column j)

        var jValues = [];
        var jIndices = []; // first & last indeces in column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards

        for (var k = lastIndex - 1; k >= firstIndex; k--) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i < j) {
            // store upper triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj


        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        var xj = divideScalar(bj, vjj);

        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];
        }

        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUsolveAll": () => (/* binding */ createUsolveAll)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js");


var name = 'usolveAll';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolveAll = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divideScalar,
    multiplyScalar,
    subtract,
    equalScalar,
    DenseMatrix
  } = _ref;
  var solveValidation = (0,_utils_solveValidation_js__WEBPACK_IMPORTED_MODULE_1__.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolveAll(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]
   *
   * See also:
   *
   *    usolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var R = _denseBackwardSubstitution(m, b);

      return R.map(r => r.valueOf());
    }
  });

  function _denseBackwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/project/5e6c87c554a3190001a3fc93
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];

        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);

          for (var j = i - 1; j >= 0; j--) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = [...b];
          bNew[i] = 1;

          for (var _j = i - 1; _j >= 0; _j--) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(x => new DenseMatrix({
      data: x.map(e => [e]),
      size: [rows, 1]
    }));
  }

  function _sparseBackwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;

        for (var j = lastIndex - 1; j >= firstIndex; j--) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J < i) {
            // store upper triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }

        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii); // loop upper triangular

          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = [...b];
          bNew[i] = 1; // loop upper triangular

          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(x => new DenseMatrix({
      data: x.map(e => [e]),
      size: [rows, 1]
    }));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSolveValidation": () => (/* binding */ createSolveValidation)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");



function createSolveValidation(_ref) {
  var {
    DenseMatrix
  } = _ref;

  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  return function solveValidation(m, b, copy) {
    var mSize = m.size();

    if (mSize.length !== 2) {
      throw new RangeError('Matrix must be two dimensional (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_0__.format)(mSize) + ')');
    }

    var rows = mSize[0];
    var columns = mSize[1];

    if (rows !== columns) {
      throw new RangeError('Matrix must be square (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_0__.format)(mSize) + ')');
    }

    var data = [];

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(b)) {
      var bSize = b.size();
      var bdata = b._data; // 1-dim vector

      if (bSize.length === 1) {
        if (bSize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var i = 0; i < rows; i++) {
          data[i] = [bdata[i]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // 2-dim column


      if (bSize.length === 2) {
        if (bSize[0] !== rows || bSize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isDenseMatrix)(b)) {
          if (copy) {
            data = [];

            for (var _i = 0; _i < rows; _i++) {
              data[_i] = [bdata[_i][0]];
            }

            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }

          return b;
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isSparseMatrix)(b)) {
          for (var _i2 = 0; _i2 < rows; _i2++) {
            data[_i2] = [0];
          }

          var values = b._values;
          var index = b._index;
          var ptr = b._ptr;

          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
            var _i3 = index[k];
            data[_i3][0] = values[k];
          }

          return new DenseMatrix({
            data: data,
            size: [rows, 1],
            datatype: b._datatype
          });
        }
      }

      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(b)) {
      var bsize = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.arraySize)(b);

      if (bsize.length === 1) {
        if (bsize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var _i4 = 0; _i4 < rows; _i4++) {
          data[_i4] = [b[_i4]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      if (bsize.length === 2) {
        if (bsize[0] !== rows || bsize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var _i5 = 0; _i5 < rows; _i5++) {
          data[_i5] = [b[_i5][0]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsAmd": () => (/* binding */ createCsAmd)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _csFkeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csFkeep.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFkeep.js");
/* harmony import */ var _csFlip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js");
/* harmony import */ var _csTdfs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./csTdfs.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js");




var name = 'csAmd';
var dependencies = ['add', 'multiply', 'transpose'];
var createCsAmd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    add,
    multiply,
    transpose
  } = _ref;

  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */
  return function csAmd(order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // initialize vars

    var lemax = 0; // dense threshold

    var dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense); // create target matrix C

    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


    (0,_csFkeep_js__WEBPACK_IMPORTED_MODULE_1__.csFkeep)(cm, _diag, null); // C matrix arrays

    var cindex = cm._index;
    var cptr = cm._ptr; // number of nonzero elements in C

    var cnz = cptr[n]; // allocate result (n+1)

    var P = []; // create workspace (8 * (n + 1))

    var W = [];
    var len = 0; // first n + 1 entries

    var nv = n + 1; // next n + 1 entries

    var next = 2 * (n + 1); // next n + 1 entries

    var head = 3 * (n + 1); // next n + 1 entries

    var elen = 4 * (n + 1); // next n + 1 entries

    var degree = 5 * (n + 1); // next n + 1 entries

    var w = 6 * (n + 1); // next n + 1 entries

    var hhead = 7 * (n + 1); // last n + 1 entries
    // use P as workspace for last

    var last = P; // initialize quotient graph

    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


    var mindeg = 0; // vars

    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
        ;
      }

      if (W[next + k] !== -1) {
        last[W[next + k]] = -1;
      } // remove k from degree list


      W[head + mindeg] = W[next + k]; // elenk = |Ek|

      var elenk = W[elen + k]; // # of nodes k represents

      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.

      var dk = 0; // flag k as in Lk

      W[nv + k] = -nvk;
      var p = cptr[k]; // do in place if W[elen + k] === 0

      var pk1 = elenk === 0 ? p : cnz;
      var pk2 = pk1;

      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k; // list of nodes starts at cindex[pj]

          pj = p; // length of list of nodes in k

          ln = W[len + k] - elenk;
        } else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e]; // length of list of nodes in e

          ln = W[len + e];
        }

        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++]; // check  node i dead, or seen

          if ((nvi = W[nv + i]) <= 0) {
            continue;
          } // W[degree + Lk] += size of node i


          dk += nvi; // negate W[nv + i] to denote i in Lk

          W[nv + i] = -nvi; // place i in Lk

          cindex[pk2++] = i;

          if (W[next + i] !== -1) {
            last[W[next + i]] = last[i];
          } // check we need to remove i from degree list


          if (last[i] !== -1) {
            W[next + last[i]] = W[next + i];
          } else {
            W[head + W[degree + i]] = W[next + i];
          }
        }

        if (e !== k) {
          // absorb e into k
          cptr[e] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(k); // e is now a dead element

          W[w + e] = 0;
        }
      } // cindex[cnz...nzmax] is free


      if (elenk !== 0) {
        cnz = pk2;
      } // external degree of k - |Lk\i|


      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

      cptr[k] = pk1;
      W[len + k] = pk2 - pk1; // k is now an element

      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      // clear w if necessary

      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check if W[elen + i] empty, skip it

        if ((eln = W[elen + i]) <= 0) {
          continue;
        } // W[nv + i] was negated


        nvi = -W[nv + i];
        var wnvi = mark - nvi; // scan Ei

        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];

          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          } else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      } // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      // scan2: degree update


      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1; // scan Ei

        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p]; // check e is an unabsorbed element

          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            var dext = W[w + e] - mark;

            if (dext > 0) {
              // sum up the set differences
              d += dext; // keep e in Ei

              cindex[pn++] = e; // compute the hash of node i

              h += e;
            } else {
              // aggressive absorb. e->k
              cptr[e] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(k); // e is a dead element

              W[w + e] = 0;
            }
          }
        } // W[elen + i] = |Ei|


        W[elen + i] = pn - p1 + 1;
        var p3 = pn;
        var p4 = p1 + W[len + i]; // prune edges in Ai

        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p]; // check node j dead or in Lk

          var nvj = W[nv + j];

          if (nvj <= 0) {
            continue;
          } // degree(i) += |j|


          d += nvj; // place j in node list of i

          cindex[pn++] = j; // compute hash for node i

          h += j;
        } // check for mass elimination


        if (d === 0) {
          // absorb i into k
          cptr[i] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(k);
          nvi = -W[nv + i]; // |Lk| -= |i|

          dk -= nvi; // |k| += W[nv + i]

          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0; // node i is dead

          W[elen + i] = -1;
        } else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

          cindex[p1] = k; // new len of adj. list of node i

          W[len + i] = pn - p1 + 1; // finalize hash of i

          h = (h < 0 ? -h : h) % n; // place i in hash bucket

          W[next + i] = W[hhead + h];
          W[hhead + h] = i; // save hash of i in last[i]

          last[i] = h;
        }
      } // finalize |Lk|


      W[degree + k] = dk;
      lemax = Math.max(lemax, dk); // clear w

      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check i is dead, skip it

        if (W[nv + i] >= 0) {
          continue;
        } // scan hash bucket of node i


        h = last[i];
        i = W[hhead + h]; // hash bucket will be empty

        W[hhead + h] = -1;

        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];

          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
            W[w + cindex[p]] = mark;
          }

          var jlast = i; // compare i with all j

          for (j = W[next + i]; j !== -1;) {
            var ok = W[len + j] === ln && W[elen + j] === eln;

            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] !== mark) {
                ok = 0;
              }
            } // check i and j are identical


            if (ok) {
              // absorb j into i
              cptr[j] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0; // node j is dead

              W[elen + j] = -1; // delete j from hash bucket

              j = W[next + j];
              W[next + jlast] = j;
            } else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check  i is dead, skip it

        if ((nvi = -W[nv + i]) <= 0) {
          continue;
        } // restore W[nv + i]


        W[nv + i] = nvi; // compute external degree(i)

        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);

        if (W[head + d] !== -1) {
          last[W[head + d]] = i;
        } // put i back in degree list


        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i; // find new minimum degree

        mindeg = Math.min(mindeg, d);
        W[degree + i] = d; // place i in Lk

        cindex[p++] = i;
      } // # nodes absorbed into k


      W[nv + k] = nvk; // length of adj list of element k

      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1; // k is now a dead element

        W[w + k] = 0;
      }

      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    // fix assembly tree


    for (i = 0; i < n; i++) {
      cptr[i] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(cptr[i]);
    }

    for (j = 0; j <= n; j++) {
      W[head + j] = -1;
    } // place unordered nodes in lists


    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0) {
        continue;
      } // place j in list of its parent


      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    } // place elements in lists


    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0) {
        continue;
      }

      if (cptr[e] !== -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    } // postorder the assembly tree


    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] === -1) {
        k = (0,_csTdfs_js__WEBPACK_IMPORTED_MODULE_3__.csTdfs)(i, k, W, head, next, P, w);
      }
    } // remove last item in array


    P.splice(P.length - 1, 1); // return P

    return P;
  };
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */

  function _createTargetMatrix(order, a, m, n, dense) {
    // compute A'
    var at = transpose(a); // check order = 1, matrix must be square

    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    } // check order = 2, drop dense columns from M'


    if (order === 2) {
      // transpose arrays
      var tindex = at._index;
      var tptr = at._ptr; // new column index

      var p2 = 0; // loop A' columns (rows)

      for (var j = 0; j < m; j++) {
        // column j of AT starts here
        var p = tptr[j]; // new column j starts here

        tptr[j] = p2; // skip dense col j

        if (tptr[j + 1] - p > dense) {
          continue;
        } // map rows in column j of A


        for (var p1 = tptr[j + 1]; p < p1; p++) {
          tindex[p2++] = tindex[p];
        }
      } // finalize AT


      tptr[m] = p2; // recreate A from new transpose matrix

      a = transpose(at); // use A' * A

      return multiply(at, a);
    } // use A' * A, square or rectangular matrix


    return multiply(at, a);
  }
  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */


  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (var k = 0; k < n; k++) {
      W[len + k] = cptr[k + 1] - cptr[k];
    }

    W[len + n] = 0; // initialize workspace

    for (var i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1; // hash list i is empty

      W[hhead + i] = -1; // node i is just one node

      W[nv + i] = 1; // node i is alive

      W[w + i] = 1; // Ek of node i is empty

      W[elen + i] = 0; // degree of node i

      W[degree + i] = W[len + i];
    } // clear w


    var mark = _wclear(0, 0, W, w, n); // n is a dead element


    W[elen + n] = -2; // n is a root of assembly tree

    cptr[n] = -1; // n is a dead element

    W[w + n] = 0; // return mark

    return mark;
  }
  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */


  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    var nel = 0; // loop columns

    for (var i = 0; i < n; i++) {
      // degree @ i
      var d = W[degree + i]; // check node i is empty

      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++; // i is a root of assembly tree

        cptr[i] = -1;
        W[w + i] = 0;
      } else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0; // node i is dead

        W[elen + i] = -1;
        nel++;
        cptr[i] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_2__.csFlip)(n);
        W[nv + n]++;
      } else {
        var h = W[head + d];

        if (h !== -1) {
          last[h] = i;
        } // put node i in degree list d


        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }

    return nel;
  }

  function _wclear(mark, lemax, W, w, n) {
    if (mark < 2 || mark + lemax < 0) {
      for (var k = 0; k < n; k++) {
        if (W[w + k] !== 0) {
          W[w + k] = 1;
        }
      }

      mark = 2;
    } // at this point, W [0..n-1] < mark holds


    return mark;
  }

  function _diag(i, j) {
    return i !== j;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csCounts.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csCounts.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsCounts": () => (/* binding */ createCsCounts)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _csLeaf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csLeaf.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csLeaf.js");


var name = 'csCounts';
var dependencies = ['transpose'];
var createCsCounts = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    transpose
  } = _ref;

  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // variables

    var i, j, k, J, p, p0, p1; // workspace size

    var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

    var w = []; // (s)

    var ancestor = 0; // first n entries

    var maxfirst = n; // next n entries

    var prevleaf = 2 * n; // next n entries

    var first = 3 * n; // next n entries

    var head = 4 * n; // next n + 1 entries (used when ata is true)

    var next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]

    for (k = 0; k < s; k++) {
      w[k] = -1;
    } // allocate result


    var colcount = []; // (n)
    // AT = A'

    var at = transpose(a); // at arrays

    var tindex = at._index;
    var tptr = at._ptr; // find w[first + j]

    for (k = 0; k < n; k++) {
      j = post[k]; // colcount[j]=1 if j is a leaf

      colcount[j] = w[first + j] === -1 ? 1 : 0;

      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
        w[first + j] = k;
      }
    } // initialize ata if needed


    if (ata) {
      // invert post
      for (k = 0; k < n; k++) {
        w[post[k]] = k;
      } // loop rows (columns in AT)


      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
          k = Math.min(k, w[tindex[p]]);
        } // place row i in linked list k


        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    } // each node in its own set


    for (i = 0; i < n; i++) {
      w[ancestor + i] = i;
    }

    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k]; // check j is not a root

      if (parent[j] !== -1) {
        colcount[parent[j]]--;
      } // J=j for LL'=A case


      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
        for (p = tptr[J]; p < tptr[J + 1]; p++) {
          i = tindex[p];
          var r = (0,_csLeaf_js__WEBPACK_IMPORTED_MODULE_1__.csLeaf)(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

          if (r.jleaf >= 1) {
            colcount[j]++;
          } // check account for overlap in q


          if (r.jleaf === 2) {
            colcount[r.q]--;
          }
        }
      }

      if (parent[j] !== -1) {
        w[ancestor + j] = parent[j];
      }
    } // sum up colcount's of each child


    for (j = 0; j < n; j++) {
      if (parent[j] !== -1) {
        colcount[parent[j]] += colcount[j];
      }
    }

    return colcount;
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csDfs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csDfs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csDfs": () => (/* binding */ csDfs)
/* harmony export */ });
/* harmony import */ var _csMarked_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csMarked.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js");
/* harmony import */ var _csMark_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csMark.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js");
/* harmony import */ var _csUnflip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csUnflip.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csUnflip.js");



/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csDfs(j, g, top, xi, pinv) {
  // g arrays
  var index = g._index;
  var ptr = g._ptr;
  var size = g._size; // columns

  var n = size[1]; // vars

  var i, p, p2; // initialize head

  var head = 0; // initialize the recursion stack

  xi[0] = j; // loop

  while (head >= 0) {
    // get j from the top of the recursion stack
    j = xi[head]; // apply permutation vector

    var jnew = pinv ? pinv[j] : j; // check node j is marked

    if (!(0,_csMarked_js__WEBPACK_IMPORTED_MODULE_0__.csMarked)(ptr, j)) {
      // mark node j as visited
      (0,_csMark_js__WEBPACK_IMPORTED_MODULE_1__.csMark)(ptr, j); // update stack (last n entries in xi)

      xi[n + head] = jnew < 0 ? 0 : (0,_csUnflip_js__WEBPACK_IMPORTED_MODULE_2__.csUnflip)(ptr[jnew]);
    } // node j done if no unvisited neighbors


    var done = 1; // examine all neighbors of j, stack (last n entries in xi)

    for (p = xi[n + head], p2 = jnew < 0 ? 0 : (0,_csUnflip_js__WEBPACK_IMPORTED_MODULE_2__.csUnflip)(ptr[jnew + 1]); p < p2; p++) {
      // consider neighbor node i
      i = index[p]; // check we have visited node i, skip it

      if ((0,_csMarked_js__WEBPACK_IMPORTED_MODULE_0__.csMarked)(ptr, i)) {
        continue;
      } // pause depth-first search of node j, update stack (last n entries in xi)


      xi[n + head] = p; // start dfs at node i

      xi[++head] = i; // node j is not done

      done = 0; // break, to start dfs(i)

      break;
    } // check depth-first search at node j is done


    if (done) {
      // remove j from the recursion stack
      head--; // and place in the output stack

      xi[--top] = j;
    }
  }

  return top;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csEtree.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csEtree.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csEtree": () => (/* binding */ csEtree)
/* harmony export */ });
/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csEtree(a, ata) {
  // check inputs
  if (!a) {
    return null;
  } // a arrays


  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // rows & columns

  var m = asize[0];
  var n = asize[1]; // allocate result

  var parent = []; // (n)
  // allocate workspace

  var w = []; // (n + (ata ? m : 0))

  var ancestor = 0; // first n entries in w

  var prev = n; // last m entries (ata = true)

  var i, inext; // check we are calculating A'A

  if (ata) {
    // initialize workspace
    for (i = 0; i < m; i++) {
      w[prev + i] = -1;
    }
  } // loop columns


  for (var k = 0; k < n; k++) {
    // node k has no parent yet
    parent[k] = -1; // nor does k have an ancestor

    w[ancestor + k] = -1; // values in column k

    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
      // row
      var r = aindex[p]; // node

      i = ata ? w[prev + r] : r; // traverse from i to k

      for (; i !== -1 && i < k; i = inext) {
        // inext = ancestor of i
        inext = w[ancestor + i]; // path compression

        w[ancestor + i] = k; // check no anc., parent is k

        if (inext === -1) {
          parent[i] = k;
        }
      }

      if (ata) {
        w[prev + r] = k;
      }
    }
  }

  return parent;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFkeep.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csFkeep.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csFkeep": () => (/* binding */ csFkeep)
/* harmony export */ });
/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFkeep(a, callback, other) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // columns

  var n = asize[1]; // nonzero items

  var nz = 0; // loop columns

  for (var j = 0; j < n; j++) {
    // get current location of col j
    var p = aptr[j]; // record new location of col j

    aptr[j] = nz;

    for (; p < aptr[j + 1]; p++) {
      // check we need to keep this item
      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
        // keep A(i,j)
        aindex[nz] = aindex[p]; // check we need to process values (pattern only)

        if (avalues) {
          avalues[nz] = avalues[p];
        } // increment nonzero items


        nz++;
      }
    }
  } // finalize A


  aptr[n] = nz; // trim arrays

  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

  if (avalues) {
    avalues.splice(nz, avalues.length - nz);
  } // return number of nonzero items


  return nz;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csFlip": () => (/* binding */ csFlip)
/* harmony export */ });
/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFlip(i) {
  // flip the value
  return -i - 2;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csIpvec.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csIpvec.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csIpvec": () => (/* binding */ csIpvec)
/* harmony export */ });
/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */
function csIpvec(p, b) {
  // vars
  var k;
  var n = b.length;
  var x = []; // check permutation vector was provided, p = null denotes identity

  if (p) {
    // loop vector
    for (k = 0; k < n; k++) {
      // apply permutation
      x[p[k]] = b[k];
    }
  } else {
    // loop vector
    for (k = 0; k < n; k++) {
      // x[i] = b[i]
      x[k] = b[k];
    }
  }

  return x;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csLeaf.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csLeaf.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csLeaf": () => (/* binding */ csLeaf)
/* harmony export */ });
/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
  var s, sparent; // our result

  var jleaf = 0;
  var q; // check j is a leaf

  if (i <= j || w[first + j] <= w[maxfirst + i]) {
    return -1;
  } // update max first[j] seen so far


  w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

  var jprev = w[prevleaf + i];
  w[prevleaf + i] = j; // check j is first or subsequent leaf

  if (jprev === -1) {
    // 1st leaf, q = root of ith subtree
    jleaf = 1;
    q = i;
  } else {
    // update jleaf
    jleaf = 2; // q = least common ancester (jprev,j)

    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
      ;
    }

    for (s = jprev; s !== q; s = sparent) {
      // path compression
      sparent = w[ancestor + s];
      w[ancestor + s] = q;
    }
  }

  return {
    jleaf: jleaf,
    q: q
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsLu": () => (/* binding */ createCsLu)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _csSpsolve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csSpsolve.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csSpsolve.js");


var name = 'csLu';
var dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createCsLu = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    abs,
    divideScalar,
    multiply,
    subtract,
    larger,
    largerEq,
    SparseMatrix
  } = _ref;
  var csSpsolve = (0,_csSpsolve_js__WEBPACK_IMPORTED_MODULE_1__.createCsSpsolve)({
    divideScalar,
    multiply,
    subtract
  });
  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csLu(m, s, tol) {
    // validate input
    if (!m) {
      return null;
    } // m arrays


    var size = m._size; // columns

    var n = size[1]; // symbolic analysis result

    var q;
    var lnz = 100;
    var unz = 100; // update symbolic analysis parameters

    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    } // L arrays


    var lvalues = []; // (lnz)

    var lindex = []; // (lnz)

    var lptr = []; // (n + 1)
    // L

    var L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    }); // U arrays

    var uvalues = []; // (unz)

    var uindex = []; // (unz)

    var uptr = []; // (n + 1)
    // U

    var U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    }); // inverse of permutation vector

    var pinv = []; // (n)
    // vars

    var i, p; // allocate arrays

    var x = []; // (n)

    var xi = []; // (2 * n)
    // initialize variables

    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0; // no rows pivotal yet

      pinv[i] = -1; // no cols of L yet

      lptr[i + 1] = 0;
    } // reset number of nonzero elements in L and U


    lnz = 0;
    unz = 0; // compute L(:,k) and U(:,k)

    for (var k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz; // apply column permutations if needed

      var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

      var ipiv = -1;
      var a = -1; // loop xi[] from top -> n

      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p]; // check row i is not yet pivotal

        if (pinv[i] < 0) {
          // absolute value of x[i]
          var xabs = abs(x[i]); // check absoulte value is greater than pivot value

          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        } else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      } // validate we found a valid pivot


      if (ipiv === -1 || a <= 0) {
        return null;
      } // update actual pivot column, give preference to diagonal value


      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
        ipiv = col;
      } // the chosen pivot


      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

      uindex[unz] = k;
      uvalues[unz++] = pivot; // ipiv is the kth pivot row

      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

      for (p = top; p < n; p++) {
        // row
        i = xi[p]; // check x(i) is an entry in L(:,k)

        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i; // scale pivot column

          lvalues[lnz++] = divideScalar(x[i], pivot);
        } // x[0..n-1] = 0 for next k


        x[i] = 0;
      }
    } // update ptr


    lptr[n] = lnz;
    uptr[n] = unz; // fix row indices of L for final pinv

    for (p = 0; p < lnz; p++) {
      lindex[p] = pinv[lindex[p]];
    } // trim arrays


    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz); // return LU factor

    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csMark": () => (/* binding */ csMark)
/* harmony export */ });
/* harmony import */ var _csFlip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js");

/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csMark(w, j) {
  // mark w[j]
  w[j] = (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_0__.csFlip)(w[j]);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csMarked": () => (/* binding */ csMarked)
/* harmony export */ });
/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMarked(w, j) {
  // check node is marked
  return w[j] < 0;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csPermute": () => (/* binding */ csPermute)
/* harmony export */ });
/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPermute(a, pinv, q, values) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size;
  var adt = a._datatype; // rows & columns

  var m = asize[0];
  var n = asize[1]; // c arrays

  var cvalues = values && a._values ? [] : null;
  var cindex = []; // (aptr[n])

  var cptr = []; // (n + 1)
  // initialize vars

  var nz = 0; // loop columns

  for (var k = 0; k < n; k++) {
    // column k of C is column q[k] of A
    cptr[k] = nz; // apply column permutation

    var j = q ? q[k] : k; // loop values in column j of A

    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
      // row i of A is row pinv[i] of C
      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

      cindex[nz] = r; // check we need to populate values

      if (cvalues) {
        cvalues[nz] = avalues[t];
      } // increment number of nonzero elements


      nz++;
    }
  } // finalize the last column of C


  cptr[n] = nz; // return C matrix

  return a.createSparseMatrix({
    values: cvalues,
    index: cindex,
    ptr: cptr,
    size: [m, n],
    datatype: adt
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csPost": () => (/* binding */ csPost)
/* harmony export */ });
/* harmony import */ var _csTdfs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csTdfs.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js");

/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csPost(parent, n) {
  // check inputs
  if (!parent) {
    return null;
  } // vars


  var k = 0;
  var j; // allocate result

  var post = []; // (n)
  // workspace, head: first n entries, next: next n entries, stack: last n entries

  var w = []; // (3 * n)

  var head = 0;
  var next = n;
  var stack = 2 * n; // initialize workspace

  for (j = 0; j < n; j++) {
    // empty linked lists
    w[head + j] = -1;
  } // traverse nodes in reverse order


  for (j = n - 1; j >= 0; j--) {
    // check j is a root
    if (parent[j] === -1) {
      continue;
    } // add j to list of its parent


    w[next + j] = w[head + parent[j]];
    w[head + parent[j]] = j;
  } // loop nodes


  for (j = 0; j < n; j++) {
    // skip j if it is not a root
    if (parent[j] !== -1) {
      continue;
    } // depth-first search


    k = (0,_csTdfs_js__WEBPACK_IMPORTED_MODULE_0__.csTdfs)(j, k, w, head, next, post, stack);
  }

  return post;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csReach.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csReach.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csReach": () => (/* binding */ csReach)
/* harmony export */ });
/* harmony import */ var _csMarked_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csMarked.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js");
/* harmony import */ var _csMark_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csMark.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js");
/* harmony import */ var _csDfs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csDfs.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csDfs.js");



/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csReach(g, b, k, xi, pinv) {
  // g arrays
  var gptr = g._ptr;
  var gsize = g._size; // b arrays

  var bindex = b._index;
  var bptr = b._ptr; // columns

  var n = gsize[1]; // vars

  var p, p0, p1; // initialize top

  var top = n; // loop column indeces in B

  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
    // node i
    var i = bindex[p]; // check node i is marked

    if (!(0,_csMarked_js__WEBPACK_IMPORTED_MODULE_0__.csMarked)(gptr, i)) {
      // start a dfs at unmarked node i
      top = (0,_csDfs_js__WEBPACK_IMPORTED_MODULE_1__.csDfs)(i, g, top, xi, pinv);
    }
  } // loop columns from top -> n - 1


  for (p = top; p < n; p++) {
    // restore G
    (0,_csMark_js__WEBPACK_IMPORTED_MODULE_2__.csMark)(gptr, xi[p]);
  }

  return top;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csSpsolve.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csSpsolve.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsSpsolve": () => (/* binding */ createCsSpsolve)
/* harmony export */ });
/* harmony import */ var _csReach_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csReach.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csReach.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'csSpsolve';
var dependencies = ['divideScalar', 'multiply', 'subtract'];
var createCsSpsolve = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    divideScalar,
    multiply,
    subtract
  } = _ref;

  /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function csSpsolve(g, b, k, xi, x, pinv, lo) {
    // g arrays
    var gvalues = g._values;
    var gindex = g._index;
    var gptr = g._ptr;
    var gsize = g._size; // columns

    var n = gsize[1]; // b arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr; // vars

    var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

    var top = (0,_csReach_js__WEBPACK_IMPORTED_MODULE_1__.csReach)(g, b, k, xi, pinv); // clear x

    for (p = top; p < n; p++) {
      x[xi[p]] = 0;
    } // scatter b


    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      x[bindex[p]] = bvalues[p];
    } // loop columns


    for (var px = top; px < n; px++) {
      // x array index for px
      var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

      var J = pinv ? pinv[j] : j; // check column J is empty

      if (J < 0) {
        continue;
      } // column value indeces in G, p0 <= p < p1


      p0 = gptr[J];
      p1 = gptr[J + 1]; // x(j) /= G(j,j)

      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

      p = lo ? p0 + 1 : p0;
      q = lo ? p1 : p1 - 1; // loop

      for (; p < q; p++) {
        // row
        var i = gindex[p]; // x(i) -= G(i,j) * x(j)

        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    } // return top of stack


    return top;
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csSqr.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csSqr.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsSqr": () => (/* binding */ createCsSqr)
/* harmony export */ });
/* harmony import */ var _csPermute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./csPermute.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js");
/* harmony import */ var _csPost_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./csPost.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js");
/* harmony import */ var _csEtree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./csEtree.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csEtree.js");
/* harmony import */ var _csAmd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csAmd.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js");
/* harmony import */ var _csCounts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csCounts.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csCounts.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");






var name = 'csSqr';
var dependencies = ['add', 'multiply', 'transpose'];
var createCsSqr = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    add,
    multiply,
    transpose
  } = _ref;
  var csAmd = (0,_csAmd_js__WEBPACK_IMPORTED_MODULE_1__.createCsAmd)({
    add,
    multiply,
    transpose
  });
  var csCounts = (0,_csCounts_js__WEBPACK_IMPORTED_MODULE_2__.createCsCounts)({
    transpose
  });
  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csSqr(order, a, qr) {
    // a arrays
    var aptr = a._ptr;
    var asize = a._size; // columns

    var n = asize[1]; // vars

    var k; // symbolic analysis result

    var s = {}; // fill-reducing ordering

    s.q = csAmd(order, a); // validate results

    if (order && !s.q) {
      return null;
    } // QR symbolic analysis


    if (qr) {
      // apply permutations if needed
      var c = order ? (0,_csPermute_js__WEBPACK_IMPORTED_MODULE_3__.csPermute)(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

      s.parent = (0,_csEtree_js__WEBPACK_IMPORTED_MODULE_4__.csEtree)(c, 1); // post order elimination tree

      var post = (0,_csPost_js__WEBPACK_IMPORTED_MODULE_5__.csPost)(s.parent, n); // col counts chol(C'*C)

      s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) {
          s.unz += s.cp[k];
        }
      }
    } else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * aptr[n] + n;
      s.lnz = s.unz;
    } // return result S


    return s;
  };
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */

  function _vcount(a, s) {
    // a arrays
    var aptr = a._ptr;
    var aindex = a._index;
    var asize = a._size; // rows & columns

    var m = asize[0];
    var n = asize[1]; // initialize s arrays

    s.pinv = []; // (m + n)

    s.leftmost = []; // (m)
    // vars

    var parent = s.parent;
    var pinv = s.pinv;
    var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

    var w = []; // (m + 3 * n)

    var next = 0;
    var head = m;
    var tail = m + n;
    var nque = m + 2 * n; // vars

    var i, k, p, p0, p1; // initialize w

    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    } // initialize row arrays


    for (i = 0; i < m; i++) {
      leftmost[i] = -1;
    } // loop columns backwards


    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    } // scan rows in reverse order


    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i]; // check row i is empty

      if (k === -1) {
        continue;
      } // first row in queue k


      if (w[nque + k]++ === 0) {
        w[tail + k] = i;
      } // put i at head of queue k


      w[next + i] = w[head + k];
      w[head + k] = i;
    }

    s.lnz = 0;
    s.m2 = m; // find row permutation and nnz(V)

    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k]; // count V(k,k) as nonzero

      s.lnz++; // add a fictitious row

      if (i < 0) {
        i = s.m2++;
      } // associate row i with V(:,k)


      pinv[i] = k; // skip if V(k+1:m,k) is empty

      if (--nque[k] <= 0) {
        continue;
      } // nque[k] is nnz (V(k+1:m,k))


      s.lnz += w[nque + k]; // move all rows to parent of k

      var pa = parent[k];

      if (pa !== -1) {
        if (w[nque + pa] === 0) {
          w[tail + pa] = w[tail + k];
        }

        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }

    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) {
        pinv[i] = k++;
      }
    }

    return true;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csTdfs": () => (/* binding */ csTdfs)
/* harmony export */ });
/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csTdfs(j, k, w, head, next, post, stack) {
  // variables
  var top = 0; // place j on the stack

  w[stack] = j; // while (stack is not empty)

  while (top >= 0) {
    // p = top of stack
    var p = w[stack + top]; // i = youngest child of p

    var i = w[head + p];

    if (i === -1) {
      // p has no unordered children left
      top--; // node p is the kth postordered node

      post[k++] = p;
    } else {
      // remove i from children of p
      w[head + p] = w[next + i]; // increment top

      ++top; // start dfs on child node i

      w[stack + top] = i;
    }
  }

  return k;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csUnflip.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/algebra/sparse/csUnflip.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csUnflip": () => (/* binding */ csUnflip)
/* harmony export */ });
/* harmony import */ var _csFlip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js");

/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csUnflip(i) {
  // flip the value if it is negative
  return i < 0 ? (0,_csFlip_js__WEBPACK_IMPORTED_MODULE_0__.csFlip)(i) : i;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/abs.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/abs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAbs": () => (/* binding */ createAbs)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'abs';
var dependencies = ['typed'];
var createAbs = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.absNumber,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      return x.abs();
    },
    Fraction: function Fraction(x) {
      return x.abs();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since abs(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.abs();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/add.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/add.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAdd": () => (/* binding */ createAdd)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm04.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");







var name = 'add';
var dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
var createAdd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    addScalar,
    equalScalar,
    DenseMatrix,
    SparseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm04 = (0,_type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm04)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  return typed(name, (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_6__.extend)({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, addScalar);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, addScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, addScalar, true);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, addScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, addScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, addScalar, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, addScalar, true);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, addScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAddScalar": () => (/* binding */ createAddScalar)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");


var name = 'addScalar';
var dependencies = ['typed'];
var createAddScalar = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */
  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.addNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.add(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCbrt": () => (/* binding */ createCbrt)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");




var name = 'cbrt';
var dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
var createCbrt = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    typed,
    isNegative,
    unaryMinus,
    matrix,
    Complex,
    BigNumber,
    Fraction
  } = _ref;

  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    BigNumber: function BigNumber(x) {
      return x.cbrt();
    },
    Unit: _cbrtUnit,
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    var arg3 = x.arg() / 3;
    var abs = x.abs(); // principal root:

    var principal = new Complex((0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cbrtNumber)(abs), 0).mul(new Complex(0, arg3).exp());

    if (allRoots) {
      var all = [principal, new Complex((0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex((0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */


  function _cbrtUnit(x) {
    if (x.value && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isComplex)(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      var negate = isNegative(x.value);

      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this


      var third;

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isBigNumber)(x.value)) {
        third = new BigNumber(1).div(3);
      } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isFraction)(x.value)) {
        third = new Fraction(1, 3);
      } else {
        third = 1 / 3;
      }

      var _result = x.pow(third);

      if (negate) {
        _result.value = unaryMinus(_result.value);
      }

      return _result;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/ceil.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/ceil.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCeil": () => (/* binding */ createCeil)
/* harmony export */ });
/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");








var name = 'ceil';
var dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createCeil = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    round,
    matrix,
    equalScalar
  } = _ref;
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm14)({
    typed
  });
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *    math.ceil(x, n)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    math.ceil(3.212, 2)          // returns number 3.22
   *    math.ceil(3.288, 2)          // returns number 3.29
   *    math.ceil(-4.212, 2)         // returns number -4.21
   *    math.ceil(-4.782, 2)         // returns number -4.78
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('ceil', {
    number: function number(x) {
      if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_4__.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_5__.ceilNumber)(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_4__.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var [number, exponent] = "".concat(x, "e").split('e');
        var result = Math.ceil(Number("".concat(number, "e").concat(Number(exponent) + n)));
        [number, exponent] = "".concat(result, "e").split('e');
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.ceil();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.ceil(n);
    },
    BigNumber: function BigNumber(x) {
      if ((0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.ceil();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if ((0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), decimal_js__WEBPACK_IMPORTED_MODULE_0__.ROUND_CEIL);
      }
    },
    Fraction: function Fraction(x) {
      return x.ceil();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.ceil(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_7__.deepMap)(x, this, true);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      // deep map collection, skip zeros since ceil(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_7__.deepMap)(x, i => this(i, n), true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/cube.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/cube.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCube": () => (/* binding */ createCube)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'cube';
var dependencies = ['typed'];
var createCube = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cubeNumber,
    Complex: function Complex(x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },
    BigNumber: function BigNumber(x) {
      return x.times(x).times(x);
    },
    Fraction: function Fraction(x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cube(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.pow(3);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/divide.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/divide.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDivide": () => (/* binding */ createDivide)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");




var name = 'divide';
var dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
var createDivide = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    multiply,
    equalScalar,
    divideScalar,
    inv
  } = _ref;
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm14)({
    typed
  });
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  return typed('divide', (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.extend)({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function anyArrayMatrix(x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDivideScalar": () => (/* binding */ createDivideScalar)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");


var name = 'divideScalar';
var dependencies = ['typed', 'numeric'];
var createDivideScalar = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    numeric
  } = _ref;

  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x / y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(y));
      res.value = this(res.value === null ? res._normalize(one) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
      var res = y.clone();
      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(x));
      res.value = this(x, y.value === null ? y._normalize(one) : y.value);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.divide(y);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDotDivide": () => (/* binding */ createDotDivide)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");








var name = 'dotDivide';
var dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
var createDotDivide = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    divideScalar,
    DenseMatrix
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  return typed(name, {
    'any, any': divideScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, divideScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, divideScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, divideScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, divideScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, divideScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, divideScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDotMultiply": () => (/* binding */ createDotMultiply)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm09_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm09.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm09.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");






var name = 'dotMultiply';
var dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
var createDotMultiply = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    multiplyScalar
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm09 = (0,_type_matrix_utils_algorithm09_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm09)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  return typed(name, {
    'any, any': multiplyScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, multiplyScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, multiplyScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, multiplyScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, multiplyScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDotPow": () => (/* binding */ createDotPow)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");







var name = 'dotPow';
var dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
var createDotPow = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar,
    matrix,
    pow,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm14)({
    typed
  });
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  return typed(name, {
    'any, any': pow,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, pow, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, pow, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, pow, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, pow);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/exp.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/exp.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createExp": () => (/* binding */ createExp)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'exp';
var dependencies = ['typed'];
var createExp = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.expNumber,
    Complex: function Complex(x) {
      return x.exp();
    },
    BigNumber: function BigNumber(x) {
      return x.exp();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/expm1.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/expm1.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createExpm1": () => (/* binding */ createExpm1)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'expm1';
var dependencies = ['typed', 'Complex'];
var createExpm1 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Complex: _Complex
  } = _ref;

  /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.expm1Number,
    Complex: function Complex(x) {
      var r = Math.exp(x.re);
      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
    },
    BigNumber: function BigNumber(x) {
      return x.exp().minus(1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/fix.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/fix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFix": () => (/* binding */ createFix)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");



var name = 'fix';
var dependencies = ['typed', 'Complex', 'matrix', 'ceil', 'floor'];
var createFix = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Complex: _Complex,
    matrix,
    ceil,
    floor
  } = _ref;
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm14)({
    typed
  });
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    math.fix(3.12, 1)                // returns number 3.1
   *    math.fix(3.18, 1)                // returns number 3.1
   *    math.fix(-4.12, 1)               // returns number -4.1
   *    math.fix(-4.17, 1)               // returns number -4.1
   *
   *    const c = math.complex(3.22, -2.78)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *    math.fix(c, 1)               // returns Complex 3.2 - 2.7i
   *
   *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]
   *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                             Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value
   */

  return typed('fix', {
    number: function number(x) {
      return x > 0 ? floor(x) : ceil(x);
    },
    'number, number | BigNumber': function numberNumberBigNumber(x, n) {
      return x > 0 ? floor(x, n) : ceil(x, n);
    },
    Complex: function Complex(x) {
      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    'Complex, number | BigNumber': function ComplexNumberBigNumber(x, n) {
      return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
    },
    BigNumber: function BigNumber(x) {
      return x.isNegative() ? ceil(x) : floor(x);
    },
    'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {
      return x.isNegative() ? ceil(x, n) : floor(x, n);
    },
    Fraction: function Fraction(x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {
      return x.s < 0 ? x.ceil(n) : x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since fix(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(x, n) {
      // deep map collection, skip zeros since fix(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, i => this(i, n), true);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/floor.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/floor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFloor": () => (/* binding */ createFloor)
/* harmony export */ });
/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");







var name = 'floor';
var dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createFloor = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    round,
    matrix,
    equalScalar
  } = _ref;
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm14)({
    typed
  });
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *    math.floor(x, n)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    math.floor(3.212, 2)          // returns number 3.21
   *    math.floor(3.288, 2)          // returns number 3.28
   *    math.floor(-4.212, 2)         // returns number -4.22
   *    math.floor(-4.782, 2)         // returns number -4.79
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.floor(c)                 // returns Complex 3 - 3i
   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i
   *
   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]
   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('floor', {
    number: function number(x) {
      if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_4__.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return Math.floor(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_4__.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var [number, exponent] = "".concat(x, "e").split('e');
        var result = Math.floor(Number("".concat(number, "e").concat(Number(exponent) + n)));
        [number, exponent] = "".concat(result, "e").split('e');
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.floor();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.floor(n);
    },
    BigNumber: function BigNumber(x) {
      if ((0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_5__.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.floor();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if ((0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_5__.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), decimal_js__WEBPACK_IMPORTED_MODULE_0__.ROUND_FLOOR);
      }
    },
    Fraction: function Fraction(x) {
      return x.floor();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since floor(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_6__.deepMap)(x, this, true);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      // deep map collection, skip zeros since ceil(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_6__.deepMap)(x, i => this(i, n), true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/gcd.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/gcd.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createGcd": () => (/* binding */ createGcd)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm04.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");







var name = 'gcd';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createGcd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    BigNumber,
    DenseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm04 = (0,_type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm04)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.gcdNumber,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.gcd(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);

      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }

      return res;
    }
  });
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm


    var zero = new BigNumber(0);

    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }

    return a.lt(zero) ? a.neg() : a;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/hypot.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/hypot.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createHypot": () => (/* binding */ createHypot)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");


var name = 'hypot';
var dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
var createHypot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    addScalar,
    divideScalar,
    multiplyScalar,
    sqrt,
    smaller,
    isPositive
  } = _ref;

  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  return typed(name, {
    '... number | BigNumber': _hypot,
    Array: function Array(x) {
      return this.apply(this, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(x));
    },
    Matrix: function Matrix(x) {
      return this.apply(this, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;

    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);

      if (smaller(largest, value)) {
        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
        result = addScalar(result, 1);
        largest = value;
      } else {
        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
      }
    }

    return multiplyScalar(largest, sqrt(result));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/lcm.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/lcm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLcm": () => (/* binding */ createLcm)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");







var name = 'lcm';
var dependencies = ['typed', 'matrix', 'equalScalar'];
var createLcm = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm06 = (0,_type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm06)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.lcmNumber,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.lcm(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);

      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }

      return res;
    }
  });
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero()) {
      return a;
    }

    if (b.isZero()) {
      return b;
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead


    var prod = a.times(b);

    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }

    return prod.div(a).abs();
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/log.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/log.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLog": () => (/* binding */ createLog)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'log';
var dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createLog = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    divideScalar,
    Complex
  } = _ref;

  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.logNumber)(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log();
      }
    },
    Complex: function Complex(x) {
      return x.log();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(this(x), this(base));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/log10.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/log10.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLog10": () => (/* binding */ createLog10)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'log10';
var dependencies = ['typed', 'config', 'Complex'];
var createLog10 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex: _Complex
  } = _ref;

  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.log10Number)(x);
      } else {
        // negative value -> complex value computation
        return new _Complex(x, 0).log().div(Math.LN10);
      }
    },
    Complex: function Complex(x) {
      return new _Complex(x).log().div(Math.LN10);
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/log1p.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/log1p.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLog1p": () => (/* binding */ createLog1p)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");



var name = 'log1p';
var dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
var createLog1p = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    divideScalar,
    log,
    Complex
  } = _ref;

  /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 || config.predictable) {
        return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.log1p)(x);
      } else {
        // negative value -> complex value computation
        return _log1pComplex(new Complex(x, 0));
      }
    },
    Complex: _log1pComplex,
    BigNumber: function BigNumber(x) {
      var y = x.plus(1);

      if (!y.isNegative() || config.predictable) {
        return y.ln();
      } else {
        // downgrade to number, return Complex valued result
        return _log1pComplex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log1p(x, base)
      return divideScalar(this(x), log(base));
    }
  });
  /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log1pComplex(x) {
    var xRe1p = x.re + 1;
    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/log2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/log2.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLog2": () => (/* binding */ createLog2)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'log2';
var dependencies = ['typed', 'config', 'Complex'];
var createLog2 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex
  } = _ref;

  /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.log2Number)(x);
      } else {
        // negative value -> complex value computation
        return _log2Complex(new Complex(x, 0));
      }
    },
    Complex: _log2Complex,
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log(2);
      } else {
        // downgrade to number, return Complex valued result
        return _log2Complex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
  /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log2Complex(x) {
    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/mod.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/mod.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMod": () => (/* binding */ createMod)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");









var name = 'mod';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createMod = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    DenseMatrix
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm03)({
    typed
  });
  var algorithm05 = (0,_type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm05)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__.modNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isNeg()) {
        throw new Error('Cannot calculate mod for a negative divisor');
      }

      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.compare(0) < 0) {
        throw new Error('Cannot calculate mod for a negative divisor');
      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend


      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/multiply.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/multiply.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMultiply": () => (/* binding */ createMultiply)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");






var name = 'multiply';
var dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
var createMultiply = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    addScalar,
    multiplyScalar,
    equalScalar,
    dot
  } = _ref;
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm14)({
    typed
  });

  function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }

            break;

          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }

            break;

          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */


  function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) {
      throw new Error('Cannot multiply two empty vectors');
    }

    return dot(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorMatrix(a, b) {
    // process storage
    if (b.storage() !== 'dense') {
      throw new Error('Support for SparseMatrix not implemented');
    }

    return _multiplyVectorDenseMatrix(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var alength = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix columns

    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]); // loop vector

      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }

      c[j] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */


  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
    'DenseMatrix, any': _multiplyDenseMatrixVector,
    'SparseMatrix, any': _multiplySparseMatrixVector
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */


  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */


  function _multiplyDenseMatrixVector(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // sum (do not initialize it with zero)

      var sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }

      c[i] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */


  function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }

        c[i][j] = sum;
      }
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */


  function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate b matrix

    if (!bvalues) {
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    } // rows & columns


    var arows = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = b.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        var last = 0; // loop a rows

        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1; // C[i, jb]

          var cij = void 0; // values in b column j

          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0


          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */


  function _multiplySparseMatrixVector(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0]; // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace


    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c


    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr


    cptr[1] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // rows in jb

      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c


      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    var values = avalues && bvalues; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // variables

    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)


      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */


  return typed(name, (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.extend)({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function ArrayArray(x, y) {
      // check dimensions
      _validateMatrixDimensions((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.arraySize)(x), (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.arraySize)(y)); // use dense matrix implementation


      var m = this(matrix(x), matrix(y)); // return array or scalar

      return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isMatrix)(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions


      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix


        return _multiplyVectorMatrix(x, y);
      } // process y dimensions


      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix


      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use Matrix * Matrix implementation
      return this(x, matrix(y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use Matrix * Matrix implementation
      return this(matrix(x, y.storage()), y);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }

      return result;
    }
  }, multiplyScalar.signatures));
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMultiplyScalar": () => (/* binding */ createMultiplyScalar)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");


var name = 'multiplyScalar';
var dependencies = ['typed'];
var createMultiplyScalar = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */
  return typed('multiplyScalar', {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.multiplyNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
      var res = y.clone();
      res.value = res.value === null ? res._normalize(x) : this(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
      var res = x.clone();
      res.value = res.value === null ? res._normalize(y) : this(res.value, y);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.multiply(y);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/norm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/norm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNorm": () => (/* binding */ createNorm)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'norm';
var dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];
var createNorm = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    add,
    pow,
    conj,
    sqrt,
    multiply,
    equalScalar,
    larger,
    smaller,
    matrix,
    ctranspose,
    eigs
  } = _ref;

  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  return typed(name, {
    number: Math.abs,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    boolean: function boolean(x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    Array: function Array(x) {
      return _norm(matrix(x), 2);
    },
    Matrix: function Matrix(x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return this(x);
    },
    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the plus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _vectorNormPlusInfinity(x) {
    // norm(x, Infinity) = max(abs(x))
    var pinf = 0; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);

      if (larger(v, pinf)) {
        pinf = v;
      }
    }, true);
    return pinf;
  }
  /**
   * Calculate the minus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _vectorNormMinusInfinity(x) {
    // norm(x, -Infinity) = min(abs(x))
    var ninf; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);

      if (!ninf || smaller(v, ninf)) {
        ninf = v;
      }
    }, true);
    return ninf || 0;
  }
  /**
   * Calculate the norm for a vector
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _vectorNorm(x, p) {
    // check p
    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _vectorNormPlusInfinity(x);
    }

    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
      return _vectorNormMinusInfinity(x);
    }

    if (p === 'fro') {
      return _norm(x, 2);
    }

    if (typeof p === 'number' && !isNaN(p)) {
      // check p != 0
      if (!equalScalar(p, 0)) {
        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
        var n = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          n = add(pow(abs(value), p), n);
        }, true);
        return pow(n, 1 / p);
      }

      return Number.POSITIVE_INFINITY;
    } // invalid parameter value


    throw new Error('Unsupported parameter value');
  }
  /**
   * Calculate the Frobenius norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormFrobenius(x) {
    // norm(x) = sqrt(sum(diag(x'x)))
    var fro = 0;
    x.forEach(function (value, index) {
      fro = add(fro, multiply(value, conj(value)));
    });
    return abs(sqrt(fro));
  }
  /**
   * Calculate the norm L1 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormOne(x) {
    // norm(x) = the largest column sum
    var c = []; // result

    var maxc = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var j = index[1];
      var cj = add(c[j] || 0, abs(value));

      if (larger(cj, maxc)) {
        maxc = cj;
      }

      c[j] = cj;
    }, true);
    return maxc;
  }
  /**
   * Calculate the norm L2 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormTwo(x) {
    // norm(x) = sqrt( max eigenvalue of A*.A)
    var sizeX = x.size();

    if (sizeX[0] !== sizeX[1]) {
      throw new RangeError('Invalid matrix dimensions');
    }

    var tx = ctranspose(x);
    var squaredX = multiply(tx, x);
    var eigenVals = eigs(squaredX).values;
    var rho = eigenVals.get([eigenVals.size()[0] - 1]);
    return abs(sqrt(rho));
  }
  /**
   * Calculate the infinity norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormInfinity(x) {
    // norm(x) = the largest row sum
    var r = []; // result

    var maxr = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var i = index[0];
      var ri = add(r[i] || 0, abs(value));

      if (larger(ri, maxr)) {
        maxr = ri;
      }

      r[i] = ri;
    }, true);
    return maxr;
  }
  /**
   * Calculate the norm for a 2D Matrix (M*N)
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNorm(x, p) {
    // check p
    if (p === 1) {
      return _matrixNormOne(x);
    }

    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _matrixNormInfinity(x);
    }

    if (p === 'fro') {
      return _matrixNormFrobenius(x);
    }

    if (p === 2) {
      return _matrixNormTwo(x);
    } // invalid parameter value


    throw new Error('Unsupported parameter value ' + p);
  }
  /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _norm(x, p) {
    // size
    var sizeX = x.size(); // check if it is a vector

    if (sizeX.length === 1) {
      return _vectorNorm(x, p);
    } // MxN matrix


    if (sizeX.length === 2) {
      if (sizeX[0] && sizeX[1]) {
        return _matrixNorm(x, p);
      } else {
        throw new RangeError('Invalid matrix dimensions');
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNthRoot": () => (/* binding */ createNthRoot),
/* harmony export */   "createNthRootNumber": () => (/* binding */ createNthRootNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");








var name = 'nthRoot';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
var createNthRoot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    BigNumber: _BigNumber
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm06 = (0,_type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm06)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
  return typed(name, {
    number: function number(x) {
      return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_7__.nthRootNumber)(x, 2);
    },
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_7__.nthRootNumber,
    BigNumber: function BigNumber(x) {
      return _bigNthRoot(x, new _BigNumber(2));
    },
    Complex: function Complex(x) {
      throw new Error(complexErr);
    },
    'Complex, number': function ComplexNumber(x, y) {
      throw new Error(complexErr);
    },
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function ArrayMatrix(x) {
      return this(x, 2);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse + sparse
        return algorithm06(x, y, this);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // dense + sparse
        return algorithm01(x, y, this, false);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse - scalar
        return algorithm11(y, x, this, true);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    var precision = _BigNumber.precision;

    var Big = _BigNumber.clone({
      precision: precision + 2
    });

    var zero = new _BigNumber(0);
    var one = new Big(1);
    var inv = root.isNegative();

    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }

    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity


    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }

    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
});
var createNthRootNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed'], (_ref2) => {
  var {
    typed
  } = _ref2;
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_7__.nthRootNumber,
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_7__.nthRootNumber
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNthRoots": () => (/* binding */ createNthRoots)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'nthRoots';
var dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createNthRoots = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    divideScalar,
    Complex
  } = _ref;

  /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */
  // This is used to fix float artifacts for zero-valued components.
  var _calculateExactResult = [function realPos(val) {
    return new Complex(val, 0);
  }, function imagPos(val) {
    return new Complex(0, val);
  }, function realNeg(val) {
    return new Complex(-val, 0);
  }, function imagNeg(val) {
    return new Complex(0, -val);
  }];
  /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */

  function _nthComplexRoots(a, root) {
    if (root < 0) throw new Error('Root must be greater than zero');
    if (root === 0) throw new Error('Root must be non-zero');
    if (root % 1 !== 0) throw new Error('Root must be an integer');
    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
    var aIsNumeric = typeof a === 'number';
    var offset; // determine the offset (argument of a)/(pi/2)

    if (aIsNumeric || a.re === 0 || a.im === 0) {
      if (aIsNumeric) {
        offset = 2 * +(a < 0); // numeric value on the real axis
      } else if (a.im === 0) {
        offset = 2 * +(a.re < 0); // complex value on the real axis
      } else {
        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
      }
    }

    var arg = a.arg();
    var abs = a.abs();
    var roots = [];
    var r = Math.pow(abs, 1 / root);

    for (var k = 0; k < root; k++) {
      var halfPiFactor = (offset + 4 * k) / root;
      /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */

      if (halfPiFactor === Math.round(halfPiFactor)) {
        roots.push(_calculateExactResult[halfPiFactor % 4](r));
        continue;
      }

      roots.push(new Complex({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      }));
    }

    return roots;
  }
  /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex}            Rounded value
   */


  return typed(name, {
    Complex: function Complex(x) {
      return _nthComplexRoots(x, 2);
    },
    'Complex, number': _nthComplexRoots
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/pow.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/pow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPow": () => (/* binding */ createPow)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");




var name = 'pow';
var dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
var createPow = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    identity,
    multiply,
    matrix,
    number,
    fraction,
    Complex
  } = _ref;

  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  return typed(name, {
    'number, number': _pow,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        } else {
          return _pow(x.valueOf(), y.valueOf());
        }
      } else {
        return x.pow(y);
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function ArrayBigNumber(x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);

        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {// fraction() throws an error if y is Infinity, etc.
      } // Unable to express y as a fraction, so continue on

    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity


    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }

    if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(y) || x >= 0 || config.predictable) {
      return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_2__.powNumber)(x, y);
    } else {
      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return new Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */


  function _powArray(x, y) {
    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix


    var s = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.arraySize)(x);

    if (s.length !== 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }

    if (s[0] !== s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    var res = identity(s[0]).valueOf();
    var px = x;

    while (y >= 1) {
      if ((y & 1) === 1) {
        res = multiply(px, res);
      }

      y >>= 1;
      px = multiply(px, px);
    }

    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */


  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/round.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/round.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRound": () => (/* binding */ createRound),
/* harmony export */   "createRoundNumber": () => (/* binding */ createRoundNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








var NO_INT = 'Number of decimals in function round must be an integer';
var name = 'round';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
var createRound = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    zeros,
    BigNumber,
    DenseMatrix
  } = _ref;
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm14)({
    typed
  });
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.22)             // returns number 3
   *    math.round(3.82)             // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(3.22, 1)          // returns number 3.2
   *    math.round(3.88, 1)          // returns number 3.9
   *    math.round(-4.21, 1)         // returns number -4.2
   *    math.round(-4.71, 1)         // returns number -4.7
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed(name, _objectSpread(_objectSpread({}, roundNumberSignatures), {}, {
    Complex: function Complex(x) {
      return x.round();
    },
    'Complex, number': function ComplexNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Complex, BigNumber': function ComplexBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      var _n = n.toNumber();

      return x.round(_n);
    },
    'number, BigNumber': function numberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return new BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    BigNumber: function BigNumber(x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return x.toDecimalPlaces(n.toNumber());
    },
    Fraction: function Fraction(x) {
      return x.round();
    },
    'Fraction, number': function FractionNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since round(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_4__.deepMap)(x, this, true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm12(y, x, this, true);
    },
    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  }));
});
var roundNumberSignatures = {
  number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_5__.roundNumber,
  'number, number': function numberNumber(x, n) {
    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(n)) {
      throw new TypeError(NO_INT);
    }

    if (n < 0 || n > 15) {
      throw new Error('Number of decimals in function round must be in te range of 0-15');
    }

    return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_5__.roundNumber)(x, n);
  }
};
var createRoundNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed'], (_ref2) => {
  var {
    typed
  } = _ref2;
  return typed(name, roundNumberSignatures);
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/sign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/sign.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSign": () => (/* binding */ createSign)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'sign';
var dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];
var createSign = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber,
    complex,
    Fraction: _Fraction
  } = _ref;

  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.signNumber,
    Complex: function Complex(x) {
      return x.im === 0 ? complex((0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.signNumber)(x.re)) : x.sign();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x.cmp(0));
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x.s, 1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sign(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return this(x.value);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSqrt": () => (/* binding */ createSqrt)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'sqrt';
var dependencies = ['config', 'typed', 'Complex'];
var createSqrt = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    typed,
    Complex
  } = _ref;

  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  return typed('sqrt', {
    number: _sqrtNumber,
    Complex: function Complex(x) {
      return x.sqrt();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (isNaN(x)) {
      return NaN;
    } else if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new Complex(x, 0).sqrt();
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/square.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/square.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSquare": () => (/* binding */ createSquare)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'square';
var dependencies = ['typed'];
var createSquare = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.squareNumber,
    Complex: function Complex(x) {
      return x.mul(x);
    },
    BigNumber: function BigNumber(x) {
      return x.times(x);
    },
    Fraction: function Fraction(x) {
      return x.mul(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since square(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.pow(2);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/subtract.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/subtract.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSubtract": () => (/* binding */ createSubtract)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");








var name = 'subtract';
var dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
var createSubtract = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    addScalar,
    unaryMinus,
    DenseMatrix
  } = _ref;
  // TODO: split function subtract in two: subtract and subtractScalar
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm03)({
    typed
  });
  var algorithm05 = (0,_type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm05)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm14)({
    typed
  });
  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x - y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value === null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, unaryMinus(y), addScalar);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */

function checkEqualDimensions(x, y) {
  var xsize = x.size();
  var ysize = y.size();

  if (xsize.length !== ysize.length) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_7__.DimensionError(xsize.length, ysize.length);
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnaryMinus": () => (/* binding */ createUnaryMinus)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'unaryMinus';
var dependencies = ['typed'];
var createUnaryMinus = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.unaryMinusNumber,
    Complex: function Complex(x) {
      return x.neg();
    },
    BigNumber: function BigNumber(x) {
      return x.neg();
    },
    Fraction: function Fraction(x) {
      return x.neg();
    },
    Unit: function Unit(x) {
      var res = x.clone();
      res.value = this(x.value);
      return res;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    } // TODO: add support for string

  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnaryPlus": () => (/* binding */ createUnaryPlus)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");



var name = 'unaryPlus';
var dependencies = ['typed', 'config', 'BigNumber'];
var createUnaryPlus = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    BigNumber
  } = _ref;

  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.unaryPlusNumber,
    Complex: function Complex(x) {
      return x; // complex numbers are immutable
    },
    BigNumber: function BigNumber(x) {
      return x; // bignumbers are immutable
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Unit: function Unit(x) {
      return x.clone();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    },
    'boolean | string': function booleanString(x) {
      // convert to a number or bignumber
      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createXgcd": () => (/* binding */ createXgcd)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js");


var name = 'xgcd';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createXgcd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    BigNumber
  } = _ref;

  /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  return typed(name, {
    'number, number': function numberNumber(a, b) {
      var res = (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.xgcdNumber)(a, b);
      return config.matrix === 'Array' ? res : matrix(res);
    },
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

  });
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */

  function _xgcdBigNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var // used to swap two variables
    t;
    var // quotient
    q;
    var // remainder
    r;
    var zero = new BigNumber(0);
    var one = new BigNumber(1);
    var x = zero;
    var lastx = one;
    var y = one;
    var lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }

    var res;

    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBitAnd": () => (/* binding */ createBitAnd)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");








var name = 'bitAnd';
var dependencies = ['typed', 'matrix', 'equalScalar'];
var createBitAnd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm06 = (0,_type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm06)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.bitAndNumber,
    'BigNumber, BigNumber': _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__.bitAndBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/bitNot.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/bitNot.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBitNot": () => (/* binding */ createBitNot)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");




var name = 'bitNot';
var dependencies = ['typed'];
var createBitNot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.bitNotNumber,
    BigNumber: _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_2__.bitNotBigNumber,
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_3__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/bitOr.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/bitOr.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBitOr": () => (/* binding */ createBitOr)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm04.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");








var name = 'bitOr';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createBitOr = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    DenseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm04 = (0,_type_matrix_utils_algorithm04_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm04)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.bitOrNumber,
    'BigNumber, BigNumber': _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__.bitOrBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/bitXor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/bitXor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBitXor": () => (/* binding */ createBitXor)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");








var name = 'bitXor';
var dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createBitXor = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.bitXorNumber,
    'BigNumber, BigNumber': _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_7__.bitXor,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/leftShift.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/leftShift.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLeftShift": () => (/* binding */ createLeftShift)
/* harmony export */ });
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm08.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");










var name = 'leftShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createLeftShift = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    zeros,
    DenseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm08 = (0,_type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm08)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__.leftShiftNumber,
    'BigNumber, BigNumber': _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_9__.leftShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRightArithShift": () => (/* binding */ createRightArithShift)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm08.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");










var name = 'rightArithShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightArithShift = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    zeros,
    DenseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm08 = (0,_type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm08)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__.rightArithShiftNumber,
    'BigNumber, BigNumber': _utils_bignumber_bitwise_js__WEBPACK_IMPORTED_MODULE_9__.rightArithShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRightLogShift": () => (/* binding */ createRightLogShift)
/* harmony export */ });
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js");
/* harmony import */ var _type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js");
/* harmony import */ var _type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm08.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js");









var name = 'rightLogShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightLogShift = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    zeros,
    DenseMatrix
  } = _ref;
  var algorithm01 = (0,_type_matrix_utils_algorithm01_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm01)({
    typed
  });
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm08 = (0,_type_matrix_utils_algorithm08_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm08)({
    typed,
    equalScalar
  });
  var algorithm10 = (0,_type_matrix_utils_algorithm10_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_8__.rightLogShiftNumber,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBellNumbers": () => (/* binding */ createBellNumbers)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'bellNumbers';
var dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
var createBellNumbers = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    isNegative,
    isInteger,
    stirlingS2
  } = _ref;

  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      } // Sum (k=0, n) S(n,k).


      var result = 0;

      for (var i = 0; i <= n; i++) {
        result = addScalar(result, stirlingS2(n, i));
      }

      return result;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/combinatorics/catalan.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/combinatorics/catalan.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCatalan": () => (/* binding */ createCatalan)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'catalan';
var dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
var createCatalan = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    divideScalar,
    multiplyScalar,
    combinations,
    isNegative,
    isInteger
  } = _ref;

  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }

      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/combinatorics/composition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/combinatorics/composition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createComposition": () => (/* binding */ createComposition)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'composition';
var dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
var createComposition = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    combinations,
    isPositive,
    isNegative,
    isInteger,
    larger
  } = _ref;

  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }

      return combinations(addScalar(n, -1), addScalar(k, -1));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createStirlingS2": () => (/* binding */ createStirlingS2)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'stirlingS2';
var dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
var createStirlingS2 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    subtract,
    multiplyScalar,
    divideScalar,
    pow,
    factorial,
    combinations,
    isNegative,
    isInteger,
    larger
  } = _ref;

  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


      var kFactorial = factorial(k);
      var result = 0;

      for (var i = 0; i <= k; i++) {
        var negativeOne = pow(-1, subtract(k, i));
        var kChooseI = combinations(k, i);
        var iPower = pow(i, n);
        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
      }

      return divideScalar(result, kFactorial);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/complex/arg.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/complex/arg.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createArg": () => (/* binding */ createArg)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'arg';
var dependencies = ['typed'];
var createArg = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  return typed(name, {
    number: function number(x) {
      return Math.atan2(0, x);
    },
    BigNumber: function BigNumber(x) {
      return x.constructor.atan2(0, x);
    },
    Complex: function Complex(x) {
      return x.arg();
    },
    // TODO: implement BigNumber support for function arg
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/complex/conj.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/complex/conj.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConj": () => (/* binding */ createConj)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'conj';
var dependencies = ['typed'];
var createConj = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  return typed(name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.conjugate();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/complex/im.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/complex/im.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIm": () => (/* binding */ createIm)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'im';
var dependencies = ['typed'];
var createIm = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  return typed(name, {
    number: function number(x) {
      return 0;
    },
    BigNumber: function BigNumber(x) {
      return x.mul(0);
    },
    Complex: function Complex(x) {
      return x.im;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/complex/re.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/complex/re.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRe": () => (/* binding */ createRe)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 're';
var dependencies = ['typed'];
var createRe = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  return typed(name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.re;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/geometry/distance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/geometry/distance.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDistance": () => (/* binding */ createDistance)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'distance';
var dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
var createDistance = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    subtract,
    multiplyScalar,
    divideScalar,
    unaryMinus,
    sqrt,
    abs
  } = _ref;

  /**
    * Calculates:
    *    The eucledian distance between two points in N-dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */
  return typed(name, {
    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length === 2 && y.length === 2 && z.length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
        var constant = x[1];
        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
        }

        if (!_2d(z)) {
          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
          var constant = x.pointX;
          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function ArrayArray(x, y) {
      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length === 2 && y.length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === y.length && x.length > 0) {
        // Point to Point N-dimensions
        if (!_containsOnlyNumbers(x)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }

        if (!_containsOnlyNumbers(y)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }

        return _euclideanDistance(x, y);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function ObjectObject(x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    Array: function Array(arr) {
      if (!_pairwise(arr)) {
        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
      }

      return _distancePairwise(arr);
    }
  });

  function _isNumber(a) {
    // distance supports numbers and bignumbers
    return typeof a === 'number' || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(a);
  }

  function _2d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]);
  }

  function _3d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
  }

  function _containsOnlyNumbers(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (!Array.isArray(a)) {
      a = _objectToArray(a);
    }

    return a.every(_isNumber);
  }

  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
  }

  function _objectToArray(o) {
    var keys = Object.keys(o);
    var a = [];

    for (var i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }

    return a;
  }

  function _pairwise(a) {
    // checks for valid arguments passed to _distancePairwise(Array)
    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {
        return false;
      }
    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {
        return false;
      }
    } else {
      return false;
    }

    return true;
  }

  function _distancePointLine2D(x, y, a, b, c) {
    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
    return divideScalar(num, den);
  }

  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
    return divideScalar(num, den);
  }

  function _euclideanDistance(x, y) {
    var vectorSize = x.length;
    var result = 0;
    var diff = 0;

    for (var i = 0; i < vectorSize; i++) {
      diff = subtract(x[i], y[i]);
      result = addScalar(multiplyScalar(diff, diff), result);
    }

    return sqrt(result);
  }

  function _distancePairwise(a) {
    var result = [];
    var pointA = [];
    var pointB = [];

    for (var i = 0; i < a.length - 1; i++) {
      for (var j = i + 1; j < a.length; j++) {
        if (a[0].length === 2) {
          pointA = [a[i][0], a[i][1]];
          pointB = [a[j][0], a[j][1]];
        } else if (a[0].length === 3) {
          pointA = [a[i][0], a[i][1], a[i][2]];
          pointB = [a[j][0], a[j][1], a[j][2]];
        }

        result.push(_euclideanDistance(pointA, pointB));
      }
    }

    return result;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/geometry/intersect.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/geometry/intersect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIntersect": () => (/* binding */ createIntersect)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'intersect';
var dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];
var createIntersect = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    abs,
    add,
    addScalar,
    matrix,
    multiply,
    multiplyScalar,
    divideScalar,
    subtract,
    smaller,
    equalScalar
  } = _ref;

  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  return typed('intersect', {
    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
      if (!_3d(x)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
      }

      if (!_3d(y)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
      }

      if (!_4d(plane)) {
        throw new TypeError('Array with 4 numbers expected as third argument');
      }

      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    },
    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
      if (w.length === 2) {
        if (!_2d(w)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect2d(w, x, y, z);
      } else if (w.length === 3) {
        if (!_3d(w)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
        }

        if (!_3d(z)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
      } else {
        throw new TypeError('Arrays with two or thee dimensional points expected');
      }
    },
    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));
    },
    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
    }
  });

  function _isNumeric(a) {
    // intersect supports numbers and bignumbers
    return typeof a === 'number' || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(a);
  }

  function _2d(x) {
    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
  }

  function _3d(x) {
    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
  }

  function _4d(x) {
    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
  }

  function _intersect2d(p1a, p1b, p2a, p2b) {
    var o1 = p1a;
    var o2 = p2a;
    var d1 = subtract(o1, p1b);
    var d2 = subtract(o2, p2b);
    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));

    if (smaller(abs(det), config.epsilon)) {
      return null;
    }

    var d20o11 = multiplyScalar(d2[0], o1[1]);
    var d21o10 = multiplyScalar(d2[1], o1[0]);
    var d20o21 = multiplyScalar(d2[0], o2[1]);
    var d21o20 = multiplyScalar(d2[1], o2[0]);
    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
    return add(multiply(d1, t), o1);
  }

  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
    return addScalar(addScalar(add1, add2), add3);
  }

  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
      return [pax, pay, paz];
    } else {
      return null;
    }
  }

  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
    var x1x = multiplyScalar(x1, x);
    var x2x = multiplyScalar(x2, x);
    var y1y = multiplyScalar(y1, y);
    var y2y = multiplyScalar(y2, y);
    var z1z = multiplyScalar(z1, z);
    var z2z = multiplyScalar(z2, z);
    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));
    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/logical/and.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/logical/and.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAnd": () => (/* binding */ createAnd)
/* harmony export */ });
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/logical.js");







var name = 'and';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
var createAnd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    zeros,
    not
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm06 = (0,_type_matrix_utils_algorithm06_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm06)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.andNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/logical/not.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/logical/not.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNot": () => (/* binding */ createNot)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/logical.js");



var name = 'not';
var dependencies = ['typed'];
var createNot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.notNumber,
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    BigNumber: function BigNumber(x) {
      return x.isZero() || x.isNaN();
    },
    Unit: function Unit(x) {
      return x.value !== null ? this(x.value) : true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/logical/or.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/logical/or.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createOr": () => (/* binding */ createOr)
/* harmony export */ });
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/logical.js");







var name = 'or';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createOr = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm05 = (0,_type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm05)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.orNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/logical/xor.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/logical/xor.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createXor": () => (/* binding */ createXor)
/* harmony export */ });
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/logical.js");







var name = 'xor';
var dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createXor = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _plain_number_index_js__WEBPACK_IMPORTED_MODULE_6__.xorNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/apply.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/apply.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createApply": () => (/* binding */ createApply)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/IndexError.js */ "./node_modules/mathjs/lib/esm/error/IndexError.js");




var name = 'apply';
var dependencies = ['typed', 'isInteger'];
var createApply = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isInteger
  } = _ref;

  /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */
  return typed(name, {
    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
      if (!isInteger(dim)) {
        throw new TypeError('Integer number expected for dimension');
      }

      var size = Array.isArray(mat) ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        throw new _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__.IndexError(dim, size.length);
      }

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isMatrix)(mat)) {
        return mat.create(_apply(mat.valueOf(), dim, callback));
      } else {
        return _apply(mat, dim, callback);
      }
    }
  });
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _apply(mat, dim, callback) {
  var i, ret, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      return callback(mat);
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _apply(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _apply(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/column.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/column.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createColumn": () => (/* binding */ createColumn)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");



var name = 'column';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
var createColumn = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Index,
    matrix,
    range
  } = _ref;

  /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [[2], [4]]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */
  return typed(name, {
    'Matrix, number': _column,
    'Array, number': function ArrayNumber(value, column) {
      return _column(matrix((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(value)), column).valueOf();
    }
  });
  /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */

  function _column(value, column) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.validateIndex)(column, value.size()[1]);
    var rowRange = range(0, value.size()[0]);
    var index = new Index(rowRange, column);
    return value.subset(index);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/concat.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConcat": () => (/* binding */ createConcat)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/IndexError.js */ "./node_modules/mathjs/lib/esm/error/IndexError.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");






var name = 'concat';
var dependencies = ['typed', 'matrix', 'isInteger'];
var createConcat = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    isInteger
  } = _ref;

  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  return typed(name, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
      var i;
      var len = args.length;
      var dim = -1; // zero-based dimension

      var prevDim;
      var asMatrix = false;
      var matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arg)) {
          asMatrix = true;
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(arg) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate


          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__.IndexError(dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          var m = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.clone)(arg).valueOf();
          var size = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.arraySize)(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim !== prevDim) {
            throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_5__.DimensionError(prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length === 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      var res = matrices.shift();

      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },
    '...string': function string(args) {
      return args.join('');
    }
  });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */

function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length !== b.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_5__.DimensionError(a.length, b.length);
    }

    var c = [];

    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }

    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/count.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/count.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCount": () => (/* binding */ createCount)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'count';
var dependencies = ['typed', 'size', 'prod'];
var createCount = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    prod
  } = _ref;

  /**
   * Count the number of elements of a matrix, array or string.
   *
   * Syntax:
   *
   *     math.count(x)
   *
   * Examples:
   *
   *     math.count('hello world')        // returns 11
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.count(A)                    // returns 6
   *     math.count(math.range(1,6))      // returns 5
   *
   * See also:
   *
   *     size
   *
   * @param {string | Array | Matrix} x  A matrix or string
   * @return {number} An integer with the elements in `x`.
   */
  return typed(name, {
    string: function string(x) {
      return x.length;
    },
    'Matrix | Array': function MatrixArray(x) {
      return prod(size(x));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/cross.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/cross.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCross": () => (/* binding */ createCross)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'cross';
var dependencies = ['typed', 'matrix', 'subtract', 'multiply'];
var createCross = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    subtract,
    multiply
  } = _ref;

  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  return typed(name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    var highestDimension = Math.max((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x).length, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(y).length);
    x = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.squeeze)(x);
    y = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.squeeze)(y);
    var xSize = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x);
    var ySize = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(y);

    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/ctranspose.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/ctranspose.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCtranspose": () => (/* binding */ createCtranspose)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'ctranspose';
var dependencies = ['typed', 'transpose', 'conj'];
var createCtranspose = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    transpose,
    conj
  } = _ref;

  /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */
  return typed(name, {
    any: function any(x) {
      return conj(transpose(x));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/det.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/det.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDet": () => (/* binding */ createDet)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'det';
var dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
var createDet = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    subtract,
    multiply,
    unaryMinus,
    lup
  } = _ref;

  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  return typed(name, {
    any: function any(x) {
      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(x);
    },
    'Array | Matrix': function det(x) {
      var size;

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(x);

        case 1:
          // vector
          if (size[0] === 1) {
            return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
          }

        case 2:
          {
            // two dimensional array
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _det(x.clone().valueOf(), rows, cols);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
      }
    }
  });
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows === 1) {
      // this is a 1 x 1 matrix
      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(matrix[0][0]);
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // Compute the LU decomposition
      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

      var det = decomp.U[0][0];

      for (var _i = 1; _i < rows; _i++) {
        det = multiply(det, decomp.U[_i][_i]);
      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
      // This can be determined by counting the cycles. This is roughly a linear time algorithm.


      var evenCycles = 0;
      var i = 0;
      var visited = [];

      while (true) {
        while (visited[i]) {
          i++;
        }

        if (i >= rows) break;
        var j = i;
        var cycleLen = 0;

        while (!visited[decomp.p[j]]) {
          visited[decomp.p[j]] = true;
          j = decomp.p[j];
          cycleLen++;
        }

        if (cycleLen % 2 === 0) {
          evenCycles++;
        }
      }

      return evenCycles % 2 === 0 ? det : unaryMinus(det);
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/diag.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/diag.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDiag": () => (/* binding */ createDiag)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'diag';
var dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
var createDiag = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    DenseMatrix,
    SparseMatrix
  } = _ref;

  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  return typed(name, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function Array(x) {
      return _diag(x, 0, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), null);
    },
    'Array, number': function ArrayNumber(x, k) {
      return _diag(x, k, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), null);
    },
    'Array, BigNumber': function ArrayBigNumber(x, k) {
      return _diag(x, k.toNumber(), (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), null);
    },
    'Array, string': function ArrayString(x, format) {
      return _diag(x, 0, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), format);
    },
    'Array, number, string': function ArrayNumberString(x, k, format) {
      return _diag(x, k, (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), format);
    },
    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(x), format);
    },
    Matrix: function Matrix(x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function MatrixNumber(x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function MatrixString(x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function MatrixNumberString(x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }

    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }

  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper];

    if (format && format !== 'sparse' && format !== 'dense') {
      throw new TypeError("Unknown matrix type ".concat(format, "\""));
    } // create diagonal matrix


    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }

  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isMatrix)(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) {
          return matrix(dm, format);
        }

        return dm;
      }

      return dm.valueOf();
    } // vector size


    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    var vector = []; // loop diagonal

    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix


    return format !== null ? matrix(vector) : vector;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/diff.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/diff.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDiff": () => (/* binding */ createDiff)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");



var name = 'diff';
var dependencies = ['typed', 'matrix', 'subtract', 'number'];
var createDiff = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    subtract,
    number
  } = _ref;

  /**
   * Create a new matrix or array of the difference between elements of the given array
   * The optional dim parameter lets you specify the dimension to evaluate the difference of
   * If no dimension parameter is passed it is assumed as dimension 0
   *
   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber
   * Arrays must be 'rectangular' meaning arrays like [1, 2]
   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays
   *
   * Syntax:
   *
   *     math.diff(arr)
   *     math.diff(arr, dim)
   *
   * Examples:
   *
   *     const arr = [1, 2, 4, 7, 0]
   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)
   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])
   *
   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]
   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *
   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3
   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed
   *
   *     // These will all produce the same result
   *     math.diff([[1, 2], [3, 4]])
   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])
   *     math.diff([[1, 2], math.matrix([3, 4])])
   *     math.diff([math.matrix([1, 2]), [3, 4]])
   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix
   *
   * See Also:
   *
   *      sum
   *      subtract
   *      partitionSelect
   *
   * @param {Array | Matrix} arr    An array or matrix
   * @param {number} dim            Dimension
   * @return {Array | Matrix}       Difference between array elements in given dimension
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(arr) {
      // No dimension specified => assume dimension 0
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arr)) {
        return matrix(_diff(arr.toArray()));
      } else {
        return _diff(arr);
      }
    },
    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {
      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(dim)) throw new RangeError('Dimension must be a whole number');

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arr)) {
        return matrix(_recursive(arr.toArray(), dim));
      } else {
        return _recursive(arr, dim);
      }
    },
    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {
      return this(arr, number(dim));
    }
  });
  /**
   * Recursively find the correct dimension in the array/matrix
   * Then Apply _diff to that dimension
   *
   * @param {Array} arr      The array
   * @param {number} dim     Dimension
   * @return {Array}         resulting array
   */

  function _recursive(arr, dim) {
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arr)) {
      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly
    }

    if (!Array.isArray(arr)) {
      throw RangeError('Array/Matrix does not have that many dimensions');
    }

    if (dim > 0) {
      var result = [];
      arr.forEach(element => {
        result.push(_recursive(element, dim - 1));
      });
      return result;
    } else if (dim === 0) {
      return _diff(arr);
    } else {
      throw RangeError('Cannot have negative dimension');
    }
  }
  /**
   * Difference between elements in the array
   *
   * @param {Array} arr      An array
   * @return {Array}         resulting array
   */


  function _diff(arr) {
    var result = [];
    var size = arr.length;

    if (size < 2) {
      return arr;
    }

    for (var i = 1; i < size; i++) {
      result.push(_ElementDiff(arr[i - 1], arr[i]));
    }

    return result;
  }
  /**
   * Difference between 2 objects
   *
   * @param {Object} obj1    First object
   * @param {Object} obj2    Second object
   * @return {Array}         resulting array
   */


  function _ElementDiff(obj1, obj2) {
    // Convert matrices to arrays
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(obj1)) obj1 = obj1.toArray();
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(obj2)) obj2 = obj2.toArray();
    var obj1IsArray = Array.isArray(obj1);
    var obj2IsArray = Array.isArray(obj2);

    if (obj1IsArray && obj2IsArray) {
      return _ArrayDiff(obj1, obj2);
    }

    if (!obj1IsArray && !obj2IsArray) {
      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)
    }

    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');
  }
  /**
   * Difference of elements in 2 arrays
   *
   * @param {Array} arr1     Array 1
   * @param {Array} arr2     Array 2
   * @return {Array}         resulting array
   */


  function _ArrayDiff(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      throw RangeError('Not all sub-arrays have the same length');
    }

    var result = [];
    var size = arr1.length;

    for (var i = 0; i < size; i++) {
      result.push(_ElementDiff(arr1[i], arr2[i]));
    }

    return result;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/dot.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/dot.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDot": () => (/* binding */ createDot)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");


var name = 'dot';
var dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
var createDot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    addScalar,
    multiplyScalar,
    conj,
    size
  } = _ref;

  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
   *
   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  return typed(name, {
    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
    'SparseMatrix, SparseMatrix': _sparseDot
  });

  function _validateDim(x, y) {
    var xSize = _size(x);

    var ySize = _size(y);

    var xLen, yLen;

    if (xSize.length === 1) {
      xLen = xSize[0];
    } else if (xSize.length === 2 && xSize[1] === 1) {
      xLen = xSize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
    }

    if (ySize.length === 1) {
      yLen = ySize[0];
    } else if (ySize.length === 2 && ySize[1] === 1) {
      yLen = ySize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
    }

    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    return xLen;
  }

  function _denseDot(a, b) {
    var N = _validateDim(a, b);

    var adata = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(a) ? a._data : a;
    var adt = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(a) ? a._datatype : undefined;
    var bdata = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(b) ? b._data : b;
    var bdt = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)

    var aIsColumn = _size(a).length === 2;
    var bIsColumn = _size(b).length === 2;
    var add = addScalar;
    var mul = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      var dt = adt; // find signatures that matches (dt, dt)

      add = typed.find(addScalar, [dt, dt]);
      mul = typed.find(multiplyScalar, [dt, dt]);
    } // both vectors 1-dimensional


    if (!aIsColumn && !bIsColumn) {
      var c = mul(conj(adata[0]), bdata[0]);

      for (var i = 1; i < N; i++) {
        c = add(c, mul(conj(adata[i]), bdata[i]));
      }

      return c;
    } // a is 1-dim, b is column


    if (!aIsColumn && bIsColumn) {
      var _c = mul(conj(adata[0]), bdata[0][0]);

      for (var _i = 1; _i < N; _i++) {
        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
      }

      return _c;
    } // a is column, b is 1-dim


    if (aIsColumn && !bIsColumn) {
      var _c2 = mul(conj(adata[0][0]), bdata[0]);

      for (var _i2 = 1; _i2 < N; _i2++) {
        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
      }

      return _c2;
    } // both vectors are column


    if (aIsColumn && bIsColumn) {
      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);

      for (var _i3 = 1; _i3 < N; _i3++) {
        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
      }

      return _c3;
    }
  }

  function _sparseDot(x, y) {
    _validateDim(x, y);

    var xindex = x._index;
    var xvalues = x._values;
    var yindex = y._index;
    var yvalues = y._values; // TODO optimize add & mul using datatype

    var c = 0;
    var add = addScalar;
    var mul = multiplyScalar;
    var i = 0;
    var j = 0;

    while (i < xindex.length && j < yindex.length) {
      var I = xindex[i];
      var J = yindex[j];

      if (I < J) {
        i++;
        continue;
      }

      if (I > J) {
        j++;
        continue;
      }

      if (I === J) {
        c = add(c, mul(xvalues[i], yvalues[j]));
        i++;
        j++;
      }
    }

    return c;
  } // TODO remove this once #1771 is fixed


  function _size(x) {
    return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(x) ? x.size() : size(x);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/eigs.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/eigs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEigs": () => (/* binding */ createEigs)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");



var name = 'eigs';
var dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];
var createEigs = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    typed,
    matrix,
    addScalar,
    subtract,
    equal,
    abs,
    atan,
    cos,
    sin,
    multiplyScalar,
    inv,
    bignumber,
    multiply,
    add
  } = _ref;

  /**
   * Compute eigenvalue and eigenvector of a real symmetric matrix.
   * Only applicable to two dimensional symmetric matrices. Uses Jacobi
   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')
   * of elements are not supported. Input matrix or 2D array should contain all elements
   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the
   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.
   * Eigenvectors are always of 'number' type.
   *
   * Syntax:
   *
   *     math.eigs(x)
   *
   * Examples:
   *
   *     const H = [[5, 2.3], [2.3, 1]]
   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
   *     const E = ans.values
   *     const U = ans.vectors
   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))
   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation
   *     E[0] == UTxHxU[0][0]  // returns true
   * See also:
   *
   *     inv
   *
   * @param {Array | Matrix} x  Matrix to be diagonalized
   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).
   */
  return typed('eigs', {
    Array: function Array(x) {
      // check array size
      var mat = matrix(x);
      var size = mat.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(size) + ')');
      } // use dense 2D matrix implementation


      var ans = checkAndSubmit(mat, size[0]);
      return {
        values: ans[0],
        vectors: ans[1]
      };
    },
    Matrix: function Matrix(x) {
      // use dense 2D array implementation
      // dense matrix
      var size = x.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(size) + ')');
      }

      var ans = checkAndSubmit(x, size[0]);
      return {
        values: matrix(ans[0]),
        vectors: matrix(ans[1])
      };
    }
  }); // Is the matrix
  // symmetric ?

  function isSymmetric(x, n) {
    for (var i = 0; i < n; i++) {
      for (var j = i; j < n; j++) {
        // not symmtric
        if (!equal(x[i][j], x[j][i])) {
          throw new TypeError('Input matrix is not symmetric');
        }
      }
    }
  } // check input for possible problems
  // and perform diagonalization efficiently for
  // specific type of number


  function checkAndSubmit(x, n) {
    var type = x.datatype(); // type check

    if (type === undefined) {
      type = x.getDataType();
    }

    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {
      if (type === 'mixed') {
        throw new TypeError('Mixed matrix element type is not supported');
      } else {
        throw new TypeError('Matrix element type not supported (' + type + ')');
      }
    } else {
      isSymmetric(x.toArray(), n);
    } // perform efficient calculation for 'numbers'


    if (type === 'number') {
      return diag(x.toArray());
    } else if (type === 'Fraction') {
      var xArr = x.toArray(); // convert fraction to numbers

      for (var i = 0; i < n; i++) {
        for (var j = i; j < n; j++) {
          xArr[i][j] = xArr[i][j].valueOf();
          xArr[j][i] = xArr[i][j];
        }
      }

      return diag(x.toArray());
    } else if (type === 'BigNumber') {
      return diagBig(x.toArray());
    }
  } // diagonalization implementation for number (efficient)


  function diag(x) {
    var N = x.length;
    var e0 = Math.abs(config.epsilon / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error


    var Vab = getAij(x);

    while (Math.abs(Vab[1]) >= Math.abs(e0)) {
      var _i = Vab[0][0];
      var j = Vab[0][1];
      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
      x = x1(x, psi, _i, j);
      Sij = Sij1(Sij, psi, _i, j);
      Vab = getAij(x);
    }

    var Ei = createArray(N, 0); // eigenvalues

    for (var _i2 = 0; _i2 < N; _i2++) {
      Ei[_i2] = x[_i2][_i2];
    }

    return sorting((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Ei), (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Sij));
  } // diagonalization implementation for bigNumber


  function diagBig(x) {
    var N = x.length;
    var e0 = abs(config.epsilon / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error


    var Vab = getAijBig(x);

    while (abs(Vab[1]) >= abs(e0)) {
      var _i3 = Vab[0][0];
      var j = Vab[0][1];
      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
      x = x1Big(x, psi, _i3, j);
      Sij = Sij1Big(Sij, psi, _i3, j);
      Vab = getAijBig(x);
    }

    var Ei = createArray(N, 0); // eigenvalues

    for (var _i4 = 0; _i4 < N; _i4++) {
      Ei[_i4] = x[_i4][_i4];
    } // return [clone(Ei), clone(Sij)]


    return sorting((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Ei), (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Sij));
  } // get angle


  function getTheta(aii, ajj, aij) {
    var denom = ajj - aii;

    if (Math.abs(denom) <= config.epsilon) {
      return Math.PI / 4;
    } else {
      return 0.5 * Math.atan(2 * aij / (ajj - aii));
    }
  } // get angle


  function getThetaBig(aii, ajj, aij) {
    var denom = subtract(ajj, aii);

    if (abs(denom) <= config.epsilon) {
      return bignumber(-1).acos().div(4);
    } else {
      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));
    }
  } // update eigvec


  function Sij1(Sij, theta, i, j) {
    var N = Sij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var Ski = createArray(N, 0);
    var Skj = createArray(N, 0);

    for (var k = 0; k < N; k++) {
      Ski[k] = c * Sij[k][i] - s * Sij[k][j];
      Skj[k] = s * Sij[k][i] + c * Sij[k][j];
    }

    for (var _k = 0; _k < N; _k++) {
      Sij[_k][i] = Ski[_k];
      Sij[_k][j] = Skj[_k];
    }

    return Sij;
  } // update eigvec for overlap


  function Sij1Big(Sij, theta, i, j) {
    var N = Sij.length;
    var c = cos(theta);
    var s = sin(theta);
    var Ski = createArray(N, bignumber(0));
    var Skj = createArray(N, bignumber(0));

    for (var k = 0; k < N; k++) {
      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
    }

    for (var _k2 = 0; _k2 < N; _k2++) {
      Sij[_k2][i] = Ski[_k2];
      Sij[_k2][j] = Skj[_k2];
    }

    return Sij;
  } // update matrix


  function x1Big(Hij, theta, i, j) {
    var N = Hij.length;
    var c = bignumber(cos(theta));
    var s = bignumber(sin(theta));
    var c2 = multiplyScalar(c, c);
    var s2 = multiplyScalar(s, s);
    var Aki = createArray(N, bignumber(0));
    var Akj = createArray(N, bignumber(0)); // 2cs Hij

    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii

    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
    } // Modify Hij


    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = bignumber(0);
    Hij[j][i] = bignumber(0); // 0  to i

    for (var _k3 = 0; _k3 < N; _k3++) {
      if (_k3 !== i && _k3 !== j) {
        Hij[i][_k3] = Aki[_k3];
        Hij[_k3][i] = Aki[_k3];
        Hij[j][_k3] = Akj[_k3];
        Hij[_k3][j] = Akj[_k3];
      }
    }

    return Hij;
  } // update matrix


  function x1(Hij, theta, i, j) {
    var N = Hij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var c2 = c * c;
    var s2 = s * s;
    var Aki = createArray(N, 0);
    var Akj = createArray(N, 0); //  Aii

    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = c * Hij[i][k] - s * Hij[j][k];
      Akj[k] = s * Hij[i][k] + c * Hij[j][k];
    } // Modify Hij


    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = 0;
    Hij[j][i] = 0; // 0  to i

    for (var _k4 = 0; _k4 < N; _k4++) {
      if (_k4 !== i && _k4 !== j) {
        Hij[i][_k4] = Aki[_k4];
        Hij[_k4][i] = Aki[_k4];
        Hij[j][_k4] = Akj[_k4];
        Hij[_k4][j] = Akj[_k4];
      }
    }

    return Hij;
  } // get max off-diagonal value from Upper Diagonal


  function getAij(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];

    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
          maxMij = Math.abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }

    return [maxIJ, maxMij];
  } // get max off-diagonal value from Upper Diagonal


  function getAijBig(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];

    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (abs(maxMij) < abs(Mij[i][j])) {
          maxMij = abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }

    return [maxIJ, maxMij];
  } // sort results


  function sorting(E, S) {
    var N = E.length;
    var Ef = Array(N);
    var Sf = Array(N);

    for (var k = 0; k < N; k++) {
      Sf[k] = Array(N);
    }

    for (var i = 0; i < N; i++) {
      var minID = 0;
      var minE = E[0];

      for (var j = 0; j < E.length; j++) {
        if (E[j] < minE) {
          minID = j;
          minE = E[minID];
        }
      }

      Ef[i] = E.splice(minID, 1)[0];

      for (var _k5 = 0; _k5 < N; _k5++) {
        Sf[_k5][i] = S[_k5][minID];

        S[_k5].splice(minID, 1);
      }
    }

    return [(0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Ef), (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(Sf)];
  }
  /**
   * Create an array of a certain size and fill all items with an initial value
   * @param {number} size
   * @param {number} value
   * @return {number[]}
   */


  function createArray(size, value) {
    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
    var array = new Array(size);

    for (var i = 0; i < size; i++) {
      array[i] = value;
    }

    return array;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/expm.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/expm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createExpm": () => (/* binding */ createExpm)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'expm';
var dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
var createExpm = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    add,
    identity,
    inv,
    multiply
  } = _ref;

  /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */
  return typed(name, {
    Matrix: function Matrix(A) {
      // Check matrix size
      var size = A.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(size) + ')');
      }

      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
      // will be affected by round-off error)

      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
      // are "large", so scale A by powers of two. Then compute the
      // exponential, and square the result repeatedly according to
      // the identity e^A = (e^(A/m))^m
      // Compute infinity-norm of A, ||A||, to see how "big" it is

      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
      // Padé approximant to reach the desired accuracy

      var params = findParams(infNorm, eps);
      var q = params.q;
      var j = params.j; // The Pade approximation to e^A is:
      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
      // where
      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
      // Scale A by 1 / 2^j

      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

      var N = identity(n);
      var D = identity(n); // Initialization (i=0)

      var factor = 1; // Initialization (i=1)

      var AposToI = Apos; // Cloning not necessary

      var alternate = -1;

      for (var i = 1; i <= q; i++) {
        if (i > 1) {
          AposToI = multiply(AposToI, Apos);
          alternate = -alternate;
        }

        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
        N = add(N, multiply(factor, AposToI));
        D = add(D, multiply(factor * alternate, AposToI));
      }

      var R = multiply(inv(D), N); // Square j times

      for (var _i = 0; _i < j; _i++) {
        R = multiply(R, R);
      }

      return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix)(A) ? A.createSparseMatrix(R) : R;
    }
  });

  function infinityNorm(A) {
    var n = A.size()[0];
    var infNorm = 0;

    for (var i = 0; i < n; i++) {
      var rowSum = 0;

      for (var j = 0; j < n; j++) {
        rowSum += abs(A.get([i, j]));
      }

      infNorm = Math.max(rowSum, infNorm);
    }

    return infNorm;
  }
  /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */


  function findParams(infNorm, eps) {
    var maxSearchSize = 30;

    for (var k = 0; k < maxSearchSize; k++) {
      for (var q = 0; q <= k; q++) {
        var j = k - q;

        if (errorEstimate(infNorm, q, j) < eps) {
          return {
            q: q,
            j: j
          };
        }
      }
    }

    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
  }
  /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */


  function errorEstimate(infNorm, q, j) {
    var qfac = 1;

    for (var i = 2; i <= q; i++) {
      qfac *= i;
    }

    var twoqfac = qfac;

    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
      twoqfac *= _i2;
    }

    var twoqp1fac = twoqfac * (2 * q + 1);
    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/filter.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/filter.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFilter": () => (/* binding */ createFilter)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'filter';
var dependencies = ['typed'];
var createFilter = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  return typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': _utils_array_js__WEBPACK_IMPORTED_MODULE_1__.filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.filterRegExp)(x.toArray(), test));
    }
  });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_2__.maxArgumentCount)(callback);
  return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/flatten.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/flatten.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFlatten": () => (/* binding */ createFlatten)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'flatten';
var dependencies = ['typed', 'matrix'];
var createFlatten = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;

  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  return typed(name, {
    Array: function Array(x) {
      return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(x));
    },
    Matrix: function Matrix(x) {
      var flat = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(x.toArray())); // TODO: return the same matrix type as x

      return matrix(flat);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/forEach.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/forEach.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createForEach": () => (/* binding */ createForEach)
/* harmony export */ });
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'forEach';
var dependencies = ['typed'];
var createForEach = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  return typed(name, {
    'Array, function': _forEach,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.forEach(callback);
    }
  });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */

function _forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_1__.maxArgumentCount)(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.forEach)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };

  recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createGetMatrixDataType": () => (/* binding */ createGetMatrixDataType)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");



var name = 'getMatrixDataType';
var dependencies = ['typed'];
var createGetMatrixDataType = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */
  return typed(name, {
    Array: function Array(x) {
      return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.getArrayDataType)(x, _utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf);
    },
    Matrix: function Matrix(x) {
      return x.getDataType();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/identity.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/identity.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIdentity": () => (/* binding */ createIdentity)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'identity';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
var createIdentity = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    BigNumber,
    DenseMatrix,
    SparseMatrix
  } = _ref;

  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber': function numberBigNumber(rows) {
      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, string': function numberBigNumberString(rows, format) {
      return _identity(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
      return _identity(rows, cols, format);
    },
    Array: function Array(size) {
      return _identityVector(size);
    },
    'Array, string': function ArrayString(size, format) {
      return _identityVector(size, format);
    },
    Matrix: function Matrix(size) {
      return _identityVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function MatrixString(size, format) {
      return _identityVector(size.valueOf(), format);
    }
  });

  function _identityVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];

      case 1:
        return _identity(size[0], size[0], format);

      case 2:
        return _identity(size[0], size[1], format);

      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */


  function _identity(rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(rows) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(cols) ? BigNumber : null;
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(rows)) rows = rows.toNumber();
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(cols)) cols = cols.toNumber();

    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(rows) || rows < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(cols) || cols < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    var one = Big ? new BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // create diagonal matrix (use optimized implementation for storage format)
      if (format === 'sparse') {
        return SparseMatrix.diagonal(size, one, 0, defaultValue);
      }

      if (format === 'dense') {
        return DenseMatrix.diagonal(size, one, 0, defaultValue);
      }

      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    } // create and resize array


    var res = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.resize)([], size, defaultValue); // fill in ones on the diagonal

    var minimum = rows < cols ? rows : cols; // fill diagonal

    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }

    return res;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/inv.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/inv.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createInv": () => (/* binding */ createInv)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");




var name = 'inv';
var dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
var createInv = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divideScalar,
    addScalar,
    multiply,
    unaryMinus,
    det,
    identity,
    abs
  } = _ref;

  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(x) {
      var size = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(x) ? x.size() : (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.arraySize)(x);

      switch (size.length) {
        case 1:
          // vector
          if (size[0] === 1) {
            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
          }

        case 2:
          // two dimensional array
          {
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(x)) {
                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
              } else {
                // return an Array
                return _inv(x, rows, cols);
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
      }
    },
    any: function any(x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    var r, s, f, value, temp;

    if (rows === 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];

      if (value === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(1, value)]];
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);

      if (d === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      https://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();

      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse


      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

      for (var c = 0; c < cols; c++) {
        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
        var ABig = abs(A[c][c]);
        var rBig = c;
        r = c + 1;

        while (r < rows) {
          if (abs(A[r][c]) > ABig) {
            ABig = abs(A[r][c]);
            rBig = r;
          }

          r++;
        }

        if (ABig === 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }

        r = rBig;

        if (r !== c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c


        var Ac = A[c];
        var Bc = B[c];

        for (r = 0; r < rows; r++) {
          var Ar = A[r];
          var Br = B[r];

          if (r !== c) {
            // eliminate value at column c and row r
            if (Ar[c] !== 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }

              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];

            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }

            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }

      return B;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/kron.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/kron.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createKron": () => (/* binding */ createKron)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'kron';
var dependencies = ['typed', 'matrix', 'multiplyScalar'];
var createKron = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    multiplyScalar
  } = _ref;

  /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
  return typed(name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if ((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }

    if ((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }

    if ((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(a).length > 2 || (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }

    var t = [];
    var r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        r = [];
        t.push(r);
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        });
      });
    }) && t;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/map.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/map.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMap": () => (/* binding */ createMap)
/* harmony export */ });
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'map';
var dependencies = ['typed'];
var createMap = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  return typed(name, {
    'Array, function': _map,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.map(callback);
    }
  });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */

function _map(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_1__.maxArgumentCount)(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/ones.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/ones.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createOnes": () => (/* binding */ createOnes)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'ones';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createOnes = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    BigNumber
  } = _ref;

  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  return typed('ones', {
    '': function _() {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    Array: _ones,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPartitionSelect": () => (/* binding */ createPartitionSelect)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'partitionSelect';
var dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];
var createPartitionSelect = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isNumeric,
    isNaN,
    compare
  } = _ref;
  var asc = compare;

  var desc = (a, b) => -compare(a, b);
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */


  return typed(name, {
    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(x)) {
      var size = x.size();

      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */


  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    } // check for NaN values since these can cause an infinite while loop


    for (var i = 0; i < arr.length; i++) {
      if (isNumeric(arr[i]) && isNaN(arr[i])) {
        return arr[i]; // return NaN
      }
    }

    var from = 0;
    var to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements


      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/range.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/range.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRange": () => (/* binding */ createRange)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_noop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/esm/utils/noop.js");


var name = 'range';
var dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRange = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    bignumber,
    smaller,
    smallerEq,
    larger,
    largerEq
  } = _ref;

  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  return typed(name, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    string: _strRange,
    'string, boolean': _strRange,
    'number, number': function numberNumber(start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function numberNumberNumber(start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
      var BigNumber = start.constructor;
      return _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
      var BigNumber = start.constructor;
      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });

  function _out(arr) {
    if (config.matrix === 'Matrix') {
      return matrix ? matrix(arr) : (0,_utils_noop_js__WEBPACK_IMPORTED_MODULE_1__.noMatrix)();
    }

    return arr;
  }

  function _strRange(str, includeEnd) {
    var r = _parse(str);

    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    var fn;

    if (config.number === 'BigNumber') {
      if (bignumber === undefined) {
        (0,_utils_noop_js__WEBPACK_IMPORTED_MODULE_1__.noBignumber)();
      }

      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeEx(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smaller(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (larger(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeInc(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smallerEq(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (largerEq(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeEx(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smaller(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (larger(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeInc(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smallerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (largerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */


  function _parse(str) {
    var args = str.split(':'); // number

    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/reshape.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/reshape.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createReshape": () => (/* binding */ createReshape)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'reshape';
var dependencies = ['typed', 'isInteger', 'matrix'];
var createReshape = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isInteger
  } = _ref;

  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   *    math.reshape([1, 2, 3, 4], [-1, 2])
   *    // returns Matrix [[1, 2], [3, 4]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension. One -1 is allowed as wildcard,
   *                                which calculates this dimension automatically.
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  return typed(name, {
    'Matrix, Array': function MatrixArray(x, sizes) {
      return x.reshape(sizes);
    },
    'Array, Array': function ArrayArray(x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.reshape)(x, sizes);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/resize.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/resize.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createResize": () => (/* binding */ createResize)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _error_ArgumentsError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ArgumentsError.js */ "./node_modules/mathjs/lib/esm/error/ArgumentsError.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");








var name = 'resize';
var dependencies = ['config', 'matrix'];
var createResize = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    config,
    matrix
  } = _ref;

  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  return function resize(x, size, defaultValue) {
    if (arguments.length !== 2 && arguments.length !== 3) {
      throw new _error_ArgumentsError_js__WEBPACK_IMPORTED_MODULE_1__.ArgumentsError('resize', arguments.length, 2, 3);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(size)) {
      size = size.valueOf(); // get Array
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(value) ? value : value.toNumber();
      });
    } // check x is a Matrix


    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }

    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix


    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

    if (size.length === 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.clone)(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }

      x = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.clone)(x);
      var res = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.resize)(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_5__.DimensionError(size.length, 1);
    }

    var len = size[0];

    if (typeof len !== 'number' || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_7__.format)(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      var res = str;

      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }

      return res;
    } else {
      return str;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/rotate.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/rotate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRotate": () => (/* binding */ createRotate)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");


var name = 'rotate';
var dependencies = ['typed', 'multiply', 'rotationMatrix'];
var createRotate = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    multiply,
    rotationMatrix
  } = _ref;

  /**
     * Rotate a vector of size 1x2 counter-clockwise by a given angle
     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis
     *
     * Syntax:
     *
     *    math.rotate(w, theta)
     *    math.rotate(w, theta, v)
     *
     * Examples:
     *
     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])
     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])
     *
     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])
     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])
     *
     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])
     *
     * See also:
     *
     *    matrix, rotationMatrix
     *
     * @param {Array | Matrix} w                             Vector to rotate
     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
     * @param {Array | Matrix} [v]                           Rotation axis
     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w
     */
  return typed(name, {
    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);

      var matrixRes = multiply(rotationMatrix(theta), w);
      return matrixRes.toArray();
    },
    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);

      return multiply(rotationMatrix(theta), w);
    },
    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);

      var matrixRes = multiply(rotationMatrix(theta, v), w);
      return matrixRes;
    },
    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);

      return multiply(rotationMatrix(theta, v), w);
    }
  });

  function _validateSize(v, expectedSize) {
    var actualSize = Array.isArray(v) ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(v) : v.size();

    if (actualSize.length > 2) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }

    if (actualSize.length === 2 && actualSize[1] !== 1) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }

    if (actualSize[0] !== expectedSize) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRotationMatrix": () => (/* binding */ createRotationMatrix)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'rotationMatrix';
var dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];
var createRotationMatrix = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    multiplyScalar,
    addScalar,
    unaryMinus,
    norm,
    BigNumber,
    matrix,
    DenseMatrix,
    SparseMatrix,
    cos,
    sin
  } = _ref;

  /**
   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).
   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).
   *
   * Syntax:
   *
   *    math.rotationMatrix(theta)
   *    math.rotationMatrix(theta, format)
   *    math.rotationMatrix(theta, [v])
   *    math.rotationMatrix(theta, [v], format)
   *
   * Examples:
   *
   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]
   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]
   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]
   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]
   *
   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]
   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
   *
   *
   * See also:
   *
   *    matrix, cos, sin
   *
   *
   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
   * @param {Array | Matrix} [v]                           Rotation axis
   * @param {string} [format]                              Result Matrix storage format
   * @return {Array | Matrix}                              Rotation matrix
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {
      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {
      return _rotationMatrix2x2(theta, format);
    },
    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {
      var matrixV = matrix(v);

      _validateVector(matrixV);

      return _rotationMatrix3x3(theta, matrixV, undefined);
    },
    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {
      _validateVector(v);

      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);
      return _rotationMatrix3x3(theta, v, storageType);
    },
    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {
      var matrixV = matrix(v);

      _validateVector(matrixV);

      return _rotationMatrix3x3(theta, matrixV, format);
    },
    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {
      _validateVector(v);

      return _rotationMatrix3x3(theta, v, format);
    }
  });
  /**
   * Returns 2x2 matrix of 2D rotation of angle theta
   *
   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle
   * @param {string} format                              The result Matrix storage format
   * @returns {Matrix}
   * @private
   */

  function _rotationMatrix2x2(theta, format) {
    var Big = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(theta);
    var minusOne = Big ? new BigNumber(-1) : -1;
    var cosTheta = cos(theta);
    var sinTheta = sin(theta);
    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];
    return _convertToFormat(data, format);
  }

  function _validateVector(v) {
    var size = v.size();

    if (size.length < 1 || size[0] !== 3) {
      throw new RangeError('Vector must be of dimensions 1x3');
    }
  }

  function _mul(array) {
    return array.reduce((p, curr) => multiplyScalar(p, curr));
  }

  function _convertToFormat(data, format) {
    if (format) {
      if (format === 'sparse') {
        return new SparseMatrix(data);
      }

      if (format === 'dense') {
        return new DenseMatrix(data);
      }

      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    }

    return data;
  }
  /**
   * Returns a 3x3 matrix of rotation of angle theta around vector v
   *
   * @param {number | BigNumber | Complex | Unit} theta The rotation angle
   * @param {Matrix} v                                  The rotation axis vector
   * @param {string} format                             The storage format of the resulting matrix
   * @returns {Matrix}
   * @private
   */


  function _rotationMatrix3x3(theta, v, format) {
    var normV = norm(v);

    if (normV === 0) {
      throw new RangeError('Rotation around zero vector');
    }

    var Big = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(theta) ? BigNumber : null;
    var one = Big ? new Big(1) : 1;
    var minusOne = Big ? new Big(-1) : -1;
    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;
    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;
    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;
    var c = cos(theta);
    var oneMinusC = addScalar(one, unaryMinus(c));
    var s = sin(theta);
    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));
    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));
    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));
    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));
    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));
    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));
    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));
    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));
    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));
    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];
    return _convertToFormat(data, format);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/row.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/row.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRow": () => (/* binding */ createRow)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");



var name = 'row';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
var createRow = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Index,
    matrix,
    range
  } = _ref;

  /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [[3, 4]]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */
  return typed(name, {
    'Matrix, number': _row,
    'Array, number': function ArrayNumber(value, row) {
      return _row(matrix((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(value)), row).valueOf();
    }
  });
  /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */

  function _row(value, row) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.validateIndex)(row, value.size()[0]);
    var columnRange = range(0, value.size()[1]);
    var index = new Index(row, columnRange);
    return value.subset(index);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/size.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/size.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSize": () => (/* binding */ createSize)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_noop_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/esm/utils/noop.js");



var name = 'size';
var dependencies = ['typed', 'config', '?matrix'];
var createSize = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix
  } = _ref;

  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     count, resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  return typed(name, {
    Matrix: function Matrix(x) {
      return x.create(x.size());
    },
    Array: _utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize,
    string: function string(x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : (0,_utils_noop_js__WEBPACK_IMPORTED_MODULE_2__.noMatrix)();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/sort.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/sort.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSort": () => (/* binding */ createSort)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'sort';
var dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];
var createSort = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    compare,
    compareNatural
  } = _ref;
  var compareAsc = compare;

  var compareDesc = (a, b) => -compare(a, b);
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */


  return typed(name, {
    Array: function Array(x) {
      _arrayIsVector(x);

      return x.sort(compareAsc);
    },
    Matrix: function Matrix(x) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function ArrayFunction(x, _comparator) {
      _arrayIsVector(x);

      return x.sort(_comparator);
    },
    'Matrix, function': function MatrixFunction(x, _comparator) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function ArrayString(x, order) {
      _arrayIsVector(x);

      return x.sort(_comparator(order));
    },
    'Matrix, string': function MatrixString(x, order) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */


  function _arrayIsVector(array) {
    if ((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */


  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/sqrtm.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/sqrtm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSqrtm": () => (/* binding */ createSqrtm)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'sqrtm';
var dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
var createSqrtm = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    add,
    multiply,
    sqrt,
    subtract,
    inv,
    size,
    max,
    identity
  } = _ref;
  var _maxIterations = 1e3;
  var _tolerance = 1e-6;
  /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */

  function _denmanBeavers(A) {
    var error;
    var iterations = 0;
    var Y = A;
    var Z = identity(size(A));

    do {
      var Yk = Y;
      Y = multiply(0.5, add(Yk, inv(Z)));
      Z = multiply(0.5, add(Z, inv(Yk)));
      error = max(abs(subtract(Y, Yk)));

      if (error > _tolerance && ++iterations > _maxIterations) {
        throw new Error('computing square root of matrix: iterative method could not converge');
      }
    } while (error > _tolerance);

    return Y;
  }
  /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */


  return typed(name, {
    'Array | Matrix': function ArrayMatrix(A) {
      var size = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(A) ? A.size() : (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.arraySize)(A);

      switch (size.length) {
        case 1:
          // Single element Array | Matrix
          if (size[0] === 1) {
            return sqrt(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
          }

        case 2:
          {
            // Two-dimensional Array | Matrix
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _denmanBeavers(A);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
            }
          }

        default:
          // Multi dimensional array
          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_3__.format)(size) + ')');
      }
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/squeeze.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/squeeze.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSqueeze": () => (/* binding */ createSqueeze)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'squeeze';
var dependencies = ['typed', 'matrix'];
var createSqueeze = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;

  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  return typed(name, {
    Array: function Array(x) {
      return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.squeeze)((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(x));
    },
    Matrix: function Matrix(x) {
      var res = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.squeeze)(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    any: function any(x) {
      // scalar
      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(x);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/subset.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/subset.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSubset": () => (/* binding */ createSubset)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_customs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/esm/utils/customs.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");






var name = 'subset';
var dependencies = ['typed', 'matrix'];
var createSubset = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;

  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  return typed(name, {
    // get subset
    'Array, Index': function ArrayIndex(value, index) {
      var m = matrix(value);
      var subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },
    'Matrix, Index': function MatrixIndex(value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
      return matrix((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
      return matrix((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */

function _getSubstring(str, index) {
  if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isIndex)(index)) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__.DimensionError(index.size().length, 1);
  } // validate whether the range is out of range


  var strLen = str.length;
  (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.validateIndex)(index.min()[0], strLen);
  (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.validateIndex)(index.max()[0], strLen);
  var range = index.dimension(0);
  var substr = '';
  range.forEach(function (v) {
    substr += str.charAt(v);
  });
  return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */


function _setSubstring(str, index, replacement, defaultValue) {
  if (!index || index.isIndex !== true) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__.DimensionError(index.size().length, 1);
  }

  if (defaultValue !== undefined) {
    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
      throw new TypeError('Single character expected as defaultValue');
    }
  } else {
    defaultValue = ' ';
  }

  var range = index.dimension(0);
  var len = range.size()[0];

  if (len !== replacement.length) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__.DimensionError(range.size()[0], replacement.length);
  } // validate whether the range is out of range


  var strLen = str.length;
  (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.validateIndex)(index.min()[0]);
  (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_4__.validateIndex)(index.max()[0]); // copy the string into an array with characters

  var chars = [];

  for (var i = 0; i < strLen; i++) {
    chars[i] = str.charAt(i);
  }

  range.forEach(function (v, i) {
    chars[v] = replacement.charAt(i[0]);
  }); // initialize undefined characters with a space

  if (chars.length > strLen) {
    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
      if (!chars[_i]) {
        chars[_i] = defaultValue;
      }
    }
  }

  return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */


function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__.DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_5__.getSafeProperty)(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */


function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_3__.DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone


  var updated = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(object);
  (0,_utils_customs_js__WEBPACK_IMPORTED_MODULE_5__.setSafeProperty)(updated, key, replacement);
  return updated;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTrace": () => (/* binding */ createTrace)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'trace';
var dependencies = ['typed', 'matrix', 'add'];
var createTrace = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    add
  } = _ref;

  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  return typed('trace', {
    Array: function _arrayTrace(x) {
      // use dense matrix implementation
      return _denseTrace(matrix(x));
    },
    SparseMatrix: _sparseTrace,
    DenseMatrix: _denseTrace,
    any: _utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone
  });

  function _denseTrace(m) {
    // matrix size & data
    var size = m._size;
    var data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] === 1) {
          // return data[0]
          return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(data[0]);
        }

        throw new RangeError('Matrix must be square (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(size) + ')');

      case 2:
        {
          // two dimensional
          var rows = size[0];
          var cols = size[1];

          if (rows === cols) {
            // calulate sum
            var sum = 0; // loop diagonal

            for (var i = 0; i < rows; i++) {
              sum = add(sum, data[i][i]);
            } // return trace


            return sum;
          } else {
            throw new RangeError('Matrix must be square (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(size) + ')');
          }
        }

      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(size) + ')');
    }
  }

  function _sparseTrace(m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size; // check dimensions

    var rows = size[0];
    var columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      var sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }

            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace


      return sum;
    }

    throw new RangeError('Matrix must be square (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(size) + ')');
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/transpose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTranspose": () => (/* binding */ createTranspose)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'transpose';
var dependencies = ['typed', 'matrix'];
var createTranspose = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;

  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  return typed('transpose', {
    Array: function Array(x) {
      // use dense matrix implementation
      return this(matrix(x)).valueOf();
    },
    Matrix: function Matrix(x) {
      // matrix size
      var size = x.size(); // result

      var c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          {
            // rows and columns
            var rows = size[0];
            var columns = size[1]; // check columns

            if (columns === 0) {
              // throw exception
              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(size) + ')');
            } // process storage format


            switch (x.storage()) {
              case 'dense':
                c = _denseTranspose(x, rows, columns);
                break;

              case 'sparse':
                c = _sparseTranspose(x, rows, columns);
                break;
            }
          }
          break;

        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format)(this._size) + ')');
      }

      return c;
    },
    // scalars
    any: function any(x) {
      return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(x);
    }
  });

  function _denseTranspose(m, rows, columns) {
    // matrix array
    var data = m._data; // transposed matrix data

    var transposed = [];
    var transposedRow; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(data[i][j]);
      }
    } // return matrix


    return m.createDenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result matrices

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // row counts

    var w = [];

    for (var x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars


    var p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum


    var sum = 0; // initialize cptr with the cummulative sum of row counts

    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr


    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) {
          cvalues[q] = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(values[k]);
        }
      }
    } // return matrix


    return m.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/matrix/zeros.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/matrix/zeros.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createZeros": () => (/* binding */ createZeros)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'zeros';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createZeros = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    BigNumber
  } = _ref;

  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    Array: _zeros,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}); // TODO: zeros contains almost the same code as ones. Reuse this?

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/combinations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/combinations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCombinations": () => (/* binding */ createCombinations)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_combinations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/combinations.js */ "./node_modules/mathjs/lib/esm/plain/number/combinations.js");


var name = 'combinations';
var dependencies = ['typed'];
var createCombinations = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  return typed(name, {
    'number, number': _plain_number_combinations_js__WEBPACK_IMPORTED_MODULE_1__.combinationsNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var nMinusk = n.minus(k);
      var one = new BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      result = one;

      if (k.lt(nMinusk)) {
        for (i = one; i.lte(nMinusk); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusk.plus(i)).dividedBy(i);
        }
      }

      return result;
    } // TODO: implement support for collection in combinations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCombinationsWithRep": () => (/* binding */ createCombinationsWithRep)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_product_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/esm/utils/product.js");



var name = 'combinationsWithRep';
var dependencies = ['typed'];
var createCombinationsWithRep = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */
  return typed(name, {
    'number, number': function numberNumber(n, k) {
      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n < 1) {
        throw new TypeError('k must be less than or equal to n + k - 1');
      }

      if (k < n - 1) {
        var _prodrange = (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_2__.product)(n, n + k - 1);

        return _prodrange / (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_2__.product)(1, k);
      }

      var prodrange = (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_2__.product)(k + 1, n + k - 1);
      return prodrange / (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_2__.product)(1, n - 1);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var one = new BigNumber(1);
      var nMinusOne = n.minus(one);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n.lt(one)) {
        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
      }

      result = one;

      if (k.lt(nMinusOne)) {
        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusOne.plus(i)).dividedBy(i);
        }
      }

      return result;
    }
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/factorial.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/factorial.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFactorial": () => (/* binding */ createFactorial)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'factorial';
var dependencies = ['typed', 'gamma'];
var createFactorial = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    gamma
  } = _ref;

  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  return typed(name, {
    number: function number(n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },
    BigNumber: function BigNumber(n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(n, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/gamma.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/gamma.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createGamma": () => (/* binding */ createGamma)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/probability.js");



var name = 'gamma';
var dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
var createGamma = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    multiplyScalar,
    pow,
    BigNumber: _BigNumber,
    Complex: _Complex
  } = _ref;

  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaNumber,
    Complex: function Complex(n) {
      if (n.im === 0) {
        return this(n.re);
      }

      n = new _Complex(n.re - 1, n.im);
      var x = new _Complex(_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaP[0], 0);

      for (var i = 1; i < _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaP.length; ++i) {
        var real = n.re + i; // x += p[i]/(n+i)

        var den = real * real + n.im * n.im;

        if (den !== 0) {
          x.re += _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaP[i] * real / den;
          x.im += -(_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaP[i] * n.im) / den;
        } else {
          x.re = _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaP[i] < 0 ? -Infinity : Infinity;
        }
      }

      var t = new _Complex(n.re + _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.gammaG + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      var result = pow(t, n);

      if (result.im === 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re === 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      var r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiplyScalar(multiplyScalar(result, t), x);
    },
    BigNumber: function BigNumber(n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new _BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(n, this);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n < 8) {
      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);
    }

    var precision = config.precision + (Math.log(n.toNumber()) | 0);

    var Big = _BigNumber.clone({
      precision: precision
    });

    if (n % 2 === 1) {
      return n.times(bigFactorial(new _BigNumber(n - 1)));
    }

    var p = n;
    var prod = new Big(n);
    var sum = n.toNumber();

    while (p > 2) {
      p -= 2;
      sum += p;
      prod = prod.times(sum);
    }

    return new _BigNumber(prod.toPrecision(_BigNumber.precision));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/kldivergence.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/kldivergence.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createKldivergence": () => (/* binding */ createKldivergence)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'kldivergence';
var dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
var createKldivergence = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    divide,
    sum,
    multiply,
    dotDivide,
    log,
    isNumeric
  } = _ref;

  /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
  return typed(name, {
    'Array, Array': function ArrayArray(q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function MatrixArray(q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function ArrayMatrix(q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function MatrixMatrix(q, p) {
      return _kldiv(q, p);
    }
  });

  function _kldiv(q, p) {
    var plength = p.size().length;
    var qlength = q.size().length;

    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }

    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }

    if (plength !== qlength) {
      throw new Error('Length of two vectors must be equal');
    } // Before calculation, apply normalization


    var sumq = sum(q);

    if (sumq === 0) {
      throw new Error('Sum of elements in first object must be non zero');
    }

    var sump = sum(p);

    if (sump === 0) {
      throw new Error('Sum of elements in second object must be non zero');
    }

    var qnorm = divide(q, sum(q));
    var pnorm = divide(p, sum(p));
    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/multinomial.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/multinomial.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMultinomial": () => (/* binding */ createMultinomial)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'multinomial';
var dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
var createMultinomial = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    divide,
    multiply,
    factorial,
    isInteger,
    isPositive
  } = _ref;

  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var sum = 0;
      var denom = 1;
      (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }

        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/permutations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/permutations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPermutations": () => (/* binding */ createPermutations)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_product_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/esm/utils/product.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'permutations';
var dependencies = ['typed', 'factorial'];
var createPermutations = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    factorial
  } = _ref;

  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  return typed(name, {
    'number | BigNumber': factorial,
    'number, number': function numberNumber(n, k) {
      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time


      return (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_2__.product)(n - k + 1, n);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var result, i;

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      var one = n.mul(0).add(1);
      result = one;

      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    } // TODO: implement support for collection in permutations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/pickRandom.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/pickRandom.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPickRandom": () => (/* binding */ createPickRandom)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js");




var name = 'pickRandom';
var dependencies = ['typed', 'config', '?on'];
var createPickRandom = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    on
  } = _ref;
  // seeded pseudo random number generator
  var rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *     math.pickRandom(array, { weights, number, elementWise })
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })
   *         // returns one of the items in the array
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */


  return typed({
    'Array | Matrix': function ArrayMatrix(possibles) {
      return _pickRandom(possibles, {});
    },
    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {
      return _pickRandom(possibles, options);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
      return _pickRandom(possibles, {
        number
      });
    },
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {
      return _pickRandom(possibles, {
        weights
      });
    },
    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
      return _pickRandom(possibles, {
        number,
        weights
      });
    },
    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
      return _pickRandom(possibles, {
        number,
        weights
      });
    }
  });
  /**
   * @param {Array | Matrix} possibles
   * @param {{
   *   number?: number,
   *   weights?: Array | Matrix,
   *   elementWise: boolean
   * }} options
   * @returns {number | Array}
   * @private
   */

  function _pickRandom(possibles, _ref2) {
    var {
      number,
      weights,
      elementWise = true
    } = _ref2;
    var single = typeof number === 'undefined';

    if (single) {
      number = 1;
    }

    var createMatrix = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(possibles) ? possibles.create : (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isMatrix)(weights) ? weights.create : null;
    possibles = possibles.valueOf(); // get Array

    if (weights) {
      weights = weights.valueOf(); // get Array
    }

    if (elementWise === true) {
      possibles = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.flatten)(possibles);
      weights = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.flatten)(weights);
    }

    var totalWeights = 0;

    if (typeof weights !== 'undefined') {
      if (weights.length !== possibles.length) {
        throw new Error('Weights must have the same length as possibles');
      }

      for (var i = 0, len = weights.length; i < len; i++) {
        if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(weights[i]) || weights[i] < 0) {
          throw new Error('Weights must be an array of positive numbers');
        }

        totalWeights += weights[i];
      }
    }

    var length = possibles.length;
    var result = [];
    var pick;

    while (result.length < number) {
      if (typeof weights === 'undefined') {
        pick = possibles[Math.floor(rng() * length)];
      } else {
        var randKey = rng() * totalWeights;

        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
          randKey -= weights[_i];

          if (randKey < 0) {
            pick = possibles[_i];
            break;
          }
        }
      }

      result.push(pick);
    }

    return single ? result[0] : createMatrix ? createMatrix(result) : result;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/random.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/random.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRandom": () => (/* binding */ createRandom),
/* harmony export */   "createRandomNumber": () => (/* binding */ createRandomNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js");
/* harmony import */ var _util_randomMatrix_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/randomMatrix.js */ "./node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js");




var name = 'random';
var dependencies = ['typed', 'config', '?on'];
var createRandom = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    on
  } = _ref;
  // seeded pseudo random number generator
  var rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */


  return typed(name, {
    '': () => _random(0, 1),
    number: max => _random(0, max),
    'number, number': (min, max) => _random(min, max),
    'Array | Matrix': size => _randomMatrix(size, 0, 1),
    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),
    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)
  });

  function _randomMatrix(size, min, max) {
    var res = (0,_util_randomMatrix_js__WEBPACK_IMPORTED_MODULE_2__.randomMatrix)(size.valueOf(), () => _random(min, max));
    return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isMatrix)(size) ? size.create(res) : res;
  }

  function _random(min, max) {
    return min + rng() * (max - min);
  }
}); // number only implementation of random, no matrix support
// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?

var createRandomNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config', '?on'], (_ref2) => {
  var {
    typed,
    config,
    on,
    matrix
  } = _ref2;
  // seeded pseudo random number generator1
  var rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(curr.randomSeed);
      }
    });
  }

  return typed(name, {
    '': () => _random(0, 1),
    number: max => _random(0, max),
    'number, number': (min, max) => _random(min, max)
  });

  function _random(min, max) {
    return min + rng() * (max - min);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/randomInt.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/randomInt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRandomInt": () => (/* binding */ createRandomInt)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _util_randomMatrix_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/randomMatrix.js */ "./node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js");
/* harmony import */ var _util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");




var name = 'randomInt';
var dependencies = ['typed', 'config', '?on'];
var createRandomInt = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    on
  } = _ref;
  // seeded pseudo random number generator
  var rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0,_util_seededRNG_js__WEBPACK_IMPORTED_MODULE_1__.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */


  return typed(name, {
    '': () => _randomInt(0, 1),
    number: max => _randomInt(0, max),
    'number, number': (min, max) => _randomInt(min, max),
    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),
    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),
    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)
  });

  function _randomIntMatrix(size, min, max) {
    var res = (0,_util_randomMatrix_js__WEBPACK_IMPORTED_MODULE_2__.randomMatrix)(size.valueOf(), () => _randomInt(min, max));
    return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isMatrix)(size) ? size.create(res) : res;
  }

  function _randomInt(min, max) {
    return Math.floor(min + rng() * (max - min));
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomMatrix": () => (/* binding */ randomMatrix)
/* harmony export */ });
/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */
function randomMatrix(size, random) {
  var data = [];
  size = size.slice(0);

  if (size.length > 1) {
    for (var i = 0, length = size.shift(); i < length; i++) {
      data.push(randomMatrix(size, random));
    }
  } else {
    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
      data.push(random());
    }
  }

  return data;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRng": () => (/* binding */ createRng)
/* harmony export */ });
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");

var singletonRandom = /* #__PURE__ */seedrandom__WEBPACK_IMPORTED_MODULE_0__(Date.now());
function createRng(randomSeed) {
  var random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : seedrandom__WEBPACK_IMPORTED_MODULE_0__(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed


  setSeed(randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  }

  return rng;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/compare.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/compare.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCompare": () => (/* binding */ createCompare),
/* harmony export */   "createCompareNumber": () => (/* binding */ createCompareNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js");








var name = 'compare';
var dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
var createCompare = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    equalScalar,
    matrix,
    BigNumber,
    Fraction,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm05 = (0,_type_matrix_utils_algorithm05_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm05)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function numberNumber(x, y) {
      return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return new Fraction(x.compare(y));
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
var createCompareNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/compareNatural.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/compareNatural.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCompareNatural": () => (/* binding */ createCompareNatural)
/* harmony export */ });
/* harmony import */ var javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! javascript-natural-sort */ "./node_modules/javascript-natural-sort/naturalSort.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'compareNatural';
var dependencies = ['typed', 'compare'];
var createCompareNatural = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    compare
  } = _ref;
  var compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'any, any': function anyAny(x, y) {
      var typeX = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf)(x);
      var typeY = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf)(y);
      var c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);

        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__(typeX, typeY);
        }
      } // matrix types


      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(this, x, y);

        if (c !== 0) {
          return c;
        } else {
          return javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


      if (typeX !== typeY) {
        return javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return this(x.value, y.value);
        } // compare by units


        return compareArrays(this, x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(this, x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...


      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(compareNatural, x, y) {
    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix)(x) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix)(y)) {
      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix)(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x.toArray(), y);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isSparseMatrix)(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x, y.toArray());
    } // convert DenseArray into Array


    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isDenseMatrix)(x)) {
      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.isDenseMatrix)(y)) {
      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
    } // convert scalars to array


    if (!Array.isArray(x)) {
      return compareMatricesAndArrays(compareNatural, [x], y);
    }

    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(compareNatural, x, [y]);
    }

    return compareArrays(compareNatural, x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareArrays(compareNatural, x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);

      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays


    if (x.length > y.length) {
      return 1;
    }

    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content


    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareObjects(compareNatural, x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y); // compare keys

    keysX.sort(javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__);
    keysY.sort(javascript_natural_sort__WEBPACK_IMPORTED_MODULE_0__);
    var c = compareArrays(compareNatural, keysX, keysY);

    if (c !== 0) {
      return c;
    } // compare values


    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);

      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */

function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }

  if (x.re < y.re) {
    return -1;
  }

  if (x.im > y.im) {
    return 1;
  }

  if (x.im < y.im) {
    return -1;
  }

  return 0;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/compareText.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/compareText.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCompareText": () => (/* binding */ createCompareText),
/* harmony export */   "createCompareTextNumber": () => (/* binding */ createCompareTextNumber)
/* harmony export */ });
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");




var name = 'compareText';
var dependencies = ['typed', 'matrix'];
var createCompareText = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm14)({
    typed
  });
  /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'any, any': _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText,
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText, true).valueOf();
    }
  });
});
var createCompareTextNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed'], (_ref2) => {
  var {
    typed
  } = _ref2;
  return typed(name, {
    'any, any': _utils_string_js__WEBPACK_IMPORTED_MODULE_3__.compareText
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/deepEqual.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/deepEqual.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDeepEqual": () => (/* binding */ createDeepEqual)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'deepEqual';
var dependencies = ['typed', 'equal'];
var createDeepEqual = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equal
  } = _ref;

  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  return typed(name, {
    'any, any': function anyAny(x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });
  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */

  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        var len = x.length;

        if (len !== y.length) {
          return false;
        }

        for (var i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }

        return true;
      } else {
        return false;
      }
    } else {
      if (Array.isArray(y)) {
        return false;
      } else {
        return equal(x, y);
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/equal.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/equal.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEqual": () => (/* binding */ createEqual),
/* harmony export */   "createEqualNumber": () => (/* binding */ createEqualNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");






var name = 'equal';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createEqual = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */

  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, equalScalar);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, equalScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, equalScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, equalScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, equalScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, equalScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, equalScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, equalScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });
});
var createEqualNumber = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'equalScalar'], (_ref2) => {
  var {
    typed,
    equalScalar
  } = _ref2;
  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/equalScalar.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/equalScalar.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEqualScalar": () => (/* binding */ createEqualScalar),
/* harmony export */   "createEqualScalarNumber": () => (/* binding */ createEqualScalarNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_complex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/complex.js */ "./node_modules/mathjs/lib/esm/utils/complex.js");




var name = 'equalScalar';
var dependencies = ['typed', 'config'];
var createEqualScalar = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config
  } = _ref;

  /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y;
    },
    'number, number': function numberNumber(x, y) {
      return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || (0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_2__.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return (0,_utils_complex_js__WEBPACK_IMPORTED_MODULE_3__.complexEquals)(x, y, config.epsilon);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    }
  });
});
var createEqualScalarNumber = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.nearlyEqual)(x, y, config.epsilon);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/equalText.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/equalText.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEqualText": () => (/* binding */ createEqualText)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'equalText';
var dependencies = ['typed', 'compareText', 'isZero'];
var createEqualText = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    compareText,
    isZero
  } = _ref;

  /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */
  return typed(name, {
    'any, any': function anyAny(x, y) {
      return isZero(compareText(x, y));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/larger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/larger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLarger": () => (/* binding */ createLarger),
/* harmony export */   "createLargerNumber": () => (/* binding */ createLargerNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");








var name = 'larger';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLarger = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x > y;
    },
    'number, number': function numberNumber(x, y) {
      return x > y && !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gt(y) && !(0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
var createLargerNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x > y && !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/largerEq.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/largerEq.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLargerEq": () => (/* binding */ createLargerEq),
/* harmony export */   "createLargerEqNumber": () => (/* binding */ createLargerEqNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");








var name = 'largerEq';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLargerEq = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x >= y;
    },
    'number, number': function numberNumber(x, y) {
      return x >= y || (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gte(y) || (0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== -1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
var createLargerEqNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x >= y || (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/smaller.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/smaller.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSmaller": () => (/* binding */ createSmaller),
/* harmony export */   "createSmallerNumber": () => (/* binding */ createSmallerNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");








var name = 'smaller';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmaller = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x < y;
    },
    'number, number': function numberNumber(x, y) {
      return x < y && !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lt(y) && !(0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
var createSmallerNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x < y && !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/smallerEq.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/smallerEq.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSmallerEq": () => (/* binding */ createSmallerEq),
/* harmony export */   "createSmallerEqNumber": () => (/* binding */ createSmallerEqNumber)
/* harmony export */ });
/* harmony import */ var _utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");








var name = 'smallerEq';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmallerEq = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x <= y;
    },
    'number, number': function numberNumber(x, y) {
      return x <= y || (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lte(y) || (0,_utils_bignumber_nearlyEqual_js__WEBPACK_IMPORTED_MODULE_7__.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
var createSmallerEqNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'config'], (_ref2) => {
  var {
    typed,
    config
  } = _ref2;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x <= y || (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.nearlyEqual)(x, y, config.epsilon);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/relational/unequal.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/relational/unequal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnequal": () => (/* binding */ createUnequal),
/* harmony export */   "createUnequalNumber": () => (/* binding */ createUnequalNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");






var name = 'unequal';
var dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
var createUnequal = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    equalScalar,
    matrix,
    DenseMatrix
  } = _ref;
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm03)({
    typed
  });
  var algorithm07 = (0,_type_matrix_utils_algorithm07_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm14)({
    typed
  });
  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */

  return typed('unequal', {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return _unequal(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, _unequal);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, _unequal, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, _unequal, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _unequal);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, _unequal, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _unequal, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, _unequal, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _unequal, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });

  function _unequal(x, y) {
    return !equalScalar(x, y);
  }
});
var createUnequalNumber = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, ['typed', 'equalScalar'], (_ref2) => {
  var {
    typed,
    equalScalar
  } = _ref2;
  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return !equalScalar(x, y);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setCartesian.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setCartesian.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetCartesian": () => (/* binding */ createSetCartesian)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setCartesian';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetCartesian = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index,
    DenseMatrix
  } = _ref;

  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result = [];

      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
        // if any of them is empty, return empty
        var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setDifference.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setDifference.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetDifference": () => (/* binding */ createSetDifference)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setDifference';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDifference = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index,
    DenseMatrix
  } = _ref;

  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0) {
        // empty-anything=empty
        result = [];
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything-empty=anything
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a1.toArray());
      } else {
        var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        var inb2;

        for (var i = 0; i < b1.length; i++) {
          inb2 = false;

          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }

          if (!inb2) {
            result.push(b1[i]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.generalize)(result));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setDistinct.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setDistinct.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetDistinct": () => (/* binding */ createSetDistinct)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setDistinct';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDistinct = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index,
    DenseMatrix
  } = _ref;

  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var result;

      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        result = [];
      } else {
        var b = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        result = [];
        result.push(b[0]);

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            result.push(b[i]);
          }
        }
      } // return an array, if the input was an array


      if (Array.isArray(a)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setIntersect.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setIntersect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetIntersect": () => (/* binding */ createSetIntersect)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setIntersect';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetIntersect = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index,
    DenseMatrix
  } = _ref;

  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
        // of any of them is empty, return empty
        result = [];
      } else {
        var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              result.push(b1[i]);
              break;
            }
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.generalize)(result));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setIsSubset.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setIsSubset.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetIsSubset": () => (/* binding */ createSetIsSubset)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setIsSubset';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetIsSubset = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index
  } = _ref;

  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // empty is a subset of anything
        return true;
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything is not a subset of empty
        return false;
      }

      var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.identify)((0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      var inb2;

      for (var i = 0; i < b1.length; i++) {
        inb2 = false;

        for (var j = 0; j < b2.length; j++) {
          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
            // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }

        if (inb2 === false) {
          return false;
        }
      }

      return true;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setMultiplicity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setMultiplicity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetMultiplicity": () => (/* binding */ createSetMultiplicity)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setMultiplicity';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetMultiplicity = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index
  } = _ref;

  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  return typed(name, {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return 0
        return 0;
      }

      var b = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a) ? a : a.toArray());
      var count = 0;

      for (var i = 0; i < b.length; i++) {
        if (compareNatural(b[i], e) === 0) {
          count++;
        }
      }

      return count;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setPowerset.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setPowerset.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetPowerset": () => (/* binding */ createSetPowerset)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setPowerset';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetPowerset = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    subset,
    compareNatural,
    Index
  } = _ref;

  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        return [];
      }

      var b = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      var result = [];
      var number = 0;

      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split('').reverse()));
        number++;
      } // can not return a matrix, because of the different size of the subarrays


      return _sort(result);
    }
  }); // create subset

  function _subset(array, bitarray) {
    var result = [];

    for (var i = 0; i < bitarray.length; i++) {
      if (bitarray[i] === '1') {
        result.push(array[i]);
      }
    }

    return result;
  } // sort subsests by length


  function _sort(array) {
    var temp = [];

    for (var i = array.length - 1; i > 0; i--) {
      for (var j = 0; j < i; j++) {
        if (array[j].length > array[j + 1].length) {
          temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }

    return array;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setSize.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setSize.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetSize": () => (/* binding */ createSetSize)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setSize';
var dependencies = ['typed', 'compareNatural'];
var createSetSize = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    compareNatural
  } = _ref;

  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      return Array.isArray(a) ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a).length : (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a.toArray()).length;
    },
    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a).length : (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a.toArray()).length;
      } else {
        var b = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var count = 1;

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            count++;
          }
        }

        return count;
      }
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setSymDifference.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setSymDifference.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetSymDifference": () => (/* binding */ createSetSymDifference)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setSymDifference';
var dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
var createSetSymDifference = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    concat,
    subset,
    setDifference,
    Index
  } = _ref;

  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a1);
      }

      var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a1);
      var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/set/setUnion.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/set/setUnion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSetUnion": () => (/* binding */ createSetUnion)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'setUnion';
var dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
var createSetUnion = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    size,
    concat,
    subset,
    setIntersect,
    setSymDifference,
    Index
  } = _ref;

  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a1);
      }

      var b1 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a1);
      var b2 = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/special/erf.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/special/erf.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createErf": () => (/* binding */ createErf)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* eslint-disable no-loss-of-precision */



var name = 'erf';
var dependencies = ['typed'];
var createErf = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  return typed('name', {
    number: function number(x) {
      var y = Math.abs(x);

      if (y >= MAX_NUM) {
        return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.sign)(x);
      }

      if (y <= THRESH) {
        return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.sign)(x) * erf1(y);
      }

      if (y <= 4.0) {
        return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.sign)(x) * (1 - erfc2(y));
      }

      return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_1__.sign)(x) * (1 - erfc3(y));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(n, this);
    } // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)

  });
  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */

  function erf1(y) {
    var ysq = y * y;
    var xnum = P[0][4] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + P[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }

    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
  }
  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */


  function erfc2(y) {
    var xnum = P[1][8] * y;
    var xden = y;
    var i;

    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + P[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }

    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
    var ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */


  function erfc3(y) {
    var ysq = 1 / (y * y);
    var xnum = P[2][5] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + P[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }

    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */

var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */

var SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */

var MAX_NUM = Math.pow(2, 53);

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/mad.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/mad.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMad": () => (/* binding */ createMad)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");



var name = 'mad';
var dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];
var createMad = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    abs,
    map,
    median,
    subtract
  } = _ref;

  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  return typed(name, {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function _(args) {
      return _mad(args);
    }
  });

  function _mad(array) {
    array = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
    }

    try {
      var med = median(array);
      return median(map(array, function (value) {
        return abs(subtract(value, med));
      }));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
        throw new TypeError(err.message.replace('median', 'mad'));
      } else {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'mad');
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/max.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/max.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMax": () => (/* binding */ createMax)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");



var name = 'max';
var dependencies = ['typed', 'config', 'numeric', 'larger'];
var createMax = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    numeric,
    larger
  } = _ref;

  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  return typed(name, {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.reduce)(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function _(args) {
      if ((0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    try {
      return larger(x, y) ? x : y;
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'max', y);
    }
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */


  function _max(array) {
    var res;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          res = NaN;
        } else if (res === undefined || larger(value, res)) {
          res = value;
        }
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'max', value);
      }
    });

    if (res === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value


    if (typeof res === 'string') {
      res = numeric(res, config.number);
    }

    return res;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/mean.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/mean.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMean": () => (/* binding */ createMean)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");




var name = 'mean';
var dependencies = ['typed', 'add', 'divide'];
var createMean = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    divide
  } = _ref;

  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  return typed(name, {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmeanDim,
    // mean(a, b, c, d, ...)
    '...': function _(args) {
      if ((0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmeanDim(array, dim) {
    try {
      var sum = (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.reduce)(array, dim, add);
      var s = Array.isArray(array) ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_2__.arraySize)(array) : array.size();
      return divide(sum, s[dim]);
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_3__.improveErrorMessage)(err, 'mean');
    }
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */


  function _mean(array) {
    var sum;
    var num = 0;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_3__.improveErrorMessage)(err, 'mean', value);
      }
    });

    if (num === 0) {
      throw new Error('Cannot calculate the mean of an empty array');
    }

    return divide(sum, num);
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/median.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/median.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMedian": () => (/* binding */ createMedian)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");




var name = 'median';
var dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
var createMedian = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    divide,
    compare,
    partitionSelect
  } = _ref;

  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */
  function _median(array) {
    try {
      array = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(array.valueOf());
      var num = array.length;

      if (num === 0) {
        throw new Error('Cannot calculate median of an empty array');
      }

      if (num % 2 === 0) {
        // even: return the average of the two middle values
        var mid = num / 2 - 1;
        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

        var left = array[mid];

        for (var i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }

        return middle2(left, right);
      } else {
        // odd: return the middle value
        var m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'median');
    }
  } // helper function to type check the middle value of the array


  var middle = typed({
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
      return divide(add(left, right), 2);
    }
  });
  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */

  return typed(name, {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
    },
    // median(a, b, c, d, ...)
    '...': function _(args) {
      if ((0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_3__.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/min.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/min.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMin": () => (/* binding */ createMin)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");



var name = 'min';
var dependencies = ['typed', 'config', 'numeric', 'smaller'];
var createMin = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    numeric,
    smaller
  } = _ref;

  /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  return typed(name, {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.reduce)(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function _(args) {
      if ((0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    try {
      return smaller(x, y) ? x : y;
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'min', y);
    }
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */


  function _min(array) {
    var min;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          min = NaN;
        } else if (min === undefined || smaller(value, min)) {
          min = value;
        }
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'min', value);
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value


    if (typeof min === 'string') {
      min = numeric(min, config.number);
    }

    return min;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/mode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/mode.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMode": () => (/* binding */ createMode)
/* harmony export */ });
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'mode';
var dependencies = ['typed', 'isNaN', 'isNumeric'];
var createMode = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isNaN,
    isNumeric
  } = _ref;

  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  return typed(name, {
    'Array | Matrix': _mode,
    '...': function _(args) {
      return _mode(args);
    }
  });
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */

  function _mode(values) {
    values = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(values.valueOf());
    var num = values.length;

    if (num === 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }

    var count = {};
    var mode = [];
    var max = 0;

    for (var i = 0; i < values.length; i++) {
      var value = values[i];

      if (isNumeric(value) && isNaN(value)) {
        throw new Error('Cannot calculate mode of an array containing NaN values');
      }

      if (!(value in count)) {
        count[value] = 0;
      }

      count[value]++;

      if (count[value] === max) {
        mode.push(value);
      } else if (count[value] > max) {
        max = count[value];
        mode = [value];
      }
    }

    return mode;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/prod.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/prod.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createProd": () => (/* binding */ createProd)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");



var name = 'prod';
var dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];
var createProd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    multiplyScalar,
    numeric
  } = _ref;

  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  return typed(name, {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
    },
    // prod(a, b, c, d, ...)
    '...': function _(args) {
      return _prod(args);
    }
  });
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    var prod;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        prod = prod === undefined ? value : multiplyScalar(prod, value);
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'prod', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (typeof prod === 'string') {
      prod = numeric(prod, config.number);
    }

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createQuantileSeq": () => (/* binding */ createQuantileSeq)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'quantileSeq';
var dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
var createQuantileSeq = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    multiply,
    partitionSelect,
    compare
  } = _ref;

  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isCollection)(data)) {
      sorted = sorted || false;

      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);

            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }

            return probArr;
          }
        }

        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(probOrN)) {
          var BigNumber = probOrN.constructor;

          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new BigNumber(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed


            var intN = probOrN.toNumber();

            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            var _nPlusOne = new BigNumber(intN + 1);

            probArr = new Array(intN);

            for (var _i = 0; _i < intN;) {
              probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
            }

            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);

          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
            var currProb = probOrN[_i2];

            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(currProb)) {
              one = new currProb.constructor(1);

              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
          }

          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */


  function _quantileSeq(array, prob, sorted) {
    var flat = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.flatten)(array);
    var len = flat.length;

    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(prob)) {
      var _index = prob * (len - 1);

      var _fracPart = _index % 1;

      if (_fracPart === 0) {
        var value = sorted ? flat[_index] : partitionSelect(flat, _index);
        validate(value);
        return value;
      }

      var _integerPart = Math.floor(_index);

      var _left;

      var _right;

      if (sorted) {
        _left = flat[_integerPart];
        _right = flat[_integerPart + 1];
      } else {
        _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

        _left = flat[_integerPart];

        for (var i = 0; i < _integerPart; ++i) {
          if (compare(flat[i], _left) > 0) {
            _left = flat[i];
          }
        }
      }

      validate(_left);
      validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
    } // If prob is a BigNumber


    var index = prob.times(len - 1);

    if (index.isInteger()) {
      index = index.toNumber();

      var _value = sorted ? flat[index] : partitionSelect(flat, index);

      validate(_value);
      return _value;
    }

    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();
    var left;
    var right;

    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];

      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
        if (compare(flat[_i3], left) > 0) {
          left = flat[_i3];
        }
      }
    }

    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */


  var validate = typed({
    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
      return x;
    }
  });
  return quantileSeq;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/std.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/std.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createStd": () => (/* binding */ createStd)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'std';
var dependencies = ['typed', 'sqrt', 'variance'];
var createStd = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    sqrt,
    variance
  } = _ref;

  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */
  return typed(name, {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': _std,
    // std([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _std,
    // std(a, b, c, d, ...)
    '...': function _(args) {
      return _std(args);
    }
  });

  function _std(array, normalization) {
    if (array.length === 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    try {
      return sqrt(variance.apply(null, arguments));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
        throw new TypeError(err.message.replace(' variance', ' std'));
      } else {
        throw err;
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/sum.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/sum.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSum": () => (/* binding */ createSum)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");



var name = 'sum';
var dependencies = ['typed', 'config', 'add', 'numeric'];
var createSum = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    add,
    numeric
  } = _ref;

  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  return typed(name, {
    // sum([a, b, c, d, ...])
    'Array | Matrix': _sum,
    // sum([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nsumDim,
    // sum(a, b, c, d, ...)
    '...': function _(args) {
      if ((0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function sum');
      }

      return _sum(args);
    }
  });
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array | Matrix} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    var sum;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'sum', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (sum === undefined) {
      sum = numeric(0, config.number);
    }

    if (typeof sum === 'string') {
      sum = numeric(sum, config.number);
    }

    return sum;
  }

  function _nsumDim(array, dim) {
    try {
      var sum = (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.reduce)(array, dim, add);
      return sum;
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'sum');
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "improveErrorMessage": () => (/* binding */ improveErrorMessage)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");

/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */

function improveErrorMessage(err, fnName, value) {
  // TODO: add information with the index (also needs transform in expression parser)
  var details;

  if (String(err).indexOf('Unexpected type') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
  }

  if (String(err).indexOf('complex numbers') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_0__.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';
    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
  }

  return err;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/statistics/variance.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/statistics/variance.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createVariance": () => (/* binding */ createVariance)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js");




var DEFAULT_NORMALIZATION = 'unbiased';
var name = 'variance';
var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
var createVariance = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    add,
    subtract,
    multiply,
    divide,
    apply,
    isNaN
  } = _ref;

  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */
  return typed(name, {
    // variance([a, b, c, d, ...])
    'Array | Matrix': function ArrayMatrix(array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // variance([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return _varDim(array, dim, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _varDim,
    // variance(a, b, c, d, ...)
    '...': function _(args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    var sum;
    var num = 0;

    if (array.length === 0) {
      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements


    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'variance', value);
      }
    });
    if (num === 0) throw new Error('Cannot calculate variance of an empty array');
    var mean = divide(sum, num); // calculate the variance

    sum = undefined;
    (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepForEach)(array, function (value) {
      var diff = subtract(value, mean);
      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
    });

    if (isNaN(sum)) {
      return sum;
    }

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        {
          var zero = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isBigNumber)(sum) ? sum.mul(0) : 0;
          return num === 1 ? zero : divide(sum, num - 1);
        }

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }

  function _varDim(array, dim, normalization) {
    try {
      if (array.length === 0) {
        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
      }

      return apply(array, dim, x => _var(x, normalization));
    } catch (err) {
      throw (0,_utils_improveErrorMessage_js__WEBPACK_IMPORTED_MODULE_2__.improveErrorMessage)(err, 'variance');
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/string/bin.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/string/bin.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBin": () => (/* binding */ createBin)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'bin';
var dependencies = ['typed', 'format'];
/**
 * Format a number as binary.
 *
 * Syntax:
 *
 *    math.bin(value)
 *
 * Examples:
 *
 *    //the following outputs "0b10"
 *    math.bin(2)
 *
 * See also:
 *
 *    oct
 *    hex
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createBin = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    format
  } = _ref;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'bin'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'bin',
        wordSize: wordSize
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/string/format.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/string/format.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFormat": () => (/* binding */ createFormat)
/* harmony export */ });
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'format';
var dependencies = ['typed'];
var createFormat = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation: always have exponential notation,
   *        and select the exponent to be a multiple of 3.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *      - 'bin', 'oct, or 'hex'
   *        Format the number using binary, octal, or hexadecimal notation.
   *        For example '0b1101' and '0x10fe'.
   *    - `wordSize: number`
   *      The word size in bits to use for formatting in binary, octal, or
   *      hexadecimal notation. To be used only with 'bin', 'oct', or 'hex'
   *      values for 'notation' option. When this option is defined the value
   *      is formatted as a signed twos complement integer of the given word
   *      size and the size suffix is appended to the output.
   *      For example format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
   *      Default value is undefined.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  return typed(name, {
    any: _utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format,
    'any, Object | function | number': _utils_string_js__WEBPACK_IMPORTED_MODULE_1__.format
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/string/hex.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/string/hex.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createHex": () => (/* binding */ createHex)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'hex';
var dependencies = ['typed', 'format'];
/**
 * Format a number as hexadecimal.
 *
 * Syntax:
 *
 *    math.hex(value)
 *
 * Examples:
 *
 *    //the following outputs "0xF0"
 *    math.hex(240)
 *
 * See also:
 *
 *    oct
 *    bin
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createHex = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    format
  } = _ref;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'hex'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'hex',
        wordSize: wordSize
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/string/oct.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/string/oct.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createOct": () => (/* binding */ createOct)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'oct';
var dependencies = ['typed', 'format'];
/**
 * Format a number as octal.
 *
 * Syntax:
 *
 *    math.oct(value)
 *
 * Examples:
 *
 *    //the following outputs "0o70"
 *    math.oct(56)
 *
 * See also:
 *
 *    bin
 *    hex
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createOct = (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    format
  } = _ref;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'oct'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'oct',
        wordSize: wordSize
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/string/print.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/string/print.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPrint": () => (/* binding */ createPrint)
/* harmony export */ });
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'print';
var dependencies = ['typed'];
var createPrint = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */
  return typed(name, {
    // note: Matrix will be converted automatically to an Array
    'string, Object | Array': _print,
    'string, Object | Array, number | Object': _print
  });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */

function _print(template, values, options) {
  return template.replace(/\$([\w.]+)/g, function (original, key) {
    var keys = key.split('.');
    var value = values[keys.shift()];

    while (keys.length && value !== undefined) {
      var k = keys.shift();
      value = k ? value[k] : value + '.';
    }

    if (value !== undefined) {
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
        return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(value, options);
      } else {
        return value;
      }
    }

    return original;
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acos.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acos.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcos": () => (/* binding */ createAcos)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'acos';
var dependencies = ['typed', 'config', 'Complex'];
var createAcos = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex
  } = _ref;

  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new Complex(x, 0).acos();
      }
    },
    Complex: function Complex(x) {
      return x.acos();
    },
    BigNumber: function BigNumber(x) {
      return x.acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acosh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acosh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcosh": () => (/* binding */ createAcosh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'acosh';
var dependencies = ['typed', 'config', 'Complex'];
var createAcosh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex
  } = _ref;

  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 1 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.acoshNumber)(x);
      }

      if (x <= -1) {
        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }

      return new Complex(x, 0).acosh();
    },
    Complex: function Complex(x) {
      return x.acosh();
    },
    BigNumber: function BigNumber(x) {
      return x.acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acot.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acot.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcot": () => (/* binding */ createAcot)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'acot';
var dependencies = ['typed', 'BigNumber'];
var createAcot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.acotNumber,
    Complex: function Complex(x) {
      return x.acot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acoth.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acoth.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcoth": () => (/* binding */ createAcoth)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'acoth';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcoth = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.acothNumber)(x);
      }

      return new Complex(x, 0).acoth();
    },
    Complex: function Complex(x) {
      return x.acoth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acsc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acsc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcsc": () => (/* binding */ createAcsc)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'acsc';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcsc = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.acscNumber)(x);
      }

      return new Complex(x, 0).acsc();
    },
    Complex: function Complex(x) {
      return x.acsc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/acsch.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/acsch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAcsch": () => (/* binding */ createAcsch)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'acsch';
var dependencies = ['typed', 'BigNumber'];
var createAcsch = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.acschNumber,
    Complex: function Complex(x) {
      return x.acsch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/asec.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/asec.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAsec": () => (/* binding */ createAsec)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'asec';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsec = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.asecNumber)(x);
      }

      return new Complex(x, 0).asec();
    },
    Complex: function Complex(x) {
      return x.asec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/asech.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/asech.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAsech": () => (/* binding */ createAsech)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'asech';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsech = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        var xInv = 1 / x;

        if (xInv > 0 || config.predictable) {
          return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.asechNumber)(x);
        }

        var ret = Math.sqrt(xInv * xInv - 1);
        return new Complex(Math.log(ret - xInv), Math.PI);
      }

      return new Complex(x, 0).asech();
    },
    Complex: function Complex(x) {
      return x.asech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/asin.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/asin.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAsin": () => (/* binding */ createAsin)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'asin';
var dependencies = ['typed', 'config', 'Complex'];
var createAsin = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex
  } = _ref;

  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new Complex(x, 0).asin();
      }
    },
    Complex: function Complex(x) {
      return x.asin();
    },
    BigNumber: function BigNumber(x) {
      return x.asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asin(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/asinh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/asinh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAsinh": () => (/* binding */ createAsinh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'asinh';
var dependencies = ['typed'];
var createAsinh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  return typed('asinh', {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.asinhNumber,
    Complex: function Complex(x) {
      return x.asinh();
    },
    BigNumber: function BigNumber(x) {
      return x.asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/atan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/atan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAtan": () => (/* binding */ createAtan)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'atan';
var dependencies = ['typed'];
var createAtan = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  return typed('atan', {
    number: function number(x) {
      return Math.atan(x);
    },
    Complex: function Complex(x) {
      return x.atan();
    },
    BigNumber: function BigNumber(x) {
      return x.atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atan(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/atan2.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/atan2.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAtan2": () => (/* binding */ createAtan2)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js");
/* harmony import */ var _type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js");
/* harmony import */ var _type_matrix_utils_algorithm09_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm09.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm09.js");
/* harmony import */ var _type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js");
/* harmony import */ var _type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");








var name = 'atan2';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createAtan2 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix,
    equalScalar,
    BigNumber,
    DenseMatrix
  } = _ref;
  var algorithm02 = (0,_type_matrix_utils_algorithm02_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm02)({
    typed,
    equalScalar
  });
  var algorithm03 = (0,_type_matrix_utils_algorithm03_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm03)({
    typed
  });
  var algorithm09 = (0,_type_matrix_utils_algorithm09_js__WEBPACK_IMPORTED_MODULE_3__.createAlgorithm09)({
    typed,
    equalScalar
  });
  var algorithm11 = (0,_type_matrix_utils_algorithm11_js__WEBPACK_IMPORTED_MODULE_4__.createAlgorithm11)({
    typed,
    equalScalar
  });
  var algorithm12 = (0,_type_matrix_utils_algorithm12_js__WEBPACK_IMPORTED_MODULE_5__.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_6__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_7__.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  return typed(name, {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
      return BigNumber.atan2(y, x);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      // mind the order of y and x!
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // mind the order of y and x
      return algorithm12(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // mind the order of y and x
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/atanh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/atanh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAtanh": () => (/* binding */ createAtanh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'atanh';
var dependencies = ['typed', 'config', 'Complex'];
var createAtanh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    config,
    Complex
  } = _ref;

  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return (0,_plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.atanhNumber)(x);
      }

      return new Complex(x, 0).atanh();
    },
    Complex: function Complex(x) {
      return x.atanh();
    },
    BigNumber: function BigNumber(x) {
      return x.atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/cos.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/cos.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCos": () => (/* binding */ createCos)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'cos';
var dependencies = ['typed'];
var createCos = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  return typed(name, {
    number: Math.cos,
    Complex: function Complex(x) {
      return x.cos();
    },
    BigNumber: function BigNumber(x) {
      return x.cos();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/cosh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/cosh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCosh": () => (/* binding */ createCosh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");



var name = 'cosh';
var dependencies = ['typed'];
var createCosh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  return typed(name, {
    number: _utils_number_js__WEBPACK_IMPORTED_MODULE_1__.cosh,
    Complex: function Complex(x) {
      return x.cosh();
    },
    BigNumber: function BigNumber(x) {
      return x.cosh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/cot.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/cot.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCot": () => (/* binding */ createCot)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'cot';
var dependencies = ['typed', 'BigNumber'];
var createCot = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cotNumber,
    Complex: function Complex(x) {
      return x.cot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tan());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/coth.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/coth.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCoth": () => (/* binding */ createCoth)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'coth';
var dependencies = ['typed', 'BigNumber'];
var createCoth = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cothNumber,
    Complex: function Complex(x) {
      return x.coth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tanh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/csc.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/csc.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsc": () => (/* binding */ createCsc)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'csc';
var dependencies = ['typed', 'BigNumber'];
var createCsc = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cscNumber,
    Complex: function Complex(x) {
      return x.csc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sin());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/csch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/csch.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCsch": () => (/* binding */ createCsch)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'csch';
var dependencies = ['typed', 'BigNumber'];
var createCsch = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.cschNumber,
    Complex: function Complex(x) {
      return x.csch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sinh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/sec.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/sec.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSec": () => (/* binding */ createSec)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'sec';
var dependencies = ['typed', 'BigNumber'];
var createSec = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.secNumber,
    Complex: function Complex(x) {
      return x.sec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cos());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/sech.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/sech.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSech": () => (/* binding */ createSech)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'sech';
var dependencies = ['typed', 'BigNumber'];
var createSech = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber: _BigNumber
  } = _ref;

  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.sechNumber,
    Complex: function Complex(x) {
      return x.sech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cosh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/sin.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/sin.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSin": () => (/* binding */ createSin)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'sin';
var dependencies = ['typed'];
var createSin = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  return typed(name, {
    number: Math.sin,
    Complex: function Complex(x) {
      return x.sin();
    },
    BigNumber: function BigNumber(x) {
      return x.sin();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sin(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/sinh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/sinh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSinh": () => (/* binding */ createSinh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js");



var name = 'sinh';
var dependencies = ['typed'];
var createSinh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.sinhNumber,
    Complex: function Complex(x) {
      return x.sinh();
    },
    BigNumber: function BigNumber(x) {
      return x.sinh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/tan.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/tan.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTan": () => (/* binding */ createTan)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'tan';
var dependencies = ['typed'];
var createTan = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  return typed(name, {
    number: Math.tan,
    Complex: function Complex(x) {
      return x.tan();
    },
    BigNumber: function BigNumber(x) {
      return x.tan();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tan(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/trigonometry/tanh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/trigonometry/tanh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTanh": () => (/* binding */ createTanh)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");



var name = 'tanh';
var dependencies = ['typed'];
var createTanh = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  return typed('tanh', {
    number: _utils_number_js__WEBPACK_IMPORTED_MODULE_1__.tanh,
    Complex: function Complex(x) {
      return x.tanh();
    },
    BigNumber: function BigNumber(x) {
      return x.tanh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this, true);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/unit/to.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/unit/to.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTo": () => (/* binding */ createTo)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js");
/* harmony import */ var _type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js");



var name = 'to';
var dependencies = ['typed', 'matrix'];
var createTo = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    matrix
  } = _ref;
  var algorithm13 = (0,_type_matrix_utils_algorithm13_js__WEBPACK_IMPORTED_MODULE_1__.createAlgorithm13)({
    typed
  });
  var algorithm14 = (0,_type_matrix_utils_algorithm14_js__WEBPACK_IMPORTED_MODULE_2__.createAlgorithm14)({
    typed
  });
  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */

  return typed(name, {
    'Unit, Unit | string': function UnitUnitString(x, unit) {
      return x.to(unit);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, this, false);
    },
    'any, Matrix': function anyMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/clone.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/clone.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createClone": () => (/* binding */ createClone)
/* harmony export */ });
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'clone';
var dependencies = ['typed'];
var createClone = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Clone an object. Will make a deep copy of the data.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  return typed(name, {
    any: _utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createHasNumericValue": () => (/* binding */ createHasNumericValue)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'hasNumericValue';
var dependencies = ['typed', 'isNumeric'];
var createHasNumericValue = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    isNumeric
  } = _ref;

  /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name, {
    string: function string(x) {
      return x.trim().length > 0 && !isNaN(Number(x));
    },
    any: function any(x) {
      return isNumeric(x);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isInteger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isInteger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsInteger": () => (/* binding */ createIsInteger)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'isInteger';
var dependencies = ['typed'];
var createIsInteger = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _utils_number_js__WEBPACK_IMPORTED_MODULE_1__.isInteger,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function BigNumber(x) {
      return x.isInt();
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isNaN.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isNaN.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsNaN": () => (/* binding */ createIsNaN)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/utils.js");



var name = 'isNaN';
var dependencies = ['typed'];
var createIsNaN = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.isNaNNumber,
    BigNumber: function BigNumber(x) {
      return x.isNaN();
    },
    Fraction: function Fraction(x) {
      return false;
    },
    Complex: function Complex(x) {
      return x.isNaN();
    },
    Unit: function Unit(x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, Number.isNaN);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isNegative.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isNegative.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsNegative": () => (/* binding */ createIsNegative)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/utils.js");



var name = 'isNegative';
var dependencies = ['typed'];
var createIsNegative = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.isNegativeNumber,
    BigNumber: function BigNumber(x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s < 0; // It's enough to decide on the sign
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isNumeric.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isNumeric.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsNumeric": () => (/* binding */ createIsNumeric)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'isNumeric';
var dependencies = ['typed'];
var createIsNumeric = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name, {
    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
      return true;
    },
    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
      return false;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isPositive.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isPositive.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsPositive": () => (/* binding */ createIsPositive)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/utils.js");



var name = 'isPositive';
var dependencies = ['typed'];
var createIsPositive = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.isPositiveNumber,
    BigNumber: function BigNumber(x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s > 0 && x.n > 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isPrime.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isPrime.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsPrime": () => (/* binding */ createIsPrime)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'isPrime';
var dependencies = ['typed'];
var createIsPrime = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: function number(x) {
      if (x * 0 !== 0) {
        return false;
      }

      if (x <= 3) {
        return x > 1;
      }

      if (x % 2 === 0 || x % 3 === 0) {
        return false;
      }

      for (var i = 5; i * i <= x; i += 6) {
        if (x % i === 0 || x % (i + 2) === 0) {
          return false;
        }
      }

      return true;
    },
    BigNumber: function BigNumber(n) {
      if (n.toNumber() * 0 !== 0) {
        return false;
      }

      if (n.lte(3)) return n.gt(1);
      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;

      for (var i = 5; n.gte(i * i); i += 6) {
        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {
          return false;
        }
      }

      return true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/isZero.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/isZero.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIsZero": () => (/* binding */ createIsZero)
/* harmony export */ });
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/esm/plain/number/utils.js");



var name = 'isZero';
var dependencies = ['typed'];
var createIsZero = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _plain_number_index_js__WEBPACK_IMPORTED_MODULE_1__.isZeroNumber,
    BigNumber: function BigNumber(x) {
      return x.isZero();
    },
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && x.n === 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/numeric.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/numeric.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNumeric": () => (/* binding */ createNumeric)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_noop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/esm/utils/noop.js");



var name = 'numeric';
var dependencies = ['number', '?bignumber', '?fraction'];
var createNumeric = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    number: _number,
    bignumber,
    fraction
  } = _ref;
  var validInputTypes = {
    string: true,
    number: true,
    BigNumber: true,
    Fraction: true
  }; // Load the conversion functions for each output type

  var validOutputTypes = {
    number: x => _number(x),
    BigNumber: bignumber ? x => bignumber(x) : _utils_noop_js__WEBPACK_IMPORTED_MODULE_1__.noBignumber,
    Fraction: fraction ? x => fraction(x) : _utils_noop_js__WEBPACK_IMPORTED_MODULE_1__.noFraction
  };
  /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns number 4
   *    math.numeric('4', 'number')                 // returns number 4
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, string, format
   *
   * @param {string | number | BigNumber | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | Fraction}
   *              Returns an instance of the numeric in the requested type
   */

  return function numeric(value, outputType) {
    var inputType = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_2__.typeOf)(value);

    if (!(inputType in validInputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
    }

    if (!(outputType in validOutputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
    }

    if (outputType === inputType) {
      return value;
    } else {
      return validOutputTypes[outputType](value);
    }
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/function/utils/typeOf.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/function/utils/typeOf.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTypeOf": () => (/* binding */ createTypeOf)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");


var name = 'typeOf';
var dependencies = ['typed'];
var createTypeOf = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  return typed(name, {
    any: _utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/json/replacer.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/json/replacer.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createReplacer": () => (/* binding */ createReplacer)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'replacer';
var dependencies = [];
var createReplacer = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, () => {
  /**
   * Stringify data types into their JSON representation.
   * Most data types can be serialized using their `.toJSON` method,
   * but not all, for example the number `Infinity`. For these cases you have
   * to use the replacer. Example usage:
   *
   *     JSON.stringify([2, Infinity], math.replacer)
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the replaced object
   */
  return function replacer(key, value) {
    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
      return {
        mathjs: 'number',
        value: String(value)
      };
    }

    return value;
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/json/reviver.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/json/reviver.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createReviver": () => (/* binding */ createReviver)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'reviver';
var dependencies = ['classes'];
var createReviver = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    classes
  } = _ref;

  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    var constructor = classes[value && value.mathjs];

    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }

    return value;
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/arithmetic.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/arithmetic.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absNumber": () => (/* binding */ absNumber),
/* harmony export */   "addNumber": () => (/* binding */ addNumber),
/* harmony export */   "subtractNumber": () => (/* binding */ subtractNumber),
/* harmony export */   "multiplyNumber": () => (/* binding */ multiplyNumber),
/* harmony export */   "divideNumber": () => (/* binding */ divideNumber),
/* harmony export */   "unaryMinusNumber": () => (/* binding */ unaryMinusNumber),
/* harmony export */   "unaryPlusNumber": () => (/* binding */ unaryPlusNumber),
/* harmony export */   "cbrtNumber": () => (/* binding */ cbrtNumber),
/* harmony export */   "ceilNumber": () => (/* binding */ ceilNumber),
/* harmony export */   "cubeNumber": () => (/* binding */ cubeNumber),
/* harmony export */   "expNumber": () => (/* binding */ expNumber),
/* harmony export */   "expm1Number": () => (/* binding */ expm1Number),
/* harmony export */   "fixNumber": () => (/* binding */ fixNumber),
/* harmony export */   "floorNumber": () => (/* binding */ floorNumber),
/* harmony export */   "gcdNumber": () => (/* binding */ gcdNumber),
/* harmony export */   "lcmNumber": () => (/* binding */ lcmNumber),
/* harmony export */   "logNumber": () => (/* binding */ logNumber),
/* harmony export */   "log10Number": () => (/* binding */ log10Number),
/* harmony export */   "log2Number": () => (/* binding */ log2Number),
/* harmony export */   "log1pNumber": () => (/* binding */ log1pNumber),
/* harmony export */   "modNumber": () => (/* binding */ modNumber),
/* harmony export */   "nthRootNumber": () => (/* binding */ nthRootNumber),
/* harmony export */   "signNumber": () => (/* binding */ signNumber),
/* harmony export */   "sqrtNumber": () => (/* binding */ sqrtNumber),
/* harmony export */   "squareNumber": () => (/* binding */ squareNumber),
/* harmony export */   "xgcdNumber": () => (/* binding */ xgcdNumber),
/* harmony export */   "powNumber": () => (/* binding */ powNumber),
/* harmony export */   "roundNumber": () => (/* binding */ roundNumber),
/* harmony export */   "normNumber": () => (/* binding */ normNumber)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';
function absNumber(a) {
  return Math.abs(a);
}
absNumber.signature = n1;
function addNumber(a, b) {
  return a + b;
}
addNumber.signature = n2;
function subtractNumber(a, b) {
  return a - b;
}
subtractNumber.signature = n2;
function multiplyNumber(a, b) {
  return a * b;
}
multiplyNumber.signature = n2;
function divideNumber(a, b) {
  return a / b;
}
divideNumber.signature = n2;
function unaryMinusNumber(x) {
  return -x;
}
unaryMinusNumber.signature = n1;
function unaryPlusNumber(x) {
  return x;
}
unaryPlusNumber.signature = n1;
function cbrtNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.cbrt)(x);
}
cbrtNumber.signature = n1;
function ceilNumber(x) {
  return Math.ceil(x);
}
ceilNumber.signature = n1;
function cubeNumber(x) {
  return x * x * x;
}
cubeNumber.signature = n1;
function expNumber(x) {
  return Math.exp(x);
}
expNumber.signature = n1;
function expm1Number(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.expm1)(x);
}
expm1Number.signature = n1;
function fixNumber(x) {
  return x > 0 ? Math.floor(x) : Math.ceil(x);
}
fixNumber.signature = n1;
function floorNumber(x) {
  return Math.floor(x);
}
floorNumber.signature = n1;
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */

function gcdNumber(a, b) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(a) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm


  var r;

  while (b !== 0) {
    r = a % b;
    a = b;
    b = r;
  }

  return a < 0 ? -a : a;
}
gcdNumber.signature = n2;
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */

function lcmNumber(a, b) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(a) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a === 0 || b === 0) {
    return 0;
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead


  var t;
  var prod = a * b;

  while (b !== 0) {
    t = b;
    b = a % t;
    a = t;
  }

  return Math.abs(prod / a);
}
lcmNumber.signature = n2;
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */

function logNumber(x) {
  return Math.log(x);
}
logNumber.signature = n1;
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log10Number(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.log10)(x);
}
log10Number.signature = n1;
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log2Number(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.log2)(x);
}
log2Number.signature = n1;
/**
 * Calculate the natural logarithm of a `number+1`
 * @param {number} x
 * @returns {number}
 */

function log1pNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.log1p)(x);
}
log1pNumber.signature = n1;
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */

function modNumber(x, y) {
  if (y > 0) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
  } else if (y === 0) {
    return x;
  } else {
    // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
  }
}
modNumber.signature = n2;
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */

function nthRootNumber(a, root) {
  var inv = root < 0;

  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }

  if (a < 0 && Math.abs(root) % 2 !== 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity


  if (a === 0) {
    return inv ? Infinity : 0;
  }

  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */
}
nthRootNumber.signature = n2;
function signNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.sign)(x);
}
signNumber.signature = n1;
function sqrtNumber(x) {
  return Math.sqrt(x);
}
sqrtNumber.signature = n1;
function squareNumber(x) {
  return x * x;
}
squareNumber.signature = n1;
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */

function xgcdNumber(a, b) {
  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
  var t; // used to swap two variables

  var q; // quotient

  var r; // remainder

  var x = 0;
  var lastx = 1;
  var y = 1;
  var lasty = 0;

  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(a) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(b)) {
    throw new Error('Parameters in function xgcd must be integer numbers');
  }

  while (b) {
    q = Math.floor(a / b);
    r = a - q * b;
    t = x;
    x = lastx - q * x;
    lastx = t;
    t = y;
    y = lasty - q * y;
    lasty = t;
    a = b;
    b = r;
  }

  var res;

  if (a < 0) {
    res = [-a, -lastx, -lasty];
  } else {
    res = [a, a ? lastx : 0, lasty];
  }

  return res;
}
xgcdNumber.signature = n2;
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */

function powNumber(x, y) {
  // x^Infinity === 0 if -1 < x < 1
  // A real number 0 is returned instead of complex(0)
  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
    return 0;
  }

  return Math.pow(x, y);
}
powNumber.signature = n2;
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */

function roundNumber(value) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return parseFloat((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.toFixed)(value, decimals));
}
roundNumber.signature = n2;
/**
 * Calculate the norm of a number, the absolute value.
 * @param {number} x
 * @return {number}
 */

function normNumber(x) {
  return Math.abs(x);
}
normNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/bitwise.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/bitwise.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitAndNumber": () => (/* binding */ bitAndNumber),
/* harmony export */   "bitNotNumber": () => (/* binding */ bitNotNumber),
/* harmony export */   "bitOrNumber": () => (/* binding */ bitOrNumber),
/* harmony export */   "bitXorNumber": () => (/* binding */ bitXorNumber),
/* harmony export */   "leftShiftNumber": () => (/* binding */ leftShiftNumber),
/* harmony export */   "rightArithShiftNumber": () => (/* binding */ rightArithShiftNumber),
/* harmony export */   "rightLogShiftNumber": () => (/* binding */ rightLogShiftNumber)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';
function bitAndNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function bitAnd');
  }

  return x & y;
}
bitAndNumber.signature = n2;
function bitNotNumber(x) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x)) {
    throw new Error('Integer expected in function bitNot');
  }

  return ~x;
}
bitNotNumber.signature = n1;
function bitOrNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function bitOr');
  }

  return x | y;
}
bitOrNumber.signature = n2;
function bitXorNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function bitXor');
  }

  return x ^ y;
}
bitXorNumber.signature = n2;
function leftShiftNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function leftShift');
  }

  return x << y;
}
leftShiftNumber.signature = n2;
function rightArithShiftNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function rightArithShift');
  }

  return x >> y;
}
rightArithShiftNumber.signature = n2;
function rightLogShiftNumber(x, y) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(y)) {
    throw new Error('Integers expected in function rightLogShift');
  }

  return x >>> y;
}
rightLogShiftNumber.signature = n2;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/combinations.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/combinations.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combinationsNumber": () => (/* binding */ combinationsNumber)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_product_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/esm/utils/product.js");


function combinationsNumber(n, k) {
  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(n) || n < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (!(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(k) || k < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (k > n) {
    throw new TypeError('k must be less than or equal to n');
  }

  var nMinusk = n - k;
  var prodrange;

  if (k < nMinusk) {
    prodrange = (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_1__.product)(nMinusk + 1, n);
    return prodrange / (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_1__.product)(1, k);
  }

  prodrange = (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_1__.product)(k + 1, n);
  return prodrange / (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_1__.product)(1, nMinusk);
}
combinationsNumber.signature = 'number, number';

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pi": () => (/* binding */ pi),
/* harmony export */   "tau": () => (/* binding */ tau),
/* harmony export */   "e": () => (/* binding */ e),
/* harmony export */   "phi": () => (/* binding */ phi)
/* harmony export */ });
var pi = Math.PI;
var tau = 2 * Math.PI;
var e = Math.E;
var phi = 1.6180339887498948; // eslint-disable-line no-loss-of-precision

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/logical.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/logical.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notNumber": () => (/* binding */ notNumber),
/* harmony export */   "orNumber": () => (/* binding */ orNumber),
/* harmony export */   "xorNumber": () => (/* binding */ xorNumber),
/* harmony export */   "andNumber": () => (/* binding */ andNumber)
/* harmony export */ });
var n1 = 'number';
var n2 = 'number, number';
function notNumber(x) {
  return !x;
}
notNumber.signature = n1;
function orNumber(x, y) {
  return !!(x || y);
}
orNumber.signature = n2;
function xorNumber(x, y) {
  return !!x !== !!y;
}
xorNumber.signature = n2;
function andNumber(x, y) {
  return !!(x && y);
}
andNumber.signature = n2;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/probability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/probability.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gammaNumber": () => (/* binding */ gammaNumber),
/* harmony export */   "gammaG": () => (/* binding */ gammaG),
/* harmony export */   "gammaP": () => (/* binding */ gammaP)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_product_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/esm/utils/product.js");
/* eslint-disable no-loss-of-precision */


function gammaNumber(n) {
  var x;

  if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }

    if (n > 171) {
      return Infinity; // Will overflow
    }

    return (0,_utils_product_js__WEBPACK_IMPORTED_MODULE_1__.product)(1, n - 1);
  }

  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
  }

  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) {
    // Extended Stirling Approx
    var twoN = n * n;
    var threeN = twoN * n;
    var fourN = threeN * n;
    var fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
  }

  --n;
  x = gammaP[0];

  for (var i = 1; i < gammaP.length; ++i) {
    x += gammaP[i] / (n + i);
  }

  var t = n + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}
gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

var gammaG = 4.7421875;
var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/trigonometry.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/trigonometry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosNumber": () => (/* binding */ acosNumber),
/* harmony export */   "acoshNumber": () => (/* binding */ acoshNumber),
/* harmony export */   "acotNumber": () => (/* binding */ acotNumber),
/* harmony export */   "acothNumber": () => (/* binding */ acothNumber),
/* harmony export */   "acscNumber": () => (/* binding */ acscNumber),
/* harmony export */   "acschNumber": () => (/* binding */ acschNumber),
/* harmony export */   "asecNumber": () => (/* binding */ asecNumber),
/* harmony export */   "asechNumber": () => (/* binding */ asechNumber),
/* harmony export */   "asinNumber": () => (/* binding */ asinNumber),
/* harmony export */   "asinhNumber": () => (/* binding */ asinhNumber),
/* harmony export */   "atanNumber": () => (/* binding */ atanNumber),
/* harmony export */   "atan2Number": () => (/* binding */ atan2Number),
/* harmony export */   "atanhNumber": () => (/* binding */ atanhNumber),
/* harmony export */   "cosNumber": () => (/* binding */ cosNumber),
/* harmony export */   "coshNumber": () => (/* binding */ coshNumber),
/* harmony export */   "cotNumber": () => (/* binding */ cotNumber),
/* harmony export */   "cothNumber": () => (/* binding */ cothNumber),
/* harmony export */   "cscNumber": () => (/* binding */ cscNumber),
/* harmony export */   "cschNumber": () => (/* binding */ cschNumber),
/* harmony export */   "secNumber": () => (/* binding */ secNumber),
/* harmony export */   "sechNumber": () => (/* binding */ sechNumber),
/* harmony export */   "sinNumber": () => (/* binding */ sinNumber),
/* harmony export */   "sinhNumber": () => (/* binding */ sinhNumber),
/* harmony export */   "tanNumber": () => (/* binding */ tanNumber),
/* harmony export */   "tanhNumber": () => (/* binding */ tanhNumber)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';
function acosNumber(x) {
  return Math.acos(x);
}
acosNumber.signature = n1;
function acoshNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.acosh)(x);
}
acoshNumber.signature = n1;
function acotNumber(x) {
  return Math.atan(1 / x);
}
acotNumber.signature = n1;
function acothNumber(x) {
  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}
acothNumber.signature = n1;
function acscNumber(x) {
  return Math.asin(1 / x);
}
acscNumber.signature = n1;
function acschNumber(x) {
  var xInv = 1 / x;
  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}
acschNumber.signature = n1;
function asecNumber(x) {
  return Math.acos(1 / x);
}
asecNumber.signature = n1;
function asechNumber(x) {
  var xInv = 1 / x;
  var ret = Math.sqrt(xInv * xInv - 1);
  return Math.log(ret + xInv);
}
asechNumber.signature = n1;
function asinNumber(x) {
  return Math.asin(x);
}
asinNumber.signature = n1;
function asinhNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.asinh)(x);
}
asinhNumber.signature = n1;
function atanNumber(x) {
  return Math.atan(x);
}
atanNumber.signature = n1;
function atan2Number(y, x) {
  return Math.atan2(y, x);
}
atan2Number.signature = n2;
function atanhNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.atanh)(x);
}
atanhNumber.signature = n1;
function cosNumber(x) {
  return Math.cos(x);
}
cosNumber.signature = n1;
function coshNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.cosh)(x);
}
coshNumber.signature = n1;
function cotNumber(x) {
  return 1 / Math.tan(x);
}
cotNumber.signature = n1;
function cothNumber(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}
cothNumber.signature = n1;
function cscNumber(x) {
  return 1 / Math.sin(x);
}
cscNumber.signature = n1;
function cschNumber(x) {
  // consider values close to zero (+/-)
  if (x === 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.sign)(x);
  }
}
cschNumber.signature = n1;
function secNumber(x) {
  return 1 / Math.cos(x);
}
secNumber.signature = n1;
function sechNumber(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}
sechNumber.signature = n1;
function sinNumber(x) {
  return Math.sin(x);
}
sinNumber.signature = n1;
function sinhNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.sinh)(x);
}
sinhNumber.signature = n1;
function tanNumber(x) {
  return Math.tan(x);
}
tanNumber.signature = n1;
function tanhNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.tanh)(x);
}
tanhNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/plain/number/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/plain/number/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIntegerNumber": () => (/* binding */ isIntegerNumber),
/* harmony export */   "isNegativeNumber": () => (/* binding */ isNegativeNumber),
/* harmony export */   "isPositiveNumber": () => (/* binding */ isPositiveNumber),
/* harmony export */   "isZeroNumber": () => (/* binding */ isZeroNumber),
/* harmony export */   "isNaNNumber": () => (/* binding */ isNaNNumber)
/* harmony export */ });
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

var n1 = 'number';
function isIntegerNumber(x) {
  return (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(x);
}
isIntegerNumber.signature = n1;
function isNegativeNumber(x) {
  return x < 0;
}
isNegativeNumber.signature = n1;
function isPositiveNumber(x) {
  return x > 0;
}
isPositiveNumber.signature = n1;
function isZeroNumber(x) {
  return x === 0;
}
isZeroNumber.signature = n1;
function isNaNNumber(x) {
  return Number.isNaN(x);
}
isNaNNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBigNumberClass": () => (/* binding */ createBigNumberClass)
/* harmony export */ });
/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'BigNumber';
var dependencies = ['?on', 'config'];
var createBigNumberClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, (_ref) => {
  var {
    on,
    config
  } = _ref;
  var EUCLID = 9; // Use euclidian division for mod calculation

  var BigNumber = decimal_js__WEBPACK_IMPORTED_MODULE_0__.clone({
    precision: config.precision,
    modulo: EUCLID
  });
  /**
   * Attach type information
   */

  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */


  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };

  if (on) {
    // listen for changed in the configuration, automatically apply changed precision
    on('config', function (curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({
          precision: curr.precision
        });
      }
    });
  }

  return BigNumber;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBignumber": () => (/* binding */ createBignumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'bignumber';
var dependencies = ['typed', 'BigNumber'];
var createBignumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    BigNumber
  } = _ref;

  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  return typed('bignumber', {
    '': function _() {
      return new BigNumber(0);
    },
    number: function number(x) {
      // convert to string to prevent errors in case of >15 digits
      return new BigNumber(x + '');
    },
    string: function string(x) {
      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

      if (wordSizeSuffixMatch) {
        // x has a word size suffix
        var size = wordSizeSuffixMatch[2];
        var n = BigNumber(wordSizeSuffixMatch[1]);
        var twoPowSize = new BigNumber(2).pow(Number(size));

        if (n.gt(twoPowSize.sub(1))) {
          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
        }

        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);

        if (n.gte(twoPowSizeSubOne)) {
          return n.sub(twoPowSize);
        } else {
          return n;
        }
      }

      return new BigNumber(x);
    },
    BigNumber: function BigNumber(x) {
      // we assume a BigNumber is immutable
      return x;
    },
    Fraction: function Fraction(x) {
      return new BigNumber(x.n).div(x.d).times(x.s);
    },
    null: function _null(x) {
      return new BigNumber(0);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/boolean.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/boolean.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBoolean": () => (/* binding */ createBoolean)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'boolean';
var dependencies = ['typed'];
var createBoolean = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  return typed(name, {
    '': function _() {
      return false;
    },
    boolean: function boolean(x) {
      return x;
    },
    number: function number(x) {
      return !!x;
    },
    null: function _null(x) {
      return false;
    },
    BigNumber: function BigNumber(x) {
      return !x.isZero();
    },
    string: function string(x) {
      // try case insensitive
      var lcase = x.toLowerCase();

      if (lcase === 'true') {
        return true;
      } else if (lcase === 'false') {
        return false;
      } // test whether value is a valid number


      var num = Number(x);

      if (x !== '' && !isNaN(num)) {
        return !!num;
      }

      throw new Error('Cannot convert "' + x + '" to a boolean');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/chain/Chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/chain/Chain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createChainClass": () => (/* binding */ createChainClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'Chain';
var dependencies = ['?on', 'math'];
var createChainClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    on,
    math
  } = _ref;

  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain(value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isChain)(value)) {
      this.value = value.value;
    } else {
      this.value = value;
    }
  }
  /**
   * Attach type information
   */


  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;
  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */

  Chain.prototype.done = function () {
    return this.value;
  };
  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */


  Chain.prototype.valueOf = function () {
    return this.value;
  };
  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */


  Chain.prototype.toString = function () {
    return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.value);
  };
  /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */


  Chain.prototype.toJSON = function () {
    return {
      mathjs: 'Chain',
      value: this.value
    };
  };
  /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */


  Chain.fromJSON = function (json) {
    return new Chain(json.value);
  };
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */


  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */


  function createLazyProxy(name, resolver) {
    (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.lazy)(Chain.prototype, name, function outerResolver() {
      var fn = resolver();

      if (typeof fn === 'function') {
        return chainify(fn);
      }

      return undefined; // if not a function, ignore
    });
  }
  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */


  function chainify(fn) {
    return function () {
      var args = [this.value]; // `this` will be the context of a Chain instance

      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }

      return new Chain(fn.apply(fn, args));
    };
  }
  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */


  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    } else {
      var _loop = function _loop(_name) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.hasOwnProperty)(arg0, _name) && excludedNames[_name] === undefined) {
          createLazyProxy(_name, () => arg0[_name]);
        }
      };

      // createProxy(values)
      for (var _name in arg0) {
        _loop(_name);
      }
    }
  };

  var excludedNames = {
    expression: true,
    docs: true,
    type: true,
    classes: true,
    json: true,
    error: true,
    isChain: true // conflicts with the property isChain of a Chain instance

  }; // create proxy for everything that is in math.js

  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

  if (on) {
    on('import', function (name, resolver, path) {
      if (!path) {
        // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
      }
    });
  }

  return Chain;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/chain/function/chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/chain/function/chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createChain": () => (/* binding */ createChain)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'chain';
var dependencies = ['typed', 'Chain'];
var createChain = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Chain
  } = _ref;

  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */
  return typed(name, {
    '': function _() {
      return new Chain();
    },
    any: function any(value) {
      return new Chain(value);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/complex/Complex.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/complex/Complex.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createComplexClass": () => (/* binding */ createComplexClass)
/* harmony export */ });
/* harmony import */ var complex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! complex.js */ "./node_modules/complex.js/complex.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'Complex';
var dependencies = [];
var createComplexClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, () => {
  /**
   * Attach type information
   */
  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.type = 'Complex';
  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */


  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */


  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.re, options);
    var strIm = (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.im, options); // round either re or im when smaller than the configured precision

    var precision = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(options) ? options : options ? options.precision : null;

    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);

      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }

      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im === 0) {
      // real value
      str = strRe;
    } else if (re === 0) {
      // purely complex value
      if (im === 1) {
        str = 'i';
      } else if (im === -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im === -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im === 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }

    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */


  complex_js__WEBPACK_IMPORTED_MODULE_0__.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        {
          var arg = arguments[0];

          if (typeof arg === 'object') {
            return complex_js__WEBPACK_IMPORTED_MODULE_0__(arg);
          } else {
            throw new TypeError('Input has to be an object with r and phi keys.');
          }
        }

      case 2:
        {
          var r = arguments[0];
          var phi = arguments[1];

          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(r)) {
            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isUnit)(phi) && phi.hasBase('ANGLE')) {
              // convert unit to a number in radians
              phi = phi.toNumber('rad');
            }

            if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(phi)) {
              return new complex_js__WEBPACK_IMPORTED_MODULE_0__({
                r: r,
                phi: phi
              });
            }

            throw new TypeError('Phi is not a number nor an angle unit.');
          } else {
            throw new TypeError('Radius r is not a number.');
          }
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };

  complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.valueOf = complex_js__WEBPACK_IMPORTED_MODULE_0__.prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  complex_js__WEBPACK_IMPORTED_MODULE_0__.fromJSON = function (json) {
    return new complex_js__WEBPACK_IMPORTED_MODULE_0__(json);
  };
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  complex_js__WEBPACK_IMPORTED_MODULE_0__.compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }

    if (a.re < b.re) {
      return -1;
    }

    if (a.im > b.im) {
      return 1;
    }

    if (a.im < b.im) {
      return -1;
    }

    return 0;
  };

  return complex_js__WEBPACK_IMPORTED_MODULE_0__;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/complex/function/complex.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/complex/function/complex.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createComplex": () => (/* binding */ createComplex)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'complex';
var dependencies = ['typed', 'Complex'];
var createComplex = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Complex
  } = _ref;

  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  return typed('complex', {
    '': function _() {
      return Complex.ZERO;
    },
    number: function number(x) {
      return new Complex(x, 0);
    },
    'number, number': function numberNumber(re, im) {
      return new Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
      return new Complex(re.toNumber(), im.toNumber());
    },
    Fraction: function Fraction(x) {
      return new Complex(x.valueOf(), 0);
    },
    Complex: function Complex(x) {
      return x.clone();
    },
    string: function string(x) {
      return Complex(x); // for example '2 + 3i'
    },
    null: function _null(x) {
      return Complex(0);
    },
    Object: function Object(x) {
      if ('re' in x && 'im' in x) {
        return new Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
        return new Complex(x);
      }

      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/fraction/Fraction.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/fraction/Fraction.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFractionClass": () => (/* binding */ createFractionClass)
/* harmony export */ });
/* harmony import */ var fraction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fraction.js */ "./node_modules/fraction.js/fraction.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");


var name = 'Fraction';
var dependencies = [];
var createFractionClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_1__.factory)(name, dependencies, () => {
  /**
   * Attach type information
   */
  fraction_js__WEBPACK_IMPORTED_MODULE_0__.prototype.type = 'Fraction';
  fraction_js__WEBPACK_IMPORTED_MODULE_0__.prototype.isFraction = true;
  /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */

  fraction_js__WEBPACK_IMPORTED_MODULE_0__.prototype.toJSON = function () {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */


  fraction_js__WEBPACK_IMPORTED_MODULE_0__.fromJSON = function (json) {
    return new fraction_js__WEBPACK_IMPORTED_MODULE_0__(json);
  };

  return fraction_js__WEBPACK_IMPORTED_MODULE_0__;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/fraction/function/fraction.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/fraction/function/fraction.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFraction": () => (/* binding */ createFraction)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'fraction';
var dependencies = ['typed', 'Fraction'];
var createFraction = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Fraction
  } = _ref;

  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  return typed('fraction', {
    number: function number(x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new Fraction(x);
    },
    string: function string(x) {
      return new Fraction(x);
    },
    'number, number': function numberNumber(numerator, denominator) {
      return new Fraction(numerator, denominator);
    },
    null: function _null(x) {
      return new Fraction(0);
    },
    BigNumber: function BigNumber(x) {
      return new Fraction(x.toString());
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Object: function Object(x) {
      return new Fraction(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDenseMatrixClass": () => (/* binding */ createDenseMatrixClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");







var name = 'DenseMatrix';
var dependencies = ['Matrix'];
var createDenseMatrixClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    Matrix
  } = _ref;

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(data._data);
        this._size = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.data) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size; // verify the dimensions of the array

      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validate)(this._data, this._size);
      this._datatype = datatype || data.datatype;
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.arraySize)(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validate)(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }

  DenseMatrix.prototype = new Matrix();
  /**
   * Create a new DenseMatrix
   */

  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  DenseMatrix.prototype.getDataType = function () {
    return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.getArrayDataType)(this._data, _utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */


  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */


  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  DenseMatrix.prototype.get = function (index) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(index.length, this._size.length);
    } // check index


    for (var x = 0; x < index.length; x++) {
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(index[x], this._size[x]);
    }

    var data = this._data;

    for (var i = 0, ii = index.length; i < ii; i++) {
      var indexI = index[i];
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(indexI, data.length);
      data = data[indexI];
    }

    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */


  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length < this._size.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(index.length, this._size.length, '<');
    }

    var i, ii, indexI; // enlarge matrix when needed

    var size = index.map(function (i) {
      return i + 1;
    });

    _fit(this, size, defaultValue); // traverse over the dimensions


    var data = this._data;

    for (i = 0, ii = index.length - 1; i < ii; i++) {
      indexI = index[i];
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(indexI, data.length);
      data = data[indexI];
    } // set new value


    indexI = index[index.length - 1];
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(indexI, data.length);
    data[indexI] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */


  function _get(matrix, index) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isIndex)(index)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = index.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      var size = index.size();

      if (size.length !== matrix._size.length) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range


      var min = index.min();
      var max = index.max();

      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(min[i], matrix._size[i]);
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */


  function _getSubmatrix(data, index, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */


  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.arraySize)(submatrix);
    }

    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.deepStrictEqual)(iSize, sSize)) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(iSize, sSize, '>');
      } // enlarge matrix when needed


      var size = index.max().map(function (i) {
        return i + 1;
      });

      _fit(matrix, size, defaultValue); // insert the sub matrix


      var dims = iSize.length;
      var dim = 0;

      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */


  function _setSubmatrix(data, index, submatrix, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(dataIndex);

        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[] || Matrix} size The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isCollection)(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


    var sizeArray = size.valueOf().map(value => {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray, defaultValue);
  };

  function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data; // go deep

      while ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(v)) {
        v = v[0];
      }

      return v;
    } // resize matrix


    matrix._size = size.slice(0); // copy the array

    matrix._data = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.resize)(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;
    m._data = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.reshape)(m._data, size);

    var currentLength = m._size.reduce((length, size) => length * size);

    m._size = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.processSizesWildcard)(size, currentLength);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */


  function _fit(matrix, size, defaultValue) {
    var // copy the array
    newSize = matrix._size.slice(0);

    var changed = false; // add dimensions when needed

    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed


    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */


  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._data),
      size: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */


  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */


  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // determine the new datatype when the original matrix has datatype defined
    // TODO: should be done in matrix constructor instead


    var data = recurse(this._data, []);
    var datatype = this._datatype !== undefined ? (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.getArrayDataType)(data, _utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf) : undefined;
    return new DenseMatrix(data, datatype);
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };

    recurse(this._data, []);
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.toArray = function () {
    return (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  DenseMatrix.prototype.format = function (options) {
    return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.format)(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */


  DenseMatrix.prototype.toString = function () {
    return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_5__.format)(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */


  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */


  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(k) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    var data = []; // loop rows

    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */


  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(s) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(k) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // discover default value if needed


    if (!defaultValue) {
      // check first value in array
      defaultValue = (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
      : 0;
    } // empty array


    var data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.resize)(data, size, defaultValue); // fill diagonal

      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */


  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(i) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(i) || !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(j) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_6__.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, this._size[0]);
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance


    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */


  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */


  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  }

  return DenseMatrix;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFibonacciHeapClass": () => (/* binding */ createFibonacciHeapClass)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'FibonacciHeap';
var dependencies = ['smaller', 'larger'];
var createFibonacciHeapClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    smaller,
    larger
  } = _ref;
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // initialize fields


    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */


  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    }; // check we have a node in the minimum

    if (this._minimum) {
      // minimum node
      var minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap


    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum; // check we have a minimum

    if (node === null) {
      return node;
    } // current minimum


    var minimum = this._minimum; // get number of children

    var numberOfChildren = node.degree; // pointer to the first child

    var x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap


    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node === node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap


    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */


  function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    var parent = node.parent;

    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


      _cascadingCut(minimum, parent);
    } // update minimum node if needed


    if (smaller(node.key, minimum.key)) {
      minimum = node;
    } // return minimum


    return minimum;
  }
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */


  function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child === node) {
      parent.child = node.right;
    } // remove child if degree is 0


    if (parent.degree === 0) {
      parent.child = null;
    } // add node to root list of heap


    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  }
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */


  function _cascadingCut(minimum, node) {
    // store parent node
    var parent = node.parent; // if there's a parent...

    if (!parent) {
      return;
    } // if node is unmarked, set it marked


    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well


      _cascadingCut(parent);
    }
  }
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  var _linkNodes = function _linkNodes(node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;

    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]


    parent.degree++; // set mark[node] false

    node.mark = false;
  };

  function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    var array = new Array(arraySize); // find the number of root nodes.

    var numRoots = 0;
    var x = minimum;

    if (x) {
      numRoots++;
      x = x.right;

      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars


    var y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree; // get next node

      var next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];

        if (!y) {
          break;
        } // make one node with the same degree a child of the other, do this based on the key value.


        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        } // make y a child of x


        _linkNodes(y, x); // we have handled this degree, go to next one.


        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.


      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


    minimum = null; // loop nodes in array

    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];

      if (!y) {
        continue;
      } // check if we have a linked list


      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) {
          minimum = y;
        }
      } else {
        minimum = y;
      }
    }

    return minimum;
  }

  return FibonacciHeap;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createImmutableDenseMatrixClass": () => (/* binding */ createImmutableDenseMatrixClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'ImmutableDenseMatrix';
var dependencies = ['smaller', 'DenseMatrix'];
var createImmutableDenseMatrixClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    smaller,
    DenseMatrix
  } = _ref;

  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(data) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.data) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        {
          // use base implementation
          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(m)) {
            // return immutable matrix
            return new ImmutableDenseMatrix({
              data: m._data,
              size: m._size,
              datatype: m._datatype
            });
          }

          return m;
        }
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */


  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */


  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */


  ImmutableDenseMatrix.prototype.clone = function () {
    return new ImmutableDenseMatrix({
      data: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._data),
      size: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */


  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */


  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */


  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) {
          m = v;
        }
      });
      this._min = m !== null ? m : undefined;
    }

    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */


  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) {
          m = v;
        }
      });
      this._max = m !== null ? m : undefined;
    }

    return this._max;
  };

  return ImmutableDenseMatrix;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/Matrix.js":
/*!***********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/Matrix.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatrixClass": () => (/* binding */ createMatrixClass)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'Matrix';
var dependencies = [];
var createMatrixClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, () => {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */


  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */

  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */


  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */


  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */


  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */


  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */


  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */


  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */


  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */


  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */


  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };

  return Matrix;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIndexClass": () => (/* binding */ createIndexClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");




var name = 'Index';
var dependencies = ['ImmutableDenseMatrix'];
var createIndexClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    ImmutableDenseMatrix
  } = _ref;

  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isRange)(arg)) {
        this._dimensions.push(arg);

        this._isScalar = false;
      } else if (Array.isArray(arg) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());

        this._dimensions.push(m); // size


        var size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      } // TODO: implement support for wildcard '*'

    }
  }
  /**
   * Attach type information
   */


  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix


    return new ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */


  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_3__.clone)(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */


  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */


  Index.prototype.size = function () {
    var size = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }

    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */


  Index.prototype.max = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }

    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */


  Index.prototype.min = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }

    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */


  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */


  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */


  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */


  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */


  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.toArray = function () {
    var array = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }

    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    var strings = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];

      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */


  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */


  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/Range.js":
/*!**********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/Range.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRangeClass": () => (/* binding */ createRangeClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");



var name = 'Range';
var dependencies = [];
var createRangeClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, () => {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    var hasStart = start !== null && start !== undefined;
    var hasEnd = end !== null && end !== undefined;
    var hasStep = step !== null && step !== undefined;

    if (hasStart) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(start)) {
        start = start.toNumber();
      } else if (typeof start !== 'number') {
        throw new TypeError('Parameter start must be a number');
      }
    }

    if (hasEnd) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(end)) {
        end = end.toNumber();
      } else if (typeof end !== 'number') {
        throw new TypeError('Parameter end must be a number');
      }
    }

    if (hasStep) {
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(step)) {
        step = step.toNumber();
      } else if (typeof step !== 'number') {
        throw new TypeError('Parameter step must be a number');
      }
    }

    this.start = hasStart ? parseFloat(start) : 0;
    this.end = hasEnd ? parseFloat(end) : 0;
    this.step = hasStep ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */


  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);

      case 3:
        return new Range(nums[0], nums[2], nums[1]);

      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */


  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */


  Range.prototype.size = function () {
    var len = 0;
    var start = this.start;
    var step = this.step;
    var end = this.end;
    var diff = end - start;

    if ((0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.sign)(step) === (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.sign)(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff === 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }

    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */


  Range.prototype.min = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */


  Range.prototype.max = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */


  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */


  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Range.prototype.format = function (options) {
    var str = (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.start, options);

    if (this.step !== 1) {
      str += ':' + (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.step, options);
    }

    str += ':' + (0,_utils_number_js__WEBPACK_IMPORTED_MODULE_2__.format)(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */


  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */


  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */


  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/Spa.js":
/*!********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/Spa.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSpaClass": () => (/* binding */ createSpaClass)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'Spa';
var dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];
var createSpaClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    addScalar,
    equalScalar,
    FibonacciHeap
  } = _ref;

  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // allocate vector, TODO use typed arrays


    this._values = [];
    this._heap = new FibonacciHeap();
  }
  /**
   * Attach type information
   */


  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v); // set the value @ i


      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };

  Spa.prototype.get = function (i) {
    var node = this._values[i];

    if (node) {
      return node.value;
    }

    return 0;
  };

  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];

    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = addScalar(node.value, v);
    }
  };

  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values; // nodes

    var nodes = []; // node with minimum key, save it

    var node = heap.extractMinimum();

    if (node) {
      nodes.push(node);
    } // extract nodes from heap (ordered)


    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it


      node = heap.extractMinimum();

      if (node) {
        nodes.push(node);
      }
    } // reinsert all nodes in heap


    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };

  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values


      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values


      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };

  return Spa;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSparseMatrixClass": () => (/* binding */ createSparseMatrixClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");







var name = 'SparseMatrix';
var dependencies = ['typed', 'equalScalar', 'Matrix'];
var createSparseMatrixClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar,
    Matrix
  } = _ref;

  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.index) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.ptr) && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }

  function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(source._values) : undefined;
      matrix._index = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(source._index);
      matrix._ptr = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(source._ptr);
      matrix._size = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  }

  function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    var rows = data.length;
    var columns = 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)


    if (rows > 0) {
      // column index
      var j = 0;

      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows


        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i]; // check row is an array

          if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) {
              columns = row.length;
            } // check row has column


            if (j < row.length) {
              // value
              var v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index


                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) {
              columns = 1;
            } // check value != 0 (row is a scalar)


            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index


              matrix._index.push(i);
            }
          }
        } // increment index


        j++;
      } while (j < columns);
    } // store number of values in ptr


    matrix._ptr.push(matrix._index.length); // size


    matrix._size = [rows, columns];
  }

  SparseMatrix.prototype = new Matrix();
  /**
   * Create a new SparseMatrix
   */

  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  SparseMatrix.prototype.getDataType = function () {
    return (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.getArrayDataType)(this._values, _utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */


  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */


  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */


  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke subset on a Pattern only matrix');
    } // check arguments


    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  function _getsubset(matrix, idx) {
    // check idx
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isIndex)(idx)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = idx.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions


    var size = idx.size();

    if (size.length !== matrix._size.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(size.length, matrix._size.length);
    } // vars


    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

    var min = idx.min();
    var max = idx.max();

    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(min[i], matrix._size[i]);
      (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(max[i], matrix._size[i]);
    } // matrix arrays


    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

    var rows = idx.dimension(0);
    var columns = idx.dimension(1); // workspace & permutation vector

    var w = [];
    var pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) {
            values.push(mvalues[k]);
          }
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  }

  function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.arraySize)(submatrix);
    } // check index is a scalar


    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value


      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions


      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.deepStrictEqual)(iSize, sSize)) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(iSize, sSize, '>');
      } // offsets


      var x0 = index.min()[0];
      var y0 = index.min()[1]; // submatrix rows and columns

      var m = sSize[0];
      var n = sSize[1]; // loop submatrix

      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }

    return matrix;
  }
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  SparseMatrix.prototype.get = function (index) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke get on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // check i, j are valid

    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, this._size[0]);
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(j, this._size[1]); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      return this._values[k];
    }

    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */


  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_4__.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke set on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix


    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid


    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, rows);
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(j, columns); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };

  function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) {
      return bottom;
    } // loop rows [top, bottom[


    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) {
        return r;
      }
    } // we did not find row


    return top;
  }

  function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  }

  function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[] | Matrix} size  The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isCollection)(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


    var sizeArray = size.valueOf().map(value => {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    });

    if (sizeArray.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // check sizes


    sizeArray.forEach(function (value) {
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(value) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(sizeArray) + ')');
      }
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
  };

  function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?


    var ins = !eq(value, zero); // old columns and rows

    var r = matrix._size[0];
    var c = matrix._size[1];
    var i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index


            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr


      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns


    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          var p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index


            matrix._index.splice(k + p, 0, i); // increment inserts


            n++;
          }
        } // store number of matrix._values in matrix._ptr


        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      var d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index


            matrix._index.splice(k, 1); // increase deletes


            d++;
          }
        }
      } // update matrix._ptr for current column


      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size


    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} sizes          The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  SparseMatrix.prototype.reshape = function (sizes, copy) {
    // validate arguments
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(sizes)) {
      throw new TypeError('Array expected');
    }

    if (sizes.length !== 2) {
      throw new Error('Sparse matrices can only be reshaped in two dimensions');
    } // check sizes


    sizes.forEach(function (value) {
      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(value) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(value) || value <= -2 || value === 0) {
        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(sizes) + ')');
      }
    });
    var currentLength = this._size[0] * this._size[1];
    sizes = (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.processSizesWildcard)(sizes, currentLength);
    var newLength = sizes[0] * sizes[1]; // m * n must not change

    if (currentLength !== newLength) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape


    var m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {
      return m;
    } // Convert to COO format (generate a column index)


    var colIndex = [];

    for (var i = 0; i < m._ptr.length; i++) {
      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array


    var values = m._values.slice(); // Clone the row index array


    var rowIndex = m._index.slice(); // Transform the (row, column) indices


    for (var _i = 0; _i < m._index.length; _i++) {
      var r1 = rowIndex[_i];
      var c1 = colIndex[_i];
      var flat = r1 * m._size[1] + c1;
      colIndex[_i] = flat % sizes[1];
      rowIndex[_i] = Math.floor(flat / sizes[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix


    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = sizes[1] + 1;
    m._size = sizes.slice();

    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
      m._ptr[_i2] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming


    for (var h = 0; h < values.length; h++) {
      var _i3 = rowIndex[h];
      var _j = colIndex[h];
      var v = values[h];

      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?


    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */


  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._values) : undefined,
      index: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._index),
      ptr: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._ptr),
      size: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */


  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */


  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke map on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // invoke callback

    var invoke = function invoke(v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map


    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */


  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = []; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback


    var invoke = function invoke(v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns


    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = matrix._index[k]; // check i is in range

          if (i >= minRow && i <= maxRow) {
            // value @ k
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
        }
      } else {
        // create a cache holding all defined values
        var _values = {};

        for (var _k = k0; _k < k1; _k++) {
          var _i4 = matrix._index[_k];
          _values[_i4] = matrix._values[_k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
          var value = _i5 in _values ? _values[_i5] : 0;
          invoke(value, _i5 - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr


    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  }
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */


  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = this._index[k]; // value @ k

          callback(this._values[k], [i, j], me);
        }
      } else {
        // create a cache holding all defined values
        var values = {};

        for (var _k2 = k0; _k2 < k1; _k2++) {
          var _i6 = this._index[_k2];
          values[_i6] = this._values[_k2];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i7 = 0; _i7 < rows; _i7++) {
          var value = _i7 in values ? values[_i7] : 0;
          callback(value, [_i7, j], me);
        }
      }
    }
  };
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };

  function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    var rows = size[0];
    var columns = size[1]; // result

    var a = []; // vars

    var i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];

      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(values[k]) : values[k] : 1;
      }
    }

    return a;
  }
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1]; // density

    var density = this.density(); // rows & columns

    var str = 'Sparse Matrix [' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(rows, options) + ' x ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(columns, options) + '] density: ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(density, options) + '\n'; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // append value

        str += '\n    (' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(i, options) + ', ' + (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(j, options) + ') ==> ' + (this._values ? (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(this._values[k], options) : 'X');
      }
    }

    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */


  SparseMatrix.prototype.toString = function () {
    return (0,_utils_string_js__WEBPACK_IMPORTED_MODULE_6__.format)(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */


  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */


  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(k) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    var values = [];
    var index = [];
    var ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr


    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */


  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */


  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(s) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(k) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use


    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // create arrays


    var values = [];
    var index = [];
    var ptr = []; // loop items

    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      var i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i); // check for zero


        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values


    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(i) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(i) || !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(j) || !(0,_utils_number_js__WEBPACK_IMPORTED_MODULE_5__.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(i, this._size[0]);
    (0,_utils_array_js__WEBPACK_IMPORTED_MODULE_3__.validateIndex)(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */


  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1]; // loop

    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */


  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // find value index @ x

      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column


        continue;
      } // check x row exist & no y row


      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);

        if (values) {
          values.splice(ky, 0, vx);
        } // remove value @ x (adjust array index if needed)


        index.splice(ky <= kx ? kx + 1 : kx, 1);

        if (values) {
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        } // next column


        continue;
      } // check y row exist & no x row


      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);

        if (values) {
          values.splice(kx, 0, vy);
        } // remove value @ y (adjust array index if needed)


        index.splice(kx <= ky ? ky + 1 : ky, 1);

        if (values) {
          values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    }
  };

  return SparseMatrix;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/function/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/function/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createIndex": () => (/* binding */ createIndex)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");


var name = 'index';
var dependencies = ['typed', 'Index'];
var createIndex = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Index
  } = _ref;

  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed(name, {
    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
      var ranges = args.map(function (arg) {
        if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isMatrix)(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      var res = new Index();
      Index.apply(res, ranges);
      return res;
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/function/matrix.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/function/matrix.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMatrix": () => (/* binding */ createMatrix)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'matrix';
var dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
var createMatrix = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Matrix,
    DenseMatrix,
    SparseMatrix
  } = _ref;

  /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function _() {
      return _create([]);
    },
    string: function string(format) {
      return _create([], format);
    },
    'string, string': function stringString(format, datatype) {
      return _create([], format, datatype);
    },
    Array: function Array(data) {
      return _create(data);
    },
    Matrix: function Matrix(data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    if (format === 'dense' || format === 'default' || format === undefined) {
      return new DenseMatrix(data, datatype);
    }

    if (format === 'sparse') {
      return new SparseMatrix(data, datatype);
    }

    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/function/sparse.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/function/sparse.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSparse": () => (/* binding */ createSparse)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'sparse';
var dependencies = ['typed', 'SparseMatrix'];
var createSparse = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    SparseMatrix
  } = _ref;

  /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function _() {
      return new SparseMatrix([]);
    },
    string: function string(datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function ArrayMatrix(data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm01.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm01": () => (/* binding */ createAlgorithm01)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm01';
var dependencies = ['typed'];
var createAlgorithm01 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // process data types

    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    var i, j; // result (DenseMatrix)

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows


      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm02.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm02": () => (/* binding */ createAlgorithm02)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm02';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm02 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update C(i,j)

        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return sparseMatrix.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm03.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm03": () => (/* binding */ createAlgorithm03)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm03';
var dependencies = ['typed'];
var createAlgorithm03 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)


    var cdata = []; // initialize dense matrix

    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace


      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm04.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm04.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm04": () => (/* binding */ createAlgorithm04)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm04';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm04 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm04(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspace

    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop B(:,j)


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) {
            xb[i] = bvalues[k];
          }
        }
      } // check we need to process values (non pattern matrix)


      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm05": () => (/* binding */ createAlgorithm05)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm05';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm05 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm05(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop values B(:,j)


      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace


        wb[i] = mark; // check we need to process values

        if (xb) {
          xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)


      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          var wai = wa[i];
          var wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero; // Cij

            var vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm06": () => (/* binding */ createAlgorithm06)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");



var name = 'algorithm06';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm06 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm06(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // marks indicating value in a given row has been updated

    var u = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // scatter the values of A(:,j) into workspace

      (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace

      (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        var k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        var p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm07": () => (/* binding */ createAlgorithm07)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm07';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm07 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    DenseMatrix
  } = _ref;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm07(a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars


    var i, j; // result arrays

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspaces


    var xa = [];
    var xb = []; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


      _scatter(b, j, wb, xb, mark); // loop rows


      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };

  function _scatter(m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop values in column j

    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm08.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm08.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm08": () => (/* binding */ createAlgorithm08)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm08';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm08 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm08(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!avalues || !bvalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var k, k0, k1, i; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values in a

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // mark workspace

        w[i] = mark; // set value

        x[i] = avalues[k]; // add index

        cindex.push(i);
      } // loop values in b


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check value exists in workspace

        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      } // initialize first index in j


      k = cptr[j]; // loop index in j

      while (k < cindex.length) {
        // row
        i = cindex[k]; // value @ i

        var v = x[i]; // check for zero value

        if (!eq(v, zero)) {
          // push value
          cvalues.push(v); // increment pointer

          k++;
        } else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm09.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm09.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm09": () => (/* binding */ createAlgorithm09)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm09';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm09 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm09(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      var mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)


      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero; // invoke f

          var vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm10.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm10": () => (/* binding */ createAlgorithm10)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'algorithm10';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm10 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    DenseMatrix
  } = _ref;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm11.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm11": () => (/* binding */ createAlgorithm11)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'algorithm11';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm11 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    equalScalar
  } = _ref;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k]; // invoke callback

        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr


    cptr[columns] = cindex.length; // return sparse matrix

    return s.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm12.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm12": () => (/* binding */ createAlgorithm12)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'algorithm12';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm12 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    DenseMatrix
  } = _ref;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm13.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm13": () => (/* binding */ createAlgorithm13)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");


var name = 'algorithm13';
var dependencies = ['typed'];
var createAlgorithm13 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  return function algorithm13(a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b arrays

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // c arrays

    var csize = []; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_1__.DimensionError(asize.length, bsize.length);
    } // validate each one of the dimension sizes


    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) {
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      } // update dimension in c


      csize[s] = asize[s];
    } // datatype


    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }

    return cv;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/matrix/utils/algorithm14.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAlgorithm14": () => (/* binding */ createAlgorithm14)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");


var name = 'algorithm14';
var dependencies = ['typed'];
var createAlgorithm14 = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  return function algorithm14(a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_1__.clone)(asize),
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }

    return cv;
  }
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/number.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/number.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNumber": () => (/* binding */ createNumber)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'number';
var dependencies = ['typed'];
/**
 * Separates the radix, integer part, and fractional part of a non decimal number string
 * @param {string} input string to parse
 * @returns {object} the parts of the string or null if not a valid input
 */

function getNonDecimalNumberParts(input) {
  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);

  if (nonDecimalWithRadixMatch) {
    var radix = {
      '0b': 2,
      '0o': 8,
      '0x': 16
    }[nonDecimalWithRadixMatch[1]];
    var integerPart = nonDecimalWithRadixMatch[2];
    var fractionalPart = nonDecimalWithRadixMatch[3];
    return {
      input,
      radix,
      integerPart,
      fractionalPart
    };
  } else {
    return null;
  }
}
/**
 * Makes a number from a radix, and integer part, and a fractional part
 * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)
 * @returns {number} the number
 */


function makeNumberFromNonDecimalParts(parts) {
  var n = parseInt(parts.integerPart, parts.radix);
  var f = 0;

  for (var i = 0; i < parts.fractionalPart.length; i++) {
    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);
    f += digitValue / Math.pow(parts.radix, i + 1);
  }

  var result = n + f;

  if (isNaN(result)) {
    throw new SyntaxError('String "' + parts.input + '" is no valid number');
  }

  return result;
}

var createNumber = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function _() {
      return 0;
    },
    number: function number(x) {
      return x;
    },
    string: function string(x) {
      if (x === 'NaN') return NaN;
      var nonDecimalNumberParts = getNonDecimalNumberParts(x);

      if (nonDecimalNumberParts) {
        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);
      }

      var size = 0;
      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

      if (wordSizeSuffixMatch) {
        // x includes a size suffix like 0xffffi32, so we extract
        // the suffix and remove it from x
        size = Number(wordSizeSuffixMatch[2]);
        x = wordSizeSuffixMatch[1];
      }

      var num = Number(x);

      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }

      if (wordSizeSuffixMatch) {
        // x is a signed bin, oct, or hex literal
        // num is the value of string x if x is interpreted as unsigned
        if (num > 2 ** size - 1) {
          // literal is too large for size suffix
          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
        } // check if the bit at index size - 1 is set and if so do the twos complement


        if (num >= 2 ** (size - 1)) {
          num = num - 2 ** size;
        }
      }

      return num;
    },
    BigNumber: function BigNumber(x) {
      return x.toNumber();
    },
    Fraction: function Fraction(x) {
      return x.valueOf();
    },
    Unit: function Unit(x) {
      throw new Error('Second argument with valueless unit expected');
    },
    null: function _null(x) {
      return 0;
    },
    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  }); // reviver function to parse a JSON object like:
  //
  //     {"mathjs":"number","value":"2.3"}
  //
  // into a number 2.3

  number.fromJSON = function (json) {
    return parseFloat(json.value);
  };

  return number;
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/resultset/ResultSet.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/resultset/ResultSet.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createResultSet": () => (/* binding */ createResultSet)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'ResultSet';
var dependencies = [];
var createResultSet = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, () => {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.entries = entries || [];
  }
  /**
   * Attach type information
   */


  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;
  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */

  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };
  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */


  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */


  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };
  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */


  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };

  return ResultSet;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/string.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/string.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createString": () => (/* binding */ createString)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");
/* harmony import */ var _utils_number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");



var name = 'string';
var dependencies = ['typed'];
var createString = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  return typed(name, {
    '': function _() {
      return '';
    },
    number: _utils_number_js__WEBPACK_IMPORTED_MODULE_1__.format,
    null: function _null(x) {
      return 'null';
    },
    boolean: function boolean(x) {
      return x + '';
    },
    string: function string(x) {
      return x;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_2__.deepMap)(x, this);
    },
    any: function any(x) {
      return String(x);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/unit/Unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/unit/Unit.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnitClass": () => (/* binding */ createUnitClass)
/* harmony export */ });
/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");
/* harmony import */ var _utils_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _utils_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* harmony import */ var _utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/bignumber/constants.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/constants.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







var name = 'Unit';
var dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
var createUnitClass = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    on,
    config,
    addScalar,
    subtract,
    multiplyScalar,
    divideScalar,
    pow,
    abs,
    fix,
    round,
    equal,
    isNumeric,
    format,
    number,
    Complex,
    BigNumber: _BigNumber,
    Fraction: _Fraction
  } = _ref;
  var toNumber = number;
  /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */

  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }

    if (!(value === null || value === undefined || isNumeric(value) || (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isComplex)(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }

    if (name !== undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }

    if (name !== undefined) {
      var u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    } else {
      this.units = [{
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE,
        // link to a list with supported prefixes
        power: 0
      }];
      this.dimensions = [];

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }

    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
    this.fixPrefix = false; // if true, function format will not search for the
    // best prefix but leave it as initially provided.
    // fixPrefix is set true by the method Unit.to
    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.

    this.skipAutomaticSimplification = true;
  }
  /**
   * Attach type information
   */


  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

  var text, index, c;

  function skipWhitespace() {
    while (c === ' ' || c === '\t') {
      next();
    }
  }

  function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  }

  function isDigit(c) {
    return c >= '0' && c <= '9';
  }

  function next() {
    index++;
    c = text.charAt(index);
  }

  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }

  function parseNumber() {
    var number = '';
    var oldIndex = index;

    if (c === '+') {
      next();
    } else if (c === '-') {
      number += c;
      next();
    }

    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    } // get number, can have a single dot


    if (c === '.') {
      number += c;
      next();

      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    } else {
      while (isDigit(c)) {
        number += c;
        next();
      }

      if (c === '.') {
        number += c;
        next();
      }
    }

    while (isDigit(c)) {
      number += c;
      next();
    } // check for exponential notation like "2.3e-4" or "1.23e50"


    if (c === 'E' || c === 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
      var tentativeNumber = '';
      var tentativeIndex = index;
      tentativeNumber += c;
      next();

      if (c === '+' || c === '-') {
        tentativeNumber += c;
        next();
      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      } // We can now safely say that this is scientific notation.


      number = number + tentativeNumber;

      while (isDigit(c)) {
        number += c;
        next();
      }
    }

    return number;
  }

  function parseUnit() {
    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

    while (isDigit(c) || Unit.isValidAlpha(c)) {
      unitName += c;
      next();
    } // Must begin with [a-zA-Z]


    var firstC = unitName.charAt(0);

    if (Unit.isValidAlpha(firstC)) {
      return unitName;
    } else {
      return null;
    }
  }

  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    } else {
      return null;
    }
  }
  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */


  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';

    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }

    var unit = new Unit();
    unit.units = [];
    var powerMultiplierCurrent = 1;
    var expectingUnit = false; // A unit should follow this pattern:
    // [number] ...[ [*/] unit[^number] ]
    // unit[^number] ... [ [*/] unit[^number] ]
    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace(); // Optional number at the start of the string

    var valueStr = parseNumber();
    var value = null;

    if (valueStr) {
      if (config.number === 'BigNumber') {
        value = new _BigNumber(valueStr);
      } else if (config.number === 'Fraction') {
        try {
          // not all numbers can be turned in Fractions, for example very small numbers not
          value = new _Fraction(valueStr);
        } catch (err) {
          value = parseFloat(valueStr);
        }
      } else {
        // number
        value = parseFloat(valueStr);
      }

      skipWhitespace(); // Whitespace is not required here
      // handle multiplication or division right after the value, like '1/s'

      if (parseCharacter('*')) {
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
    } // Stack to keep track of powerMultipliers applied to each parentheses group


    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

    var powerMultiplierStackProduct = 1;

    while (true) {
      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.

      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      } // Is there something here?


      var uStr = void 0;

      if (c) {
        var oldC = c;
        uStr = parseUnit();

        if (uStr === null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      } else {
        // End of input.
        break;
      } // Verify the unit exists and get the prefix (if any)


      var res = _findUnit(uStr);

      if (res === null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }

      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

      skipWhitespace();

      if (parseCharacter('^')) {
        skipWhitespace();
        var p = parseNumber();

        if (p === null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }

        power *= p;
      } // Add the unit to the list


      unit.units.push({
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      } // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.


      skipWhitespace();

      while (c === ')') {
        if (powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }

        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      } // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


      expectingUnit = false;

      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      } else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      } // Replace the unit into the auto unit system


      if (res.unit.base) {
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    } // Has the string been entirely consumed?


    skipWhitespace();

    if (c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    } // Is there a trailing slash?


    if (expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    } // Is the parentheses stack empty?


    if (powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    } // Are there any units at all?


    if (unit.units.length === 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }

    unit.value = value !== undefined ? unit._normalize(value) : null;
    return unit;
  };
  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */


  Unit.prototype.clone = function () {
    var unit = new Unit();
    unit.fixPrefix = this.fixPrefix;
    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
    unit.value = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];

    for (var i = 0; i < this.units.length; i++) {
      unit.units[i] = {};

      for (var p in this.units[i]) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(this.units[i], p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }

    return unit;
  };
  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */


  Unit.prototype._isDerived = function () {
    if (this.units.length === 0) {
      return false;
    }

    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };
  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */


  Unit.prototype._normalize = function (value) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      var res = value;
      convert = Unit._getNumberConverter((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitOffset = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);
      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
    }
  };
  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */


  Unit.prototype._denormalize = function (value, prefixValue) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      var res = value;
      convert = Unit._getNumberConverter((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset = convert(this.units[0].unit.offset);

      if (prefixValue === undefined || prefixValue === null) {
        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
      } else {
        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
      }
    }
  };
  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */


  var _findUnit = (0,_utils_function_js__WEBPACK_IMPORTED_MODULE_3__.memoize)(str => {
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNITS, str)) {
      var unit = UNITS[str];
      var prefix = unit.prefixes[''];
      return {
        unit,
        prefix
      };
    }

    for (var _name in UNITS) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNITS, _name)) {
        if ((0,_utils_string_js__WEBPACK_IMPORTED_MODULE_4__.endsWith)(str, _name)) {
          var _unit = UNITS[_name];
          var prefixLen = str.length - _name.length;
          var prefixName = str.substring(0, prefixLen);

          var _prefix = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;

          if (_prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit: _unit,
              prefix: _prefix
            };
          }
        }
      }
    }

    return null;
  }, {
    hasher: args => args[0],
    limit: 100
  });
  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */


  Unit.isValuelessUnit = function (name) {
    return _findUnit(name) !== null;
  };
  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */


  Unit.prototype.hasBase = function (base) {
    if (typeof base === 'string') {
      base = BASE_UNITS[base];
    }

    if (!base) {
      return false;
    } // All dimensions must be the same


    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */


  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */


  Unit.prototype.equals = function (other) {
    return this.equalBase(other) && equal(this.value, other.value);
  };
  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */


  Unit.prototype.multiply = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    } // Append other's units list onto res


    for (var _i = 0; _i < other.units.length; _i++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread({}, other.units[_i]);

      res.units.push(inverted);
    } // If at least one operand has a value, then the result should also have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = multiplyScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */


  Unit.prototype.divide = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    } // Invert and append other's units list onto res


    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {
        power: -other.units[_i2].power
      });

      res.units.push(inverted);
    } // If at least one operand has a value, the result should have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = divideScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */


  Unit.prototype.pow = function (p) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    } // Adjust the power of each unit in the list


    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
      res.units[_i3].power *= p;
    }

    if (res.value !== null) {
      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
      // if (!isNumeric(res.value)) {
      //  res.value = NaN
      // }
      // Update: Complex supported now
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */


  function getNumericIfUnitless(unit) {
    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    } else {
      return unit;
    }
  }
  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */


  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    var ret = this.clone();
    ret.value = ret.value !== null ? abs(ret.value) : null;

    for (var i in ret.units) {
      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS.W;
      }
    }

    return ret;
  };
  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */


  Unit.prototype.to = function (valuelessUnit) {
    var other;
    var value = this.value === null ? this._normalize(1) : this.value;

    if (typeof valuelessUnit === 'string') {
      // other = new Unit(null, valuelessUnit)
      other = Unit.parse(valuelessUnit);

      if (!this.equalBase(other)) {
        throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other.value = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isUnit)(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other = valuelessUnit.clone();
      other.value = (0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else {
      throw new Error('String or Unit expected as parameter');
    }
  };
  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };
  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */


  Unit.prototype.toNumeric = function (valuelessUnit) {
    var other;

    if (valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    } else {
      other = this.clone();
    }

    if (other._isDerived() || other.units.length === 0) {
      return other._denormalize(other.value);
    } else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };
  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */


  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };
  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */


  Unit.fromJSON = function (json) {
    var unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };
  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.valueOf = Unit.prototype.toString;
  /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */

  Unit.prototype.simplify = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Search for a matching base

    var matchingBase;

    for (var key in currentUnitSystem) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(currentUnitSystem, key)) {
        if (ret.hasBase(BASE_UNITS[key])) {
          matchingBase = key;
          break;
        }
      }
    }

    if (matchingBase === 'NONE') {
      ret.units = [];
    } else {
      var matchingUnit;

      if (matchingBase) {
        // Does the unit system have a matching unit?
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(currentUnitSystem, matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }

      if (matchingUnit) {
        ret.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      } else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        var missingBaseDim = false;

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(currentUnitSystem, baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              missingBaseDim = true;
            }
          }
        } // Is the proposed unit list "simpler" than the existing one?


        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          ret.units = proposedUnitList;
        }
      }
    }

    return ret;
  };
  /**
   * Returns a new Unit in the SI system with the same value as this one
   */


  Unit.prototype.toSI = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      var baseDim = BASE_DIMENSIONS[i];

      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNIT_SYSTEMS.si, baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS.si[baseDim].unit,
            prefix: UNIT_SYSTEMS.si[baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        } else {
          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
        }
      }
    } // Replace this unit list with the proposed list


    ret.units = proposedUnitList;
    ret.fixPrefix = true;
    ret.skipAutomaticSimplification = true;
    return ret;
  };
  /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.formatUnits = function () {
    var strNum = '';
    var strDen = '';
    var nNum = 0;
    var nDen = 0;

    for (var i = 0; i < this.units.length; i++) {
      if (this.units[i].power > 0) {
        nNum++;
        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += '^' + this.units[i].power;
        }
      } else if (this.units[i].power < 0) {
        nDen++;
      }
    }

    if (nDen > 0) {
      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
        if (this.units[_i4].power < 0) {
          if (nNum > 0) {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
              strDen += '^' + -this.units[_i4].power;
            }
          } else {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
            strDen += '^' + this.units[_i4].power;
          }
        }
      }
    } // Remove leading " "


    strNum = strNum.substr(1);
    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

    if (nNum > 1 && nDen > 0) {
      strNum = '(' + strNum + ')';
    }

    if (nDen > 1 && nNum > 0) {
      strDen = '(' + strDen + ')';
    }

    var str = strNum;

    if (nNum > 0 && nDen > 0) {
      str += ' / ';
    }

    str += strDen;
    return str;
  };
  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */


  Unit.prototype.format = function (options) {
    // Simplfy the unit list, unless it is valueless or was created directly in the
    // constructor or as the result of to or toSI
    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

    var isImaginary = false;

    if (typeof simp.value !== 'undefined' && simp.value !== null && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isComplex)(simp.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(simp.value.re) < 1e-14;
    }

    for (var i in simp.units) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(simp.units, i)) {
        if (simp.units[i].unit) {
          if (simp.units[i].unit.name === 'VA' && isImaginary) {
            simp.units[i].unit = UNITS.VAR;
          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
            simp.units[i].unit = UNITS.VA;
          }
        }
      }
    } // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set


    if (simp.units.length === 1 && !simp.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
        // Apply the best prefix
        simp.units[0].prefix = simp._bestPrefix();
      }
    }

    var value = simp._denormalize(simp.value);

    var str = simp.value !== null ? format(value, options || {}) : '';
    var unitStr = simp.formatUnits();

    if (simp.value && (0,_utils_is_js__WEBPACK_IMPORTED_MODULE_1__.isComplex)(simp.value)) {
      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
    }

    if (unitStr.length > 0 && str.length > 0) {
      str += ' ';
    }

    str += unitStr;
    return str;
  };
  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */


  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    }

    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    } // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers


    var absValue = this.value !== null ? abs(this.value) : 0;
    var absUnitValue = abs(this.units[0].unit.value);
    var bestPrefix = this.units[0].prefix;

    if (absValue === 0) {
      return bestPrefix;
    }

    var power = this.units[0].power;
    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

    bestDiff = Math.abs(bestDiff);
    var prefixes = this.units[0].unit.prefixes;

    for (var p in prefixes) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(prefixes, p)) {
        var prefix = prefixes[p];

        if (prefix.scientific) {
          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
            // choose the prefix with the smallest diff, or if equal, choose the one
            // with the shortest name (can happen with SHORTLONG for example)
            bestPrefix = prefix;
            bestDiff = diff;
          }
        }
      }
    }

    return bestPrefix;
  };
  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */


  Unit.prototype.splitUnit = function (parts) {
    var x = this.clone();
    var ret = [];

    for (var i = 0; i < parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if (i === parts.length - 1) break; // Get the numeric value of this unit

      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error

      var xRounded = round(xNumeric);
      var xFixed = void 0;
      var isNearlyEqual = equal(xRounded, xNumeric);

      if (isNearlyEqual) {
        xFixed = xRounded;
      } else {
        xFixed = fix(x.toNumeric());
      }

      var y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.


    var testSum = 0;

    for (var _i5 = 0; _i5 < ret.length; _i5++) {
      testSum = addScalar(testSum, ret[_i5].value);
    }

    if (equal(testSum, this.value)) {
      x.value = 0;
    }

    ret.push(x);
    return ret;
  };

  var PREFIXES = {
    NONE: {
      '': {
        name: '',
        value: 1,
        scientific: true
      }
    },
    SHORT: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e1,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e2,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-1,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-2,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-3,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-6,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-9,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-12,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-15,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-18,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-21,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-24,
        scientific: true
      }
    },
    LONG: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      deca: {
        name: 'deca',
        value: 1e1,
        scientific: false
      },
      hecto: {
        name: 'hecto',
        value: 1e2,
        scientific: false
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      },
      deci: {
        name: 'deci',
        value: 1e-1,
        scientific: false
      },
      centi: {
        name: 'centi',
        value: 1e-2,
        scientific: false
      },
      milli: {
        name: 'milli',
        value: 1e-3,
        scientific: true
      },
      micro: {
        name: 'micro',
        value: 1e-6,
        scientific: true
      },
      nano: {
        name: 'nano',
        value: 1e-9,
        scientific: true
      },
      pico: {
        name: 'pico',
        value: 1e-12,
        scientific: true
      },
      femto: {
        name: 'femto',
        value: 1e-15,
        scientific: true
      },
      atto: {
        name: 'atto',
        value: 1e-18,
        scientific: true
      },
      zepto: {
        name: 'zepto',
        value: 1e-21,
        scientific: true
      },
      yocto: {
        name: 'yocto',
        value: 1e-24,
        scientific: true
      }
    },
    SQUARED: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e2,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e4,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e6,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e12,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e18,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e24,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e30,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e36,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e42,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e48,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-2,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-4,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-6,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-12,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-18,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-24,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-30,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-36,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-42,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-48,
        scientific: true
      }
    },
    CUBIC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e3,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e6,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e9,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e18,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e27,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e36,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e45,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e54,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e63,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e72,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-3,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-6,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-9,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-18,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-27,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-36,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-45,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-54,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-63,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-72,
        scientific: true
      }
    },
    BINARY_SHORT_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_SHORT_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      Ki: {
        name: 'Ki',
        value: 1024,
        scientific: true
      },
      Mi: {
        name: 'Mi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      Gi: {
        name: 'Gi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      Ti: {
        name: 'Ti',
        value: Math.pow(1024, 4),
        scientific: true
      },
      Pi: {
        name: 'Pi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      Ei: {
        name: 'Ei',
        value: Math.pow(1024, 6),
        scientific: true
      },
      Zi: {
        name: 'Zi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      Yi: {
        name: 'Yi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BINARY_LONG_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_LONG_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kibi: {
        name: 'kibi',
        value: 1024,
        scientific: true
      },
      mebi: {
        name: 'mebi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      gibi: {
        name: 'gibi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      tebi: {
        name: 'tebi',
        value: Math.pow(1024, 4),
        scientific: true
      },
      pebi: {
        name: 'pebi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      exi: {
        name: 'exi',
        value: Math.pow(1024, 6),
        scientific: true
      },
      zebi: {
        name: 'zebi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      yobi: {
        name: 'yobi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BTU: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      MM: {
        name: 'MM',
        value: 1e6,
        scientific: true
      }
    }
  };
  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);
  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
  var BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };

  for (var key in BASE_UNITS) {
    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(BASE_UNITS, key)) {
      BASE_UNITS[key].key = key;
    }
  }

  var BASE_UNIT_NONE = {};
  var UNIT_NONE = {
    name: '',
    base: BASE_UNIT_NONE,
    value: 1,
    offset: 0,
    dimensions: BASE_DIMENSIONS.map(x => 0)
  };
  var UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    in: {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: 't',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 1000,
      offset: 0
    },
    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: 'decade',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000,
      // Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000,
      // Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: 'radian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: 'degree',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: 'gradian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
    kilogramforce: {
      name: 'kilogramforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },
    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'watt',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORTLONG,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },

    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }; // aliases (formerly plurals)

  var ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',
    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',
    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
    kips: 'kip',
    kgf: 'kilogramforce',
    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',
    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',
    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',
    decades: 'decade',
    centuries: 'century',
    millennia: 'millennium',
    hertz: 'hertz',
    radians: 'radian',
    degrees: 'degree',
    gradians: 'gradian',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',
    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',
    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole',
    bit: 'bits',
    byte: 'bytes'
  };
  /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */

  function calculateAngleValues(config) {
    if (config.number === 'BigNumber') {
      var pi = (0,_utils_bignumber_constants_js__WEBPACK_IMPORTED_MODULE_5__.createBigNumberPi)(_BigNumber);
      UNITS.rad.value = new _BigNumber(1);
      UNITS.deg.value = pi.div(180); // 2 * pi / 360

      UNITS.grad.value = pi.div(200); // 2 * pi / 400

      UNITS.cycle.value = pi.times(2); // 2 * pi

      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
    } else {
      // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

      UNITS.cycle.value = Math.PI * 2; // 2 * pi

      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
    } // copy to the full names of the angles


    UNITS.radian.value = UNITS.rad.value;
    UNITS.degree.value = UNITS.deg.value;
    UNITS.gradian.value = UNITS.grad.value;
  } // apply the angle values now


  calculateAngleValues(config);

  if (on) {
    // recalculate the values on change of configuration
    on('config', function (curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
  }
  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */


  var UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE: {
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE['']
      },
      LENGTH: {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT['']
      },
      MASS: {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT.k
      },
      TIME: {
        unit: UNITS.s,
        prefix: PREFIXES.SHORT['']
      },
      CURRENT: {
        unit: UNITS.A,
        prefix: PREFIXES.SHORT['']
      },
      TEMPERATURE: {
        unit: UNITS.K,
        prefix: PREFIXES.SHORT['']
      },
      LUMINOUS_INTENSITY: {
        unit: UNITS.cd,
        prefix: PREFIXES.SHORT['']
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: UNITS.mol,
        prefix: PREFIXES.SHORT['']
      },
      ANGLE: {
        unit: UNITS.rad,
        prefix: PREFIXES.SHORT['']
      },
      BIT: {
        unit: UNITS.bits,
        prefix: PREFIXES.SHORT['']
      },
      // Derived units
      FORCE: {
        unit: UNITS.N,
        prefix: PREFIXES.SHORT['']
      },
      ENERGY: {
        unit: UNITS.J,
        prefix: PREFIXES.SHORT['']
      },
      POWER: {
        unit: UNITS.W,
        prefix: PREFIXES.SHORT['']
      },
      PRESSURE: {
        unit: UNITS.Pa,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CHARGE: {
        unit: UNITS.C,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CAPACITANCE: {
        unit: UNITS.F,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_POTENTIAL: {
        unit: UNITS.V,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_RESISTANCE: {
        unit: UNITS.ohm,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_INDUCTANCE: {
        unit: UNITS.H,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CONDUCTANCE: {
        unit: UNITS.S,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX: {
        unit: UNITS.Wb,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: UNITS.T,
        prefix: PREFIXES.SHORT['']
      },
      FREQUENCY: {
        unit: UNITS.Hz,
        prefix: PREFIXES.SHORT['']
      }
    }
  }; // Clone to create the other unit systems

  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {
    unit: UNITS.m,
    prefix: PREFIXES.SHORT.c
  };
  UNIT_SYSTEMS.cgs.MASS = {
    unit: UNITS.g,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.FORCE = {
    unit: UNITS.dyn,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.ENERGY = {
    unit: UNITS.erg,
    prefix: PREFIXES.NONE['']
  }; // there are wholly 4 unique cgs systems for electricity and magnetism,
  // so let's not worry about it unless somebody complains

  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH = {
    unit: UNITS.ft,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.MASS = {
    unit: UNITS.lbm,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.TEMPERATURE = {
    unit: UNITS.degF,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.FORCE = {
    unit: UNITS.lbf,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.ENERGY = {
    unit: UNITS.BTU,
    prefix: PREFIXES.BTU['']
  };
  UNIT_SYSTEMS.us.POWER = {
    unit: UNITS.hp,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.PRESSURE = {
    unit: UNITS.psi,
    prefix: PREFIXES.NONE['']
  }; // Add additional unit systems here.
  // Choose a unit system to seed the auto unit system.

  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

  var currentUnitSystem = UNIT_SYSTEMS.auto;
  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */

  Unit.setUnitSystem = function (name) {
    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNIT_SYSTEMS, name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    } else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };
  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */


  Unit.getUnitSystem = function () {
    for (var _key in UNIT_SYSTEMS) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNIT_SYSTEMS, _key)) {
        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
          return _key;
        }
      }
    }
  };
  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */


  Unit.typeConverters = {
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x + ''); // stringify to prevent constructor error
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x);
    },
    Complex: function Complex(x) {
      return x;
    },
    number: function number(x) {
      return x;
    }
  };
  /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */

  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }

    return Unit.typeConverters[type];
  }; // Add dimensions to each built-in unit


  for (var _key2 in UNITS) {
    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNITS, _key2)) {
      var unit = UNITS[_key2];
      unit.dimensions = unit.base.dimensions;
    }
  } // Create aliases


  for (var _name2 in ALIASES) {
    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(ALIASES, _name2)) {
      var _unit2 = UNITS[ALIASES[_name2]];
      var alias = {};

      for (var _key3 in _unit2) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(_unit2, _key3)) {
          alias[_key3] = _unit2[_key3];
        }
      }

      alias.name = _name2;
      UNITS[_name2] = alias;
    }
  }
  /**
   * Checks if a character is a valid latin letter (upper or lower case).
   * Note that this function can be overridden, for example to allow support of other alphabets.
   * @param {string} c Tested character
   */


  Unit.isValidAlpha = function isValidAlpha(c) {
    return /^[a-zA-Z]$/.test(c);
  };

  function assertUnitNameIsValid(name) {
    for (var i = 0; i < name.length; i++) {
      c = name.charAt(i);

      if (i === 0 && !Unit.isValidAlpha(c)) {
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
      }

      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
      }
    }
  }
  /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */


  Unit.createUnit = function (obj, options) {
    if (typeof obj !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    } // Remove all units and aliases we are overriding


    if (options && options.override) {
      for (var _key4 in obj) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(obj, _key4)) {
          Unit.deleteUnit(_key4);
        }

        if (obj[_key4].aliases) {
          for (var i = 0; i < obj[_key4].aliases.length; i++) {
            Unit.deleteUnit(obj[_key4].aliases[i]);
          }
        }
      }
    } // TODO: traverse multiple times until all units have been added


    var lastUnit;

    for (var _key5 in obj) {
      if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(obj, _key5)) {
        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
      }
    }

    return lastUnit;
  };
  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit, Object} definition      Definition of the unit in terms
   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
   * or an Object. If an Object, may have the following properties:
   *   - definition {string|Unit} The definition of this unit.
   *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
   *     The default is "none".
   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *   - offset {Numeric} An offset to apply when converting from the unit. For
   *     example, the offset for celsius is 273.15 and the offset for farhenheit
   *     is 459.67. Default is 0.
   *   - baseName {string} If the unit's dimension does not match that of any other
   *     base unit, the name of the newly create base unit. Otherwise, this property
   *     has no effect.
   *
   * @param {Object} options   (optional) An object containing any of the following
   * properties:
   *   - override {boolean} Whether this unit should be allowed to override existing
   *     units.
   *
   * @return {Unit}
   */


  Unit.createUnitSingle = function (name, obj, options) {
    if (typeof obj === 'undefined' || obj === null) {
      obj = {};
    }

    if (typeof name !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    } // Check collisions with existing units


    if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNITS, name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


    assertUnitNameIsValid(name);
    var defUnit = null; // The Unit from which the new unit will be created.

    var aliases = [];
    var offset = 0;
    var definition;
    var prefixes;
    var baseName;

    if (obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    } else if (typeof obj === 'string') {
      if (obj !== '') {
        definition = obj;
      }
    } else if (typeof obj === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes;
      offset = obj.offset;
      baseName = obj.baseName;

      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    } else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }

    if (aliases) {
      for (var i = 0; i < aliases.length; i++) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(UNITS, aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }

    if (definition && typeof definition === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {
          allowNoUnits: true
        });
      } catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw ex;
      }
    } else if (definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }

    aliases = aliases || [];
    offset = offset || 0;

    if (prefixes && prefixes.toUpperCase) {
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    } else {
      prefixes = PREFIXES.NONE;
    } // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.


    var newUnit = {};

    if (!defUnit) {
      // Add a new base dimension
      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }

      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

      for (var b in BASE_UNITS) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(BASE_UNITS, b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
        }
      } // Add the new base unit


      var newBaseUnit = {
        dimensions: []
      };

      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
        newBaseUnit.dimensions[_i6] = 0;
      }

      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: BASE_UNITS[baseName]
      };
      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };
    } else {
      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset
      }; // Create a new base if no matching base exists

      var anyMatch = false;

      for (var _i7 in BASE_UNITS) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(BASE_UNITS, _i7)) {
          var match = true;

          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }

          if (match) {
            anyMatch = true;
            newUnit.base = BASE_UNITS[_i7];
            break;
          }
        }
      }

      if (!anyMatch) {
        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit

        var _newBaseUnit = {
          dimensions: defUnit.dimensions.slice(0)
        };
        _newBaseUnit.key = baseName;
        BASE_UNITS[baseName] = _newBaseUnit;
        currentUnitSystem[baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };
        newUnit.base = BASE_UNITS[baseName];
      }
    }

    Unit.UNITS[name] = newUnit;

    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
      var aliasName = aliases[_i8];
      var _alias = {};

      for (var _key6 in newUnit) {
        if ((0,_utils_object_js__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty)(newUnit, _key6)) {
          _alias[_key6] = newUnit[_key6];
        }
      }

      _alias.name = aliasName;
      Unit.UNITS[aliasName] = _alias;
    } // delete the memoization cache, since adding a new unit to the array
    // invalidates all old results


    delete _findUnit.cache;
    return new Unit(null, name);
  };

  Unit.deleteUnit = function (name) {
    delete Unit.UNITS[name];
  }; // expose arrays with prefixes, dimensions, units, systems


  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;
  return Unit;
}, {
  isClass: true
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/unit/function/createUnit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/unit/function/createUnit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCreateUnit": () => (/* binding */ createCreateUnit)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'createUnit';
var dependencies = ['typed', 'Unit'];
var createCreateUnit = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Unit
  } = _ref;

  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  return typed(name, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function ObjectObject(obj, options) {
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    Object: function Object(obj) {
      return Unit.createUnit(obj, {});
    },
    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, {});
    },
    // Without a definition, creates a base unit.
    string: function string(name) {
      var obj = {};
      obj[name] = {};
      return Unit.createUnit(obj, {});
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSplitUnit": () => (/* binding */ createSplitUnit)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");

var name = 'splitUnit';
var dependencies = ['typed'];
var createSplitUnit = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed
  } = _ref;

  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  return typed(name, {
    'Unit, Array': function UnitArray(unit, parts) {
      return unit.splitUnit(parts);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/unit/function/unit.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/unit/function/unit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createUnitFunction": () => (/* binding */ createUnitFunction)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
/* harmony import */ var _utils_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/esm/utils/collection.js");


var name = 'unit';
var dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

var createUnitFunction = /* #__PURE__ */(0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
  var {
    typed,
    Unit
  } = _ref;

  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */
  return typed(name, {
    Unit: function Unit(x) {
      return x.clone();
    },
    string: function string(x) {
      if (Unit.isValuelessUnit(x)) {
        return new Unit(null, x); // a pure unit
      }

      return Unit.parse(x, {
        allowNoUnits: true
      }); // a unit with value, like '5cm'
    },
    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
      return new Unit(value, unit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0,_utils_collection_js__WEBPACK_IMPORTED_MODULE_1__.deepMap)(x, this);
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/type/unit/physicalConstants.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/type/unit/physicalConstants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSpeedOfLight": () => (/* binding */ createSpeedOfLight),
/* harmony export */   "createGravitationConstant": () => (/* binding */ createGravitationConstant),
/* harmony export */   "createPlanckConstant": () => (/* binding */ createPlanckConstant),
/* harmony export */   "createReducedPlanckConstant": () => (/* binding */ createReducedPlanckConstant),
/* harmony export */   "createMagneticConstant": () => (/* binding */ createMagneticConstant),
/* harmony export */   "createElectricConstant": () => (/* binding */ createElectricConstant),
/* harmony export */   "createVacuumImpedance": () => (/* binding */ createVacuumImpedance),
/* harmony export */   "createCoulomb": () => (/* binding */ createCoulomb),
/* harmony export */   "createElementaryCharge": () => (/* binding */ createElementaryCharge),
/* harmony export */   "createBohrMagneton": () => (/* binding */ createBohrMagneton),
/* harmony export */   "createConductanceQuantum": () => (/* binding */ createConductanceQuantum),
/* harmony export */   "createInverseConductanceQuantum": () => (/* binding */ createInverseConductanceQuantum),
/* harmony export */   "createMagneticFluxQuantum": () => (/* binding */ createMagneticFluxQuantum),
/* harmony export */   "createNuclearMagneton": () => (/* binding */ createNuclearMagneton),
/* harmony export */   "createKlitzing": () => (/* binding */ createKlitzing),
/* harmony export */   "createJosephson": () => (/* binding */ createJosephson),
/* harmony export */   "createBohrRadius": () => (/* binding */ createBohrRadius),
/* harmony export */   "createClassicalElectronRadius": () => (/* binding */ createClassicalElectronRadius),
/* harmony export */   "createElectronMass": () => (/* binding */ createElectronMass),
/* harmony export */   "createFermiCoupling": () => (/* binding */ createFermiCoupling),
/* harmony export */   "createFineStructure": () => (/* binding */ createFineStructure),
/* harmony export */   "createHartreeEnergy": () => (/* binding */ createHartreeEnergy),
/* harmony export */   "createProtonMass": () => (/* binding */ createProtonMass),
/* harmony export */   "createDeuteronMass": () => (/* binding */ createDeuteronMass),
/* harmony export */   "createNeutronMass": () => (/* binding */ createNeutronMass),
/* harmony export */   "createQuantumOfCirculation": () => (/* binding */ createQuantumOfCirculation),
/* harmony export */   "createRydberg": () => (/* binding */ createRydberg),
/* harmony export */   "createThomsonCrossSection": () => (/* binding */ createThomsonCrossSection),
/* harmony export */   "createWeakMixingAngle": () => (/* binding */ createWeakMixingAngle),
/* harmony export */   "createEfimovFactor": () => (/* binding */ createEfimovFactor),
/* harmony export */   "createAtomicMass": () => (/* binding */ createAtomicMass),
/* harmony export */   "createAvogadro": () => (/* binding */ createAvogadro),
/* harmony export */   "createBoltzmann": () => (/* binding */ createBoltzmann),
/* harmony export */   "createFaraday": () => (/* binding */ createFaraday),
/* harmony export */   "createFirstRadiation": () => (/* binding */ createFirstRadiation),
/* harmony export */   "createLoschmidt": () => (/* binding */ createLoschmidt),
/* harmony export */   "createGasConstant": () => (/* binding */ createGasConstant),
/* harmony export */   "createMolarPlanckConstant": () => (/* binding */ createMolarPlanckConstant),
/* harmony export */   "createMolarVolume": () => (/* binding */ createMolarVolume),
/* harmony export */   "createSackurTetrode": () => (/* binding */ createSackurTetrode),
/* harmony export */   "createSecondRadiation": () => (/* binding */ createSecondRadiation),
/* harmony export */   "createStefanBoltzmann": () => (/* binding */ createStefanBoltzmann),
/* harmony export */   "createWienDisplacement": () => (/* binding */ createWienDisplacement),
/* harmony export */   "createMolarMass": () => (/* binding */ createMolarMass),
/* harmony export */   "createMolarMassC12": () => (/* binding */ createMolarMassC12),
/* harmony export */   "createGravity": () => (/* binding */ createGravity),
/* harmony export */   "createPlanckLength": () => (/* binding */ createPlanckLength),
/* harmony export */   "createPlanckMass": () => (/* binding */ createPlanckMass),
/* harmony export */   "createPlanckTime": () => (/* binding */ createPlanckTime),
/* harmony export */   "createPlanckCharge": () => (/* binding */ createPlanckCharge),
/* harmony export */   "createPlanckTemperature": () => (/* binding */ createPlanckTemperature)
/* harmony export */ });
/* harmony import */ var _utils_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/esm/utils/factory.js");
 // Source: https://en.wikipedia.org/wiki/Physical_constant
// Universal constants

var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');
var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');
var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');
var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');
var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');
var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed
// Atomic and nuclear constants

var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');
var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');
var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');
var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');
var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');
var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');
var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');
var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');
var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance

var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');
var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
// Natural units

var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');
var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');
var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');
var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');
var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration

function unitFactory(name, valueStr, unitStr) {
  var dependencies = ['config', 'Unit', 'BigNumber'];
  return (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref) => {
    var {
      config,
      Unit,
      BigNumber
    } = _ref;
    // Note that we can parse into number or BigNumber.
    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
    // Therefore we dont use Unit.parse()
    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
    var unit = new Unit(value, unitStr);
    unit.fixPrefix = true;
    return unit;
  });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration


function numberFactory(name, value) {
  var dependencies = ['config', 'BigNumber'];
  return (0,_utils_factory_js__WEBPACK_IMPORTED_MODULE_0__.factory)(name, dependencies, (_ref2) => {
    var {
      config,
      BigNumber
    } = _ref2;
    return config.number === 'BigNumber' ? new BigNumber(value) : value;
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/array.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/array.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arraySize": () => (/* binding */ arraySize),
/* harmony export */   "validate": () => (/* binding */ validate),
/* harmony export */   "validateIndex": () => (/* binding */ validateIndex),
/* harmony export */   "resize": () => (/* binding */ resize),
/* harmony export */   "reshape": () => (/* binding */ reshape),
/* harmony export */   "processSizesWildcard": () => (/* binding */ processSizesWildcard),
/* harmony export */   "squeeze": () => (/* binding */ squeeze),
/* harmony export */   "unsqueeze": () => (/* binding */ unsqueeze),
/* harmony export */   "flatten": () => (/* binding */ flatten),
/* harmony export */   "map": () => (/* binding */ map),
/* harmony export */   "forEach": () => (/* binding */ forEach),
/* harmony export */   "filter": () => (/* binding */ filter),
/* harmony export */   "filterRegExp": () => (/* binding */ filterRegExp),
/* harmony export */   "join": () => (/* binding */ join),
/* harmony export */   "identify": () => (/* binding */ identify),
/* harmony export */   "generalize": () => (/* binding */ generalize),
/* harmony export */   "getArrayDataType": () => (/* binding */ getArrayDataType),
/* harmony export */   "last": () => (/* binding */ last),
/* harmony export */   "initial": () => (/* binding */ initial),
/* harmony export */   "contains": () => (/* binding */ contains)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ "./node_modules/mathjs/lib/esm/utils/string.js");
/* harmony import */ var _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/DimensionError.js */ "./node_modules/mathjs/lib/esm/error/DimensionError.js");
/* harmony import */ var _error_IndexError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/esm/error/IndexError.js");





/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */

function arraySize(x) {
  var s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */

function _validate(array, size, dim) {
  var i;
  var len = array.length;

  if (len !== size[dim]) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;

    for (i = 0; i < len; i++) {
      var child = array[i];

      if (!Array.isArray(child)) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(size.length - 1, size.length, '<');
      }

      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */


function validate(array, size) {
  var isScalar = size.length === 0;

  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
}
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */

function validateIndex(index, length) {
  if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || !(0,_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }

  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new _error_IndexError_js__WEBPACK_IMPORTED_MODULE_3__.IndexError(index, length);
  }
}
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */

function resize(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }

  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers


  size.forEach(function (value) {
    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(value) || !(0,_number_js__WEBPACK_IMPORTED_MODULE_2__.isInteger)(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.format)(size) + ')');
    }
  }); // recursively resize the array

  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

  _resize(array, size, 0, _defaultValue);

  return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */

function _resize(array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];

      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }

      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays


    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    } // fill new elements with the default value


    for (i = minLen; i < newLen; i++) {
      array[i] = defaultValue;
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


function reshape(array, sizes) {
  var flatArray = flatten(array);
  var currentLength = flatArray.length;

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(0, currentLength, '!=');
  }

  sizes = processSizesWildcard(sizes, currentLength);
  var newLength = product(sizes);

  if (currentLength !== newLength) {
    throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(newLength, currentLength, '!=');
  }

  try {
    return _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError) {
      throw new _error_DimensionError_js__WEBPACK_IMPORTED_MODULE_0__.DimensionError(newLength, currentLength, '!=');
    }

    throw e;
  }
}
/**
 * Replaces the wildcard -1 in the sizes array.
 * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.
 * @param {number} currentLength  Number of elements in the array.
 * @throws {Error}                If more than one wildcard or unable to replace it.
 * @returns {Array.<number>}      The sizes array with wildcard replaced.
 */

function processSizesWildcard(sizes, currentLength) {
  var newLength = product(sizes);
  var processedSizes = sizes.slice();
  var WILDCARD = -1;
  var wildCardIndex = sizes.indexOf(WILDCARD);
  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;

  if (isMoreThanOneWildcard) {
    throw new Error('More than one wildcard in sizes');
  }

  var hasWildcard = wildCardIndex >= 0;
  var canReplaceWildcard = currentLength % newLength === 0;

  if (hasWildcard) {
    if (canReplaceWildcard) {
      processedSizes[wildCardIndex] = -currentLength / newLength;
    } else {
      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
    }
  }

  return processedSizes;
}
/**
 * Computes the product of all array elements.
 * @param {Array<number>} array Array of factors
 * @returns {number}            Product of all elements
 */

function product(array) {
  return array.reduce((prev, curr) => prev * curr, 1);
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */


function _reshape(array, sizes) {
  // testing if there are enough elements for the requested shape
  var tmpArray = array;
  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
    var size = sizes[sizeIndex];
    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

    var length = tmpArray.length / size;

    for (var i = 0; i < length; i++) {
      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
    } // set it as the new tmpArray for the next loop turn or for return


    tmpArray = tmpArray2;
  }

  return tmpArray;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */


function squeeze(array, size) {
  var s = size || arraySize(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed


  var dims = s.length;

  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions


  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _squeeze(array, dims, dim) {
  var i, ii;

  if (dim < dims) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */


function unsqueeze(array, dims, outer, size) {
  var s = size || arraySize(array); // unsqueeze outer dimensions

  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions


  array = _unsqueeze(array, dims, 0);

  while (s.length < dims) {
    s.push(1);
  }

  return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _unsqueeze(array, dims, dim) {
  var i, ii;

  if (Array.isArray(array)) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */


function flatten(array) {
  if (!Array.isArray(array)) {
    // if not an array, return as is
    return array;
  }

  var flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); // traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
}
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */

function map(array, callback) {
  return Array.prototype.map.call(array, callback);
}
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */

function forEach(array, callback) {
  Array.prototype.forEach.call(array, callback);
}
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */

function filter(array, callback) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
}
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */

function filterRegExp(array, regexp) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, entry => regexp.test(entry));
}
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */

function join(array, separator) {
  return Array.prototype.join.call(array, separator);
}
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */

function identify(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];
  var count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };

  for (var i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }

    b.push({
      value: a[i],
      identifier: count
    });
  }

  return b;
}
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */

function generalize(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];

  for (var i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }

  return b;
}
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return string
 */

function getArrayDataType(array, typeOf) {
  var type; // to hold type info

  var length = 0; // to hold length value to ensure it has consistent sizes

  for (var i = 0; i < array.length; i++) {
    var item = array[i];
    var isArray = Array.isArray(item); // Saving the target matrix row size

    if (i === 0 && isArray) {
      length = item.length;
    } // If the current item is an array but the length does not equal the targetVectorSize


    if (isArray && item.length !== length) {
      return undefined;
    }

    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
    : typeOf(item);

    if (type === undefined) {
      type = itemType; // first item
    } else if (type !== itemType) {
      return 'mixed';
    } else {// we're good, everything has the same type so far
    }
  }

  return type;
}
/**
 * Return the last item from an array
 * @param array
 * @returns {*}
 */

function last(array) {
  return array[array.length - 1];
}
/**
 * Get all but the last element of array.
 */

function initial(array) {
  return array.slice(0, array.length - 1);
}
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */

function contains(array, item) {
  return array.indexOf(item) !== -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitAndBigNumber": () => (/* binding */ bitAndBigNumber),
/* harmony export */   "bitNotBigNumber": () => (/* binding */ bitNotBigNumber),
/* harmony export */   "bitOrBigNumber": () => (/* binding */ bitOrBigNumber),
/* harmony export */   "bitwise": () => (/* binding */ bitwise),
/* harmony export */   "bitXor": () => (/* binding */ bitXor),
/* harmony export */   "leftShiftBigNumber": () => (/* binding */ leftShiftBigNumber),
/* harmony export */   "rightArithShiftBigNumber": () => (/* binding */ rightArithShiftBigNumber)
/* harmony export */ });
/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
function bitAndBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitAnd');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }

  if (y.isZero() || x.eq(-1)) {
    return y;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() === y.isNegative()) {
        return x;
      }

      return new BigNumber(0);
    }

    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }

      if (x.isNegative()) {
        return new BigNumber(0);
      }

      return y;
    }

    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }

      if (y.isNegative()) {
        return new BigNumber(0);
      }

      return x;
    }
  }

  return bitwise(x, y, function (a, b) {
    return a & b;
  });
}
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */

function bitNotBigNumber(x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }

  var BigNumber = x.constructor;
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  var result = x.plus(new BigNumber(1));
  result.s = -result.s || null;
  BigNumber.config({
    precision: prevPrec
  });
  return result;
}
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */

function bitOrBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitOr');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  var negOne = new BigNumber(-1);

  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }

  if (y.isZero() || x.eq(negOne)) {
    return x;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
      return negOne;
    }

    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }

    return x.isFinite() ? y : x;
  }

  return bitwise(x, y, function (a, b) {
    return a | b;
  });
}
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */

function bitwise(x, y, func) {
  var BigNumber = x.constructor;
  var xBits, yBits;
  var xSign = +(x.s < 0);
  var ySign = +(y.s < 0);

  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

    for (var i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }

  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

    for (var _i = 0; _i < yBits.length; ++_i) {
      yBits[_i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }

  var minBits, maxBits, minSign;

  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }

  var shortLen = minBits.length;
  var longLen = maxBits.length;
  var expFuncVal = func(xSign, ySign) ^ 1;
  var outVal = new BigNumber(expFuncVal ^ 1);
  var twoPower = new BigNumber(1);
  var two = new BigNumber(2);
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });

  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  BigNumber.config({
    precision: prevPrec
  });

  if (expFuncVal === 0) {
    outVal.s = -outVal.s;
  }

  return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */

function decCoefficientToBinaryString(x) {
  // Convert to string
  var a = x.d; // array with digits

  var r = a[0] + '';

  for (var i = 1; i < a.length; ++i) {
    var s = a[i] + '';

    for (var z = 7 - s.length; z--;) {
      s = '0' + s;
    }

    r += s;
  }

  var j = r.length;

  while (r.charAt(j) === '0') {
    j--;
  }

  var xe = x.e;
  var str = r.slice(0, j + 1 || 1);
  var strL = str.length;

  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      xe -= strL;

      while (xe--) {
        str += '0';
      }
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  } // Convert from base 10 (decimal) to base 2


  var arr = [0];

  for (var _i2 = 0; _i2 < str.length;) {
    var arrL = arr.length;

    while (arrL--) {
      arr[arrL] *= 10;
    }

    arr[0] += parseInt(str.charAt(_i2++)); // convert to int

    for (var _j = 0; _j < arr.length; ++_j) {
      if (arr[_j] > 1) {
        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
          arr[_j + 1] = 0;
        }

        arr[_j + 1] += arr[_j] >> 1;
        arr[_j] &= 1;
      }
    }
  }

  return arr.reverse();
}
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */


function bitXor(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitXor');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero()) {
    return y;
  }

  if (y.isZero()) {
    return x;
  }

  if (x.eq(y)) {
    return new BigNumber(0);
  }

  var negOne = new BigNumber(-1);

  if (x.eq(negOne)) {
    return bitNotBigNumber(y);
  }

  if (y.eq(negOne)) {
    return bitNotBigNumber(x);
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }

    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
  }

  return bitwise(x, y, function (a, b) {
    return a ^ b;
  });
}
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */

function leftShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function leftShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }

  return x.times(new BigNumber(2).pow(y));
}
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */

function rightArithShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function rightArithShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }

    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }

    return new BigNumber(0);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }

  return x.div(new BigNumber(2).pow(y)).floor();
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/bignumber/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/bignumber/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBigNumberE": () => (/* binding */ createBigNumberE),
/* harmony export */   "createBigNumberPhi": () => (/* binding */ createBigNumberPhi),
/* harmony export */   "createBigNumberPi": () => (/* binding */ createBigNumberPi),
/* harmony export */   "createBigNumberTau": () => (/* binding */ createBigNumberTau)
/* harmony export */ });
/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../function.js */ "./node_modules/mathjs/lib/esm/utils/function.js");

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */

var createBigNumberE = (0,_function_js__WEBPACK_IMPORTED_MODULE_0__.memoize)(function (BigNumber) {
  return new BigNumber(1).exp();
}, {
  hasher
});
/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */

var createBigNumberPhi = (0,_function_js__WEBPACK_IMPORTED_MODULE_0__.memoize)(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, {
  hasher
});
/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */

var createBigNumberPi = (0,_function_js__WEBPACK_IMPORTED_MODULE_0__.memoize)(function (BigNumber) {
  return BigNumber.acos(-1);
}, {
  hasher
});
/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */

var createBigNumberTau = (0,_function_js__WEBPACK_IMPORTED_MODULE_0__.memoize)(function (BigNumber) {
  return createBigNumberPi(BigNumber).times(2);
}, {
  hasher
});
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */

function hasher(args) {
  return args[0].precision;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/bignumber/formatter.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/bignumber/formatter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "toEngineering": () => (/* binding */ toEngineering),
/* harmony export */   "toExponential": () => (/* binding */ toExponential),
/* harmony export */   "toFixed": () => (/* binding */ toFixed)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

/**
 * Formats a BigNumber in a given base
 * @param {BigNumber} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */

function formatBigNumberToBase(n, base, size) {
  var BigNumberCtor = n.constructor;
  var big2 = new BigNumberCtor(2);
  var suffix = '';

  if (size) {
    if (size < 1) {
      throw new Error('size must be in greater than 0');
    }

    if (!(0,_number_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(size)) {
      throw new Error('size must be an integer');
    }

    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {
      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
    }

    if (!n.isInteger()) {
      throw new Error('Value must be an integer');
    }

    if (n.lessThan(0)) {
      n = n.add(big2.pow(size));
    }

    suffix = "i".concat(size);
  }

  switch (base) {
    case 2:
      return "".concat(n.toBinary()).concat(suffix);

    case 8:
      return "".concat(n.toOctal()).concat(suffix);

    case 16:
      return "".concat(n.toHexadecimal()).concat(suffix);

    default:
      throw new Error("Base ".concat(base, " not supported "));
  }
}
/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options


  var notation = 'auto';
  var precision;
  var wordSize;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }

    if (options.wordSize) {
      wordSize = options.wordSize;

      if (typeof wordSize !== 'number') {
        throw new Error('Option "wordSize" must be a number');
      }
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'bin':
      return formatBigNumberToBase(value, 2, wordSize);

    case 'oct':
      return formatBigNumberToBase(value, 8, wordSize);

    case 'hex':
      return formatBigNumberToBase(value, 16, wordSize);

    case 'auto':
      {
        // determine lower and upper bound for exponential notation.
        // TODO: implement support for upper and lower to be BigNumbers themselves
        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

        if (value.isZero()) return '0'; // determine whether or not to output exponential notation

        var str;
        var rounded = value.toSignificantDigits(precision);
        var exp = rounded.e;

        if (exp >= lowerExp && exp < upperExp) {
          // normal number notation
          str = rounded.toFixed();
        } else {
          // exponential notation
          str = toExponential(value, precision);
        } // remove trailing zeros after the decimal point


        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
          var digits = arguments[2];
          var e = arguments[4];
          return digits !== '.' ? digits + e : e;
        });
      }

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering(value, precision) {
  // find nearest lower multiple of 3 for exponent
  var e = value.e;
  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
  var valueStr = valueWithoutExp.toPrecision(precision);

  if (valueStr.indexOf('e') !== -1) {
    valueStr = valueWithoutExp.toString();
  }

  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */

function toExponential(value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
}
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */

function toFixed(value, precision) {
  return value.toFixed(precision);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nearlyEqual": () => (/* binding */ nearlyEqual)
/* harmony export */ });
/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x.eq(y);
  } // use "==" operator, handles infinities


  if (x.eq(y)) {
    return true;
  } // NaN


  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite


  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();

    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/collection.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/collection.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "containsCollections": () => (/* binding */ containsCollections),
/* harmony export */   "deepForEach": () => (/* binding */ deepForEach),
/* harmony export */   "deepMap": () => (/* binding */ deepMap),
/* harmony export */   "reduce": () => (/* binding */ reduce),
/* harmony export */   "scatter": () => (/* binding */ scatter)
/* harmony export */ });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/esm/error/IndexError.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");



/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */

function containsCollections(array) {
  for (var i = 0; i < array.length; i++) {
    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isCollection)(array[i])) {
      return true;
    }
  }

  return false;
}
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */

function deepForEach(array, callback) {
  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isMatrix)(array)) {
    array = array.valueOf();
  }

  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
}
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */

function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  } else {
    return callback(array);
  }
}
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */

function reduce(mat, dim, callback) {
  var size = Array.isArray(mat) ? (0,_array_js__WEBPACK_IMPORTED_MODULE_1__.arraySize)(mat) : mat.size();

  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new _error_IndexError_js__WEBPACK_IMPORTED_MODULE_2__.IndexError(dim, size.length);
  }

  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isMatrix)(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _reduce(mat, dim, callback) {
  var i, ret, val, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];

      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }

      return val;
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
} // TODO: document function scatter


function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr; // vars

  var k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/complex.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/complex.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexEquals": () => (/* binding */ complexEquals)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");

/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */

function complexEquals(x, y, epsilon) {
  return (0,_number_js__WEBPACK_IMPORTED_MODULE_0__.nearlyEqual)(x.re, y.re, epsilon) && (0,_number_js__WEBPACK_IMPORTED_MODULE_0__.nearlyEqual)(x.im, y.im, epsilon);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/customs.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/customs.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSafeProperty": () => (/* binding */ getSafeProperty),
/* harmony export */   "setSafeProperty": () => (/* binding */ setSafeProperty),
/* harmony export */   "isSafeProperty": () => (/* binding */ isSafeProperty),
/* harmony export */   "validateSafeMethod": () => (/* binding */ validateSafeMethod),
/* harmony export */   "isSafeMethod": () => (/* binding */ isSafeMethod),
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject)
/* harmony export */ });
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");

/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */

function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?


function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    object[prop] = value;
    return value;
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */


function isSafeProperty(object, prop) {
  if (!object || typeof object !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length


  if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?


function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */


function isSafeMethod(object, method) {
  if (object === null || object === undefined || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.


  if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
    return false;
  } // SAFE: whitelisted
  // e.g toString


  if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}

function isPlainObject(object) {
  return typeof object === 'object' && object && object.constructor === Object;
}

var safeNativeProperties = {
  length: true,
  name: true
};
var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};







/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/factory.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/factory.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factory": () => (/* binding */ factory),
/* harmony export */   "sortFactories": () => (/* binding */ sortFactories),
/* harmony export */   "create": () => (/* binding */ create),
/* harmony export */   "isFactory": () => (/* binding */ isFactory),
/* harmony export */   "assertDependencies": () => (/* binding */ assertDependencies),
/* harmony export */   "isOptionalDependency": () => (/* binding */ isOptionalDependency),
/* harmony export */   "stripOptionalNotation": () => (/* binding */ stripOptionalNotation)
/* harmony export */ });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/mathjs/lib/esm/utils/array.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");


/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */

function factory(name, dependencies, create, meta) {
  function assertAndCreate(scope) {
    // we only pass the requested dependencies to the factory function
    // to prevent functions to rely on dependencies that are not explicitly
    // requested.
    var deps = (0,_object_js__WEBPACK_IMPORTED_MODULE_0__.pickShallow)(scope, dependencies.map(stripOptionalNotation));
    assertDependencies(name, dependencies, scope);
    return create(deps);
  }

  assertAndCreate.isFactory = true;
  assertAndCreate.fn = name;
  assertAndCreate.dependencies = dependencies.slice().sort();

  if (meta) {
    assertAndCreate.meta = meta;
  }

  return assertAndCreate;
}
/**
 * Sort all factories such that when loading in order, the dependencies are resolved.
 *
 * @param {Array} factories
 * @returns {Array} Returns a new array with the sorted factories.
 */

function sortFactories(factories) {
  var factoriesByName = {};
  factories.forEach(factory => {
    factoriesByName[factory.fn] = factory;
  });

  function containsDependency(factory, dependency) {
    // TODO: detect circular references
    if (isFactory(factory)) {
      if ((0,_array_js__WEBPACK_IMPORTED_MODULE_1__.contains)(factory.dependencies, dependency.fn || dependency.name)) {
        return true;
      }

      if (factory.dependencies.some(d => containsDependency(factoriesByName[d], dependency))) {
        return true;
      }
    }

    return false;
  }

  var sorted = [];

  function addFactory(factory) {
    var index = 0;

    while (index < sorted.length && !containsDependency(sorted[index], factory)) {
      index++;
    }

    sorted.splice(index, 0, factory);
  } // sort regular factory functions


  factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions

  factories.filter(factory => !isFactory(factory)).forEach(addFactory);
  return sorted;
} // TODO: comment or cleanup if unused in the end

function create(factories) {
  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  sortFactories(factories).forEach(factory => factory(scope));
  return scope;
}
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */

function isFactory(obj) {
  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */

function assertDependencies(name, dependencies, scope) {
  var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals
  .every(dependency => scope[dependency] !== undefined);

  if (!allDefined) {
    var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined); // TODO: create a custom error class for this, a MathjsError or something like that

    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(d => "\"".concat(d, "\"")).join(', '), "."));
  }
}
function isOptionalDependency(dependency) {
  return dependency && dependency[0] === '?';
}
function stripOptionalNotation(dependency) {
  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/function.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/function.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "memoize": () => (/* binding */ memoize),
/* harmony export */   "memoizeCompare": () => (/* binding */ memoizeCompare),
/* harmony export */   "maxArgumentCount": () => (/* binding */ maxArgumentCount)
/* harmony export */ });
/* harmony import */ var _lruQueue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lruQueue.js */ "./node_modules/mathjs/lib/esm/utils/lruQueue.js");
// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {Object} [options]
 * @param {function(args: Array): string} [options.hasher]
 *    A custom hash builder. Is JSON.stringify by default.
 * @param {number | undefined} [options.limit]
 *    Maximum number of values that may be cached. Undefined indicates
 *    unlimited (default)
 * @return {function}                       Returns the memoized function
 */

function memoize(fn) {
  var {
    hasher,
    limit
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  limit = limit == null ? Number.POSITIVE_INFINITY : limit;
  hasher = hasher == null ? JSON.stringify : hasher;
  return function memoize() {
    if (typeof memoize.cache !== 'object') {
      memoize.cache = {
        values: new Map(),
        lru: (0,_lruQueue_js__WEBPACK_IMPORTED_MODULE_0__.lruQueue)(limit || Number.POSITIVE_INFINITY)
      };
    }

    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    var hash = hasher(args);

    if (memoize.cache.values.has(hash)) {
      memoize.cache.lru.hit(hash);
      return memoize.cache.values.get(hash);
    }

    var newVal = fn.apply(fn, args);
    memoize.cache.values.set(hash, newVal);
    memoize.cache.values.delete(memoize.cache.lru.hit(hash));
    return newVal;
  };
}
/**
 * Memoize a given function by caching all results and the arguments,
 * and comparing against the arguments of previous results before
 * executing again.
 * This is less performant than `memoize` which calculates a hash,
 * which is very fast to compare. Use `memoizeCompare` only when it is
 * not possible to create a unique serializable hash from the function
 * arguments.
 * The isEqual function must compare two sets of arguments
 * and return true when equal (can be a deep equality check for example).
 * @param {function} fn
 * @param {function(a: *, b: *) : boolean} isEqual
 * @returns {function}
 */

function memoizeCompare(fn, isEqual) {
  var memoize = function memoize() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    for (var c = 0; c < memoize.cache.length; c++) {
      var cached = memoize.cache[c];

      if (isEqual(args, cached.args)) {
        // TODO: move this cache entry to the top so recently used entries move up?
        return cached.res;
      }
    }

    var res = fn.apply(fn, args);
    memoize.cache.unshift({
      args,
      res
    });
    return res;
  };

  memoize.cache = [];
  return memoize;
}
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */

function maxArgumentCount(fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/is.js":
/*!*************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/is.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "isBigNumber": () => (/* binding */ isBigNumber),
/* harmony export */   "isComplex": () => (/* binding */ isComplex),
/* harmony export */   "isFraction": () => (/* binding */ isFraction),
/* harmony export */   "isUnit": () => (/* binding */ isUnit),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isArray": () => (/* binding */ isArray),
/* harmony export */   "isMatrix": () => (/* binding */ isMatrix),
/* harmony export */   "isCollection": () => (/* binding */ isCollection),
/* harmony export */   "isDenseMatrix": () => (/* binding */ isDenseMatrix),
/* harmony export */   "isSparseMatrix": () => (/* binding */ isSparseMatrix),
/* harmony export */   "isRange": () => (/* binding */ isRange),
/* harmony export */   "isIndex": () => (/* binding */ isIndex),
/* harmony export */   "isBoolean": () => (/* binding */ isBoolean),
/* harmony export */   "isResultSet": () => (/* binding */ isResultSet),
/* harmony export */   "isHelp": () => (/* binding */ isHelp),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "isDate": () => (/* binding */ isDate),
/* harmony export */   "isRegExp": () => (/* binding */ isRegExp),
/* harmony export */   "isObject": () => (/* binding */ isObject),
/* harmony export */   "isNull": () => (/* binding */ isNull),
/* harmony export */   "isUndefined": () => (/* binding */ isUndefined),
/* harmony export */   "isAccessorNode": () => (/* binding */ isAccessorNode),
/* harmony export */   "isArrayNode": () => (/* binding */ isArrayNode),
/* harmony export */   "isAssignmentNode": () => (/* binding */ isAssignmentNode),
/* harmony export */   "isBlockNode": () => (/* binding */ isBlockNode),
/* harmony export */   "isConditionalNode": () => (/* binding */ isConditionalNode),
/* harmony export */   "isConstantNode": () => (/* binding */ isConstantNode),
/* harmony export */   "isFunctionAssignmentNode": () => (/* binding */ isFunctionAssignmentNode),
/* harmony export */   "isFunctionNode": () => (/* binding */ isFunctionNode),
/* harmony export */   "isIndexNode": () => (/* binding */ isIndexNode),
/* harmony export */   "isNode": () => (/* binding */ isNode),
/* harmony export */   "isObjectNode": () => (/* binding */ isObjectNode),
/* harmony export */   "isOperatorNode": () => (/* binding */ isOperatorNode),
/* harmony export */   "isParenthesisNode": () => (/* binding */ isParenthesisNode),
/* harmony export */   "isRangeNode": () => (/* binding */ isRangeNode),
/* harmony export */   "isSymbolNode": () => (/* binding */ isSymbolNode),
/* harmony export */   "isChain": () => (/* binding */ isChain),
/* harmony export */   "typeOf": () => (/* binding */ typeOf)
/* harmony export */ });
// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
function isNumber(x) {
  return typeof x === 'number';
}
function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber === true || false;
}
function isComplex(x) {
  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}
function isFraction(x) {
  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}
function isUnit(x) {
  return x && x.constructor.prototype.isUnit === true || false;
}
function isString(x) {
  return typeof x === 'string';
}
var isArray = Array.isArray;
function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix === true || false;
}
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */

function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
}
function isDenseMatrix(x) {
  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isSparseMatrix(x) {
  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isRange(x) {
  return x && x.constructor.prototype.isRange === true || false;
}
function isIndex(x) {
  return x && x.constructor.prototype.isIndex === true || false;
}
function isBoolean(x) {
  return typeof x === 'boolean';
}
function isResultSet(x) {
  return x && x.constructor.prototype.isResultSet === true || false;
}
function isHelp(x) {
  return x && x.constructor.prototype.isHelp === true || false;
}
function isFunction(x) {
  return typeof x === 'function';
}
function isDate(x) {
  return x instanceof Date;
}
function isRegExp(x) {
  return x instanceof RegExp;
}
function isObject(x) {
  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}
function isNull(x) {
  return x === null;
}
function isUndefined(x) {
  return x === undefined;
}
function isAccessorNode(x) {
  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}
function isArrayNode(x) {
  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}
function isAssignmentNode(x) {
  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isBlockNode(x) {
  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}
function isConditionalNode(x) {
  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}
function isConstantNode(x) {
  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionAssignmentNode(x) {
  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionNode(x) {
  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}
function isIndexNode(x) {
  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}
function isNode(x) {
  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}
function isObjectNode(x) {
  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}
function isOperatorNode(x) {
  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}
function isParenthesisNode(x) {
  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}
function isRangeNode(x) {
  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}
function isSymbolNode(x) {
  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}
function isChain(x) {
  return x && x.constructor.prototype.isChain === true || false;
}
function typeOf(x) {
  var t = typeof x;

  if (t === 'object') {
    // JavaScript types
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp'; // math.js types

    if (isBigNumber(x)) return 'BigNumber';
    if (isComplex(x)) return 'Complex';
    if (isFraction(x)) return 'Fraction';
    if (isMatrix(x)) return 'Matrix';
    if (isUnit(x)) return 'Unit';
    if (isIndex(x)) return 'Index';
    if (isRange(x)) return 'Range';
    if (isResultSet(x)) return 'ResultSet';
    if (isNode(x)) return x.type;
    if (isChain(x)) return 'Chain';
    if (isHelp(x)) return 'Help';
    return 'Object';
  }

  if (t === 'function') return 'Function';
  return t; // can be 'string', 'number', 'boolean', ...
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/latex.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/latex.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "latexSymbols": () => (/* binding */ latexSymbols),
/* harmony export */   "latexOperators": () => (/* binding */ latexOperators),
/* harmony export */   "latexFunctions": () => (/* binding */ latexFunctions),
/* harmony export */   "defaultTemplate": () => (/* binding */ defaultTemplate),
/* harmony export */   "escapeLatex": () => (/* binding */ escapeLatex),
/* harmony export */   "toSymbol": () => (/* binding */ toSymbol)
/* harmony export */ });
/* harmony import */ var escape_latex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! escape-latex */ "./node_modules/escape-latex/dist/index.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/esm/utils/object.js");
/* eslint no-template-curly-in-string: "off" */


var latexSymbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: '\\Upsilon',
  upsilon: '\\upsilon',
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  // logic
  true: '\\mathrm{True}',
  false: '\\mathrm{False}',
  // other
  i: 'i',
  // TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  undefined: '\\mathbf{?}'
};
var latexOperators = {
  transpose: '^\\top',
  ctranspose: '^H',
  factorial: '!',
  pow: '^',
  dotPow: '.^\\wedge',
  // TODO find ideal solution
  unaryPlus: '+',
  unaryMinus: '-',
  bitNot: '\\~',
  // TODO find ideal solution
  not: '\\neg',
  multiply: '\\cdot',
  divide: '\\frac',
  // TODO how to handle that properly?
  dotMultiply: '.\\cdot',
  // TODO find ideal solution
  dotDivide: '.:',
  // TODO find ideal solution
  mod: '\\mod',
  add: '+',
  subtract: '-',
  to: '\\rightarrow',
  leftShift: '<<',
  rightArithShift: '>>',
  rightLogShift: '>>>',
  equal: '=',
  unequal: '\\neq',
  smaller: '<',
  larger: '>',
  smallerEq: '\\leq',
  largerEq: '\\geq',
  bitAnd: '\\&',
  bitXor: '\\underline{|}',
  bitOr: '|',
  and: '\\wedge',
  xor: '\\veebar',
  or: '\\vee'
};
var latexFunctions = {
  // arithmetic
  abs: {
    1: '\\left|${args[0]}\\right|'
  },
  add: {
    2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: '\\sqrt[3]{${args[0]}}'
  },
  ceil: {
    1: '\\left\\lceil${args[0]}\\right\\rceil'
  },
  cube: {
    1: '\\left(${args[0]}\\right)^3'
  },
  divide: {
    2: '\\frac{${args[0]}}{${args[1]}}'
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  floor: {
    1: '\\left\\lfloor${args[0]}\\right\\rfloor'
  },
  gcd: '\\gcd\\left(${args}\\right)',
  hypot: '\\hypot\\left(${args}\\right)',
  log: {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  },
  log10: {
    1: '\\log_{10}\\left(${args[0]}\\right)'
  },
  log1p: {
    1: '\\ln\\left(${args[0]}+1\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
  },
  log2: '\\log_{2}\\left(${args[0]}\\right)',
  mod: {
    2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined // use default template

  },
  nthRoot: {
    2: '\\sqrt[${args[1]}]{${args[0]}}'
  },
  nthRoots: {
    2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
  },
  round: {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined // use default template

  },
  sign: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  sqrt: {
    1: '\\sqrt{${args[0]}}'
  },
  square: {
    1: '\\left(${args[0]}\\right)^2'
  },
  subtract: {
    2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: '\\mathrm{B}_{${args[0]}}'
  },
  catalan: {
    1: '\\mathrm{C}_{${args[0]}}'
  },
  stirlingS2: {
    2: '\\mathrm{S}\\left(${args}\\right)'
  },
  // complex
  arg: {
    1: '\\arg\\left(${args[0]}\\right)'
  },
  conj: {
    1: '\\left(${args[0]}\\right)^*'
  },
  im: {
    1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  re: {
    1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
  },
  not: {
    1: latexOperators.not + '\\left(${args[0]}\\right)'
  },
  or: {
    2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
  },
  det: {
    1: '\\det\\left(${args[0]}\\right)'
  },
  dot: {
    2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
  },
  expm: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  inv: {
    1: '\\left(${args[0]}\\right)^{-1}'
  },
  sqrtm: {
    1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: '\\mathrm{tr}\\left(${args[0]}\\right)'
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
  },
  // probability
  combinations: {
    2: '\\binom{${args[0]}}{${args[1]}}'
  },
  combinationsWithRep: {
    2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
  },
  gamma: {
    1: '\\Gamma\\left(${args[0]}\\right)'
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: 'erf\\left(${args[0]}\\right)'
  },
  // statistics
  max: '\\max\\left(${args}\\right)',
  min: '\\min\\left(${args}\\right)',
  variance: '\\mathrm{Var}\\left(${args}\\right)',
  // trigonometry
  acos: {
    1: '\\cos^{-1}\\left(${args[0]}\\right)'
  },
  acosh: {
    1: '\\cosh^{-1}\\left(${args[0]}\\right)'
  },
  acot: {
    1: '\\cot^{-1}\\left(${args[0]}\\right)'
  },
  acoth: {
    1: '\\coth^{-1}\\left(${args[0]}\\right)'
  },
  acsc: {
    1: '\\csc^{-1}\\left(${args[0]}\\right)'
  },
  acsch: {
    1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
  },
  asec: {
    1: '\\sec^{-1}\\left(${args[0]}\\right)'
  },
  asech: {
    1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
  },
  asin: {
    1: '\\sin^{-1}\\left(${args[0]}\\right)'
  },
  asinh: {
    1: '\\sinh^{-1}\\left(${args[0]}\\right)'
  },
  atan: {
    1: '\\tan^{-1}\\left(${args[0]}\\right)'
  },
  atan2: {
    2: '\\mathrm{atan2}\\left(${args}\\right)'
  },
  atanh: {
    1: '\\tanh^{-1}\\left(${args[0]}\\right)'
  },
  cos: {
    1: '\\cos\\left(${args[0]}\\right)'
  },
  cosh: {
    1: '\\cosh\\left(${args[0]}\\right)'
  },
  cot: {
    1: '\\cot\\left(${args[0]}\\right)'
  },
  coth: {
    1: '\\coth\\left(${args[0]}\\right)'
  },
  csc: {
    1: '\\csc\\left(${args[0]}\\right)'
  },
  csch: {
    1: '\\mathrm{csch}\\left(${args[0]}\\right)'
  },
  sec: {
    1: '\\sec\\left(${args[0]}\\right)'
  },
  sech: {
    1: '\\mathrm{sech}\\left(${args[0]}\\right)'
  },
  sin: {
    1: '\\sin\\left(${args[0]}\\right)'
  },
  sinh: {
    1: '\\sinh\\left(${args[0]}\\right)'
  },
  tan: {
    1: '\\tan\\left(${args[0]}\\right)'
  },
  tanh: {
    1: '\\tanh\\left(${args[0]}\\right)'
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function numeric(node, options) {
    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
    return node.args[0].toTex();
  },
  // type
  number: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  },
  string: {
    0: '\\mathtt{""}',
    1: '\\mathrm{string}\\left(${args[0]}\\right)'
  },
  bignumber: {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  },
  complex: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  },
  sparse: {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  },
  unit: {
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  }
};
var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
var latexUnits = {
  deg: '^\\circ'
};
function escapeLatex(string) {
  return escape_latex__WEBPACK_IMPORTED_MODULE_0__(string, {
    preserveFormatting: true
  });
} // @param {string} name
// @param {boolean} isUnit

function toSymbol(name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

  if (isUnit) {
    if ((0,_object_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty)(latexUnits, name)) {
      return latexUnits[name];
    }

    return '\\mathrm{' + escapeLatex(name) + '}';
  }

  if ((0,_object_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty)(latexSymbols, name)) {
    return latexSymbols[name];
  }

  return escapeLatex(name);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/lruQueue.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/lruQueue.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lruQueue": () => (/* binding */ lruQueue)
/* harmony export */ });
// (c) 2018, Mariusz Nowak
// SPDX-License-Identifier: ISC
// Derived from https://github.com/medikoo/lru-queue
function lruQueue(limit) {
  var size = 0;
  var base = 1;
  var queue = Object.create(null);
  var map = Object.create(null);
  var index = 0;

  var del = function del(id) {
    var oldIndex = map[id];
    if (!oldIndex) return;
    delete queue[oldIndex];
    delete map[id];
    --size;
    if (base !== oldIndex) return;

    if (!size) {
      index = 0;
      base = 1;
      return;
    }

    while (!hasOwnProperty.call(queue, ++base)) {
      continue;
    }
  };

  limit = Math.abs(limit);
  return {
    hit: function hit(id) {
      var oldIndex = map[id];
      var nuIndex = ++index;
      queue[nuIndex] = id;
      map[id] = nuIndex;

      if (!oldIndex) {
        ++size;
        if (size <= limit) return undefined;
        id = queue[base];
        del(id);
        return id;
      }

      delete queue[oldIndex];
      if (base !== oldIndex) return undefined;

      while (!hasOwnProperty.call(queue, ++base)) {
        continue;
      }

      return undefined;
    },
    delete: del,
    clear: function clear() {
      size = index = 0;
      base = 1;
      queue = Object.create(null);
      map = Object.create(null);
    }
  };
}
;

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/noop.js":
/*!***************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/noop.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "noBignumber": () => (/* binding */ noBignumber),
/* harmony export */   "noFraction": () => (/* binding */ noFraction),
/* harmony export */   "noMatrix": () => (/* binding */ noMatrix),
/* harmony export */   "noIndex": () => (/* binding */ noIndex),
/* harmony export */   "noSubset": () => (/* binding */ noSubset)
/* harmony export */ });
function noBignumber() {
  throw new Error('No "bignumber" implementation available');
}
function noFraction() {
  throw new Error('No "fraction" implementation available');
}
function noMatrix() {
  throw new Error('No "matrix" implementation available');
}
function noIndex() {
  throw new Error('No "index" implementation available');
}
function noSubset() {
  throw new Error('No "matrix" implementation available');
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/number.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/number.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "log2": () => (/* binding */ log2),
/* harmony export */   "log10": () => (/* binding */ log10),
/* harmony export */   "log1p": () => (/* binding */ log1p),
/* harmony export */   "cbrt": () => (/* binding */ cbrt),
/* harmony export */   "expm1": () => (/* binding */ expm1),
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "splitNumber": () => (/* binding */ splitNumber),
/* harmony export */   "toEngineering": () => (/* binding */ toEngineering),
/* harmony export */   "toFixed": () => (/* binding */ toFixed),
/* harmony export */   "toExponential": () => (/* binding */ toExponential),
/* harmony export */   "toPrecision": () => (/* binding */ toPrecision),
/* harmony export */   "roundDigits": () => (/* binding */ roundDigits),
/* harmony export */   "digits": () => (/* binding */ digits),
/* harmony export */   "DBL_EPSILON": () => (/* binding */ DBL_EPSILON),
/* harmony export */   "nearlyEqual": () => (/* binding */ nearlyEqual),
/* harmony export */   "acosh": () => (/* binding */ acosh),
/* harmony export */   "asinh": () => (/* binding */ asinh),
/* harmony export */   "atanh": () => (/* binding */ atanh),
/* harmony export */   "cosh": () => (/* binding */ cosh),
/* harmony export */   "sinh": () => (/* binding */ sinh),
/* harmony export */   "tanh": () => (/* binding */ tanh)
/* harmony export */ });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");

/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */

function isInteger(value) {
  if (typeof value === 'boolean') {
    return true;
  }

  return isFinite(value) ? value === Math.round(value) : false;
}
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {number}
 */

var sign = /* #__PURE__ */Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Calculate the base-2 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log2 = /* #__PURE__ */Math.log2 || function log2(x) {
  return Math.log(x) / Math.LN2;
};
/**
 * Calculate the base-10 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log10 = /* #__PURE__ */Math.log10 || function log10(x) {
  return Math.log(x) / Math.LN10;
};
/**
 * Calculate the natural logarithm of a number + 1
 * @param {number} x
 * @returns {number}
 */

var log1p = /* #__PURE__ */Math.log1p || function (x) {
  return Math.log(x + 1);
};
/**
 * Calculate cubic root for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number} Returns the cubic root of x
 */

var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {
  if (x === 0) {
    return x;
  }

  var negate = x < 0;
  var result;

  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};
/**
 * Calculates exponentiation minus 1
 * @param {number} x
 * @return {number} res
 */

var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {
  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Formats a number in a given base
 * @param {number} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */

function formatNumberToBase(n, base, size) {
  var prefixes = {
    2: '0b',
    8: '0o',
    16: '0x'
  };
  var prefix = prefixes[base];
  var suffix = '';

  if (size) {
    if (size < 1) {
      throw new Error('size must be in greater than 0');
    }

    if (!isInteger(size)) {
      throw new Error('size must be an integer');
    }

    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {
      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
    }

    if (!isInteger(n)) {
      throw new Error('Value must be an integer');
    }

    if (n < 0) {
      n = n + 2 ** size;
    }

    suffix = "i".concat(size);
  }

  var sign = '';

  if (n < 0) {
    n = -n;
    sign = '-';
  }

  return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
}
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options


  var notation = 'auto';
  var precision;
  var wordSize;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(options)) {
      precision = options;
    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(options.precision)) {
      precision = options.precision;
    }

    if (options.wordSize) {
      wordSize = options.wordSize;

      if (typeof wordSize !== 'number') {
        throw new Error('Option "wordSize" must be a number');
      }
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'bin':
      return formatNumberToBase(value, 2, wordSize);

    case 'oct':
      return formatNumberToBase(value, 8, wordSize);

    case 'hex':
      return formatNumberToBase(value, 16, wordSize);

    case 'auto':
      // remove trailing zeros after the decimal point
      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */

function splitNumber(value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  var sign = match[1];
  var digits = match[2];
  var exponent = parseFloat(match[4] || '0');
  var dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
}
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var split = splitNumber(value);
  var rounded = roundDigits(split, precision);
  var e = rounded.exponent;
  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(precision)) {
    // add zeroes to give correct sig figs
    while (precision > c.length || e - newExp + 1 > c.length) {
      c.push(0);
    }
  } else {
    // concatenate coefficients with necessary zeros
    // add zeros if necessary (for example: 1e+8 -> 100e+6)
    var missingZeros = Math.abs(e - newExp) - (c.length - 1);

    for (var i = 0; i < missingZeros; i++) {
      c.push(0);
    }
  } // find difference in exponents


  var expDiff = Math.abs(e - newExp);
  var decimalIdx = 1; // push decimal index over by expDiff times

  while (expDiff > 0) {
    decimalIdx++;
    expDiff--;
  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
  // otherwise concat with the rest of the coefficients


  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = (0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
}
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */

function toFixed(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var splitValue = splitNumber(value);
  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  var pp = p + (precision || 0);

  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  } // prepend zeros if needed


  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed


  if (p < c.length) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }

  return rounded.sign + c.join('');
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */

function toExponential(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone


  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */

function toPrecision(value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.


  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;

  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
    // exponential notation
    return toExponential(value, precision);
  } else {
    var c = rounded.coefficients;
    var e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement


    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros(-e).concat(c);
    var dot = e > 0 ? e : 0;

    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */

function roundDigits(split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  var c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;

      while (c[i] === 10) {
        c.pop();

        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }

        i--;
        c[i]++;
      }
    }
  }

  return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */

function zeros(length) {
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(0);
  }

  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */


function digits(value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
}
/**
 * Minimum number added to one that makes the result different than one
 */

var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x === y;
  }

  if (x === y) {
    return true;
  } // NaN


  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite


  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);

    if (diff < DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 */

var acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};
var asinh = Math.asinh || function (x) {
  return Math.log(Math.sqrt(x * x + 1) + x);
};
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 */

var atanh = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 */

var cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 */

var sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 */

var tanh = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/object.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/object.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clone": () => (/* binding */ clone),
/* harmony export */   "mapObject": () => (/* binding */ mapObject),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "deepExtend": () => (/* binding */ deepExtend),
/* harmony export */   "deepStrictEqual": () => (/* binding */ deepStrictEqual),
/* harmony export */   "deepFlatten": () => (/* binding */ deepFlatten),
/* harmony export */   "canDefineProperty": () => (/* binding */ canDefineProperty),
/* harmony export */   "lazy": () => (/* binding */ lazy),
/* harmony export */   "traverse": () => (/* binding */ traverse),
/* harmony export */   "hasOwnProperty": () => (/* binding */ hasOwnProperty),
/* harmony export */   "isLegacyFactory": () => (/* binding */ isLegacyFactory),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "pick": () => (/* binding */ pick),
/* harmony export */   "pickShallow": () => (/* binding */ pickShallow),
/* harmony export */   "values": () => (/* binding */ values)
/* harmony export */ });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");

/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */

function clone(x) {
  var type = typeof x; // immutable primitive types

  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available


  if (typeof x.clone === 'function') {
    return x.clone();
  } // array


  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Date) return new Date(x.valueOf());
  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isBigNumber)(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return mapObject(x, clone);
}
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */

function mapObject(object, callback) {
  var clone = {};

  for (var key in object) {
    if (hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
}
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */

function extend(a, b) {
  for (var prop in b) {
    if (hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
}
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */

function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (var prop in b) {
    // We check against prop not being in Object.prototype or Function.prototype
    // to prevent polluting for example Object.__proto__.
    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop] && a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }

  return a;
}
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */

function deepStrictEqual(a, b) {
  var prop, i, len;

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!deepStrictEqual(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else if (typeof a === 'function') {
    return a === b;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    for (prop in b) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    return true;
  } else {
    return a === b;
  }
}
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */

function deepFlatten(nestedObject) {
  var flattenedObject = {};

  _deepFlatten(nestedObject, flattenedObject);

  return flattenedObject;
} // helper function used by deepFlatten

function _deepFlatten(nestedObject, flattenedObject) {
  for (var prop in nestedObject) {
    if (hasOwnProperty(nestedObject, prop)) {
      var value = nestedObject[prop];

      if (typeof value === 'object' && value !== null) {
        _deepFlatten(value, flattenedObject);
      } else {
        flattenedObject[prop] = value;
      }
    }
  }
}
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */


function canDefineProperty() {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', {
        get: function get() {}
      });
      return true;
    }
  } catch (e) {}

  return false;
}
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */

function lazy(object, prop, valueResolver) {
  var _uninitialized = true;

  var _value;

  Object.defineProperty(object, prop, {
    get: function get() {
      if (_uninitialized) {
        _value = valueResolver();
        _uninitialized = false;
      }

      return _value;
    },
    set: function set(value) {
      _value = value;
      _uninitialized = false;
    },
    configurable: true,
    enumerable: true
  });
}
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string | string[]} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */

function traverse(object, path) {
  if (path && typeof path === 'string') {
    return traverse(object, path.split('.'));
  }

  var obj = object;

  if (path) {
    for (var i = 0; i < path.length; i++) {
      var key = path[i];

      if (!(key in obj)) {
        obj[key] = {};
      }

      obj = obj[key];
    }
  }

  return obj;
}
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */

function hasOwnProperty(object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */

function isLegacyFactory(object) {
  return object && typeof object.factory === 'function';
}
/**
 * Get a nested property from an object
 * @param {Object} object
 * @param {string | string[]} path
 * @returns {Object}
 */

function get(object, path) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return get(object, path.split('.'));
    } else {
      return object[path];
    }
  }

  var child = object;

  for (var i = 0; i < path.length; i++) {
    var key = path[i];
    child = child ? child[key] : undefined;
  }

  return child;
}
/**
 * Set a nested property in an object
 * Mutates the object itself
 * If the path doesn't exist, it will be created
 * @param {Object} object
 * @param {string | string[]} path
 * @param {*} value
 * @returns {Object}
 */

function set(object, path, value) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return set(object, path.split('.'), value);
    } else {
      object[path] = value;
      return object;
    }
  }

  var child = object;

  for (var i = 0; i < path.length - 1; i++) {
    var key = path[i];

    if (child[key] === undefined) {
      child[key] = {};
    }

    child = child[key];
  }

  if (path.length > 0) {
    var lastKey = path[path.length - 1];
    child[lastKey] = value;
  }

  return object;
}
/**
 * Create an object composed of the picked object properties
 * @param {Object} object
 * @param {string[]} properties
 * @param {function} [transform] Optional value to transform a value when picking it
 * @return {Object}
 */

function pick(object, properties, transform) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = get(object, key);

    if (value !== undefined) {
      set(copy, key, transform ? transform(value, key) : value);
    }
  }

  return copy;
}
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */

function pickShallow(object, properties) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = object[key];

    if (value !== undefined) {
      copy[key] = value;
    }
  }

  return copy;
}
function values(object) {
  return Object.keys(object).map(key => object[key]);
} // helper function to test whether a string contains a path like 'user.name'

function isPath(str) {
  return str.indexOf('.') !== -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/product.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/product.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "product": () => (/* binding */ product)
/* harmony export */ });
/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */
function product(i, n) {
  if (n < i) {
    return 1;
  }

  if (n === i) {
    return n;
  }

  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

  return product(i, half) * product(half + 1, n);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/utils/string.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/utils/string.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endsWith": () => (/* binding */ endsWith),
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "stringify": () => (/* binding */ stringify),
/* harmony export */   "escape": () => (/* binding */ escape),
/* harmony export */   "compareText": () => (/* binding */ compareText)
/* harmony export */ });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/esm/utils/is.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/esm/utils/number.js");
/* harmony import */ var _bignumber_formatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bignumber/formatter.js */ "./node_modules/mathjs/lib/esm/utils/bignumber/formatter.js");



/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */

function endsWith(text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return text.substring(start, end) === search;
}
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */

function format(value, options) {
  if (typeof value === 'number') {
    return (0,_number_js__WEBPACK_IMPORTED_MODULE_0__.format)(value, options);
  }

  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isBigNumber)(value)) {
    return (0,_bignumber_formatter_js__WEBPACK_IMPORTED_MODULE_2__.format)(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values


  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && typeof value === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString(options) !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString(options);
    } else {
      var entries = Object.keys(value).map(key => {
        return '"' + key + '": ' + format(value[key], options);
      });
      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
}
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */

function stringify(value) {
  var text = String(value);
  var escaped = '';
  var i = 0;

  while (i < text.length) {
    var c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);

      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }

    i++;
  }

  return '"' + escaped + '"';
}
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */

function escape(value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */

function formatArray(array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;

    for (var i = 0; i < len; i++) {
      if (i !== 0) {
        str += ', ';
      }

      str += formatArray(array[i], options);
    }

    str += ']';
    return str;
  } else {
    return format(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */


function looksLikeFraction(value) {
  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */


function compareText(x, y) {
  // we don't want to convert numbers to string, only accept string input
  if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(x)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(x) + ', index: 0)');
  }

  if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(y)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.typeOf)(y) + ', index: 1)');
  }

  return x === y ? 0 : x > y ? 1 : -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/esm/version.js":
/*!************************************************!*\
  !*** ./node_modules/mathjs/lib/esm/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
var version = '9.3.0'; // Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = __webpack_require__(/*! ./lib/alea */ "./node_modules/seedrandom/lib/alea.js");

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = __webpack_require__(/*! ./lib/xor128 */ "./node_modules/seedrandom/lib/xor128.js");

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = __webpack_require__(/*! ./lib/xorwow */ "./node_modules/seedrandom/lib/xorwow.js");

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ "./node_modules/seedrandom/lib/xorshift7.js");

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = __webpack_require__(/*! ./lib/xor4096 */ "./node_modules/seedrandom/lib/xor4096.js");

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = __webpack_require__(/*! ./lib/tychei */ "./node_modules/seedrandom/lib/tychei.js");

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = __webpack_require__(/*! ./seedrandom */ "./node_modules/seedrandom/seedrandom.js");

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;


/***/ }),

/***/ "./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = String(data);
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.alea = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.tychei = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor128 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);


/***/ }),

/***/ "./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorshift7 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);



/***/ }),

/***/ "./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorwow = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (global, pool, math) {
//
// The following constants are related to IEEE 754 limits.
//

var width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ( true && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = __webpack_require__(/*! crypto */ "?d4c0");
  } catch (ex) {}
} else if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return seedrandom; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


// End anonymous scope, and pass initial values.
})(
  // global: `self` in browsers (including strict mode and web workers),
  // otherwise `this` in Node and other environments
  (typeof self !== 'undefined') ? self : this,
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);


/***/ }),

/***/ "./node_modules/typed-function/typed-function.js":
/*!*******************************************************!*\
  !*** ./node_modules/typed-function/typed-function.js ***!
  \*******************************************************/
/***/ (function(module, exports) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */


(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(this, function () {

  function ok () {
    return true;
  }

  function notOk () {
    return false;
  }

  function undef () {
    return undefined;
  }

  /**
   * @typedef {{
   *   params: Param[],
   *   fn: function
   * }} Signature
   *
   * @typedef {{
   *   types: Type[],
   *   restParam: boolean
   * }} Param
   *
   * @typedef {{
   *   name: string,
   *   typeIndex: number,
   *   test: function,
   *   conversion?: ConversionDef,
   *   conversionIndex: number,
   * }} Type
   *
   * @typedef {{
   *   from: string,
   *   to: string,
   *   convert: function (*) : *
   * }} ConversionDef
   *
   * @typedef {{
   *   name: string,
   *   test: function(*) : boolean
   * }} TypeDef
   */

  // create a new instance of typed-function
  function create () {
    // data type tests
    var _types = [
      { name: 'number',    test: function (x) { return typeof x === 'number' } },
      { name: 'string',    test: function (x) { return typeof x === 'string' } },
      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
      { name: 'Array',     test: Array.isArray },
      { name: 'Date',      test: function (x) { return x instanceof Date } },
      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
      { name: 'Object',    test: function (x) {
        return typeof x === 'object' && x !== null && x.constructor === Object
      }},
      { name: 'null',      test: function (x) { return x === null } },
      { name: 'undefined', test: function (x) { return x === undefined } }
    ];

    var anyType = {
      name: 'any',
      test: ok
    }

    // types which need to be ignored
    var _ignore = [];

    // type conversions
    var _conversions = [];

    // This is a temporary object, will be replaced with a typed function at the end
    var typed = {
      types: _types,
      conversions: _conversions,
      ignore: _ignore
    };

    /**
     * Find the test function for a type
     * @param {String} typeName
     * @return {TypeDef} Returns the type definition when found,
     *                    Throws a TypeError otherwise
     */
    function findTypeByName (typeName) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.name === typeName;
      });

      if (entry) {
        return entry;
      }

      if (typeName === 'any') { // special baked-in case 'any'
        return anyType;
      }

      var hint = findInArray(typed.types, function (entry) {
        return entry.name.toLowerCase() === typeName.toLowerCase();
      });

      throw new TypeError('Unknown type "' + typeName + '"' +
          (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
    }

    /**
     * Find the index of a type definition. Handles special case 'any'
     * @param {TypeDef} type
     * @return {number}
     */
    function findTypeIndex(type) {
      if (type === anyType) {
        return 999;
      }

      return typed.types.indexOf(type);
    }

    /**
     * Find a type that matches a value.
     * @param {*} value
     * @return {string} Returns the name of the first type for which
     *                  the type test matches the value.
     */
    function findTypeName(value) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.test(value);
      });

      if (entry) {
        return entry.name;
      }

      throw new TypeError('Value has unknown type. Value: ' + value);
    }

    /**
     * Find a specific signature from a (composed) typed function, for example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an error when no signature
     *                                        is found.
     */
    function find (fn, signature) {
      if (!fn.signatures) {
        throw new TypeError('Function is no typed-function');
      }

      // normalize input
      var arr;
      if (typeof signature === 'string') {
        arr = signature.split(',');
        for (var i = 0; i < arr.length; i++) {
          arr[i] = arr[i].trim();
        }
      }
      else if (Array.isArray(signature)) {
        arr = signature;
      }
      else {
        throw new TypeError('String array or a comma separated string expected');
      }

      var str = arr.join(',');

      // find an exact match
      var match = fn.signatures[str];
      if (match) {
        return match;
      }

      // TODO: extend find to match non-exact signatures

      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
    }

    /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */
    function convert (value, type) {
      var from = findTypeName(value);

      // check conversion is needed
      if (type === from) {
        return value;
      }

      for (var i = 0; i < typed.conversions.length; i++) {
        var conversion = typed.conversions[i];
        if (conversion.from === from && conversion.to === type) {
          return conversion.convert(value);
        }
      }

      throw new Error('Cannot convert from ' + from + ' to ' + type);
    }
    
    /**
     * Stringify parameters in a normalized way
     * @param {Param[]} params
     * @return {string}
     */
    function stringifyParams (params) {
      return params
          .map(function (param) {
            var typeNames = param.types.map(getTypeName);

            return (param.restParam ? '...' : '') + typeNames.join('|');
          })
          .join(',');
    }

    /**
     * Parse a parameter, like "...number | boolean"
     * @param {string} param
     * @param {ConversionDef[]} conversions
     * @return {Param} param
     */
    function parseParam (param, conversions) {
      var restParam = param.indexOf('...') === 0;
      var types = (!restParam)
          ? param
          : (param.length > 3)
              ? param.slice(3)
              : 'any';

      var typeNames = types.split('|').map(trim)
          .filter(notEmpty)
          .filter(notIgnore);

      var matchingConversions = filterConversions(conversions, typeNames);

      var exactTypes = typeNames.map(function (typeName) {
        var type = findTypeByName(typeName);

        return {
          name: typeName,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: null,
          conversionIndex: -1
        };
      });

      var convertibleTypes = matchingConversions.map(function (conversion) {
        var type = findTypeByName(conversion.from);

        return {
          name: conversion.from,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: conversion,
          conversionIndex: conversions.indexOf(conversion)
        };
      });

      return {
        types: exactTypes.concat(convertibleTypes),
        restParam: restParam
      };
    }

    /**
     * Parse a signature with comma separated parameters,
     * like "number | boolean, ...string"
     * @param {string} signature
     * @param {function} fn
     * @param {ConversionDef[]} conversions
     * @return {Signature | null} signature
     */
    function parseSignature (signature, fn, conversions) {
      var params = [];

      if (signature.trim() !== '') {
        params = signature
            .split(',')
            .map(trim)
            .map(function (param, index, array) {
              var parsedParam = parseParam(param, conversions);

              if (parsedParam.restParam && (index !== array.length - 1)) {
                throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
                    'only allowed for the last parameter');
              }

              return parsedParam;
          });
      }

      if (params.some(isInvalidParam)) {
        // invalid signature: at least one parameter has no types
        // (they may have been filtered)
        return null;
      }

      return {
        params: params,
        fn: fn
      };
    }

    /**
     * Test whether a set of params contains a restParam
     * @param {Param[]} params
     * @return {boolean} Returns true when the last parameter is a restParam
     */
    function hasRestParam(params) {
      var param = last(params)
      return param ? param.restParam : false;
    }

    /**
     * Test whether a parameter contains conversions
     * @param {Param} param
     * @return {boolean} Returns true when at least one of the parameters
     *                   contains a conversion.
     */
    function hasConversions(param) {
      return param.types.some(function (type) {
        return type.conversion != null;
      });
    }

    /**
     * Create a type test for a single parameter, which can have one or multiple
     * types.
     * @param {Param} param
     * @return {function(x: *) : boolean} Returns a test function
     */
    function compileTest(param) {
      if (!param || param.types.length === 0) {
        // nothing to do
        return ok;
      }
      else if (param.types.length === 1) {
        return findTypeByName(param.types[0].name).test;
      }
      else if (param.types.length === 2) {
        var test0 = findTypeByName(param.types[0].name).test;
        var test1 = findTypeByName(param.types[1].name).test;
        return function or(x) {
          return test0(x) || test1(x);
        }
      }
      else { // param.types.length > 2
        var tests = param.types.map(function (type) {
          return findTypeByName(type.name).test;
        })
        return function or(x) {
          for (var i = 0; i < tests.length; i++) {
            if (tests[i](x)) {
              return true;
            }
          }
          return false;
        }
      }
    }

    /**
     * Create a test for all parameters of a signature
     * @param {Param[]} params
     * @return {function(args: Array<*>) : boolean}
     */
    function compileTests(params) {
      var tests, test0, test1;

      if (hasRestParam(params)) {
        // variable arguments like '...number'
        tests = initial(params).map(compileTest);
        var varIndex = tests.length;
        var lastTest = compileTest(last(params));
        var testRestParam = function (args) {
          for (var i = varIndex; i < args.length; i++) {
            if (!lastTest(args[i])) {
              return false;
            }
          }
          return true;
        }

        return function testArgs(args) {
          for (var i = 0; i < tests.length; i++) {
            if (!tests[i](args[i])) {
              return false;
            }
          }
          return testRestParam(args) && (args.length >= varIndex + 1);
        };
      }
      else {
        // no variable arguments
        if (params.length === 0) {
          return function testArgs(args) {
            return args.length === 0;
          };
        }
        else if (params.length === 1) {
          test0 = compileTest(params[0]);
          return function testArgs(args) {
            return test0(args[0]) && args.length === 1;
          };
        }
        else if (params.length === 2) {
          test0 = compileTest(params[0]);
          test1 = compileTest(params[1]);
          return function testArgs(args) {
            return test0(args[0]) && test1(args[1]) && args.length === 2;
          };
        }
        else { // arguments.length > 2
          tests = params.map(compileTest);
          return function testArgs(args) {
            for (var i = 0; i < tests.length; i++) {
              if (!tests[i](args[i])) {
                return false;
              }
            }
            return args.length === tests.length;
          };
        }
      }
    }

    /**
     * Find the parameter at a specific index of a signature.
     * Handles rest parameters.
     * @param {Signature} signature
     * @param {number} index
     * @return {Param | null} Returns the matching parameter when found,
     *                        null otherwise.
     */
    function getParamAtIndex(signature, index) {
      return index < signature.params.length
          ? signature.params[index]
          : hasRestParam(signature.params)
              ? last(signature.params)
              : null
    }

    /**
     * Get all type names of a parameter
     * @param {Signature} signature
     * @param {number} index
     * @param {boolean} excludeConversions
     * @return {string[]} Returns an array with type names
     */
    function getExpectedTypeNames (signature, index, excludeConversions) {
      var param = getParamAtIndex(signature, index);
      var types = param
          ? excludeConversions
                  ? param.types.filter(isExactType)
                  : param.types
          : [];

      return types.map(getTypeName);
    }

    /**
     * Returns the name of a type
     * @param {Type} type
     * @return {string} Returns the type name
     */
    function getTypeName(type) {
      return type.name;
    }

    /**
     * Test whether a type is an exact type or conversion
     * @param {Type} type
     * @return {boolean} Returns true when
     */
    function isExactType(type) {
      return type.conversion === null || type.conversion === undefined;
    }

    /**
     * Helper function for creating error messages: create an array with
     * all available types on a specific argument index.
     * @param {Signature[]} signatures
     * @param {number} index
     * @return {string[]} Returns an array with available types
     */
    function mergeExpectedParams(signatures, index) {
      var typeNames = uniq(flatMap(signatures, function (signature) {
        return getExpectedTypeNames(signature, index, false);
      }));

      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
    }

    /**
     * Create
     * @param {string} name             The name of the function
     * @param {array.<*>} args          The actual arguments passed to the function
     * @param {Signature[]} signatures  A list with available signatures
     * @return {TypeError} Returns a type error with additional data
     *                     attached to it in the property `data`
     */
    function createError(name, args, signatures) {
      var err, expected;
      var _name = name || 'unnamed';

      // test for wrong type at some index
      var matchingSignatures = signatures;
      var index;
      for (index = 0; index < args.length; index++) {
        var nextMatchingDefs = matchingSignatures.filter(function (signature) {
          var test = compileTest(getParamAtIndex(signature, index));
          return (index < signature.params.length || hasRestParam(signature.params)) &&
              test(args[index]);
        });

        if (nextMatchingDefs.length === 0) {
          // no matching signatures anymore, throw error "wrong type"
          expected = mergeExpectedParams(matchingSignatures, index);
          if (expected.length > 0) {
            var actualType = findTypeName(args[index]);

            err = new TypeError('Unexpected type of argument in function ' + _name +
                ' (expected: ' + expected.join(' or ') +
                ', actual: ' + actualType + ', index: ' + index + ')');
            err.data = {
              category: 'wrongType',
              fn: _name,
              index: index,
              actual: actualType,
              expected: expected
            }
            return err;
          }
        }
        else {
          matchingSignatures = nextMatchingDefs;
        }
      }

      // test for too few arguments
      var lengths = matchingSignatures.map(function (signature) {
        return hasRestParam(signature.params) ? Infinity : signature.params.length;
      });
      if (args.length < Math.min.apply(null, lengths)) {
        expected = mergeExpectedParams(matchingSignatures, index);
        err = new TypeError('Too few arguments in function ' + _name +
            ' (expected: ' + expected.join(' or ') +
            ', index: ' + args.length + ')');
        err.data = {
          category: 'tooFewArgs',
          fn: _name,
          index: args.length,
          expected: expected
        }
        return err;
      }

      // test for too many arguments
      var maxLength = Math.max.apply(null, lengths);
      if (args.length > maxLength) {
        err = new TypeError('Too many arguments in function ' + _name +
            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
        err.data = {
          category: 'tooManyArgs',
          fn: _name,
          index: args.length,
          expectedLength: maxLength
        }
        return err;
      }

      err = new TypeError('Arguments of type "' + args.join(', ') +
          '" do not match any of the defined signatures of function ' + _name + '.');
      err.data = {
        category: 'mismatch',
        actual: args.map(findTypeName)
      }
      return err;
    }

    /**
     * Find the lowest index of all exact types of a parameter (no conversions)
     * @param {Param} param
     * @return {number} Returns the index of the lowest type in typed.types
     */
    function getLowestTypeIndex (param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].typeIndex);
        }
      }

      return min;
    }

    /**
     * Find the lowest index of the conversion of all types of the parameter
     * having a conversion
     * @param {Param} param
     * @return {number} Returns the lowest index of the conversions of this type
     */
    function getLowestConversionIndex (param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (!isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].conversionIndex);
        }
      }

      return min;
    }

    /**
     * Compare two params
     * @param {Param} param1
     * @param {Param} param2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */
    function compareParams (param1, param2) {
      var c;

      // compare having a rest parameter or not
      c = param1.restParam - param2.restParam;
      if (c !== 0) {
        return c;
      }

      // compare having conversions or not
      c = hasConversions(param1) - hasConversions(param2);
      if (c !== 0) {
        return c;
      }

      // compare the index of the types
      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
      if (c !== 0) {
        return c;
      }

      // compare the index of any conversion
      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
    }

    /**
     * Compare two signatures
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */
    function compareSignatures (signature1, signature2) {
      var len = Math.min(signature1.params.length, signature2.params.length);
      var i;
      var c;

      // compare whether the params have conversions at all or not
      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions)
      if (c !== 0) {
        return c;
      }

      // next compare whether the params have conversions one by one
      for (i = 0; i < len; i++) {
        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
        if (c !== 0) {
          return c;
        }
      }

      // compare the types of the params one by one
      for (i = 0; i < len; i++) {
        c = compareParams(signature1.params[i], signature2.params[i]);
        if (c !== 0) {
          return c;
        }
      }

      // compare the number of params
      return signature1.params.length - signature2.params.length;
    }

    /**
     * Get params containing all types that can be converted to the defined types.
     *
     * @param {ConversionDef[]} conversions
     * @param {string[]} typeNames
     * @return {ConversionDef[]} Returns the conversions that are available
     *                        for every type (if any)
     */
    function filterConversions(conversions, typeNames) {
      var matches = {};

      conversions.forEach(function (conversion) {
        if (typeNames.indexOf(conversion.from) === -1 &&
            typeNames.indexOf(conversion.to) !== -1 &&
            !matches[conversion.from]) {
          matches[conversion.from] = conversion;
        }
      });

      return Object.keys(matches).map(function (from) {
        return matches[from];
      });
    }

    /**
     * Preprocess arguments before calling the original function:
     * - if needed convert the parameters
     * - in case of rest parameters, move the rest parameters into an Array
     * @param {Param[]} params
     * @param {function} fn
     * @return {function} Returns a wrapped function
     */
    function compileArgsPreprocessing(params, fn) {
      var fnConvert = fn;

      // TODO: can we make this wrapper function smarter/simpler?

      if (params.some(hasConversions)) {
        var restParam = hasRestParam(params);
        var compiledConversions = params.map(compileArgConversion)

        fnConvert = function convertArgs() {
          var args = [];
          var last = restParam ? arguments.length - 1 : arguments.length;
          for (var i = 0; i < last; i++) {
            args[i] = compiledConversions[i](arguments[i]);
          }
          if (restParam) {
            args[last] = arguments[last].map(compiledConversions[last]);
          }

          return fn.apply(this, args);
        }
      }

      var fnPreprocess = fnConvert;
      if (hasRestParam(params)) {
        var offset = params.length - 1;

        fnPreprocess = function preprocessRestParams () {
          return fnConvert.apply(this,
              slice(arguments, 0, offset).concat([slice(arguments, offset)]));
        }
      }

      return fnPreprocess;
    }

    /**
     * Compile conversion for a parameter to the right type
     * @param {Param} param
     * @return {function} Returns the wrapped function that will convert arguments
     *
     */
    function compileArgConversion(param) {
      var test0, test1, conversion0, conversion1;
      var tests = [];
      var conversions = [];

      param.types.forEach(function (type) {
        if (type.conversion) {
          tests.push(findTypeByName(type.conversion.from).test);
          conversions.push(type.conversion.convert);
        }
      });

      // create optimized conversion functions depending on the number of conversions
      switch (conversions.length) {
        case 0:
          return function convertArg(arg) {
            return arg;
          }

        case 1:
          test0 = tests[0]
          conversion0 = conversions[0];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg)
            }
            return arg;
          }

        case 2:
          test0 = tests[0]
          test1 = tests[1]
          conversion0 = conversions[0];
          conversion1 = conversions[1];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg)
            }
            if (test1(arg)) {
              return conversion1(arg)
            }
            return arg;
          }

        default:
          return function convertArg(arg) {
            for (var i = 0; i < conversions.length; i++) {
              if (tests[i](arg)) {
                return conversions[i](arg);
              }
            }
            return arg;
          }
      }
    }

    /**
     * Convert an array with signatures into a map with signatures,
     * where signatures with union types are split into separate signatures
     *
     * Throws an error when there are conflicting types
     *
     * @param {Signature[]} signatures
     * @return {Object.<string, function>}  Returns a map with signatures
     *                                      as key and the original function
     *                                      of this signature as value.
     */
    function createSignaturesMap(signatures) {
      var signaturesMap = {};
      signatures.forEach(function (signature) {
        if (!signature.params.some(hasConversions)) {
          splitParams(signature.params, true).forEach(function (params) {
            signaturesMap[stringifyParams(params)] = signature.fn;
          });
        }
      });

      return signaturesMap;
    }

    /**
     * Split params with union types in to separate params.
     *
     * For example:
     *
     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
     *     // returns:
     *     // [
     *     //   ['Array', 'string'],
     *     //   ['Array', 'RegExp'],
     *     //   ['Object', 'string'],
     *     //   ['Object', 'RegExp']
     *     // ]
     *
     * @param {Param[]} params
     * @param {boolean} ignoreConversionTypes
     * @return {Param[]}
     */
    function splitParams(params, ignoreConversionTypes) {
      function _splitParams(params, index, types) {
        if (index < params.length) {
          var param = params[index]
          var filteredTypes = ignoreConversionTypes
              ? param.types.filter(isExactType)
              : param.types;
          var typeGroups

          if (param.restParam) {
            // split the types of a rest parameter in two:
            // one with only exact types, and one with exact types and conversions
            var exactTypes = filteredTypes.filter(isExactType)
            typeGroups = exactTypes.length < filteredTypes.length
                ? [exactTypes, filteredTypes]
                : [filteredTypes]

          }
          else {
            // split all the types of a regular parameter into one type per group
            typeGroups = filteredTypes.map(function (type) {
              return [type]
            })
          }

          // recurse over the groups with types
          return flatMap(typeGroups, function (typeGroup) {
            return _splitParams(params, index + 1, types.concat([typeGroup]));
          });

        }
        else {
          // we've reached the end of the parameters. Now build a new Param
          var splittedParams = types.map(function (type, typeIndex) {
            return {
              types: type,
              restParam: (typeIndex === params.length - 1) && hasRestParam(params)
            }
          });

          return [splittedParams];
        }
      }

      return _splitParams(params, 0, []);
    }

    /**
     * Test whether two signatures have a conflicting signature
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {boolean} Returns true when the signatures conflict, false otherwise.
     */
    function hasConflictingParams(signature1, signature2) {
      var ii = Math.max(signature1.params.length, signature2.params.length);

      for (var i = 0; i < ii; i++) {
        var typesNames1 = getExpectedTypeNames(signature1, i, true);
        var typesNames2 = getExpectedTypeNames(signature2, i, true);

        if (!hasOverlap(typesNames1, typesNames2)) {
          return false;
        }
      }

      var len1 = signature1.params.length;
      var len2 = signature2.params.length;
      var restParam1 = hasRestParam(signature1.params);
      var restParam2 = hasRestParam(signature2.params);

      return restParam1
          ? restParam2 ? (len1 === len2) : (len2 >= len1)
          : restParam2 ? (len1 >= len2)  : (len1 === len2)
    }

    /**
     * Create a typed function
     * @param {String} name               The name for the typed function
     * @param {Object.<string, function>} signaturesMap
     *                                    An object with one or
     *                                    multiple signatures as key, and the
     *                                    function corresponding to the
     *                                    signature as value.
     * @return {function}  Returns the created typed function.
     */
    function createTypedFunction(name, signaturesMap) {
      if (Object.keys(signaturesMap).length === 0) {
        throw new SyntaxError('No signatures provided');
      }

      // parse the signatures, and check for conflicts
      var parsedSignatures = [];
      Object.keys(signaturesMap)
          .map(function (signature) {
            return parseSignature(signature, signaturesMap[signature], typed.conversions);
          })
          .filter(notNull)
          .forEach(function (parsedSignature) {
            // check whether this parameter conflicts with already parsed signatures
            var conflictingSignature = findInArray(parsedSignatures, function (s) {
              return hasConflictingParams(s, parsedSignature)
            });
            if (conflictingSignature) {
              throw new TypeError('Conflicting signatures "' +
                  stringifyParams(conflictingSignature.params) + '" and "' +
                  stringifyParams(parsedSignature.params) + '".');
            }

            parsedSignatures.push(parsedSignature);
          });

      // split and filter the types of the signatures, and then order them
      var signatures = flatMap(parsedSignatures, function (parsedSignature) {
        var params = parsedSignature ? splitParams(parsedSignature.params, false) : []

        return params.map(function (params) {
          return {
            params: params,
            fn: parsedSignature.fn
          };
        });
      }).filter(notNull);

      signatures.sort(compareSignatures);

      // we create a highly optimized checks for the first couple of signatures with max 2 arguments
      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

      // compile the tests
      var tests = signatures.map(function (signature) {
        return compileTests(signature.params);
      });

      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

      // compile the functions
      var fns = signatures.map(function(signature) {
        return compileArgsPreprocessing(signature.params, signature.fn);
      });

      var fn0 = ok0 ? fns[0] : undef;
      var fn1 = ok1 ? fns[1] : undef;
      var fn2 = ok2 ? fns[2] : undef;
      var fn3 = ok3 ? fns[3] : undef;
      var fn4 = ok4 ? fns[4] : undef;
      var fn5 = ok5 ? fns[5] : undef;

      var len0 = ok0 ? signatures[0].params.length : -1;
      var len1 = ok1 ? signatures[1].params.length : -1;
      var len2 = ok2 ? signatures[2].params.length : -1;
      var len3 = ok3 ? signatures[3].params.length : -1;
      var len4 = ok4 ? signatures[4].params.length : -1;
      var len5 = ok5 ? signatures[5].params.length : -1;

      // simple and generic, but also slow
      var iStart = allOk ? 6 : 0;
      var iEnd = signatures.length;
      var generic = function generic() {
        'use strict';

        for (var i = iStart; i < iEnd; i++) {
          if (tests[i](arguments)) {
            return fns[i].apply(this, arguments);
          }
        }

        throw createError(name, arguments, signatures);
      }

      // create the typed function
      // fast, specialized version. Falls back to the slower, generic one if needed
      var fn = function fn(arg0, arg1) {
        'use strict';

        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }

        return generic.apply(fn, arguments);
      }

      // attach name the typed function
      try {
        Object.defineProperty(fn, 'name', {value: name});
      }
      catch (err) {
        // old browsers do not support Object.defineProperty and some don't support setting the name property
        // the function name is not essential for the functioning, it's mostly useful for debugging,
        // so it's fine to have unnamed functions.
      }

      // attach signatures to the function
      fn.signatures = createSignaturesMap(signatures);

      return fn;
    }

    /**
     * Test whether a type should be NOT be ignored
     * @param {string} typeName
     * @return {boolean}
     */
    function notIgnore(typeName) {
      return typed.ignore.indexOf(typeName) === -1;
    }

    /**
     * trim a string
     * @param {string} str
     * @return {string}
     */
    function trim(str) {
      return str.trim();
    }

    /**
     * Test whether a string is not empty
     * @param {string} str
     * @return {boolean}
     */
    function notEmpty(str) {
      return !!str;
    }

    /**
     * test whether a value is not strict equal to null
     * @param {*} value
     * @return {boolean}
     */
    function notNull(value) {
      return value !== null;
    }

    /**
     * Test whether a parameter has no types defined
     * @param {Param} param
     * @return {boolean}
     */
    function isInvalidParam (param) {
      return param.types.length === 0;
    }

    /**
     * Return all but the last items of an array
     * @param {Array} arr
     * @return {Array}
     */
    function initial(arr) {
      return arr.slice(0, arr.length - 1);
    }

    /**
     * return the last item of an array
     * @param {Array} arr
     * @return {*}
     */
    function last(arr) {
      return arr[arr.length - 1];
    }

    /**
     * Slice an array or function Arguments
     * @param {Array | Arguments | IArguments} arr
     * @param {number} start
     * @param {number} [end]
     * @return {Array}
     */
    function slice(arr, start, end) {
      return Array.prototype.slice.call(arr, start, end);
    }

    /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */
    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * Test whether two arrays have overlapping items
     * @param {Array} array1
     * @param {Array} array2
     * @return {boolean} Returns true when at least one item exists in both arrays
     */
    function hasOverlap(array1, array2) {
      for (var i = 0; i < array1.length; i++) {
        if (contains(array2, array1[i])) {
          return true;
        }
      }

      return false;
    }

    /**
     * Return the first item from an array for which test(arr[i]) returns true
     * @param {Array} arr
     * @param {function} test
     * @return {* | undefined} Returns the first matching item
     *                         or undefined when there is no match
     */
    function findInArray(arr, test) {
      for (var i = 0; i < arr.length; i++) {
        if (test(arr[i])) {
          return arr[i];
        }
      }
      return undefined;
    }

    /**
     * Filter unique items of an array with strings
     * @param {string[]} arr
     * @return {string[]}
     */
    function uniq(arr) {
      var entries = {}
      for (var i = 0; i < arr.length; i++) {
        entries[arr[i]] = true;
      }
      return Object.keys(entries);
    }

    /**
     * Flat map the result invoking a callback for every item in an array.
     * https://gist.github.com/samgiles/762ee337dff48623e729
     * @param {Array} arr
     * @param {function} callback
     * @return {Array}
     */
    function flatMap(arr, callback) {
      return Array.prototype.concat.apply([], arr.map(callback));
    }

    /**
     * Retrieve the function name from a set of typed functions,
     * and check whether the name of all functions match (if given)
     * @param {function[]} fns
     */
    function getName (fns) {
      var name = '';

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // check whether the names are the same when defined
        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
          if (name === '') {
            name = fn.name;
          }
          else if (name !== fn.name) {
            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
            err.data = {
              actual: fn.name,
              expected: name
            };
            throw err;
          }
        }
      }

      return name;
    }

    // extract and merge all signatures of a list with typed functions
    function extractSignatures(fns) {
      var err;
      var signaturesMap = {};

      function validateUnique(_signature, _fn) {
        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
          err = new Error('Signature "' + _signature + '" is defined twice');
          err.data = {signature: _signature};
          throw err;
          // else: both signatures point to the same function, that's fine
        }
      }

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // test whether this is a typed-function
        if (typeof fn.signatures === 'object') {
          // merge the signatures
          for (var signature in fn.signatures) {
            if (fn.signatures.hasOwnProperty(signature)) {
              validateUnique(signature, fn.signatures[signature]);
              signaturesMap[signature] = fn.signatures[signature];
            }
          }
        }
        else if (typeof fn.signature === 'string') {
          validateUnique(fn.signature, fn);
          signaturesMap[fn.signature] = fn;
        }
        else {
          err = new TypeError('Function is no typed-function (index: ' + i + ')');
          err.data = {index: i};
          throw err;
        }
      }

      return signaturesMap;
    }

    typed = createTypedFunction('typed', {
      'string, Object': createTypedFunction,
      'Object': function (signaturesMap) {
        // find existing name
        var fns = [];
        for (var signature in signaturesMap) {
          if (signaturesMap.hasOwnProperty(signature)) {
            fns.push(signaturesMap[signature]);
          }
        }
        var name = getName(fns);
        return createTypedFunction(name, signaturesMap);
      },
      '...Function': function (fns) {
        return createTypedFunction(getName(fns), extractSignatures(fns));
      },
      'string, ...Function': function (name, fns) {
        return createTypedFunction(name, extractSignatures(fns));
      }
    });

    typed.create = create;
    typed.types = _types;
    typed.conversions = _conversions;
    typed.ignore = _ignore;
    typed.convert = convert;
    typed.find = find;

    /**
     * add a type
     * @param {{name: string, test: function}} type
     * @param {boolean} [beforeObjectTest=true]
     *                          If true, the new test will be inserted before
     *                          the test with name 'Object' (if any), since
     *                          tests for Object match Array and classes too.
     */
    typed.addType = function (type, beforeObjectTest) {
      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
        throw new TypeError('Object with properties {name: string, test: function} expected');
      }

      if (beforeObjectTest !== false) {
        for (var i = 0; i < typed.types.length; i++) {
          if (typed.types[i].name === 'Object') {
            typed.types.splice(i, 0, type);
            return
          }
        }
      }

      typed.types.push(type);
    };

    // add a conversion
    typed.addConversion = function (conversion) {
      if (!conversion
          || typeof conversion.from !== 'string'
          || typeof conversion.to !== 'string'
          || typeof conversion.convert !== 'function') {
        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
      }

      typed.conversions.push(conversion);
    };

    return typed;
  }

  return create();
}));


/***/ }),

/***/ "?d4c0":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	(() => {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "@spcl/sdfv:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_spcl_sdfv"] = self["webpackChunk_spcl_sdfv"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=main.js.map